
RTOS_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000731c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e14  0800742c  0800742c  0000842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008240  08008240  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008240  08008240  0000a068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008240  08008240  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008240  08008240  00009240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008244  08008244  00009244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008248  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000172c  20000068  080082b0  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001794  080082b0  0000a794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138ed  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c4  00000000  00000000  0001d97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00020b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9f  00000000  00000000  00021e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a125  00000000  00000000  00022cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153fe  00000000  00000000  0003cddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095624  00000000  00000000  000521da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e77fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c8  00000000  00000000  000e7844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ecc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08007414 	.word	0x08007414

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08007414 	.word	0x08007414

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000084 	.word	0x20000084
 800017c:	20000124 	.word	0x20000124

08000180 <HAL_CAN_RxFifo1MsgPendingCallback>:
int current_angle;
int desire_angle;
int debug;
#define speed 625
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000188:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 800018a:	4a07      	ldr	r2, [pc, #28]	@ (80001a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 800018c:	2101      	movs	r1, #1
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f001 fb20 	bl	80017d4 <HAL_CAN_GetRxMessage>
  signal_control = RxData[7];
 8000194:	4b03      	ldr	r3, [pc, #12]	@ (80001a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000196:	79da      	ldrb	r2, [r3, #7]
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 800019a:	701a      	strb	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000474 	.word	0x20000474
 80001a8:	20000458 	.word	0x20000458
 80001ac:	2000047c 	.word	0x2000047c

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f001 f8d3 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f8bd 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 fa2f 	bl	8000620 <MX_GPIO_Init>
  MX_CAN_Init();
 80001c2:	f000 f8ff 	bl	80003c4 <MX_CAN_Init>
  MX_I2C1_Init();
 80001c6:	f000 f933 	bl	8000430 <MX_I2C1_Init>
  MX_TIM2_Init();
 80001ca:	f000 f95f 	bl	800048c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ce:	f000 f9d3 	bl	8000578 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Init CAN
  HAL_CAN_Start(&hcan);
 80001d2:	4843      	ldr	r0, [pc, #268]	@ (80002e0 <main+0x130>)
 80001d4:	f001 faba 	bl	800174c <HAL_CAN_Start>
  // Configure the filter
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80001d8:	4b42      	ldr	r3, [pc, #264]	@ (80002e4 <main+0x134>)
 80001da:	2201      	movs	r2, #1
 80001dc:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80001de:	4b41      	ldr	r3, [pc, #260]	@ (80002e4 <main+0x134>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001e4:	4b3f      	ldr	r3, [pc, #252]	@ (80002e4 <main+0x134>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6A5<<5;
 80001ea:	4b3e      	ldr	r3, [pc, #248]	@ (80002e4 <main+0x134>)
 80001ec:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 80001f0:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 80001f2:	4b3c      	ldr	r3, [pc, #240]	@ (80002e4 <main+0x134>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 80001f8:	4b3a      	ldr	r3, [pc, #232]	@ (80002e4 <main+0x134>)
 80001fa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80001fe:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000200:	4b38      	ldr	r3, [pc, #224]	@ (80002e4 <main+0x134>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000206:	4b37      	ldr	r3, [pc, #220]	@ (80002e4 <main+0x134>)
 8000208:	2201      	movs	r2, #1
 800020a:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800020c:	4935      	ldr	r1, [pc, #212]	@ (80002e4 <main+0x134>)
 800020e:	4834      	ldr	r0, [pc, #208]	@ (80002e0 <main+0x130>)
 8000210:	f001 f9d3 	bl	80015ba <HAL_CAN_ConfigFilter>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000214:	2110      	movs	r1, #16
 8000216:	4832      	ldr	r0, [pc, #200]	@ (80002e0 <main+0x130>)
 8000218:	f001 fbfd 	bl	8001a16 <HAL_CAN_ActivateNotification>

  // Motor
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PA1 TIM2 CH2
 800021c:	2104      	movs	r1, #4
 800021e:	4832      	ldr	r0, [pc, #200]	@ (80002e8 <main+0x138>)
 8000220:	f003 fbdc 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	2180      	movs	r1, #128	@ 0x80
 8000228:	4830      	ldr	r0, [pc, #192]	@ (80002ec <main+0x13c>)
 800022a:	f002 f8a1 	bl	8002370 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800022e:	2200      	movs	r2, #0
 8000230:	2120      	movs	r1, #32
 8000232:	482e      	ldr	r0, [pc, #184]	@ (80002ec <main+0x13c>)
 8000234:	f002 f89c 	bl	8002370 <HAL_GPIO_WritePin>

  // Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000238:	213c      	movs	r1, #60	@ 0x3c
 800023a:	482d      	ldr	r0, [pc, #180]	@ (80002f0 <main+0x140>)
 800023c:	f003 fd12 	bl	8003c64 <HAL_TIM_Encoder_Start>

  // Init Oled
  SSD1306_Init();
 8000240:	f000 fb56 	bl	80008f0 <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 8000244:	2100      	movs	r1, #0
 8000246:	2000      	movs	r0, #0
 8000248:	f000 fcba 	bl	8000bc0 <SSD1306_GotoXY>
  SSD1306_Puts ("Current:", &Font_11x18, 1);
 800024c:	2201      	movs	r2, #1
 800024e:	4929      	ldr	r1, [pc, #164]	@ (80002f4 <main+0x144>)
 8000250:	4829      	ldr	r0, [pc, #164]	@ (80002f8 <main+0x148>)
 8000252:	f000 fd49 	bl	8000ce8 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 8000256:	211e      	movs	r1, #30
 8000258:	2000      	movs	r0, #0
 800025a:	f000 fcb1 	bl	8000bc0 <SSD1306_GotoXY>
  SSD1306_Puts ("Desired:", &Font_11x18, 1);
 800025e:	2201      	movs	r2, #1
 8000260:	4924      	ldr	r1, [pc, #144]	@ (80002f4 <main+0x144>)
 8000262:	4826      	ldr	r0, [pc, #152]	@ (80002fc <main+0x14c>)
 8000264:	f000 fd40 	bl	8000ce8 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000268:	f000 fc06 	bl	8000a78 <SSD1306_UpdateScreen>

  // create task
  DesireAngleMutex = xSemaphoreCreateMutex();
 800026c:	2001      	movs	r0, #1
 800026e:	f004 fcd3 	bl	8004c18 <xQueueCreateMutex>
 8000272:	4603      	mov	r3, r0
 8000274:	4a22      	ldr	r2, [pc, #136]	@ (8000300 <main+0x150>)
 8000276:	6013      	str	r3, [r2, #0]
  if (DesireAngleMutex != NULL)
 8000278:	4b21      	ldr	r3, [pc, #132]	@ (8000300 <main+0x150>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d003      	beq.n	8000288 <main+0xd8>
  {
   debug = 1000;
 8000280:	4b20      	ldr	r3, [pc, #128]	@ (8000304 <main+0x154>)
 8000282:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000286:	601a      	str	r2, [r3, #0]
  }

  xTaskCreate(Task_ControlMotor, "ControlMotor", 128, NULL, 1, &ControlMotor_Handler);
 8000288:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <main+0x158>)
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2301      	movs	r3, #1
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2300      	movs	r3, #0
 8000292:	2280      	movs	r2, #128	@ 0x80
 8000294:	491d      	ldr	r1, [pc, #116]	@ (800030c <main+0x15c>)
 8000296:	481e      	ldr	r0, [pc, #120]	@ (8000310 <main+0x160>)
 8000298:	f005 f849 	bl	800532e <xTaskCreate>
  xTaskCreate(Task_Display, "Display", 128, NULL, 2, &Display_Handler);
 800029c:	4b1d      	ldr	r3, [pc, #116]	@ (8000314 <main+0x164>)
 800029e:	9301      	str	r3, [sp, #4]
 80002a0:	2302      	movs	r3, #2
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	2300      	movs	r3, #0
 80002a6:	2280      	movs	r2, #128	@ 0x80
 80002a8:	491b      	ldr	r1, [pc, #108]	@ (8000318 <main+0x168>)
 80002aa:	481c      	ldr	r0, [pc, #112]	@ (800031c <main+0x16c>)
 80002ac:	f005 f83f 	bl	800532e <xTaskCreate>
  xTaskCreate(Task_ReadEncoder, "EncoderRead", 128, NULL, 3, &ReadEncoder_Handler);
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <main+0x170>)
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	2303      	movs	r3, #3
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2300      	movs	r3, #0
 80002ba:	2280      	movs	r2, #128	@ 0x80
 80002bc:	4919      	ldr	r1, [pc, #100]	@ (8000324 <main+0x174>)
 80002be:	481a      	ldr	r0, [pc, #104]	@ (8000328 <main+0x178>)
 80002c0:	f005 f835 	bl	800532e <xTaskCreate>
  xTaskCreate(Task_ToggleLED, "ToggleLED", 128, NULL, 1, &ToggleLED_Handler);
 80002c4:	4b19      	ldr	r3, [pc, #100]	@ (800032c <main+0x17c>)
 80002c6:	9301      	str	r3, [sp, #4]
 80002c8:	2301      	movs	r3, #1
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2300      	movs	r3, #0
 80002ce:	2280      	movs	r2, #128	@ 0x80
 80002d0:	4917      	ldr	r1, [pc, #92]	@ (8000330 <main+0x180>)
 80002d2:	4818      	ldr	r0, [pc, #96]	@ (8000334 <main+0x184>)
 80002d4:	f005 f82b 	bl	800532e <xTaskCreate>

  vTaskStartScheduler();
 80002d8:	f005 f9ae 	bl	8005638 <vTaskStartScheduler>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <main+0x12c>
 80002e0:	20000324 	.word	0x20000324
 80002e4:	20000430 	.word	0x20000430
 80002e8:	200003a0 	.word	0x200003a0
 80002ec:	40010800 	.word	0x40010800
 80002f0:	200003e8 	.word	0x200003e8
 80002f4:	20000000 	.word	0x20000000
 80002f8:	0800742c 	.word	0x0800742c
 80002fc:	08007438 	.word	0x08007438
 8000300:	2000048c 	.word	0x2000048c
 8000304:	20000488 	.word	0x20000488
 8000308:	20000490 	.word	0x20000490
 800030c:	08007444 	.word	0x08007444
 8000310:	080006dd 	.word	0x080006dd
 8000314:	20000494 	.word	0x20000494
 8000318:	08007454 	.word	0x08007454
 800031c:	08000795 	.word	0x08000795
 8000320:	20000498 	.word	0x20000498
 8000324:	0800745c 	.word	0x0800745c
 8000328:	08000809 	.word	0x08000809
 800032c:	2000049c 	.word	0x2000049c
 8000330:	08007468 	.word	0x08007468
 8000334:	08000899 	.word	0x08000899

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	@ 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	@ 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f006 fb78 	bl	8006a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000374:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000376:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800037a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f002 fdf1 	bl	8002f68 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800038c:	f000 faaa 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 f85e 	bl	800346c <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b6:	f000 fa95 	bl	80008e4 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	@ 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003c8:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <MX_CAN_Init+0x64>)
 80003ca:	4a18      	ldr	r2, [pc, #96]	@ (800042c <MX_CAN_Init+0x68>)
 80003cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 80003ce:	4b16      	ldr	r3, [pc, #88]	@ (8000428 <MX_CAN_Init+0x64>)
 80003d0:	2248      	movs	r2, #72	@ 0x48
 80003d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003d4:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <MX_CAN_Init+0x64>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003da:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <MX_CAN_Init+0x64>)
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_CAN_Init+0x64>)
 80003e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <MX_CAN_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_CAN_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_CAN_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_CAN_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_CAN_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <MX_CAN_Init+0x64>)
 8000408:	2200      	movs	r2, #0
 800040a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_CAN_Init+0x64>)
 800040e:	2200      	movs	r2, #0
 8000410:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_CAN_Init+0x64>)
 8000414:	f000 ffd6 	bl	80013c4 <HAL_CAN_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800041e:	f000 fa61 	bl	80008e4 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000324 	.word	0x20000324
 800042c:	40006400 	.word	0x40006400

08000430 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <MX_I2C1_Init+0x50>)
 8000436:	4a13      	ldr	r2, [pc, #76]	@ (8000484 <MX_I2C1_Init+0x54>)
 8000438:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800043a:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <MX_I2C1_Init+0x50>)
 800043c:	4a12      	ldr	r2, [pc, #72]	@ (8000488 <MX_I2C1_Init+0x58>)
 800043e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <MX_I2C1_Init+0x50>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <MX_I2C1_Init+0x50>)
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044c:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <MX_I2C1_Init+0x50>)
 800044e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000452:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000454:	4b0a      	ldr	r3, [pc, #40]	@ (8000480 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000460:	4b07      	ldr	r3, [pc, #28]	@ (8000480 <MX_I2C1_Init+0x50>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <MX_I2C1_Init+0x50>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800046c:	4804      	ldr	r0, [pc, #16]	@ (8000480 <MX_I2C1_Init+0x50>)
 800046e:	f001 ffb1 	bl	80023d4 <HAL_I2C_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000478:	f000 fa34 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	2000034c 	.word	0x2000034c
 8000484:	40005400 	.word	0x40005400
 8000488:	00061a80 	.word	0x00061a80

0800048c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08e      	sub	sp, #56	@ 0x38
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000492:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a0:	f107 0320 	add.w	r3, r7, #32
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
 80004b8:	615a      	str	r2, [r3, #20]
 80004ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000574 <MX_TIM2_Init+0xe8>)
 80004be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80004c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <MX_TIM2_Init+0xe8>)
 80004c6:	227f      	movs	r2, #127	@ 0x7f
 80004c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000574 <MX_TIM2_Init+0xe8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 80004d0:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <MX_TIM2_Init+0xe8>)
 80004d2:	f240 2271 	movw	r2, #625	@ 0x271
 80004d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b26      	ldr	r3, [pc, #152]	@ (8000574 <MX_TIM2_Init+0xe8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b25      	ldr	r3, [pc, #148]	@ (8000574 <MX_TIM2_Init+0xe8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004e4:	4823      	ldr	r0, [pc, #140]	@ (8000574 <MX_TIM2_Init+0xe8>)
 80004e6:	f003 f97f 	bl	80037e8 <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80004f0:	f000 f9f8 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004fe:	4619      	mov	r1, r3
 8000500:	481c      	ldr	r0, [pc, #112]	@ (8000574 <MX_TIM2_Init+0xe8>)
 8000502:	f003 fdef 	bl	80040e4 <HAL_TIM_ConfigClockSource>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800050c:	f000 f9ea 	bl	80008e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000510:	4818      	ldr	r0, [pc, #96]	@ (8000574 <MX_TIM2_Init+0xe8>)
 8000512:	f003 fa0b 	bl	800392c <HAL_TIM_PWM_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800051c:	f000 f9e2 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000528:	f107 0320 	add.w	r3, r7, #32
 800052c:	4619      	mov	r1, r3
 800052e:	4811      	ldr	r0, [pc, #68]	@ (8000574 <MX_TIM2_Init+0xe8>)
 8000530:	f004 f974 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800053a:	f000 f9d3 	bl	80008e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053e:	2360      	movs	r3, #96	@ 0x60
 8000540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2204      	movs	r2, #4
 8000552:	4619      	mov	r1, r3
 8000554:	4807      	ldr	r0, [pc, #28]	@ (8000574 <MX_TIM2_Init+0xe8>)
 8000556:	f003 fd03 	bl	8003f60 <HAL_TIM_PWM_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000560:	f000 f9c0 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000564:	4803      	ldr	r0, [pc, #12]	@ (8000574 <MX_TIM2_Init+0xe8>)
 8000566:	f000 fdc9 	bl	80010fc <HAL_TIM_MspPostInit>

}
 800056a:	bf00      	nop
 800056c:	3738      	adds	r7, #56	@ 0x38
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200003a0 	.word	0x200003a0

08000578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	@ 0x30
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2224      	movs	r2, #36	@ 0x24
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 fa58 	bl	8006a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000594:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <MX_TIM3_Init+0xa0>)
 8000596:	4a21      	ldr	r2, [pc, #132]	@ (800061c <MX_TIM3_Init+0xa4>)
 8000598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <MX_TIM3_Init+0xa0>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <MX_TIM3_Init+0xa0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <MX_TIM3_Init+0xa0>)
 80005a8:	222f      	movs	r2, #47	@ 0x2f
 80005aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <MX_TIM3_Init+0xa0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <MX_TIM3_Init+0xa0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	480d      	ldr	r0, [pc, #52]	@ (8000618 <MX_TIM3_Init+0xa0>)
 80005e4:	f003 fa9c 	bl	8003b20 <HAL_TIM_Encoder_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80005ee:	f000 f979 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <MX_TIM3_Init+0xa0>)
 8000600:	f004 f90c 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800060a:	f000 f96b 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	@ 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200003e8 	.word	0x200003e8
 800061c:	40000400 	.word	0x40000400

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000634:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a25      	ldr	r2, [pc, #148]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 800063a:	f043 0320 	orr.w	r3, r3, #32
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0320 	and.w	r3, r3, #32
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a1f      	ldr	r2, [pc, #124]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a19      	ldr	r2, [pc, #100]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_GPIO_Init+0xb0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	21a0      	movs	r1, #160	@ 0xa0
 8000680:	4814      	ldr	r0, [pc, #80]	@ (80006d4 <MX_GPIO_Init+0xb4>)
 8000682:	f001 fe75 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2104      	movs	r1, #4
 800068a:	4813      	ldr	r0, [pc, #76]	@ (80006d8 <MX_GPIO_Init+0xb8>)
 800068c:	f001 fe70 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000690:	23a0      	movs	r3, #160	@ 0xa0
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <MX_GPIO_Init+0xb4>)
 80006a8:	f001 fcde 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ac:	2304      	movs	r3, #4
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_GPIO_Init+0xb8>)
 80006c4:	f001 fcd0 	bl	8002068 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800
 80006d8:	40010c00 	.word	0x40010c00

080006dc <Task_ControlMotor>:

/* USER CODE BEGIN 4 */
//define task
void Task_ControlMotor(void *argument){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	int threshold = 10;
 80006e4:	230a      	movs	r3, #10
 80006e6:	60fb      	str	r3, [r7, #12]
	int error;
	while(1){
		xSemaphoreTake(DesireAngleMutex, portMAX_DELAY);
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <Task_ControlMotor+0xa4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fbab 	bl	8004e4c <xQueueSemaphoreTake>
		error = desire_angle - current_angle;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <Task_ControlMotor+0xa8>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <Task_ControlMotor+0xac>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	60bb      	str	r3, [r7, #8]

		if (abs(error) > threshold){
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2b00      	cmp	r3, #0
 8000706:	bfb8      	it	lt
 8000708:	425b      	neglt	r3, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	da1d      	bge.n	800074c <Task_ControlMotor+0x70>
			if (error > 0){
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	2b00      	cmp	r3, #0
 8000714:	dd0a      	ble.n	800072c <Task_ControlMotor+0x50>
				// Quay phải
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // IN1 = 0
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	481c      	ldr	r0, [pc, #112]	@ (800078c <Task_ControlMotor+0xb0>)
 800071c:	f001 fe28 	bl	8002370 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN2 = 1
 8000720:	2201      	movs	r2, #1
 8000722:	2180      	movs	r1, #128	@ 0x80
 8000724:	4819      	ldr	r0, [pc, #100]	@ (800078c <Task_ControlMotor+0xb0>)
 8000726:	f001 fe23 	bl	8002370 <HAL_GPIO_WritePin>
 800072a:	e009      	b.n	8000740 <Task_ControlMotor+0x64>
			}
			else {
				// Quay trái
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2120      	movs	r1, #32
 8000730:	4816      	ldr	r0, [pc, #88]	@ (800078c <Task_ControlMotor+0xb0>)
 8000732:	f001 fe1d 	bl	8002370 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2180      	movs	r1, #128	@ 0x80
 800073a:	4814      	ldr	r0, [pc, #80]	@ (800078c <Task_ControlMotor+0xb0>)
 800073c:	f001 fe18 	bl	8002370 <HAL_GPIO_WritePin>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <Task_ControlMotor+0xb4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f240 2271 	movw	r2, #625	@ 0x271
 8000748:	639a      	str	r2, [r3, #56]	@ 0x38
 800074a:	e00d      	b.n	8000768 <Task_ControlMotor+0x8c>
		}
		else {
			// Dừng motor
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2120      	movs	r1, #32
 8000750:	480e      	ldr	r0, [pc, #56]	@ (800078c <Task_ControlMotor+0xb0>)
 8000752:	f001 fe0d 	bl	8002370 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	480c      	ldr	r0, [pc, #48]	@ (800078c <Task_ControlMotor+0xb0>)
 800075c:	f001 fe08 	bl	8002370 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <Task_ControlMotor+0xb4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		xSemaphoreGive(DesireAngleMutex);
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <Task_ControlMotor+0xa4>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	2300      	movs	r3, #0
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	f004 fa69 	bl	8004c48 <xQueueGenericSend>
		vTaskDelay(100);
 8000776:	2064      	movs	r0, #100	@ 0x64
 8000778:	f004 ff28 	bl	80055cc <vTaskDelay>
		xSemaphoreTake(DesireAngleMutex, portMAX_DELAY);
 800077c:	e7b4      	b.n	80006e8 <Task_ControlMotor+0xc>
 800077e:	bf00      	nop
 8000780:	2000048c 	.word	0x2000048c
 8000784:	20000484 	.word	0x20000484
 8000788:	20000480 	.word	0x20000480
 800078c:	40010800 	.word	0x40010800
 8000790:	200003a0 	.word	0x200003a0

08000794 <Task_Display>:
	}
}
void Task_Display(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	char snum[5];
	char snum2[5];
	while(1){
		  sprintf(snum, "%03d", current_angle);
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <Task_Display+0x64>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4915      	ldr	r1, [pc, #84]	@ (80007fc <Task_Display+0x68>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 f926 	bl	80069f8 <siprintf>
		  sprintf(snum2, "%03d", desire_angle);
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <Task_Display+0x6c>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4911      	ldr	r1, [pc, #68]	@ (80007fc <Task_Display+0x68>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f006 f91e 	bl	80069f8 <siprintf>
		  SSD1306_GotoXY (90,0);
 80007bc:	2100      	movs	r1, #0
 80007be:	205a      	movs	r0, #90	@ 0x5a
 80007c0:	f000 f9fe 	bl	8000bc0 <SSD1306_GotoXY>
		  SSD1306_Puts (snum, &Font_11x18, 1);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	2201      	movs	r2, #1
 80007ca:	490e      	ldr	r1, [pc, #56]	@ (8000804 <Task_Display+0x70>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fa8b 	bl	8000ce8 <SSD1306_Puts>
		  SSD1306_GotoXY (90, 30);
 80007d2:	211e      	movs	r1, #30
 80007d4:	205a      	movs	r0, #90	@ 0x5a
 80007d6:	f000 f9f3 	bl	8000bc0 <SSD1306_GotoXY>
		  SSD1306_Puts (snum2, &Font_11x18, 1);
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2201      	movs	r2, #1
 80007e0:	4908      	ldr	r1, [pc, #32]	@ (8000804 <Task_Display+0x70>)
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fa80 	bl	8000ce8 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80007e8:	f000 f946 	bl	8000a78 <SSD1306_UpdateScreen>
		  vTaskDelay(1000);
 80007ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f0:	f004 feec 	bl	80055cc <vTaskDelay>
		  sprintf(snum, "%03d", current_angle);
 80007f4:	bf00      	nop
 80007f6:	e7d1      	b.n	800079c <Task_Display+0x8>
 80007f8:	20000480 	.word	0x20000480
 80007fc:	08007474 	.word	0x08007474
 8000800:	20000484 	.word	0x20000484
 8000804:	20000000 	.word	0x20000000

08000808 <Task_ReadEncoder>:
	}
}

void Task_ReadEncoder(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	desire_angle = (signal_control*90)/255;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <Task_ReadEncoder+0x74>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	235a      	movs	r3, #90	@ 0x5a
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	4a18      	ldr	r2, [pc, #96]	@ (8000880 <Task_ReadEncoder+0x78>)
 8000820:	fb82 1203 	smull	r1, r2, r2, r3
 8000824:	441a      	add	r2, r3
 8000826:	11d2      	asrs	r2, r2, #7
 8000828:	17db      	asrs	r3, r3, #31
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	4a15      	ldr	r2, [pc, #84]	@ (8000884 <Task_ReadEncoder+0x7c>)
 800082e:	6013      	str	r3, [r2, #0]
    	xSemaphoreTake(DesireAngleMutex, portMAX_DELAY);
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <Task_ReadEncoder+0x80>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000838:	4618      	mov	r0, r3
 800083a:	f004 fb07 	bl	8004e4c <xQueueSemaphoreTake>
    	uint16_t position = __HAL_TIM_GET_COUNTER(&htim3);
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <Task_ReadEncoder+0x84>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000844:	81fb      	strh	r3, [r7, #14]
    	current_angle = (position * 360) / 47;
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800084c:	fb02 f303 	mul.w	r3, r2, r3
 8000850:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <Task_ReadEncoder+0x88>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	441a      	add	r2, r3
 8000858:	1152      	asrs	r2, r2, #5
 800085a:	17db      	asrs	r3, r3, #31
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <Task_ReadEncoder+0x8c>)
 8000860:	6013      	str	r3, [r2, #0]
        xSemaphoreGive(DesireAngleMutex);
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <Task_ReadEncoder+0x80>)
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	2300      	movs	r3, #0
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	f004 f9ec 	bl	8004c48 <xQueueGenericSend>
        vTaskDelay(100); // đọc mỗi 100ms
 8000870:	2064      	movs	r0, #100	@ 0x64
 8000872:	f004 feab 	bl	80055cc <vTaskDelay>
    {
 8000876:	bf00      	nop
 8000878:	e7ca      	b.n	8000810 <Task_ReadEncoder+0x8>
 800087a:	bf00      	nop
 800087c:	2000047c 	.word	0x2000047c
 8000880:	80808081 	.word	0x80808081
 8000884:	20000484 	.word	0x20000484
 8000888:	2000048c 	.word	0x2000048c
 800088c:	200003e8 	.word	0x200003e8
 8000890:	ae4c415d 	.word	0xae4c415d
 8000894:	20000480 	.word	0x20000480

08000898 <Task_ToggleLED>:
    }
}

void Task_ToggleLED(void *argument){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80008a0:	2104      	movs	r1, #4
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <Task_ToggleLED+0x20>)
 80008a4:	f001 fd7c 	bl	80023a0 <HAL_GPIO_TogglePin>
		vTaskDelay(debug);
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <Task_ToggleLED+0x24>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fe8d 	bl	80055cc <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80008b2:	bf00      	nop
 80008b4:	e7f4      	b.n	80008a0 <Task_ToggleLED+0x8>
 80008b6:	bf00      	nop
 80008b8:	40010c00 	.word	0x40010c00
 80008bc:	20000488 	.word	0x20000488

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008d2:	f000 fd5b 	bl	800138c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40012c00 	.word	0x40012c00

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80008f6:	f000 fa1d 	bl	8000d34 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008fa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80008fe:	2201      	movs	r2, #1
 8000900:	2178      	movs	r1, #120	@ 0x78
 8000902:	485b      	ldr	r0, [pc, #364]	@ (8000a70 <SSD1306_Init+0x180>)
 8000904:	f001 ffa8 	bl	8002858 <HAL_I2C_IsDeviceReady>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800090e:	2300      	movs	r3, #0
 8000910:	e0a9      	b.n	8000a66 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000912:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000916:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000918:	e002      	b.n	8000920 <SSD1306_Init+0x30>
		p--;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1f9      	bne.n	800091a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000926:	22ae      	movs	r2, #174	@ 0xae
 8000928:	2100      	movs	r1, #0
 800092a:	2078      	movs	r0, #120	@ 0x78
 800092c:	f000 fa7c 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000930:	2220      	movs	r2, #32
 8000932:	2100      	movs	r1, #0
 8000934:	2078      	movs	r0, #120	@ 0x78
 8000936:	f000 fa77 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800093a:	2210      	movs	r2, #16
 800093c:	2100      	movs	r1, #0
 800093e:	2078      	movs	r0, #120	@ 0x78
 8000940:	f000 fa72 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000944:	22b0      	movs	r2, #176	@ 0xb0
 8000946:	2100      	movs	r1, #0
 8000948:	2078      	movs	r0, #120	@ 0x78
 800094a:	f000 fa6d 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800094e:	22c8      	movs	r2, #200	@ 0xc8
 8000950:	2100      	movs	r1, #0
 8000952:	2078      	movs	r0, #120	@ 0x78
 8000954:	f000 fa68 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2078      	movs	r0, #120	@ 0x78
 800095e:	f000 fa63 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000962:	2210      	movs	r2, #16
 8000964:	2100      	movs	r1, #0
 8000966:	2078      	movs	r0, #120	@ 0x78
 8000968:	f000 fa5e 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800096c:	2240      	movs	r2, #64	@ 0x40
 800096e:	2100      	movs	r1, #0
 8000970:	2078      	movs	r0, #120	@ 0x78
 8000972:	f000 fa59 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000976:	2281      	movs	r2, #129	@ 0x81
 8000978:	2100      	movs	r1, #0
 800097a:	2078      	movs	r0, #120	@ 0x78
 800097c:	f000 fa54 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000980:	22ff      	movs	r2, #255	@ 0xff
 8000982:	2100      	movs	r1, #0
 8000984:	2078      	movs	r0, #120	@ 0x78
 8000986:	f000 fa4f 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800098a:	22a1      	movs	r2, #161	@ 0xa1
 800098c:	2100      	movs	r1, #0
 800098e:	2078      	movs	r0, #120	@ 0x78
 8000990:	f000 fa4a 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000994:	22a6      	movs	r2, #166	@ 0xa6
 8000996:	2100      	movs	r1, #0
 8000998:	2078      	movs	r0, #120	@ 0x78
 800099a:	f000 fa45 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800099e:	22a8      	movs	r2, #168	@ 0xa8
 80009a0:	2100      	movs	r1, #0
 80009a2:	2078      	movs	r0, #120	@ 0x78
 80009a4:	f000 fa40 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80009a8:	223f      	movs	r2, #63	@ 0x3f
 80009aa:	2100      	movs	r1, #0
 80009ac:	2078      	movs	r0, #120	@ 0x78
 80009ae:	f000 fa3b 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009b2:	22a4      	movs	r2, #164	@ 0xa4
 80009b4:	2100      	movs	r1, #0
 80009b6:	2078      	movs	r0, #120	@ 0x78
 80009b8:	f000 fa36 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009bc:	22d3      	movs	r2, #211	@ 0xd3
 80009be:	2100      	movs	r1, #0
 80009c0:	2078      	movs	r0, #120	@ 0x78
 80009c2:	f000 fa31 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2078      	movs	r0, #120	@ 0x78
 80009cc:	f000 fa2c 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009d0:	22d5      	movs	r2, #213	@ 0xd5
 80009d2:	2100      	movs	r1, #0
 80009d4:	2078      	movs	r0, #120	@ 0x78
 80009d6:	f000 fa27 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009da:	22f0      	movs	r2, #240	@ 0xf0
 80009dc:	2100      	movs	r1, #0
 80009de:	2078      	movs	r0, #120	@ 0x78
 80009e0:	f000 fa22 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009e4:	22d9      	movs	r2, #217	@ 0xd9
 80009e6:	2100      	movs	r1, #0
 80009e8:	2078      	movs	r0, #120	@ 0x78
 80009ea:	f000 fa1d 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009ee:	2222      	movs	r2, #34	@ 0x22
 80009f0:	2100      	movs	r1, #0
 80009f2:	2078      	movs	r0, #120	@ 0x78
 80009f4:	f000 fa18 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009f8:	22da      	movs	r2, #218	@ 0xda
 80009fa:	2100      	movs	r1, #0
 80009fc:	2078      	movs	r0, #120	@ 0x78
 80009fe:	f000 fa13 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a02:	2212      	movs	r2, #18
 8000a04:	2100      	movs	r1, #0
 8000a06:	2078      	movs	r0, #120	@ 0x78
 8000a08:	f000 fa0e 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a0c:	22db      	movs	r2, #219	@ 0xdb
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2078      	movs	r0, #120	@ 0x78
 8000a12:	f000 fa09 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a16:	2220      	movs	r2, #32
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2078      	movs	r0, #120	@ 0x78
 8000a1c:	f000 fa04 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a20:	228d      	movs	r2, #141	@ 0x8d
 8000a22:	2100      	movs	r1, #0
 8000a24:	2078      	movs	r0, #120	@ 0x78
 8000a26:	f000 f9ff 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a2a:	2214      	movs	r2, #20
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2078      	movs	r0, #120	@ 0x78
 8000a30:	f000 f9fa 	bl	8000e28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a34:	22af      	movs	r2, #175	@ 0xaf
 8000a36:	2100      	movs	r1, #0
 8000a38:	2078      	movs	r0, #120	@ 0x78
 8000a3a:	f000 f9f5 	bl	8000e28 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a3e:	222e      	movs	r2, #46	@ 0x2e
 8000a40:	2100      	movs	r1, #0
 8000a42:	2078      	movs	r0, #120	@ 0x78
 8000a44:	f000 f9f0 	bl	8000e28 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 f843 	bl	8000ad4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000a4e:	f000 f813 	bl	8000a78 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <SSD1306_Init+0x184>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SSD1306_Init+0x184>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <SSD1306_Init+0x184>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000a64:	2301      	movs	r3, #1
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000034c 	.word	0x2000034c
 8000a74:	200008a0 	.word	0x200008a0

08000a78 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	e01d      	b.n	8000ac0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	3b50      	subs	r3, #80	@ 0x50
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2078      	movs	r0, #120	@ 0x78
 8000a90:	f000 f9ca 	bl	8000e28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2078      	movs	r0, #120	@ 0x78
 8000a9a:	f000 f9c5 	bl	8000e28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2078      	movs	r0, #120	@ 0x78
 8000aa4:	f000 f9c0 	bl	8000e28 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	01db      	lsls	r3, r3, #7
 8000aac:	4a08      	ldr	r2, [pc, #32]	@ (8000ad0 <SSD1306_UpdateScreen+0x58>)
 8000aae:	441a      	add	r2, r3
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	2140      	movs	r1, #64	@ 0x40
 8000ab4:	2078      	movs	r0, #120	@ 0x78
 8000ab6:	f000 f951 	bl	8000d5c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	3301      	adds	r3, #1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b07      	cmp	r3, #7
 8000ac4:	d9de      	bls.n	8000a84 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200004a0 	.word	0x200004a0

08000ad4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <SSD1306_Fill+0x14>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e000      	b.n	8000aea <SSD1306_Fill+0x16>
 8000ae8:	23ff      	movs	r3, #255	@ 0xff
 8000aea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aee:	4619      	mov	r1, r3
 8000af0:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <SSD1306_Fill+0x2c>)
 8000af2:	f005 ffa3 	bl	8006a3c <memset>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200004a0 	.word	0x200004a0

08000b04 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	80bb      	strh	r3, [r7, #4]
 8000b12:	4613      	mov	r3, r2
 8000b14:	70fb      	strb	r3, [r7, #3]
	if (
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b1a:	d848      	bhi.n	8000bae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b20:	d845      	bhi.n	8000bae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b22:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <SSD1306_DrawPixel+0xb4>)
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b2a:	78fb      	ldrb	r3, [r7, #3]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf0c      	ite	eq
 8000b30:	2301      	moveq	r3, #1
 8000b32:	2300      	movne	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d11a      	bne.n	8000b74 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	08db      	lsrs	r3, r3, #3
 8000b44:	b298      	uxth	r0, r3
 8000b46:	4603      	mov	r3, r0
 8000b48:	01db      	lsls	r3, r3, #7
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <SSD1306_DrawPixel+0xb8>)
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b259      	sxtb	r1, r3
 8000b64:	88fa      	ldrh	r2, [r7, #6]
 8000b66:	4603      	mov	r3, r0
 8000b68:	01db      	lsls	r3, r3, #7
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b2c9      	uxtb	r1, r1
 8000b6e:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <SSD1306_DrawPixel+0xb8>)
 8000b70:	54d1      	strb	r1, [r2, r3]
 8000b72:	e01d      	b.n	8000bb0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b74:	88fa      	ldrh	r2, [r7, #6]
 8000b76:	88bb      	ldrh	r3, [r7, #4]
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	b298      	uxth	r0, r3
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	01db      	lsls	r3, r3, #7
 8000b80:	4413      	add	r3, r2
 8000b82:	4a0e      	ldr	r2, [pc, #56]	@ (8000bbc <SSD1306_DrawPixel+0xb8>)
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	b25a      	sxtb	r2, r3
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	b259      	sxtb	r1, r3
 8000b9e:	88fa      	ldrh	r2, [r7, #6]
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	01db      	lsls	r3, r3, #7
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b2c9      	uxtb	r1, r1
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <SSD1306_DrawPixel+0xb8>)
 8000baa:	54d1      	strb	r1, [r2, r3]
 8000bac:	e000      	b.n	8000bb0 <SSD1306_DrawPixel+0xac>
		return;
 8000bae:	bf00      	nop
	}
}
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	200008a0 	.word	0x200008a0
 8000bbc:	200004a0 	.word	0x200004a0

08000bc0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bd0:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SSD1306_GotoXY+0x28>)
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <SSD1306_GotoXY+0x28>)
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	8053      	strh	r3, [r2, #2]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200008a0 	.word	0x200008a0

08000bec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bfc:	4b39      	ldr	r3, [pc, #228]	@ (8000ce4 <SSD1306_Putc+0xf8>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
	if (
 8000c08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c0a:	dc07      	bgt.n	8000c1c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <SSD1306_Putc+0xf8>)
 8000c0e:	885b      	ldrh	r3, [r3, #2]
 8000c10:	461a      	mov	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c18:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c1a:	dd01      	ble.n	8000c20 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e05d      	b.n	8000cdc <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e04b      	b.n	8000cbe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	3b20      	subs	r3, #32
 8000c2e:	6839      	ldr	r1, [r7, #0]
 8000c30:	7849      	ldrb	r1, [r1, #1]
 8000c32:	fb01 f303 	mul.w	r3, r1, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	440b      	add	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	e030      	b.n	8000cac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d010      	beq.n	8000c7c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <SSD1306_Putc+0xf8>)
 8000c5c:	881a      	ldrh	r2, [r3, #0]
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4413      	add	r3, r2
 8000c64:	b298      	uxth	r0, r3
 8000c66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <SSD1306_Putc+0xf8>)
 8000c68:	885a      	ldrh	r2, [r3, #2]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	79ba      	ldrb	r2, [r7, #6]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f7ff ff45 	bl	8000b04 <SSD1306_DrawPixel>
 8000c7a:	e014      	b.n	8000ca6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <SSD1306_Putc+0xf8>)
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4413      	add	r3, r2
 8000c86:	b298      	uxth	r0, r3
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <SSD1306_Putc+0xf8>)
 8000c8a:	885a      	ldrh	r2, [r3, #2]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	b299      	uxth	r1, r3
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf0c      	ite	eq
 8000c9a:	2301      	moveq	r3, #1
 8000c9c:	2300      	movne	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f7ff ff2f 	bl	8000b04 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d3c8      	bcc.n	8000c4a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	785b      	ldrb	r3, [r3, #1]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d3ad      	bcc.n	8000c26 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <SSD1306_Putc+0xf8>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <SSD1306_Putc+0xf8>)
 8000cd8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200008a0 	.word	0x200008a0

08000ce8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000cf6:	e012      	b.n	8000d1e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	79fa      	ldrb	r2, [r7, #7]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff73 	bl	8000bec <SSD1306_Putc>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d002      	beq.n	8000d18 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	e008      	b.n	8000d2a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1e8      	bne.n	8000cf8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	781b      	ldrb	r3, [r3, #0]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <ssd1306_I2C_Init+0x24>)
 8000d3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d3e:	e002      	b.n	8000d46 <ssd1306_I2C_Init+0x12>
		p--;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f9      	bne.n	8000d40 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	0003d090 	.word	0x0003d090

08000d5c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b0c7      	sub	sp, #284	@ 0x11c
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	4604      	mov	r4, r0
 8000d64:	4608      	mov	r0, r1
 8000d66:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000d6a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000d6e:	600a      	str	r2, [r1, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d76:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000d7a:	4622      	mov	r2, r4
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d82:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000d86:	4602      	mov	r2, r0
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d92:	460a      	mov	r2, r1
 8000d94:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d9e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000da2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000db0:	e015      	b.n	8000dde <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000db2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000db6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000dba:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	441a      	add	r2, r3
 8000dc2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	7811      	ldrb	r1, [r2, #0]
 8000dca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000dce:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000dd2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000dd4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000dd8:	3301      	adds	r3, #1
 8000dda:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000dde:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000de8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000dec:	8812      	ldrh	r2, [r2, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d8df      	bhi.n	8000db2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000df2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000df6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f107 020c 	add.w	r2, r7, #12
 8000e10:	200a      	movs	r0, #10
 8000e12:	9000      	str	r0, [sp, #0]
 8000e14:	4803      	ldr	r0, [pc, #12]	@ (8000e24 <ssd1306_I2C_WriteMulti+0xc8>)
 8000e16:	f001 fc21 	bl	800265c <HAL_I2C_Master_Transmit>
}
 8000e1a:	bf00      	nop
 8000e1c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	2000034c 	.word	0x2000034c

08000e28 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	460b      	mov	r3, r1
 8000e34:	71bb      	strb	r3, [r7, #6]
 8000e36:	4613      	mov	r3, r2
 8000e38:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e3e:	797b      	ldrb	r3, [r7, #5]
 8000e40:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	b299      	uxth	r1, r3
 8000e46:	f107 020c 	add.w	r2, r7, #12
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2302      	movs	r3, #2
 8000e50:	4803      	ldr	r0, [pc, #12]	@ (8000e60 <ssd1306_I2C_Write+0x38>)
 8000e52:	f001 fc03 	bl	800265c <HAL_I2C_Master_Transmit>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000034c 	.word	0x2000034c

08000e64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_MspInit+0x68>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_MspInit+0x68>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_MspInit+0x68>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_MspInit+0x68>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a11      	ldr	r2, [pc, #68]	@ (8000ecc <HAL_MspInit+0x68>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <HAL_MspInit+0x68>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	f06f 0001 	mvn.w	r0, #1
 8000ea2:	f001 f8b6 	bl	8002012 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_MspInit+0x6c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_MspInit+0x6c>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000

08000ed4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a29      	ldr	r2, [pc, #164]	@ (8000f94 <HAL_CAN_MspInit+0xc0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d14b      	bne.n	8000f8c <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <HAL_CAN_MspInit+0xc4>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <HAL_CAN_MspInit+0xc4>)
 8000efa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000efe:	61d3      	str	r3, [r2, #28]
 8000f00:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <HAL_CAN_MspInit+0xc4>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <HAL_CAN_MspInit+0xc4>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a21      	ldr	r2, [pc, #132]	@ (8000f98 <HAL_CAN_MspInit+0xc4>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <HAL_CAN_MspInit+0xc4>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <HAL_CAN_MspInit+0xc8>)
 8000f3a:	f001 f895 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <HAL_CAN_MspInit+0xc8>)
 8000f54:	f001 f888 	bl	8002068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_CAN_MspInit+0xcc>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f60:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f68:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_CAN_MspInit+0xcc>)
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2105      	movs	r1, #5
 8000f80:	2015      	movs	r0, #21
 8000f82:	f001 f846 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f86:	2015      	movs	r0, #21
 8000f88:	f001 f85f 	bl	800204a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	@ 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40006400 	.word	0x40006400
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010c00 	.word	0x40010c00
 8000fa0:	40010000 	.word	0x40010000

08000fa4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <HAL_I2C_MspInit+0x70>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d123      	bne.n	800100c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_I2C_MspInit+0x74>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <HAL_I2C_MspInit+0x74>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_I2C_MspInit+0x74>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fdc:	23c0      	movs	r3, #192	@ 0xc0
 8000fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	480b      	ldr	r0, [pc, #44]	@ (800101c <HAL_I2C_MspInit+0x78>)
 8000ff0:	f001 f83a 	bl	8002068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_I2C_MspInit+0x74>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <HAL_I2C_MspInit+0x74>)
 8000ffa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ffe:	61d3      	str	r3, [r2, #28]
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_I2C_MspInit+0x74>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40005400 	.word	0x40005400
 8001018:	40021000 	.word	0x40021000
 800101c:	40010c00 	.word	0x40010c00

08001020 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001030:	d10b      	bne.n	800104a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <HAL_TIM_Base_MspInit+0x34>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a07      	ldr	r2, [pc, #28]	@ (8001054 <HAL_TIM_Base_MspInit+0x34>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_TIM_Base_MspInit+0x34>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1e      	ldr	r2, [pc, #120]	@ (80010ec <HAL_TIM_Encoder_MspInit+0x94>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d135      	bne.n	80010e4 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <HAL_TIM_Encoder_MspInit+0x98>)
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <HAL_TIM_Encoder_MspInit+0x98>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	61d3      	str	r3, [r2, #28]
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_TIM_Encoder_MspInit+0x98>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010a8:	2330      	movs	r3, #48	@ 0x30
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480e      	ldr	r0, [pc, #56]	@ (80010f4 <HAL_TIM_Encoder_MspInit+0x9c>)
 80010bc:	f000 ffd4 	bl	8002068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0xa0>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010de:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0xa0>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	@ 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40000400 	.word	0x40000400
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	40010000 	.word	0x40010000

080010fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800111a:	d117      	bne.n	800114c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_TIM_MspPostInit+0x58>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a0c      	ldr	r2, [pc, #48]	@ (8001154 <HAL_TIM_MspPostInit+0x58>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HAL_TIM_MspPostInit+0x58>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4804      	ldr	r0, [pc, #16]	@ (8001158 <HAL_TIM_MspPostInit+0x5c>)
 8001148:	f000 ff8e 	bl	8002068 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800

0800115c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	@ 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001172:	4b2e      	ldr	r3, [pc, #184]	@ (800122c <HAL_InitTick+0xd0>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a2d      	ldr	r2, [pc, #180]	@ (800122c <HAL_InitTick+0xd0>)
 8001178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <HAL_InitTick+0xd0>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800118a:	f107 020c 	add.w	r2, r7, #12
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fad9 	bl	800374c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800119a:	f002 fac3 	bl	8003724 <HAL_RCC_GetPCLK2Freq>
 800119e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a2:	4a23      	ldr	r2, [pc, #140]	@ (8001230 <HAL_InitTick+0xd4>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	0c9b      	lsrs	r3, r3, #18
 80011aa:	3b01      	subs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <HAL_InitTick+0xd8>)
 80011b0:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <HAL_InitTick+0xdc>)
 80011b2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <HAL_InitTick+0xd8>)
 80011b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_InitTick+0xd8>)
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <HAL_InitTick+0xd8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <HAL_InitTick+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_InitTick+0xd8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011d4:	4817      	ldr	r0, [pc, #92]	@ (8001234 <HAL_InitTick+0xd8>)
 80011d6:	f002 fb07 	bl	80037e8 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80011e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d11b      	bne.n	8001220 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011e8:	4812      	ldr	r0, [pc, #72]	@ (8001234 <HAL_InitTick+0xd8>)
 80011ea:	f002 fb4d 	bl	8003888 <HAL_TIM_Base_Start_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80011f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d111      	bne.n	8001220 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011fc:	2019      	movs	r0, #25
 80011fe:	f000 ff24 	bl	800204a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d808      	bhi.n	800121a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	2019      	movs	r0, #25
 800120e:	f000 ff00 	bl	8002012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_InitTick+0xe0>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e002      	b.n	8001220 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001220:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001224:	4618      	mov	r0, r3
 8001226:	3730      	adds	r7, #48	@ 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	431bde83 	.word	0x431bde83
 8001234:	200008a8 	.word	0x200008a8
 8001238:	40012c00 	.word	0x40012c00
 800123c:	2000000c 	.word	0x2000000c

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <NMI_Handler+0x4>

08001248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <MemManage_Handler+0x4>

08001258 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <UsageFault_Handler+0x4>

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <CAN1_RX1_IRQHandler+0x10>)
 800127a:	f000 fbf1 	bl	8001a60 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000324 	.word	0x20000324

08001288 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <TIM1_UP_IRQHandler+0x10>)
 800128e:	f002 fd77 	bl	8003d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200008a8 	.word	0x200008a8

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f005 fc1c 	bl	8006b08 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20005000 	.word	0x20005000
 80012fc:	00000400 	.word	0x00000400
 8001300:	200008f0 	.word	0x200008f0
 8001304:	20001798 	.word	0x20001798

08001308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001314:	f7ff fff8 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480b      	ldr	r0, [pc, #44]	@ (8001348 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800131a:	490c      	ldr	r1, [pc, #48]	@ (800134c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800131c:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <LoopFillZerobss+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001330:	4c09      	ldr	r4, [pc, #36]	@ (8001358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133e:	f005 fbe9 	bl	8006b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001342:	f7fe ff35 	bl	80001b0 <main>
  bx lr
 8001346:	4770      	bx	lr
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001350:	08008248 	.word	0x08008248
  ldr r2, =_sbss
 8001354:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001358:	20001794 	.word	0x20001794

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_Init+0x28>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_Init+0x28>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 fe43 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f7ff fef0 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fd72 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_IncTick+0x1c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_IncTick+0x20>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a03      	ldr	r2, [pc, #12]	@ (80013ac <HAL_IncTick+0x20>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000010 	.word	0x20000010
 80013ac:	200008f4 	.word	0x200008f4

080013b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b02      	ldr	r3, [pc, #8]	@ (80013c0 <HAL_GetTick+0x10>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	200008f4 	.word	0x200008f4

080013c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0ed      	b.n	80015b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fd76 	bl	8000ed4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f8:	f7ff ffda 	bl	80013b0 <HAL_GetTick>
 80013fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013fe:	e012      	b.n	8001426 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001400:	f7ff ffd6 	bl	80013b0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b0a      	cmp	r3, #10
 800140c:	d90b      	bls.n	8001426 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2205      	movs	r2, #5
 800141e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e0c5      	b.n	80015b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0e5      	beq.n	8001400 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0202 	bic.w	r2, r2, #2
 8001442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001444:	f7ff ffb4 	bl	80013b0 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800144a:	e012      	b.n	8001472 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800144c:	f7ff ffb0 	bl	80013b0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b0a      	cmp	r3, #10
 8001458:	d90b      	bls.n	8001472 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2205      	movs	r2, #5
 800146a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e09f      	b.n	80015b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e5      	bne.n	800144c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e1b      	ldrb	r3, [r3, #24]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e007      	b.n	80014aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7e5b      	ldrb	r3, [r3, #25]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d108      	bne.n	80014c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e007      	b.n	80014d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7e9b      	ldrb	r3, [r3, #26]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d108      	bne.n	80014ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0220 	orr.w	r2, r2, #32
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e007      	b.n	80014fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0220 	bic.w	r2, r2, #32
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7edb      	ldrb	r3, [r3, #27]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0210 	bic.w	r2, r2, #16
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e007      	b.n	8001528 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0210 	orr.w	r2, r2, #16
 8001526:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7f1b      	ldrb	r3, [r3, #28]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d108      	bne.n	8001542 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0208 	orr.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e007      	b.n	8001552 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0208 	bic.w	r2, r2, #8
 8001550:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7f5b      	ldrb	r3, [r3, #29]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0204 	orr.w	r2, r2, #4
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e007      	b.n	800157c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0204 	bic.w	r2, r2, #4
 800157a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	ea42 0103 	orr.w	r1, r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b087      	sub	sp, #28
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015d2:	7cfb      	ldrb	r3, [r7, #19]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d003      	beq.n	80015e0 <HAL_CAN_ConfigFilter+0x26>
 80015d8:	7cfb      	ldrb	r3, [r7, #19]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	f040 80aa 	bne.w	8001734 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2201      	movs	r2, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d123      	bne.n	8001662 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800163c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3248      	adds	r2, #72	@ 0x48
 8001642:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001656:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001658:	6979      	ldr	r1, [r7, #20]
 800165a:	3348      	adds	r3, #72	@ 0x48
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d122      	bne.n	80016b0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	431a      	orrs	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800168a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3248      	adds	r2, #72	@ 0x48
 8001690:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016a6:	6979      	ldr	r1, [r7, #20]
 80016a8:	3348      	adds	r3, #72	@ 0x48
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80016ca:	e007      	b.n	80016dc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80016f6:	e007      	b.n	8001708 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001726:	f023 0201 	bic.w	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e006      	b.n	8001742 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
  }
}
 8001742:	4618      	mov	r0, r3
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d12e      	bne.n	80017be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001778:	f7ff fe1a 	bl	80013b0 <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800177e:	e012      	b.n	80017a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001780:	f7ff fe16 	bl	80013b0 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d90b      	bls.n	80017a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2205      	movs	r2, #5
 800179e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e012      	b.n	80017cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e5      	bne.n	8001780 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e006      	b.n	80017cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
  }
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d003      	beq.n	80017f8 <HAL_CAN_GetRxMessage+0x24>
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	f040 8103 	bne.w	80019fe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10e      	bne.n	800181c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d116      	bne.n	800183a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0f7      	b.n	8001a0c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d107      	bne.n	800183a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0e8      	b.n	8001a0c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	331b      	adds	r3, #27
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0204 	and.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10c      	bne.n	8001872 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	331b      	adds	r3, #27
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	4413      	add	r3, r2
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0d5b      	lsrs	r3, r3, #21
 8001868:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e00b      	b.n	800188a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	331b      	adds	r3, #27
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	4413      	add	r3, r2
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	331b      	adds	r3, #27
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0202 	and.w	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	331b      	adds	r3, #27
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	3304      	adds	r3, #4
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2208      	movs	r2, #8
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	e00b      	b.n	80018d8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	331b      	adds	r3, #27
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	3304      	adds	r3, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 020f 	and.w	r2, r3, #15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	331b      	adds	r3, #27
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	3304      	adds	r3, #4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	331b      	adds	r3, #27
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	3304      	adds	r3, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0a1a      	lsrs	r2, r3, #8
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0c1a      	lsrs	r2, r3, #16
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	3302      	adds	r3, #2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e1a      	lsrs	r2, r3, #24
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3303      	adds	r3, #3
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3304      	adds	r3, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4413      	add	r3, r2
 800198e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0a1a      	lsrs	r2, r3, #8
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	3305      	adds	r3, #5
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0c1a      	lsrs	r2, r3, #16
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3306      	adds	r3, #6
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0e1a      	lsrs	r2, r3, #24
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3307      	adds	r3, #7
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	e007      	b.n	80019fa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e006      	b.n	8001a0c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
  }
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a26:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d002      	beq.n	8001a34 <HAL_CAN_ActivateNotification+0x1e>
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d109      	bne.n	8001a48 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6959      	ldr	r1, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e006      	b.n	8001a56 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d07c      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d023      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f983 	bl	8001dce <HAL_CAN_TxMailbox0CompleteCallback>
 8001ac8:	e016      	b.n	8001af8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8001adc:	e00c      	b.n	8001af8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af0:	e002      	b.n	8001af8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f986 	bl	8001e04 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d024      	beq.n	8001b4c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f962 	bl	8001de0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b1c:	e016      	b.n	8001b4c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b30:	e00c      	b.n	8001b4c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d004      	beq.n	8001b46 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b44:	e002      	b.n	8001b4c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f965 	bl	8001e16 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d024      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f941 	bl	8001df2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b70:	e016      	b.n	8001ba0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b84:	e00c      	b.n	8001ba0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b98:	e002      	b.n	8001ba0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f944 	bl	8001e28 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00c      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2208      	movs	r2, #8
 8001bde:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f933 	bl	8001e4c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f91b 	bl	8001e3a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2210      	movs	r2, #16
 8001c26:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2208      	movs	r2, #8
 8001c42:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f90a 	bl	8001e5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fa8c 	bl	8000180 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2210      	movs	r2, #16
 8001c82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8f3 	bl	8001e70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8eb 	bl	8001e82 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d07b      	beq.n	8001dae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d072      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d043      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d03e      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d2e:	2b60      	cmp	r3, #96	@ 0x60
 8001d30:	d02b      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x32a>
 8001d32:	2b60      	cmp	r3, #96	@ 0x60
 8001d34:	d82e      	bhi.n	8001d94 <HAL_CAN_IRQHandler+0x334>
 8001d36:	2b50      	cmp	r3, #80	@ 0x50
 8001d38:	d022      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x320>
 8001d3a:	2b50      	cmp	r3, #80	@ 0x50
 8001d3c:	d82a      	bhi.n	8001d94 <HAL_CAN_IRQHandler+0x334>
 8001d3e:	2b40      	cmp	r3, #64	@ 0x40
 8001d40:	d019      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x316>
 8001d42:	2b40      	cmp	r3, #64	@ 0x40
 8001d44:	d826      	bhi.n	8001d94 <HAL_CAN_IRQHandler+0x334>
 8001d46:	2b30      	cmp	r3, #48	@ 0x30
 8001d48:	d010      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x30c>
 8001d4a:	2b30      	cmp	r3, #48	@ 0x30
 8001d4c:	d822      	bhi.n	8001d94 <HAL_CAN_IRQHandler+0x334>
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d002      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x2f8>
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d005      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d56:	e01d      	b.n	8001d94 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	f043 0308 	orr.w	r3, r3, #8
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d60:	e019      	b.n	8001d96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	f043 0310 	orr.w	r3, r3, #16
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d6a:	e014      	b.n	8001d96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	f043 0320 	orr.w	r3, r3, #32
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d74:	e00f      	b.n	8001d96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d7e:	e00a      	b.n	8001d96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d88:	e005      	b.n	8001d96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d92:	e000      	b.n	8001d96 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d94:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001da4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2204      	movs	r2, #4
 8001dac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f867 	bl	8001e94 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	@ 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
	...

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4906      	ldr	r1, [pc, #24]	@ (8001f40 <__NVIC_EnableIRQ+0x34>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	@ (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	@ (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	@ 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
         );
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	@ 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff4f 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002024:	f7ff ff64 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f7ff ffb2 	bl	8001f98 <NVIC_EncodePriority>
 8002034:	4602      	mov	r2, r0
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff81 	bl	8001f44 <__NVIC_SetPriority>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff57 	bl	8001f0c <__NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b08b      	sub	sp, #44	@ 0x2c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e169      	b.n	8002350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800207c:	2201      	movs	r2, #1
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8158 	bne.w	800234a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a9a      	ldr	r2, [pc, #616]	@ (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d05e      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020a4:	4a98      	ldr	r2, [pc, #608]	@ (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d875      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020aa:	4a98      	ldr	r2, [pc, #608]	@ (800230c <HAL_GPIO_Init+0x2a4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d058      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020b0:	4a96      	ldr	r2, [pc, #600]	@ (800230c <HAL_GPIO_Init+0x2a4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d86f      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020b6:	4a96      	ldr	r2, [pc, #600]	@ (8002310 <HAL_GPIO_Init+0x2a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d052      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020bc:	4a94      	ldr	r2, [pc, #592]	@ (8002310 <HAL_GPIO_Init+0x2a8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d869      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020c2:	4a94      	ldr	r2, [pc, #592]	@ (8002314 <HAL_GPIO_Init+0x2ac>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04c      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020c8:	4a92      	ldr	r2, [pc, #584]	@ (8002314 <HAL_GPIO_Init+0x2ac>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d863      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020ce:	4a92      	ldr	r2, [pc, #584]	@ (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d046      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020d4:	4a90      	ldr	r2, [pc, #576]	@ (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d85d      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d82a      	bhi.n	8002134 <HAL_GPIO_Init+0xcc>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d859      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020e2:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <HAL_GPIO_Init+0x80>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	08002163 	.word	0x08002163
 80020ec:	0800213d 	.word	0x0800213d
 80020f0:	0800214f 	.word	0x0800214f
 80020f4:	08002191 	.word	0x08002191
 80020f8:	08002197 	.word	0x08002197
 80020fc:	08002197 	.word	0x08002197
 8002100:	08002197 	.word	0x08002197
 8002104:	08002197 	.word	0x08002197
 8002108:	08002197 	.word	0x08002197
 800210c:	08002197 	.word	0x08002197
 8002110:	08002197 	.word	0x08002197
 8002114:	08002197 	.word	0x08002197
 8002118:	08002197 	.word	0x08002197
 800211c:	08002197 	.word	0x08002197
 8002120:	08002197 	.word	0x08002197
 8002124:	08002197 	.word	0x08002197
 8002128:	08002197 	.word	0x08002197
 800212c:	08002145 	.word	0x08002145
 8002130:	08002159 	.word	0x08002159
 8002134:	4a79      	ldr	r2, [pc, #484]	@ (800231c <HAL_GPIO_Init+0x2b4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213a:	e02c      	b.n	8002196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e029      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	3304      	adds	r3, #4
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e024      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	3308      	adds	r3, #8
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e01f      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	330c      	adds	r3, #12
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e01a      	b.n	8002198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216a:	2304      	movs	r3, #4
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e013      	b.n	8002198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	611a      	str	r2, [r3, #16]
          break;
 8002182:	e009      	b.n	8002198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	615a      	str	r2, [r3, #20]
          break;
 800218e:	e003      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x130>
          break;
 8002196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	@ 0xff
 800219c:	d801      	bhi.n	80021a2 <HAL_GPIO_Init+0x13a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_Init+0x13e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2bff      	cmp	r3, #255	@ 0xff
 80021ac:	d802      	bhi.n	80021b4 <HAL_GPIO_Init+0x14c>
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x152>
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	3b08      	subs	r3, #8
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	210f      	movs	r1, #15
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80b1 	beq.w	800234a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002320 <HAL_GPIO_Init+0x2b8>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002200:	4a48      	ldr	r2, [pc, #288]	@ (8002324 <HAL_GPIO_Init+0x2bc>)
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a40      	ldr	r2, [pc, #256]	@ (8002328 <HAL_GPIO_Init+0x2c0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_GPIO_Init+0x1ec>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3f      	ldr	r2, [pc, #252]	@ (800232c <HAL_GPIO_Init+0x2c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1e8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3e      	ldr	r2, [pc, #248]	@ (8002330 <HAL_GPIO_Init+0x2c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1e4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3d      	ldr	r2, [pc, #244]	@ (8002334 <HAL_GPIO_Init+0x2cc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1e0>
 8002244:	2303      	movs	r3, #3
 8002246:	e006      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002248:	2304      	movs	r3, #4
 800224a:	e004      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 800224c:	2302      	movs	r3, #2
 800224e:	e002      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002254:	2300      	movs	r3, #0
 8002256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4093      	lsls	r3, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002266:	492f      	ldr	r1, [pc, #188]	@ (8002324 <HAL_GPIO_Init+0x2bc>)
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	492c      	ldr	r1, [pc, #176]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800228e:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4928      	ldr	r1, [pc, #160]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 8002298:	4013      	ands	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a8:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	4922      	ldr	r1, [pc, #136]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60cb      	str	r3, [r1, #12]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	491e      	ldr	r1, [pc, #120]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4918      	ldr	r1, [pc, #96]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4914      	ldr	r1, [pc, #80]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d021      	beq.n	800233c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	490e      	ldr	r1, [pc, #56]	@ (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e021      	b.n	800234a <HAL_GPIO_Init+0x2e2>
 8002306:	bf00      	nop
 8002308:	10320000 	.word	0x10320000
 800230c:	10310000 	.word	0x10310000
 8002310:	10220000 	.word	0x10220000
 8002314:	10210000 	.word	0x10210000
 8002318:	10120000 	.word	0x10120000
 800231c:	10110000 	.word	0x10110000
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000
 8002328:	40010800 	.word	0x40010800
 800232c:	40010c00 	.word	0x40010c00
 8002330:	40011000 	.word	0x40011000
 8002334:	40011400 	.word	0x40011400
 8002338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_GPIO_Init+0x304>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	43db      	mvns	r3, r3
 8002344:	4909      	ldr	r1, [pc, #36]	@ (800236c <HAL_GPIO_Init+0x304>)
 8002346:	4013      	ands	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	3301      	adds	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	f47f ae8e 	bne.w	800207c <HAL_GPIO_Init+0x14>
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	372c      	adds	r7, #44	@ 0x2c
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	041a      	lsls	r2, r3, #16
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43d9      	mvns	r1, r3
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	400b      	ands	r3, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	611a      	str	r2, [r3, #16]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e12b      	b.n	800263e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fdd2 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	@ 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002438:	f001 f960 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 800243c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a81      	ldr	r2, [pc, #516]	@ (8002648 <HAL_I2C_Init+0x274>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d807      	bhi.n	8002458 <HAL_I2C_Init+0x84>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a80      	ldr	r2, [pc, #512]	@ (800264c <HAL_I2C_Init+0x278>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e006      	b.n	8002466 <HAL_I2C_Init+0x92>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a7d      	ldr	r2, [pc, #500]	@ (8002650 <HAL_I2C_Init+0x27c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0e7      	b.n	800263e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a78      	ldr	r2, [pc, #480]	@ (8002654 <HAL_I2C_Init+0x280>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a6a      	ldr	r2, [pc, #424]	@ (8002648 <HAL_I2C_Init+0x274>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d802      	bhi.n	80024a8 <HAL_I2C_Init+0xd4>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	e009      	b.n	80024bc <HAL_I2C_Init+0xe8>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	4a69      	ldr	r2, [pc, #420]	@ (8002658 <HAL_I2C_Init+0x284>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	3301      	adds	r3, #1
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	495c      	ldr	r1, [pc, #368]	@ (8002648 <HAL_I2C_Init+0x274>)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d819      	bhi.n	8002510 <HAL_I2C_Init+0x13c>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e59      	subs	r1, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ea:	1c59      	adds	r1, r3, #1
 80024ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024f0:	400b      	ands	r3, r1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_I2C_Init+0x138>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e59      	subs	r1, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fbb1 f3f3 	udiv	r3, r1, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	e051      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 800250c:	2304      	movs	r3, #4
 800250e:	e04f      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <HAL_I2C_Init+0x168>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e012      	b.n	8002562 <HAL_I2C_Init+0x18e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e58      	subs	r0, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	0099      	lsls	r1, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Init+0x196>
 8002566:	2301      	movs	r3, #1
 8002568:	e022      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10e      	bne.n	8002590 <HAL_I2C_Init+0x1bc>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e58      	subs	r0, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	440b      	add	r3, r1
 8002580:	fbb0 f3f3 	udiv	r3, r0, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800258e:	e00f      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	0099      	lsls	r1, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	6809      	ldr	r1, [r1, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6911      	ldr	r1, [r2, #16]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	000186a0 	.word	0x000186a0
 800264c:	001e847f 	.word	0x001e847f
 8002650:	003d08ff 	.word	0x003d08ff
 8002654:	431bde83 	.word	0x431bde83
 8002658:	10624dd3 	.word	0x10624dd3

0800265c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	460b      	mov	r3, r1
 800266a:	817b      	strh	r3, [r7, #10]
 800266c:	4613      	mov	r3, r2
 800266e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7fe fe9e 	bl	80013b0 <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b20      	cmp	r3, #32
 8002680:	f040 80e0 	bne.w	8002844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2319      	movs	r3, #25
 800268a:	2201      	movs	r2, #1
 800268c:	4970      	ldr	r1, [pc, #448]	@ (8002850 <HAL_I2C_Master_Transmit+0x1f4>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa92 	bl	8002bb8 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
 800269c:	e0d3      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_I2C_Master_Transmit+0x50>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e0cc      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d007      	beq.n	80026d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2221      	movs	r2, #33	@ 0x21
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2210      	movs	r2, #16
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	893a      	ldrh	r2, [r7, #8]
 8002702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <HAL_I2C_Master_Transmit+0x1f8>)
 8002712:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002714:	8979      	ldrh	r1, [r7, #10]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6a3a      	ldr	r2, [r7, #32]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f9ca 	bl	8002ab4 <I2C_MasterRequestWrite>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e08d      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002740:	e066      	b.n	8002810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	6a39      	ldr	r1, [r7, #32]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fb50 	bl	8002dec <I2C_WaitOnTXEFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00d      	beq.n	800276e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	2b04      	cmp	r3, #4
 8002758:	d107      	bne.n	800276a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06b      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d11b      	bne.n	80027e4 <HAL_I2C_Master_Transmit+0x188>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d017      	beq.n	80027e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	6a39      	ldr	r1, [r7, #32]
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fb47 	bl	8002e7c <I2C_WaitOnBTFFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d107      	bne.n	800280c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800280a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e01a      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d194      	bne.n	8002742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	00100002 	.word	0x00100002
 8002854:	ffff0000 	.word	0xffff0000

08002858 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	460b      	mov	r3, r1
 8002866:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7fe fda2 	bl	80013b0 <HAL_GetTick>
 800286c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	f040 8111 	bne.w	8002aa2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2319      	movs	r3, #25
 8002886:	2201      	movs	r2, #1
 8002888:	4988      	ldr	r1, [pc, #544]	@ (8002aac <HAL_I2C_IsDeviceReady+0x254>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f994 	bl	8002bb8 <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002896:	2302      	movs	r3, #2
 8002898:	e104      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_I2C_IsDeviceReady+0x50>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e0fd      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x24c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d007      	beq.n	80028ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2224      	movs	r2, #36	@ 0x24
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a70      	ldr	r2, [pc, #448]	@ (8002ab0 <HAL_I2C_IsDeviceReady+0x258>)
 80028f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002900:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f952 	bl	8002bb8 <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002928:	d103      	bne.n	8002932 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e0b6      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002944:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe fd33 	bl	80013b0 <HAL_GetTick>
 800294a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800297a:	e025      	b.n	80029c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800297c:	f7fe fd18 	bl	80013b0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d302      	bcc.n	8002992 <HAL_I2C_IsDeviceReady+0x13a>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	22a0      	movs	r2, #160	@ 0xa0
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80029d2:	d005      	beq.n	80029e0 <HAL_I2C_IsDeviceReady+0x188>
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_I2C_IsDeviceReady+0x188>
 80029da:	7dbb      	ldrb	r3, [r7, #22]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0cd      	beq.n	800297c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d129      	bne.n	8002a4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2319      	movs	r3, #25
 8002a22:	2201      	movs	r2, #1
 8002a24:	4921      	ldr	r1, [pc, #132]	@ (8002aac <HAL_I2C_IsDeviceReady+0x254>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f8c6 	bl	8002bb8 <I2C_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e036      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e02c      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2319      	movs	r3, #25
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	490f      	ldr	r1, [pc, #60]	@ (8002aac <HAL_I2C_IsDeviceReady+0x254>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f8a2 	bl	8002bb8 <I2C_WaitOnFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e012      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	f4ff af32 	bcc.w	80028f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	00100002 	.word	0x00100002
 8002ab0:	ffff0000 	.word	0xffff0000

08002ab4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d006      	beq.n	8002ade <I2C_MasterRequestWrite+0x2a>
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d003      	beq.n	8002ade <I2C_MasterRequestWrite+0x2a>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002adc:	d108      	bne.n	8002af0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e00b      	b.n	8002b08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d107      	bne.n	8002b08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f84f 	bl	8002bb8 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b2e:	d103      	bne.n	8002b38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e035      	b.n	8002ba8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b44:	d108      	bne.n	8002b58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b54:	611a      	str	r2, [r3, #16]
 8002b56:	e01b      	b.n	8002b90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b58:	897b      	ldrh	r3, [r7, #10]
 8002b5a:	11db      	asrs	r3, r3, #7
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0306 	and.w	r3, r3, #6
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f063 030f 	orn	r3, r3, #15
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	490e      	ldr	r1, [pc, #56]	@ (8002bb0 <I2C_MasterRequestWrite+0xfc>)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f898 	bl	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e010      	b.n	8002ba8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4907      	ldr	r1, [pc, #28]	@ (8002bb4 <I2C_MasterRequestWrite+0x100>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f888 	bl	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	00010008 	.word	0x00010008
 8002bb4:	00010002 	.word	0x00010002

08002bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc8:	e048      	b.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bd0:	d044      	beq.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd2:	f7fe fbed 	bl	80013b0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d139      	bne.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10d      	bne.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	e00c      	b.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d116      	bne.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e023      	b.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	0c1b      	lsrs	r3, r3, #16
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d10d      	bne.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	e00c      	b.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d093      	beq.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cba:	e071      	b.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cca:	d123      	bne.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e067      	b.n	8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d1a:	d041      	beq.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1c:	f7fe fb48 	bl	80013b0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d136      	bne.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10c      	bne.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4013      	ands	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e00b      	b.n	8002d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e021      	b.n	8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10c      	bne.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e00b      	b.n	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f af6d 	bne.w	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df8:	e034      	b.n	8002e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f886 	bl	8002f0c <I2C_IsAcknowledgeFailed>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e034      	b.n	8002e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e10:	d028      	beq.n	8002e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe facd 	bl	80013b0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11d      	bne.n	8002e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e32:	2b80      	cmp	r3, #128	@ 0x80
 8002e34:	d016      	beq.n	8002e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e007      	b.n	8002e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6e:	2b80      	cmp	r3, #128	@ 0x80
 8002e70:	d1c3      	bne.n	8002dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e88:	e034      	b.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f83e 	bl	8002f0c <I2C_IsAcknowledgeFailed>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e034      	b.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ea0:	d028      	beq.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fe fa85 	bl	80013b0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d11d      	bne.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d016      	beq.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d1c3      	bne.n	8002e8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f22:	d11b      	bne.n	8002f5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e272      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8087 	beq.w	8003096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f88:	4b92      	ldr	r3, [pc, #584]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d00c      	beq.n	8002fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f94:	4b8f      	ldr	r3, [pc, #572]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d112      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
 8002fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fae:	4b89      	ldr	r3, [pc, #548]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d06c      	beq.n	8003094 <HAL_RCC_OscConfig+0x12c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d168      	bne.n	8003094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e24c      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x76>
 8002fd0:	4b80      	ldr	r3, [pc, #512]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a7f      	ldr	r2, [pc, #508]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	e02e      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x98>
 8002fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a7a      	ldr	r2, [pc, #488]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b78      	ldr	r3, [pc, #480]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a77      	ldr	r2, [pc, #476]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0xbc>
 800300a:	4b72      	ldr	r3, [pc, #456]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a71      	ldr	r2, [pc, #452]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b6f      	ldr	r3, [pc, #444]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6e      	ldr	r2, [pc, #440]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8003024:	4b6b      	ldr	r3, [pc, #428]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6a      	ldr	r2, [pc, #424]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b68      	ldr	r3, [pc, #416]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a67      	ldr	r2, [pc, #412]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe f9b4 	bl	80013b0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe f9b0 	bl	80013b0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	@ 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e200      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b5d      	ldr	r3, [pc, #372]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xe4>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe f9a0 	bl	80013b0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe f99c 	bl	80013b0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	@ 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1ec      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b53      	ldr	r3, [pc, #332]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x10c>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a2:	4b4c      	ldr	r3, [pc, #304]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030ae:	4b49      	ldr	r3, [pc, #292]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x18c>
 80030ba:	4b46      	ldr	r3, [pc, #280]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b43      	ldr	r3, [pc, #268]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x176>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1c0      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b3d      	ldr	r3, [pc, #244]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4939      	ldr	r1, [pc, #228]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fe f955 	bl	80013b0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe f951 	bl	80013b0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1a1      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b2a      	ldr	r3, [pc, #168]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4927      	ldr	r1, [pc, #156]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b26      	ldr	r3, [pc, #152]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe f934 	bl	80013b0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe f930 	bl	80013b0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e180      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b1d      	ldr	r3, [pc, #116]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03a      	beq.n	80031ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d019      	beq.n	80031b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003184:	f7fe f914 	bl	80013b0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe f910 	bl	80013b0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e160      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f000 fafe 	bl	80037ac <RCC_Delay>
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7fe f8fa 	bl	80013b0 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031be:	e00f      	b.n	80031e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fe f8f6 	bl	80013b0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d908      	bls.n	80031e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e146      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	42420000 	.word	0x42420000
 80031dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b92      	ldr	r3, [pc, #584]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e9      	bne.n	80031c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a6 	beq.w	8003346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b8b      	ldr	r3, [pc, #556]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b88      	ldr	r3, [pc, #544]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4a87      	ldr	r2, [pc, #540]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003214:	61d3      	str	r3, [r2, #28]
 8003216:	4b85      	ldr	r3, [pc, #532]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b82      	ldr	r3, [pc, #520]	@ (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d118      	bne.n	8003264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003232:	4b7f      	ldr	r3, [pc, #508]	@ (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7e      	ldr	r2, [pc, #504]	@ (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7fe f8b7 	bl	80013b0 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7fe f8b3 	bl	80013b0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	@ 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e103      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b75      	ldr	r3, [pc, #468]	@ (8003430 <HAL_RCC_OscConfig+0x4c8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x312>
 800326c:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4a6e      	ldr	r2, [pc, #440]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e02d      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x334>
 8003282:	4b6a      	ldr	r3, [pc, #424]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a69      	ldr	r2, [pc, #420]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6213      	str	r3, [r2, #32]
 800328e:	4b67      	ldr	r3, [pc, #412]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a66      	ldr	r2, [pc, #408]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	6213      	str	r3, [r2, #32]
 800329a:	e01c      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x356>
 80032a4:	4b61      	ldr	r3, [pc, #388]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a60      	ldr	r2, [pc, #384]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	4b5e      	ldr	r3, [pc, #376]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a5d      	ldr	r2, [pc, #372]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6213      	str	r3, [r2, #32]
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 80032be:	4b5b      	ldr	r3, [pc, #364]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a5a      	ldr	r2, [pc, #360]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6213      	str	r3, [r2, #32]
 80032ca:	4b58      	ldr	r3, [pc, #352]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4a57      	ldr	r2, [pc, #348]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d015      	beq.n	800330a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fe f867 	bl	80013b0 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe f863 	bl	80013b0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0b1      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	4b4b      	ldr	r3, [pc, #300]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ee      	beq.n	80032e6 <HAL_RCC_OscConfig+0x37e>
 8003308:	e014      	b.n	8003334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7fe f851 	bl	80013b0 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe f84d 	bl	80013b0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e09b      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	4b40      	ldr	r3, [pc, #256]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ee      	bne.n	8003312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b3c      	ldr	r3, [pc, #240]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4a3b      	ldr	r2, [pc, #236]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d061      	beq.n	8003420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d146      	bne.n	80033f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003364:	4b33      	ldr	r3, [pc, #204]	@ (8003434 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fe f821 	bl	80013b0 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003372:	f7fe f81d 	bl	80013b0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e06d      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003384:	4b29      	ldr	r3, [pc, #164]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003398:	d108      	bne.n	80033ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800339a:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4921      	ldr	r1, [pc, #132]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b1f      	ldr	r3, [pc, #124]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a19      	ldr	r1, [r3, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	430b      	orrs	r3, r1
 80033be:	491b      	ldr	r1, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fd fff1 	bl	80013b0 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fd ffed 	bl	80013b0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e03d      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x46a>
 80033f0:	e035      	b.n	800345e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd ffda 	bl	80013b0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fd ffd6 	bl	80013b0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e026      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x498>
 800341e:	e01e      	b.n	800345e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e019      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
 8003434:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003438:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <HAL_RCC_OscConfig+0x500>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	429a      	cmp	r2, r3
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d0      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b6a      	ldr	r3, [pc, #424]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d910      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b67      	ldr	r3, [pc, #412]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 0207 	bic.w	r2, r3, #7
 8003496:	4965      	ldr	r1, [pc, #404]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a58      	ldr	r2, [pc, #352]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80034ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d040      	beq.n	800358c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e073      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3d      	ldr	r3, [pc, #244]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06b      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4936      	ldr	r1, [pc, #216]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7fd ff28 	bl	80013b0 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fd ff24 	bl	80013b0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e053      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2d      	ldr	r3, [pc, #180]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d210      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4922      	ldr	r1, [pc, #136]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035e6:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	@ (8003634 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <HAL_RCC_ClockConfig+0x1cc>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_ClockConfig+0x1d0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fd9e 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40022000 	.word	0x40022000
 8003630:	40021000 	.word	0x40021000
 8003634:	080081e0 	.word	0x080081e0
 8003638:	20000008 	.word	0x20000008
 800363c:	2000000c 	.word	0x2000000c

08003640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d002      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x30>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d003      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x36>
 800366e:	e027      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003670:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003672:	613b      	str	r3, [r7, #16]
      break;
 8003674:	e027      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4a17      	ldr	r2, [pc, #92]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	0c5b      	lsrs	r3, r3, #17
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	4a11      	ldr	r2, [pc, #68]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a0d      	ldr	r2, [pc, #52]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036a2:	fb03 f202 	mul.w	r2, r3, r2
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e004      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	613b      	str	r3, [r7, #16]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036c2:	613b      	str	r3, [r7, #16]
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	693b      	ldr	r3, [r7, #16]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	007a1200 	.word	0x007a1200
 80036dc:	080081f8 	.word	0x080081f8
 80036e0:	08008208 	.word	0x08008208
 80036e4:	003d0900 	.word	0x003d0900

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b02      	ldr	r3, [pc, #8]	@ (80036f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	20000008 	.word	0x20000008

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003700:	f7ff fff2 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	@ (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	080081f0 	.word	0x080081f0

08003724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003728:	f7ff ffde 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	0adb      	lsrs	r3, r3, #11
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4903      	ldr	r1, [pc, #12]	@ (8003748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	080081f0 	.word	0x080081f0

0800374c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	220f      	movs	r2, #15
 800375a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800375c:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HAL_RCC_GetClockConfig+0x58>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0203 	and.w	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003768:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <HAL_RCC_GetClockConfig+0x58>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003774:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <HAL_RCC_GetClockConfig+0x58>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003780:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <HAL_RCC_GetClockConfig+0x58>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	08db      	lsrs	r3, r3, #3
 8003786:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800378e:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0207 	and.w	r2, r3, #7
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40022000 	.word	0x40022000

080037ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <RCC_Delay+0x34>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <RCC_Delay+0x38>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0a5b      	lsrs	r3, r3, #9
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037c8:	bf00      	nop
  }
  while (Delay --);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	60fa      	str	r2, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f9      	bne.n	80037c8 <RCC_Delay+0x1c>
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	20000008 	.word	0x20000008
 80037e4:	10624dd3 	.word	0x10624dd3

080037e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e041      	b.n	800387e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fc06 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 fd48 	bl	80042bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e03a      	b.n	8003916 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a18      	ldr	r2, [pc, #96]	@ (8003920 <HAL_TIM_Base_Start_IT+0x98>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_TIM_Base_Start_IT+0x58>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ca:	d009      	beq.n	80038e0 <HAL_TIM_Base_Start_IT+0x58>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a14      	ldr	r2, [pc, #80]	@ (8003924 <HAL_TIM_Base_Start_IT+0x9c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_TIM_Base_Start_IT+0x58>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a13      	ldr	r2, [pc, #76]	@ (8003928 <HAL_TIM_Base_Start_IT+0xa0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d111      	bne.n	8003904 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d010      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	e007      	b.n	8003914 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800

0800392c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e041      	b.n	80039c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f839 	bl	80039ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 fca6 	bl	80042bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_TIM_PWM_Start+0x24>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e022      	b.n	8003a46 <HAL_TIM_PWM_Start+0x6a>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d109      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x3e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e015      	b.n	8003a46 <HAL_TIM_PWM_Start+0x6a>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d109      	bne.n	8003a34 <HAL_TIM_PWM_Start+0x58>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e008      	b.n	8003a46 <HAL_TIM_PWM_Start+0x6a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e05e      	b.n	8003b0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x82>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a5c:	e013      	b.n	8003a86 <HAL_TIM_PWM_Start+0xaa>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x92>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a6c:	e00b      	b.n	8003a86 <HAL_TIM_PWM_Start+0xaa>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0xa2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a7c:	e003      	b.n	8003a86 <HAL_TIM_PWM_Start+0xaa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fea0 	bl	80047d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <HAL_TIM_PWM_Start+0x138>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d107      	bne.n	8003aae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_TIM_PWM_Start+0x138>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0xfa>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac0:	d009      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0xfa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a14      	ldr	r2, [pc, #80]	@ (8003b18 <HAL_TIM_PWM_Start+0x13c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0xfa>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a12      	ldr	r2, [pc, #72]	@ (8003b1c <HAL_TIM_PWM_Start+0x140>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d111      	bne.n	8003afa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	d010      	beq.n	8003b0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	e007      	b.n	8003b0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800

08003b20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e093      	b.n	8003c5c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fd fa85 	bl	8001058 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b64:	f023 0307 	bic.w	r3, r3, #7
 8003b68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f000 fba1 	bl	80042bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003bc0:	f023 030c 	bic.w	r3, r3, #12
 8003bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	011a      	lsls	r2, r3, #4
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	031b      	lsls	r3, r3, #12
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d110      	bne.n	8003cb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c9a:	7b7b      	ldrb	r3, [r7, #13]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d001      	beq.n	8003ca4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e069      	b.n	8003d78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cb4:	e031      	b.n	8003d1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d110      	bne.n	8003cde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cbc:	7bbb      	ldrb	r3, [r7, #14]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cc2:	7b3b      	ldrb	r3, [r7, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d001      	beq.n	8003ccc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e055      	b.n	8003d78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cdc:	e01d      	b.n	8003d1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d108      	bne.n	8003cf6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ce4:	7bbb      	ldrb	r3, [r7, #14]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d105      	bne.n	8003cf6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cea:	7b7b      	ldrb	r3, [r7, #13]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cf0:	7b3b      	ldrb	r3, [r7, #12]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e03e      	b.n	8003d78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_TIM_Encoder_Start+0xc4>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d008      	beq.n	8003d38 <HAL_TIM_Encoder_Start+0xd4>
 8003d26:	e00f      	b.n	8003d48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fd4f 	bl	80047d4 <TIM_CCxChannelCmd>
      break;
 8003d36:	e016      	b.n	8003d66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2104      	movs	r1, #4
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fd47 	bl	80047d4 <TIM_CCxChannelCmd>
      break;
 8003d46:	e00e      	b.n	8003d66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fd3f 	bl	80047d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	2104      	movs	r1, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fd38 	bl	80047d4 <TIM_CCxChannelCmd>
      break;
 8003d64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d020      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01b      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0202 	mvn.w	r2, #2
 8003db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa5a 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa4d 	bl	8004272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fa5c 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d020      	beq.n	8003e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01b      	beq.n	8003e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0204 	mvn.w	r2, #4
 8003e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa34 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa27 	bl	8004272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fa36 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d020      	beq.n	8003e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01b      	beq.n	8003e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0208 	mvn.w	r2, #8
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2204      	movs	r2, #4
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa0e 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa01 	bl	8004272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fa10 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d020      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01b      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0210 	mvn.w	r2, #16
 8003e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9e8 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9db 	bl	8004272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f9ea 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00c      	beq.n	8003eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0201 	mvn.w	r2, #1
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fc fcea 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00c      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fced 	bl	80048ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00c      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f9ba 	bl	80042a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0220 	mvn.w	r2, #32
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fcc0 	bl	80048d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0ae      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	f200 809f 	bhi.w	80040cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fc9 	.word	0x08003fc9
 8003f98:	080040cd 	.word	0x080040cd
 8003f9c:	080040cd 	.word	0x080040cd
 8003fa0:	080040cd 	.word	0x080040cd
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	080040cd 	.word	0x080040cd
 8003fac:	080040cd 	.word	0x080040cd
 8003fb0:	080040cd 	.word	0x080040cd
 8003fb4:	0800404b 	.word	0x0800404b
 8003fb8:	080040cd 	.word	0x080040cd
 8003fbc:	080040cd 	.word	0x080040cd
 8003fc0:	080040cd 	.word	0x080040cd
 8003fc4:	0800408b 	.word	0x0800408b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f9e2 	bl	8004398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0208 	orr.w	r2, r2, #8
 8003fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6999      	ldr	r1, [r3, #24]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	619a      	str	r2, [r3, #24]
      break;
 8004006:	e064      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fa28 	bl	8004464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6999      	ldr	r1, [r3, #24]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	021a      	lsls	r2, r3, #8
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	619a      	str	r2, [r3, #24]
      break;
 8004048:	e043      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fa71 	bl	8004538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0208 	orr.w	r2, r2, #8
 8004064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0204 	bic.w	r2, r2, #4
 8004074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	61da      	str	r2, [r3, #28]
      break;
 8004088:	e023      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fabb 	bl	800460c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69d9      	ldr	r1, [r3, #28]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	021a      	lsls	r2, r3, #8
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	61da      	str	r2, [r3, #28]
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
      break;
 80040d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040da:	7dfb      	ldrb	r3, [r7, #23]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_TIM_ConfigClockSource+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0b4      	b.n	800426a <HAL_TIM_ConfigClockSource+0x186>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800411e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004138:	d03e      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0xd4>
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413e:	f200 8087 	bhi.w	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004146:	f000 8086 	beq.w	8004256 <HAL_TIM_ConfigClockSource+0x172>
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414e:	d87f      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b70      	cmp	r3, #112	@ 0x70
 8004152:	d01a      	beq.n	800418a <HAL_TIM_ConfigClockSource+0xa6>
 8004154:	2b70      	cmp	r3, #112	@ 0x70
 8004156:	d87b      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b60      	cmp	r3, #96	@ 0x60
 800415a:	d050      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x11a>
 800415c:	2b60      	cmp	r3, #96	@ 0x60
 800415e:	d877      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b50      	cmp	r3, #80	@ 0x50
 8004162:	d03c      	beq.n	80041de <HAL_TIM_ConfigClockSource+0xfa>
 8004164:	2b50      	cmp	r3, #80	@ 0x50
 8004166:	d873      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b40      	cmp	r3, #64	@ 0x40
 800416a:	d058      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x13a>
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	d86f      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b30      	cmp	r3, #48	@ 0x30
 8004172:	d064      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004174:	2b30      	cmp	r3, #48	@ 0x30
 8004176:	d86b      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b20      	cmp	r3, #32
 800417a:	d060      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 800417c:	2b20      	cmp	r3, #32
 800417e:	d867      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d05c      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	2b10      	cmp	r3, #16
 8004186:	d05a      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004188:	e062      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800419a:	f000 fafc 	bl	8004796 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	609a      	str	r2, [r3, #8]
      break;
 80041b6:	e04f      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041c8:	f000 fae5 	bl	8004796 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041da:	609a      	str	r2, [r3, #8]
      break;
 80041dc:	e03c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ea:	461a      	mov	r2, r3
 80041ec:	f000 fa5c 	bl	80046a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2150      	movs	r1, #80	@ 0x50
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fab3 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 80041fc:	e02c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800420a:	461a      	mov	r2, r3
 800420c:	f000 fa7a 	bl	8004704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2160      	movs	r1, #96	@ 0x60
 8004216:	4618      	mov	r0, r3
 8004218:	f000 faa3 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800421c:	e01c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422a:	461a      	mov	r2, r3
 800422c:	f000 fa3c 	bl	80046a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2140      	movs	r1, #64	@ 0x40
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fa93 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800423c:	e00c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 fa8a 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800424e:	e003      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      break;
 8004254:	e000      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
	...

080042bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a2f      	ldr	r2, [pc, #188]	@ (800438c <TIM_Base_SetConfig+0xd0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00b      	beq.n	80042ec <TIM_Base_SetConfig+0x30>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042da:	d007      	beq.n	80042ec <TIM_Base_SetConfig+0x30>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a2c      	ldr	r2, [pc, #176]	@ (8004390 <TIM_Base_SetConfig+0xd4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_Base_SetConfig+0x30>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004394 <TIM_Base_SetConfig+0xd8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d108      	bne.n	80042fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a22      	ldr	r2, [pc, #136]	@ (800438c <TIM_Base_SetConfig+0xd0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00b      	beq.n	800431e <TIM_Base_SetConfig+0x62>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430c:	d007      	beq.n	800431e <TIM_Base_SetConfig+0x62>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1f      	ldr	r2, [pc, #124]	@ (8004390 <TIM_Base_SetConfig+0xd4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d003      	beq.n	800431e <TIM_Base_SetConfig+0x62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1e      	ldr	r2, [pc, #120]	@ (8004394 <TIM_Base_SetConfig+0xd8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d108      	bne.n	8004330 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0d      	ldr	r2, [pc, #52]	@ (800438c <TIM_Base_SetConfig+0xd0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d103      	bne.n	8004364 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f023 0201 	bic.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]
  }
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800

08004398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f023 0201 	bic.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 0302 	bic.w	r3, r3, #2
 80043e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004460 <TIM_OC1_SetConfig+0xc8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0308 	bic.w	r3, r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a13      	ldr	r2, [pc, #76]	@ (8004460 <TIM_OC1_SetConfig+0xc8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d111      	bne.n	800443a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40012c00 	.word	0x40012c00

08004464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f023 0210 	bic.w	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800449a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0320 	bic.w	r3, r3, #32
 80044ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1d      	ldr	r2, [pc, #116]	@ (8004534 <TIM_OC2_SetConfig+0xd0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10d      	bne.n	80044e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a14      	ldr	r2, [pc, #80]	@ (8004534 <TIM_OC2_SetConfig+0xd0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d113      	bne.n	8004510 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00

08004538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <TIM_OC3_SetConfig+0xd0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10d      	bne.n	80045b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800459c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	@ (8004608 <TIM_OC3_SetConfig+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00

0800460c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	031b      	lsls	r3, r3, #12
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0f      	ldr	r2, [pc, #60]	@ (80046a4 <TIM_OC4_SetConfig+0x98>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d109      	bne.n	8004680 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	40012c00 	.word	0x40012c00

080046a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 030a 	bic.w	r3, r3, #10
 80046e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0210 	bic.w	r2, r3, #16
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800472e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	031b      	lsls	r3, r3, #12
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004740:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	f043 0307 	orr.w	r3, r3, #7
 8004784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004796:	b480      	push	{r7}
 8004798:	b087      	sub	sp, #28
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	2201      	movs	r2, #1
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	401a      	ands	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	fa01 f303 	lsl.w	r3, r1, r3
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004830:	2302      	movs	r3, #2
 8004832:	e046      	b.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a16      	ldr	r2, [pc, #88]	@ (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004880:	d009      	beq.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a12      	ldr	r2, [pc, #72]	@ (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a10      	ldr	r2, [pc, #64]	@ (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d10c      	bne.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800489c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800

080048d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f103 0208 	add.w	r2, r3, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004914:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f103 0208 	add.w	r2, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f103 0208 	add.w	r2, r3, #8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ae:	d103      	bne.n	80049b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e00c      	b.n	80049d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3308      	adds	r3, #8
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e002      	b.n	80049c6 <vListInsert+0x2e>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d2f6      	bcs.n	80049c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6892      	ldr	r2, [r2, #8]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6852      	ldr	r2, [r2, #4]
 8004a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d103      	bne.n	8004a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
	...

08004a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a88:	f001 fd08 	bl	800649c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	68f9      	ldr	r1, [r7, #12]
 8004a96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	441a      	add	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	22ff      	movs	r2, #255	@ 0xff
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	22ff      	movs	r2, #255	@ 0xff
 8004ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d114      	bne.n	8004b08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01a      	beq.n	8004b1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3310      	adds	r3, #16
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fffc 	bl	8005ae8 <xTaskRemoveFromEventList>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d012      	beq.n	8004b1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <xQueueGenericReset+0xd0>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	e009      	b.n	8004b1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3310      	adds	r3, #16
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fef5 	bl	80048fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3324      	adds	r3, #36	@ 0x24
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fef0 	bl	80048fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b1c:	f001 fcee 	bl	80064fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b20:	2301      	movs	r3, #1
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	@ 0x28
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <xQueueGenericCreate+0x2c>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	613b      	str	r3, [r7, #16]
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	e7fd      	b.n	8004b58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	fb02 f303 	mul.w	r3, r2, r3
 8004b64:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3348      	adds	r3, #72	@ 0x48
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 fd58 	bl	8006620 <pvPortMalloc>
 8004b70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d011      	beq.n	8004b9c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3348      	adds	r3, #72	@ 0x48
 8004b80:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b8a:	79fa      	ldrb	r2, [r7, #7]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f805 	bl	8004ba6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e002      	b.n	8004bc8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	69b8      	ldr	r0, [r7, #24]
 8004bd8:	f7ff ff40 	bl	8004a5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00e      	beq.n	8004c10 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c04:	2300      	movs	r3, #0
 8004c06:	2200      	movs	r2, #0
 8004c08:	2100      	movs	r1, #0
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f81c 	bl	8004c48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c22:	2301      	movs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6939      	ldr	r1, [r7, #16]
 8004c30:	6978      	ldr	r0, [r7, #20]
 8004c32:	f7ff ff7d 	bl	8004b30 <xQueueGenericCreate>
 8004c36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff ffd3 	bl	8004be4 <prvInitialiseMutex>

		return xNewQueue;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
	}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08e      	sub	sp, #56	@ 0x38
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c56:	2300      	movs	r3, #0
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <xQueueGenericSend+0x34>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	e7fd      	b.n	8004c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <xQueueGenericSend+0x42>
 8004c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <xQueueGenericSend+0x46>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <xQueueGenericSend+0x48>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <xQueueGenericSend+0x64>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ca6:	bf00      	nop
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d103      	bne.n	8004cba <xQueueGenericSend+0x72>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <xQueueGenericSend+0x76>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <xQueueGenericSend+0x78>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10b      	bne.n	8004cdc <xQueueGenericSend+0x94>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	623b      	str	r3, [r7, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cdc:	f001 f8ca 	bl	8005e74 <xTaskGetSchedulerState>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <xQueueGenericSend+0xa4>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <xQueueGenericSend+0xa8>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <xQueueGenericSend+0xaa>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10b      	bne.n	8004d0e <xQueueGenericSend+0xc6>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	61fb      	str	r3, [r7, #28]
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d0e:	f001 fbc5 	bl	800649c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <xQueueGenericSend+0xdc>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d129      	bne.n	8004d78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d2a:	f000 f9b6 	bl	800509a <prvCopyDataToQueue>
 8004d2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	3324      	adds	r3, #36	@ 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fed3 	bl	8005ae8 <xTaskRemoveFromEventList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d48:	4b3f      	ldr	r3, [pc, #252]	@ (8004e48 <xQueueGenericSend+0x200>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	e00a      	b.n	8004d70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d60:	4b39      	ldr	r3, [pc, #228]	@ (8004e48 <xQueueGenericSend+0x200>)
 8004d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d70:	f001 fbc4 	bl	80064fc <vPortExitCritical>
				return pdPASS;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e063      	b.n	8004e40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d7e:	f001 fbbd 	bl	80064fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e05c      	b.n	8004e40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d8c:	f107 0314 	add.w	r3, r7, #20
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 ff0d 	bl	8005bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d9a:	f001 fbaf 	bl	80064fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d9e:	f000 fcb5 	bl	800570c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004da2:	f001 fb7b 	bl	800649c <vPortEnterCritical>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dac:	b25b      	sxtb	r3, r3
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004db2:	d103      	bne.n	8004dbc <xQueueGenericSend+0x174>
 8004db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dc8:	d103      	bne.n	8004dd2 <xQueueGenericSend+0x18a>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dd2:	f001 fb93 	bl	80064fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dd6:	1d3a      	adds	r2, r7, #4
 8004dd8:	f107 0314 	add.w	r3, r7, #20
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fefc 	bl	8005bdc <xTaskCheckForTimeOut>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d124      	bne.n	8004e34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dec:	f000 fa27 	bl	800523e <prvIsQueueFull>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	3310      	adds	r3, #16
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fe4c 	bl	8005a9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e06:	f000 f9b2 	bl	800516e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e0a:	f000 fc8d 	bl	8005728 <xTaskResumeAll>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f47f af7c 	bne.w	8004d0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e16:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <xQueueGenericSend+0x200>)
 8004e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	e772      	b.n	8004d0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e2a:	f000 f9a0 	bl	800516e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e2e:	f000 fc7b 	bl	8005728 <xTaskResumeAll>
 8004e32:	e76c      	b.n	8004d0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e36:	f000 f99a 	bl	800516e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e3a:	f000 fc75 	bl	8005728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3738      	adds	r7, #56	@ 0x38
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08e      	sub	sp, #56	@ 0x38
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	623b      	str	r3, [r7, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	61fb      	str	r3, [r7, #28]
}
 8004e9a:	bf00      	nop
 8004e9c:	bf00      	nop
 8004e9e:	e7fd      	b.n	8004e9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ea0:	f000 ffe8 	bl	8005e74 <xTaskGetSchedulerState>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <xQueueSemaphoreTake+0x64>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <xQueueSemaphoreTake+0x68>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <xQueueSemaphoreTake+0x6a>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	61bb      	str	r3, [r7, #24]
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	e7fd      	b.n	8004ece <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ed2:	f001 fae3 	bl	800649c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d024      	beq.n	8004f2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	1e5a      	subs	r2, r3, #1
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ef2:	f001 f96b 	bl	80061cc <pvTaskIncrementMutexHeldCount>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00f      	beq.n	8004f24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	3310      	adds	r3, #16
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fded 	bl	8005ae8 <xTaskRemoveFromEventList>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f14:	4b54      	ldr	r3, [pc, #336]	@ (8005068 <xQueueSemaphoreTake+0x21c>)
 8004f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f24:	f001 faea 	bl	80064fc <vPortExitCritical>
				return pdPASS;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e098      	b.n	800505e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d112      	bne.n	8004f58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	617b      	str	r3, [r7, #20]
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f50:	f001 fad4 	bl	80064fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e082      	b.n	800505e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fe24 	bl	8005bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f6c:	f001 fac6 	bl	80064fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f70:	f000 fbcc 	bl	800570c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f74:	f001 fa92 	bl	800649c <vPortEnterCritical>
 8004f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f84:	d103      	bne.n	8004f8e <xQueueSemaphoreTake+0x142>
 8004f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f9a:	d103      	bne.n	8004fa4 <xQueueSemaphoreTake+0x158>
 8004f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa4:	f001 faaa 	bl	80064fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fa8:	463a      	mov	r2, r7
 8004faa:	f107 030c 	add.w	r3, r7, #12
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fe13 	bl	8005bdc <xTaskCheckForTimeOut>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d132      	bne.n	8005022 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004fbe:	f000 f928 	bl	8005212 <prvIsQueueEmpty>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d026      	beq.n	8005016 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004fd0:	f001 fa64 	bl	800649c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 ff69 	bl	8005eb0 <xTaskPriorityInherit>
 8004fde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004fe0:	f001 fa8c 	bl	80064fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe6:	3324      	adds	r3, #36	@ 0x24
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fd55 	bl	8005a9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ff2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ff4:	f000 f8bb 	bl	800516e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ff8:	f000 fb96 	bl	8005728 <xTaskResumeAll>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f47f af67 	bne.w	8004ed2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005004:	4b18      	ldr	r3, [pc, #96]	@ (8005068 <xQueueSemaphoreTake+0x21c>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	e75d      	b.n	8004ed2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005016:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005018:	f000 f8a9 	bl	800516e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800501c:	f000 fb84 	bl	8005728 <xTaskResumeAll>
 8005020:	e757      	b.n	8004ed2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005022:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005024:	f000 f8a3 	bl	800516e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005028:	f000 fb7e 	bl	8005728 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800502c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800502e:	f000 f8f0 	bl	8005212 <prvIsQueueEmpty>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	f43f af4c 	beq.w	8004ed2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800503a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005040:	f001 fa2c 	bl	800649c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005044:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005046:	f000 f811 	bl	800506c <prvGetDisinheritPriorityAfterTimeout>
 800504a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800504c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f82a 	bl	80060ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005058:	f001 fa50 	bl	80064fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800505c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800505e:	4618      	mov	r0, r3
 8005060:	3738      	adds	r7, #56	@ 0x38
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	d006      	beq.n	800508a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1c3 0307 	rsb	r3, r3, #7
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e001      	b.n	800508e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800508e:	68fb      	ldr	r3, [r7, #12]
	}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10d      	bne.n	80050d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d14d      	bne.n	800515c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 ff69 	bl	8005f9c <xTaskPriorityDisinherit>
 80050ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	e043      	b.n	800515c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d119      	bne.n	800510e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6858      	ldr	r0, [r3, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	461a      	mov	r2, r3
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	f001 fd3b 	bl	8006b60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	d32b      	bcc.n	800515c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	605a      	str	r2, [r3, #4]
 800510c:	e026      	b.n	800515c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68d8      	ldr	r0, [r3, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	461a      	mov	r2, r3
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	f001 fd21 	bl	8006b60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	425b      	negs	r3, r3
 8005128:	441a      	add	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d207      	bcs.n	800514a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	425b      	negs	r3, r3
 8005144:	441a      	add	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d105      	bne.n	800515c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3b01      	subs	r3, #1
 800515a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005164:	697b      	ldr	r3, [r7, #20]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005176:	f001 f991 	bl	800649c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005180:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005182:	e011      	b.n	80051a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d012      	beq.n	80051b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3324      	adds	r3, #36	@ 0x24
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fca9 	bl	8005ae8 <xTaskRemoveFromEventList>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800519c:	f000 fd82 	bl	8005ca4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dce9      	bgt.n	8005184 <prvUnlockQueue+0x16>
 80051b0:	e000      	b.n	80051b4 <prvUnlockQueue+0x46>
					break;
 80051b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	22ff      	movs	r2, #255	@ 0xff
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051bc:	f001 f99e 	bl	80064fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051c0:	f001 f96c 	bl	800649c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051cc:	e011      	b.n	80051f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d012      	beq.n	80051fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3310      	adds	r3, #16
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fc84 	bl	8005ae8 <xTaskRemoveFromEventList>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051e6:	f000 fd5d 	bl	8005ca4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051ea:	7bbb      	ldrb	r3, [r7, #14]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	dce9      	bgt.n	80051ce <prvUnlockQueue+0x60>
 80051fa:	e000      	b.n	80051fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	22ff      	movs	r2, #255	@ 0xff
 8005202:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005206:	f001 f979 	bl	80064fc <vPortExitCritical>
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800521a:	f001 f93f 	bl	800649c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005226:	2301      	movs	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e001      	b.n	8005230 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005230:	f001 f964 	bl	80064fc <vPortExitCritical>

	return xReturn;
 8005234:	68fb      	ldr	r3, [r7, #12]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005246:	f001 f929 	bl	800649c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005252:	429a      	cmp	r2, r3
 8005254:	d102      	bne.n	800525c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005256:	2301      	movs	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e001      	b.n	8005260 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005260:	f001 f94c 	bl	80064fc <vPortExitCritical>

	return xReturn;
 8005264:	68fb      	ldr	r3, [r7, #12]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800526e:	b580      	push	{r7, lr}
 8005270:	b08e      	sub	sp, #56	@ 0x38
 8005272:	af04      	add	r7, sp, #16
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800527c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <xTaskCreateStatic+0x2c>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	623b      	str	r3, [r7, #32]
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	e7fd      	b.n	8005296 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10b      	bne.n	80052b8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61fb      	str	r3, [r7, #28]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052b8:	23a0      	movs	r3, #160	@ 0xa0
 80052ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2ba0      	cmp	r3, #160	@ 0xa0
 80052c0:	d00b      	beq.n	80052da <xTaskCreateStatic+0x6c>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	61bb      	str	r3, [r7, #24]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01e      	beq.n	8005320 <xTaskCreateStatic+0xb2>
 80052e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052f0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052fa:	2300      	movs	r3, #0
 80052fc:	9303      	str	r3, [sp, #12]
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	9302      	str	r3, [sp, #8]
 8005302:	f107 0314 	add.w	r3, r7, #20
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f850 	bl	80053b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005318:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800531a:	f000 f8ed 	bl	80054f8 <prvAddNewTaskToReadyList>
 800531e:	e001      	b.n	8005324 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005324:	697b      	ldr	r3, [r7, #20]
	}
 8005326:	4618      	mov	r0, r3
 8005328:	3728      	adds	r7, #40	@ 0x28
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800532e:	b580      	push	{r7, lr}
 8005330:	b08c      	sub	sp, #48	@ 0x30
 8005332:	af04      	add	r7, sp, #16
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4618      	mov	r0, r3
 8005344:	f001 f96c 	bl	8006620 <pvPortMalloc>
 8005348:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00e      	beq.n	800536e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005350:	20a0      	movs	r0, #160	@ 0xa0
 8005352:	f001 f965 	bl	8006620 <pvPortMalloc>
 8005356:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30
 8005364:	e005      	b.n	8005372 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005366:	6978      	ldr	r0, [r7, #20]
 8005368:	f001 fa28 	bl	80067bc <vPortFree>
 800536c:	e001      	b.n	8005372 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d017      	beq.n	80053a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005380:	88fa      	ldrh	r2, [r7, #6]
 8005382:	2300      	movs	r3, #0
 8005384:	9303      	str	r3, [sp, #12]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	9302      	str	r3, [sp, #8]
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f80e 	bl	80053b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800539c:	69f8      	ldr	r0, [r7, #28]
 800539e:	f000 f8ab 	bl	80054f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053a2:	2301      	movs	r3, #1
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	e002      	b.n	80053ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053ae:	69bb      	ldr	r3, [r7, #24]
	}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053d0:	3b01      	subs	r3, #1
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f023 0307 	bic.w	r3, r3, #7
 80053de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	617b      	str	r3, [r7, #20]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01f      	beq.n	8005448 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e012      	b.n	8005434 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	3334      	adds	r3, #52	@ 0x34
 800541e:	460a      	mov	r2, r1
 8005420:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d006      	beq.n	800543c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	3301      	adds	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	d9e9      	bls.n	800540e <prvInitialiseNewTask+0x56>
 800543a:	e000      	b.n	800543e <prvInitialiseNewTask+0x86>
			{
				break;
 800543c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005446:	e003      	b.n	8005450 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	2b06      	cmp	r3, #6
 8005454:	d901      	bls.n	800545a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005456:	2306      	movs	r3, #6
 8005458:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800545e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005468:	2200      	movs	r2, #0
 800546a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	3304      	adds	r3, #4
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff fa62 	bl	800493a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	3318      	adds	r3, #24
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff fa5d 	bl	800493a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005484:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005488:	f1c3 0207 	rsb	r2, r3, #7
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005494:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	2200      	movs	r2, #0
 800549a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	334c      	adds	r3, #76	@ 0x4c
 80054aa:	224c      	movs	r2, #76	@ 0x4c
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 fac4 	bl	8006a3c <memset>
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	4a0d      	ldr	r2, [pc, #52]	@ (80054ec <prvInitialiseNewTask+0x134>)
 80054b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	4a0c      	ldr	r2, [pc, #48]	@ (80054f0 <prvInitialiseNewTask+0x138>)
 80054be:	655a      	str	r2, [r3, #84]	@ 0x54
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	4a0c      	ldr	r2, [pc, #48]	@ (80054f4 <prvInitialiseNewTask+0x13c>)
 80054c4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	69b8      	ldr	r0, [r7, #24]
 80054cc:	f000 fef8 	bl	80062c0 <pxPortInitialiseStack>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e2:	bf00      	nop
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2000164c 	.word	0x2000164c
 80054f0:	200016b4 	.word	0x200016b4
 80054f4:	2000171c 	.word	0x2000171c

080054f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005500:	f000 ffcc 	bl	800649c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005504:	4b2a      	ldr	r3, [pc, #168]	@ (80055b0 <prvAddNewTaskToReadyList+0xb8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	4a29      	ldr	r2, [pc, #164]	@ (80055b0 <prvAddNewTaskToReadyList+0xb8>)
 800550c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800550e:	4b29      	ldr	r3, [pc, #164]	@ (80055b4 <prvAddNewTaskToReadyList+0xbc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005516:	4a27      	ldr	r2, [pc, #156]	@ (80055b4 <prvAddNewTaskToReadyList+0xbc>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800551c:	4b24      	ldr	r3, [pc, #144]	@ (80055b0 <prvAddNewTaskToReadyList+0xb8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d110      	bne.n	8005546 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005524:	f000 fbe2 	bl	8005cec <prvInitialiseTaskLists>
 8005528:	e00d      	b.n	8005546 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800552a:	4b23      	ldr	r3, [pc, #140]	@ (80055b8 <prvAddNewTaskToReadyList+0xc0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005532:	4b20      	ldr	r3, [pc, #128]	@ (80055b4 <prvAddNewTaskToReadyList+0xbc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	429a      	cmp	r2, r3
 800553e:	d802      	bhi.n	8005546 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005540:	4a1c      	ldr	r2, [pc, #112]	@ (80055b4 <prvAddNewTaskToReadyList+0xbc>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005546:	4b1d      	ldr	r3, [pc, #116]	@ (80055bc <prvAddNewTaskToReadyList+0xc4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3301      	adds	r3, #1
 800554c:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <prvAddNewTaskToReadyList+0xc4>)
 800554e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	2201      	movs	r2, #1
 8005556:	409a      	lsls	r2, r3
 8005558:	4b19      	ldr	r3, [pc, #100]	@ (80055c0 <prvAddNewTaskToReadyList+0xc8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	4a18      	ldr	r2, [pc, #96]	@ (80055c0 <prvAddNewTaskToReadyList+0xc8>)
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4a15      	ldr	r2, [pc, #84]	@ (80055c4 <prvAddNewTaskToReadyList+0xcc>)
 8005570:	441a      	add	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3304      	adds	r3, #4
 8005576:	4619      	mov	r1, r3
 8005578:	4610      	mov	r0, r2
 800557a:	f7ff f9ea 	bl	8004952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800557e:	f000 ffbd 	bl	80064fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005582:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <prvAddNewTaskToReadyList+0xc0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00e      	beq.n	80055a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800558a:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <prvAddNewTaskToReadyList+0xbc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	429a      	cmp	r2, r3
 8005596:	d207      	bcs.n	80055a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <prvAddNewTaskToReadyList+0xd0>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	200009f8 	.word	0x200009f8
 80055b4:	200008f8 	.word	0x200008f8
 80055b8:	20000a04 	.word	0x20000a04
 80055bc:	20000a14 	.word	0x20000a14
 80055c0:	20000a00 	.word	0x20000a00
 80055c4:	200008fc 	.word	0x200008fc
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d018      	beq.n	8005610 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055de:	4b14      	ldr	r3, [pc, #80]	@ (8005630 <vTaskDelay+0x64>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <vTaskDelay+0x32>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60bb      	str	r3, [r7, #8]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055fe:	f000 f885 	bl	800570c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005602:	2100      	movs	r1, #0
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fdf5 	bl	80061f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800560a:	f000 f88d 	bl	8005728 <xTaskResumeAll>
 800560e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005616:	4b07      	ldr	r3, [pc, #28]	@ (8005634 <vTaskDelay+0x68>)
 8005618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000a20 	.word	0x20000a20
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	@ 0x28
 800563c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005646:	463a      	mov	r2, r7
 8005648:	1d39      	adds	r1, r7, #4
 800564a:	f107 0308 	add.w	r3, r7, #8
 800564e:	4618      	mov	r0, r3
 8005650:	f7fa fd7e 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	9202      	str	r2, [sp, #8]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2300      	movs	r3, #0
 8005664:	460a      	mov	r2, r1
 8005666:	4921      	ldr	r1, [pc, #132]	@ (80056ec <vTaskStartScheduler+0xb4>)
 8005668:	4821      	ldr	r0, [pc, #132]	@ (80056f0 <vTaskStartScheduler+0xb8>)
 800566a:	f7ff fe00 	bl	800526e <xTaskCreateStatic>
 800566e:	4603      	mov	r3, r0
 8005670:	4a20      	ldr	r2, [pc, #128]	@ (80056f4 <vTaskStartScheduler+0xbc>)
 8005672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005674:	4b1f      	ldr	r3, [pc, #124]	@ (80056f4 <vTaskStartScheduler+0xbc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e001      	b.n	8005686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d11b      	bne.n	80056c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	613b      	str	r3, [r7, #16]
}
 800569e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056a0:	4b15      	ldr	r3, [pc, #84]	@ (80056f8 <vTaskStartScheduler+0xc0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	334c      	adds	r3, #76	@ 0x4c
 80056a6:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <vTaskStartScheduler+0xc4>)
 80056a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056aa:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <vTaskStartScheduler+0xc8>)
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056b2:	4b14      	ldr	r3, [pc, #80]	@ (8005704 <vTaskStartScheduler+0xcc>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056b8:	4b13      	ldr	r3, [pc, #76]	@ (8005708 <vTaskStartScheduler+0xd0>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056be:	f000 fe7b 	bl	80063b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056c2:	e00f      	b.n	80056e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056ca:	d10b      	bne.n	80056e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	e7fd      	b.n	80056e0 <vTaskStartScheduler+0xa8>
}
 80056e4:	bf00      	nop
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	0800747c 	.word	0x0800747c
 80056f0:	08005cbd 	.word	0x08005cbd
 80056f4:	20000a1c 	.word	0x20000a1c
 80056f8:	200008f8 	.word	0x200008f8
 80056fc:	20000018 	.word	0x20000018
 8005700:	20000a18 	.word	0x20000a18
 8005704:	20000a04 	.word	0x20000a04
 8005708:	200009fc 	.word	0x200009fc

0800570c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005710:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <vTaskSuspendAll+0x18>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a03      	ldr	r2, [pc, #12]	@ (8005724 <vTaskSuspendAll+0x18>)
 8005718:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000a20 	.word	0x20000a20

08005728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005736:	4b42      	ldr	r3, [pc, #264]	@ (8005840 <xTaskResumeAll+0x118>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <xTaskResumeAll+0x2e>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	603b      	str	r3, [r7, #0]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005756:	f000 fea1 	bl	800649c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800575a:	4b39      	ldr	r3, [pc, #228]	@ (8005840 <xTaskResumeAll+0x118>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3b01      	subs	r3, #1
 8005760:	4a37      	ldr	r2, [pc, #220]	@ (8005840 <xTaskResumeAll+0x118>)
 8005762:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005764:	4b36      	ldr	r3, [pc, #216]	@ (8005840 <xTaskResumeAll+0x118>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d161      	bne.n	8005830 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800576c:	4b35      	ldr	r3, [pc, #212]	@ (8005844 <xTaskResumeAll+0x11c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d05d      	beq.n	8005830 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005774:	e02e      	b.n	80057d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005776:	4b34      	ldr	r3, [pc, #208]	@ (8005848 <xTaskResumeAll+0x120>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3318      	adds	r3, #24
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff f940 	bl	8004a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff f93b 	bl	8004a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	2201      	movs	r2, #1
 8005798:	409a      	lsls	r2, r3
 800579a:	4b2c      	ldr	r3, [pc, #176]	@ (800584c <xTaskResumeAll+0x124>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4313      	orrs	r3, r2
 80057a0:	4a2a      	ldr	r2, [pc, #168]	@ (800584c <xTaskResumeAll+0x124>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4a27      	ldr	r2, [pc, #156]	@ (8005850 <xTaskResumeAll+0x128>)
 80057b2:	441a      	add	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7ff f8c9 	bl	8004952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c4:	4b23      	ldr	r3, [pc, #140]	@ (8005854 <xTaskResumeAll+0x12c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057ce:	4b22      	ldr	r3, [pc, #136]	@ (8005858 <xTaskResumeAll+0x130>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005848 <xTaskResumeAll+0x120>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1cc      	bne.n	8005776 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057e2:	f000 fb27 	bl	8005e34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057e6:	4b1d      	ldr	r3, [pc, #116]	@ (800585c <xTaskResumeAll+0x134>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057f2:	f000 f837 	bl	8005864 <xTaskIncrementTick>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057fc:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <xTaskResumeAll+0x130>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f1      	bne.n	80057f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800580e:	4b13      	ldr	r3, [pc, #76]	@ (800585c <xTaskResumeAll+0x134>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005814:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <xTaskResumeAll+0x130>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800581c:	2301      	movs	r3, #1
 800581e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005820:	4b0f      	ldr	r3, [pc, #60]	@ (8005860 <xTaskResumeAll+0x138>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005830:	f000 fe64 	bl	80064fc <vPortExitCritical>

	return xAlreadyYielded;
 8005834:	68bb      	ldr	r3, [r7, #8]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000a20 	.word	0x20000a20
 8005844:	200009f8 	.word	0x200009f8
 8005848:	200009b8 	.word	0x200009b8
 800584c:	20000a00 	.word	0x20000a00
 8005850:	200008fc 	.word	0x200008fc
 8005854:	200008f8 	.word	0x200008f8
 8005858:	20000a0c 	.word	0x20000a0c
 800585c:	20000a08 	.word	0x20000a08
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800586e:	4b4f      	ldr	r3, [pc, #316]	@ (80059ac <xTaskIncrementTick+0x148>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f040 808f 	bne.w	8005996 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005878:	4b4d      	ldr	r3, [pc, #308]	@ (80059b0 <xTaskIncrementTick+0x14c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3301      	adds	r3, #1
 800587e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005880:	4a4b      	ldr	r2, [pc, #300]	@ (80059b0 <xTaskIncrementTick+0x14c>)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d121      	bne.n	80058d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800588c:	4b49      	ldr	r3, [pc, #292]	@ (80059b4 <xTaskIncrementTick+0x150>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	603b      	str	r3, [r7, #0]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xTaskIncrementTick+0x46>
 80058ae:	4b41      	ldr	r3, [pc, #260]	@ (80059b4 <xTaskIncrementTick+0x150>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	4b40      	ldr	r3, [pc, #256]	@ (80059b8 <xTaskIncrementTick+0x154>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3e      	ldr	r2, [pc, #248]	@ (80059b4 <xTaskIncrementTick+0x150>)
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4a3e      	ldr	r2, [pc, #248]	@ (80059b8 <xTaskIncrementTick+0x154>)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b3e      	ldr	r3, [pc, #248]	@ (80059bc <xTaskIncrementTick+0x158>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3301      	adds	r3, #1
 80058c8:	4a3c      	ldr	r2, [pc, #240]	@ (80059bc <xTaskIncrementTick+0x158>)
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	f000 fab2 	bl	8005e34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058d0:	4b3b      	ldr	r3, [pc, #236]	@ (80059c0 <xTaskIncrementTick+0x15c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d348      	bcc.n	800596c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058da:	4b36      	ldr	r3, [pc, #216]	@ (80059b4 <xTaskIncrementTick+0x150>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e4:	4b36      	ldr	r3, [pc, #216]	@ (80059c0 <xTaskIncrementTick+0x15c>)
 80058e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058ea:	601a      	str	r2, [r3, #0]
					break;
 80058ec:	e03e      	b.n	800596c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ee:	4b31      	ldr	r3, [pc, #196]	@ (80059b4 <xTaskIncrementTick+0x150>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d203      	bcs.n	800590e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005906:	4a2e      	ldr	r2, [pc, #184]	@ (80059c0 <xTaskIncrementTick+0x15c>)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800590c:	e02e      	b.n	800596c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	3304      	adds	r3, #4
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff f878 	bl	8004a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	3318      	adds	r3, #24
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff f86f 	bl	8004a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	2201      	movs	r2, #1
 8005930:	409a      	lsls	r2, r3
 8005932:	4b24      	ldr	r3, [pc, #144]	@ (80059c4 <xTaskIncrementTick+0x160>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4313      	orrs	r3, r2
 8005938:	4a22      	ldr	r2, [pc, #136]	@ (80059c4 <xTaskIncrementTick+0x160>)
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4a1f      	ldr	r2, [pc, #124]	@ (80059c8 <xTaskIncrementTick+0x164>)
 800594a:	441a      	add	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f7fe fffd 	bl	8004952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595c:	4b1b      	ldr	r3, [pc, #108]	@ (80059cc <xTaskIncrementTick+0x168>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	429a      	cmp	r2, r3
 8005964:	d3b9      	bcc.n	80058da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005966:	2301      	movs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596a:	e7b6      	b.n	80058da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800596c:	4b17      	ldr	r3, [pc, #92]	@ (80059cc <xTaskIncrementTick+0x168>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005972:	4915      	ldr	r1, [pc, #84]	@ (80059c8 <xTaskIncrementTick+0x164>)
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d901      	bls.n	8005988 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005984:	2301      	movs	r3, #1
 8005986:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005988:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <xTaskIncrementTick+0x16c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005990:	2301      	movs	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e004      	b.n	80059a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005996:	4b0f      	ldr	r3, [pc, #60]	@ (80059d4 <xTaskIncrementTick+0x170>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3301      	adds	r3, #1
 800599c:	4a0d      	ldr	r2, [pc, #52]	@ (80059d4 <xTaskIncrementTick+0x170>)
 800599e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059a0:	697b      	ldr	r3, [r7, #20]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000a20 	.word	0x20000a20
 80059b0:	200009fc 	.word	0x200009fc
 80059b4:	200009b0 	.word	0x200009b0
 80059b8:	200009b4 	.word	0x200009b4
 80059bc:	20000a10 	.word	0x20000a10
 80059c0:	20000a18 	.word	0x20000a18
 80059c4:	20000a00 	.word	0x20000a00
 80059c8:	200008fc 	.word	0x200008fc
 80059cc:	200008f8 	.word	0x200008f8
 80059d0:	20000a0c 	.word	0x20000a0c
 80059d4:	20000a08 	.word	0x20000a08

080059d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059de:	4b29      	ldr	r3, [pc, #164]	@ (8005a84 <vTaskSwitchContext+0xac>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059e6:	4b28      	ldr	r3, [pc, #160]	@ (8005a88 <vTaskSwitchContext+0xb0>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059ec:	e045      	b.n	8005a7a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80059ee:	4b26      	ldr	r3, [pc, #152]	@ (8005a88 <vTaskSwitchContext+0xb0>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f4:	4b25      	ldr	r3, [pc, #148]	@ (8005a8c <vTaskSwitchContext+0xb4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	fab3 f383 	clz	r3, r3
 8005a00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a02:	7afb      	ldrb	r3, [r7, #11]
 8005a04:	f1c3 031f 	rsb	r3, r3, #31
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	4921      	ldr	r1, [pc, #132]	@ (8005a90 <vTaskSwitchContext+0xb8>)
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	607b      	str	r3, [r7, #4]
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <vTaskSwitchContext+0x5a>
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4a13      	ldr	r2, [pc, #76]	@ (8005a90 <vTaskSwitchContext+0xb8>)
 8005a42:	4413      	add	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	605a      	str	r2, [r3, #4]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	3308      	adds	r3, #8
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d104      	bne.n	8005a66 <vTaskSwitchContext+0x8e>
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4a09      	ldr	r2, [pc, #36]	@ (8005a94 <vTaskSwitchContext+0xbc>)
 8005a6e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a70:	4b08      	ldr	r3, [pc, #32]	@ (8005a94 <vTaskSwitchContext+0xbc>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	334c      	adds	r3, #76	@ 0x4c
 8005a76:	4a08      	ldr	r2, [pc, #32]	@ (8005a98 <vTaskSwitchContext+0xc0>)
 8005a78:	6013      	str	r3, [r2, #0]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr
 8005a84:	20000a20 	.word	0x20000a20
 8005a88:	20000a0c 	.word	0x20000a0c
 8005a8c:	20000a00 	.word	0x20000a00
 8005a90:	200008fc 	.word	0x200008fc
 8005a94:	200008f8 	.word	0x200008f8
 8005a98:	20000018 	.word	0x20000018

08005a9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10b      	bne.n	8005ac4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	60fb      	str	r3, [r7, #12]
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	e7fd      	b.n	8005ac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ac4:	4b07      	ldr	r3, [pc, #28]	@ (8005ae4 <vTaskPlaceOnEventList+0x48>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3318      	adds	r3, #24
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fe ff63 	bl	8004998 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	6838      	ldr	r0, [r7, #0]
 8005ad6:	f000 fb8d 	bl	80061f4 <prvAddCurrentTaskToDelayedList>
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200008f8 	.word	0x200008f8

08005ae8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60fb      	str	r3, [r7, #12]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3318      	adds	r3, #24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe ff74 	bl	8004a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b20:	4b1d      	ldr	r3, [pc, #116]	@ (8005b98 <xTaskRemoveFromEventList+0xb0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11c      	bne.n	8005b62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe ff6b 	bl	8004a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	2201      	movs	r2, #1
 8005b38:	409a      	lsls	r2, r3
 8005b3a:	4b18      	ldr	r3, [pc, #96]	@ (8005b9c <xTaskRemoveFromEventList+0xb4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	4a16      	ldr	r2, [pc, #88]	@ (8005b9c <xTaskRemoveFromEventList+0xb4>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a13      	ldr	r2, [pc, #76]	@ (8005ba0 <xTaskRemoveFromEventList+0xb8>)
 8005b52:	441a      	add	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe fef9 	bl	8004952 <vListInsertEnd>
 8005b60:	e005      	b.n	8005b6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3318      	adds	r3, #24
 8005b66:	4619      	mov	r1, r3
 8005b68:	480e      	ldr	r0, [pc, #56]	@ (8005ba4 <xTaskRemoveFromEventList+0xbc>)
 8005b6a:	f7fe fef2 	bl	8004952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <xTaskRemoveFromEventList+0xc0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d905      	bls.n	8005b88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b80:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <xTaskRemoveFromEventList+0xc4>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e001      	b.n	8005b8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b8c:	697b      	ldr	r3, [r7, #20]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000a20 	.word	0x20000a20
 8005b9c:	20000a00 	.word	0x20000a00
 8005ba0:	200008fc 	.word	0x200008fc
 8005ba4:	200009b8 	.word	0x200009b8
 8005ba8:	200008f8 	.word	0x200008f8
 8005bac:	20000a0c 	.word	0x20000a0c

08005bb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bb8:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <vTaskInternalSetTimeOutState+0x24>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bc0:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <vTaskInternalSetTimeOutState+0x28>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	605a      	str	r2, [r3, #4]
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000a10 	.word	0x20000a10
 8005bd8:	200009fc 	.word	0x200009fc

08005bdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10b      	bne.n	8005c04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	613b      	str	r3, [r7, #16]
}
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	60fb      	str	r3, [r7, #12]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c22:	f000 fc3b 	bl	800649c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c26:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <xTaskCheckForTimeOut+0xc0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c3e:	d102      	bne.n	8005c46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	e023      	b.n	8005c8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ca0 <xTaskCheckForTimeOut+0xc4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d007      	beq.n	8005c62 <xTaskCheckForTimeOut+0x86>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d302      	bcc.n	8005c62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e015      	b.n	8005c8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d20b      	bcs.n	8005c84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	1ad2      	subs	r2, r2, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff ff99 	bl	8005bb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	e004      	b.n	8005c8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c8e:	f000 fc35 	bl	80064fc <vPortExitCritical>

	return xReturn;
 8005c92:	69fb      	ldr	r3, [r7, #28]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	200009fc 	.word	0x200009fc
 8005ca0:	20000a10 	.word	0x20000a10

08005ca4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ca8:	4b03      	ldr	r3, [pc, #12]	@ (8005cb8 <vTaskMissedYield+0x14>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	20000a0c 	.word	0x20000a0c

08005cbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cc4:	f000 f852 	bl	8005d6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cc8:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <prvIdleTask+0x28>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d9f9      	bls.n	8005cc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cd0:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <prvIdleTask+0x2c>)
 8005cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ce0:	e7f0      	b.n	8005cc4 <prvIdleTask+0x8>
 8005ce2:	bf00      	nop
 8005ce4:	200008fc 	.word	0x200008fc
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	607b      	str	r3, [r7, #4]
 8005cf6:	e00c      	b.n	8005d12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4a12      	ldr	r2, [pc, #72]	@ (8005d4c <prvInitialiseTaskLists+0x60>)
 8005d04:	4413      	add	r3, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fdf8 	bl	80048fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d9ef      	bls.n	8005cf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d18:	480d      	ldr	r0, [pc, #52]	@ (8005d50 <prvInitialiseTaskLists+0x64>)
 8005d1a:	f7fe fdef 	bl	80048fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d1e:	480d      	ldr	r0, [pc, #52]	@ (8005d54 <prvInitialiseTaskLists+0x68>)
 8005d20:	f7fe fdec 	bl	80048fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d24:	480c      	ldr	r0, [pc, #48]	@ (8005d58 <prvInitialiseTaskLists+0x6c>)
 8005d26:	f7fe fde9 	bl	80048fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d2a:	480c      	ldr	r0, [pc, #48]	@ (8005d5c <prvInitialiseTaskLists+0x70>)
 8005d2c:	f7fe fde6 	bl	80048fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d30:	480b      	ldr	r0, [pc, #44]	@ (8005d60 <prvInitialiseTaskLists+0x74>)
 8005d32:	f7fe fde3 	bl	80048fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d36:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <prvInitialiseTaskLists+0x78>)
 8005d38:	4a05      	ldr	r2, [pc, #20]	@ (8005d50 <prvInitialiseTaskLists+0x64>)
 8005d3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <prvInitialiseTaskLists+0x7c>)
 8005d3e:	4a05      	ldr	r2, [pc, #20]	@ (8005d54 <prvInitialiseTaskLists+0x68>)
 8005d40:	601a      	str	r2, [r3, #0]
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200008fc 	.word	0x200008fc
 8005d50:	20000988 	.word	0x20000988
 8005d54:	2000099c 	.word	0x2000099c
 8005d58:	200009b8 	.word	0x200009b8
 8005d5c:	200009cc 	.word	0x200009cc
 8005d60:	200009e4 	.word	0x200009e4
 8005d64:	200009b0 	.word	0x200009b0
 8005d68:	200009b4 	.word	0x200009b4

08005d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d72:	e019      	b.n	8005da8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d74:	f000 fb92 	bl	800649c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d78:	4b10      	ldr	r3, [pc, #64]	@ (8005dbc <prvCheckTasksWaitingTermination+0x50>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe fe3f 	bl	8004a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <prvCheckTasksWaitingTermination+0x54>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc0 <prvCheckTasksWaitingTermination+0x54>)
 8005d92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d94:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <prvCheckTasksWaitingTermination+0x58>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc4 <prvCheckTasksWaitingTermination+0x58>)
 8005d9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d9e:	f000 fbad 	bl	80064fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f810 	bl	8005dc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005da8:	4b06      	ldr	r3, [pc, #24]	@ (8005dc4 <prvCheckTasksWaitingTermination+0x58>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e1      	bne.n	8005d74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200009cc 	.word	0x200009cc
 8005dc0:	200009f8 	.word	0x200009f8
 8005dc4:	200009e0 	.word	0x200009e0

08005dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	334c      	adds	r3, #76	@ 0x4c
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fe39 	bl	8006a4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d108      	bne.n	8005df6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fce7 	bl	80067bc <vPortFree>
				vPortFree( pxTCB );
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fce4 	bl	80067bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005df4:	e019      	b.n	8005e2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d103      	bne.n	8005e08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fcdb 	bl	80067bc <vPortFree>
	}
 8005e06:	e010      	b.n	8005e2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d00b      	beq.n	8005e2a <prvDeleteTCB+0x62>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60fb      	str	r3, [r7, #12]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <prvDeleteTCB+0x5e>
	}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <prvResetNextTaskUnblockTime+0x38>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e44:	4b0a      	ldr	r3, [pc, #40]	@ (8005e70 <prvResetNextTaskUnblockTime+0x3c>)
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e4c:	e008      	b.n	8005e60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4e:	4b07      	ldr	r3, [pc, #28]	@ (8005e6c <prvResetNextTaskUnblockTime+0x38>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	@ (8005e70 <prvResetNextTaskUnblockTime+0x3c>)
 8005e5e:	6013      	str	r3, [r2, #0]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	200009b0 	.word	0x200009b0
 8005e70:	20000a18 	.word	0x20000a18

08005e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea8 <xTaskGetSchedulerState+0x34>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e82:	2301      	movs	r3, #1
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	e008      	b.n	8005e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e88:	4b08      	ldr	r3, [pc, #32]	@ (8005eac <xTaskGetSchedulerState+0x38>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e90:	2302      	movs	r3, #2
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	e001      	b.n	8005e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e96:	2300      	movs	r3, #0
 8005e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e9a:	687b      	ldr	r3, [r7, #4]
	}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000a04 	.word	0x20000a04
 8005eac:	20000a20 	.word	0x20000a20

08005eb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d05e      	beq.n	8005f84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eca:	4b31      	ldr	r3, [pc, #196]	@ (8005f90 <xTaskPriorityInherit+0xe0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d24e      	bcs.n	8005f72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db06      	blt.n	8005eea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005edc:	4b2c      	ldr	r3, [pc, #176]	@ (8005f90 <xTaskPriorityInherit+0xe0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	f1c3 0207 	rsb	r2, r3, #7
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6959      	ldr	r1, [r3, #20]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4a26      	ldr	r2, [pc, #152]	@ (8005f94 <xTaskPriorityInherit+0xe4>)
 8005efc:	4413      	add	r3, r2
 8005efe:	4299      	cmp	r1, r3
 8005f00:	d12f      	bne.n	8005f62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe fd7e 	bl	8004a08 <uxListRemove>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	2201      	movs	r2, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	43da      	mvns	r2, r3
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f98 <xTaskPriorityInherit+0xe8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4013      	ands	r3, r2
 8005f24:	4a1c      	ldr	r2, [pc, #112]	@ (8005f98 <xTaskPriorityInherit+0xe8>)
 8005f26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f28:	4b19      	ldr	r3, [pc, #100]	@ (8005f90 <xTaskPriorityInherit+0xe0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f36:	2201      	movs	r2, #1
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	4b17      	ldr	r3, [pc, #92]	@ (8005f98 <xTaskPriorityInherit+0xe8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	4a15      	ldr	r2, [pc, #84]	@ (8005f98 <xTaskPriorityInherit+0xe8>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a10      	ldr	r2, [pc, #64]	@ (8005f94 <xTaskPriorityInherit+0xe4>)
 8005f52:	441a      	add	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f7fe fcf9 	bl	8004952 <vListInsertEnd>
 8005f60:	e004      	b.n	8005f6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f62:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <xTaskPriorityInherit+0xe0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e008      	b.n	8005f84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f76:	4b06      	ldr	r3, [pc, #24]	@ (8005f90 <xTaskPriorityInherit+0xe0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d201      	bcs.n	8005f84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f84:	68fb      	ldr	r3, [r7, #12]
	}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200008f8 	.word	0x200008f8
 8005f94:	200008fc 	.word	0x200008fc
 8005f98:	20000a00 	.word	0x20000a00

08005f9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d070      	beq.n	8006094 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80060a0 <xTaskPriorityDisinherit+0x104>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d00b      	beq.n	8005fd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	60fb      	str	r3, [r7, #12]
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	e7fd      	b.n	8005fd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10b      	bne.n	8005ff4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60bb      	str	r3, [r7, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff8:	1e5a      	subs	r2, r3, #1
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006006:	429a      	cmp	r2, r3
 8006008:	d044      	beq.n	8006094 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800600e:	2b00      	cmp	r3, #0
 8006010:	d140      	bne.n	8006094 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3304      	adds	r3, #4
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fcf6 	bl	8004a08 <uxListRemove>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d115      	bne.n	800604e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006026:	491f      	ldr	r1, [pc, #124]	@ (80060a4 <xTaskPriorityDisinherit+0x108>)
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <xTaskPriorityDisinherit+0xb2>
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	2201      	movs	r2, #1
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43da      	mvns	r2, r3
 8006044:	4b18      	ldr	r3, [pc, #96]	@ (80060a8 <xTaskPriorityDisinherit+0x10c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4013      	ands	r3, r2
 800604a:	4a17      	ldr	r2, [pc, #92]	@ (80060a8 <xTaskPriorityDisinherit+0x10c>)
 800604c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	f1c3 0207 	rsb	r2, r3, #7
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	2201      	movs	r2, #1
 8006068:	409a      	lsls	r2, r3
 800606a:	4b0f      	ldr	r3, [pc, #60]	@ (80060a8 <xTaskPriorityDisinherit+0x10c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4313      	orrs	r3, r2
 8006070:	4a0d      	ldr	r2, [pc, #52]	@ (80060a8 <xTaskPriorityDisinherit+0x10c>)
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4a08      	ldr	r2, [pc, #32]	@ (80060a4 <xTaskPriorityDisinherit+0x108>)
 8006082:	441a      	add	r2, r3
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f7fe fc61 	bl	8004952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006094:	697b      	ldr	r3, [r7, #20]
	}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	200008f8 	.word	0x200008f8
 80060a4:	200008fc 	.word	0x200008fc
 80060a8:	20000a00 	.word	0x20000a00

080060ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80060ba:	2301      	movs	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d079      	beq.n	80061b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	60fb      	str	r3, [r7, #12]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d902      	bls.n	80060f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	e002      	b.n	80060fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	429a      	cmp	r2, r3
 8006102:	d059      	beq.n	80061b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	429a      	cmp	r2, r3
 800610c:	d154      	bne.n	80061b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800610e:	4b2c      	ldr	r3, [pc, #176]	@ (80061c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	429a      	cmp	r2, r3
 8006116:	d10b      	bne.n	8006130 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	60bb      	str	r3, [r7, #8]
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	e7fd      	b.n	800612c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	db04      	blt.n	800614e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f1c3 0207 	rsb	r2, r3, #7
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	6959      	ldr	r1, [r3, #20]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4a19      	ldr	r2, [pc, #100]	@ (80061c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800615e:	4413      	add	r3, r2
 8006160:	4299      	cmp	r1, r3
 8006162:	d129      	bne.n	80061b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	3304      	adds	r3, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fc4d 	bl	8004a08 <uxListRemove>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	2201      	movs	r2, #1
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	43da      	mvns	r2, r3
 8006180:	4b11      	ldr	r3, [pc, #68]	@ (80061c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4013      	ands	r3, r2
 8006186:	4a10      	ldr	r2, [pc, #64]	@ (80061c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006188:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	2201      	movs	r2, #1
 8006190:	409a      	lsls	r2, r3
 8006192:	4b0d      	ldr	r3, [pc, #52]	@ (80061c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4313      	orrs	r3, r2
 8006198:	4a0b      	ldr	r2, [pc, #44]	@ (80061c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4a06      	ldr	r2, [pc, #24]	@ (80061c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80061aa:	441a      	add	r2, r3
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe fbcd 	bl	8004952 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061b8:	bf00      	nop
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	200008f8 	.word	0x200008f8
 80061c4:	200008fc 	.word	0x200008fc
 80061c8:	20000a00 	.word	0x20000a00

080061cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061d0:	4b07      	ldr	r3, [pc, #28]	@ (80061f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80061d8:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061de:	3201      	adds	r2, #1
 80061e0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80061e2:	4b03      	ldr	r3, [pc, #12]	@ (80061f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80061e4:	681b      	ldr	r3, [r3, #0]
	}
 80061e6:	4618      	mov	r0, r3
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	200008f8 	.word	0x200008f8

080061f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061fe:	4b29      	ldr	r3, [pc, #164]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006204:	4b28      	ldr	r3, [pc, #160]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3304      	adds	r3, #4
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fbfc 	bl	8004a08 <uxListRemove>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006216:	4b24      	ldr	r3, [pc, #144]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	2201      	movs	r2, #1
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	43da      	mvns	r2, r3
 8006224:	4b21      	ldr	r3, [pc, #132]	@ (80062ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4013      	ands	r3, r2
 800622a:	4a20      	ldr	r2, [pc, #128]	@ (80062ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800622c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006234:	d10a      	bne.n	800624c <prvAddCurrentTaskToDelayedList+0x58>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623c:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	481a      	ldr	r0, [pc, #104]	@ (80062b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006246:	f7fe fb84 	bl	8004952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800624a:	e026      	b.n	800629a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006254:	4b14      	ldr	r3, [pc, #80]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	d209      	bcs.n	8006278 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006264:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	4b0f      	ldr	r3, [pc, #60]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fe fb91 	bl	8004998 <vListInsert>
}
 8006276:	e010      	b.n	800629a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006278:	4b0f      	ldr	r3, [pc, #60]	@ (80062b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f7fe fb87 	bl	8004998 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800628a:	4b0c      	ldr	r3, [pc, #48]	@ (80062bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d202      	bcs.n	800629a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006294:	4a09      	ldr	r2, [pc, #36]	@ (80062bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6013      	str	r3, [r2, #0]
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	200009fc 	.word	0x200009fc
 80062a8:	200008f8 	.word	0x200008f8
 80062ac:	20000a00 	.word	0x20000a00
 80062b0:	200009e4 	.word	0x200009e4
 80062b4:	200009b4 	.word	0x200009b4
 80062b8:	200009b0 	.word	0x200009b0
 80062bc:	20000a18 	.word	0x20000a18

080062c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3b04      	subs	r3, #4
 80062d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3b04      	subs	r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062f0:	4a08      	ldr	r2, [pc, #32]	@ (8006314 <pxPortInitialiseStack+0x54>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3b14      	subs	r3, #20
 80062fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3b20      	subs	r3, #32
 8006306:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006308:	68fb      	ldr	r3, [r7, #12]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr
 8006314:	08006319 	.word	0x08006319

08006318 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006322:	4b12      	ldr	r3, [pc, #72]	@ (800636c <prvTaskExitError+0x54>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800632a:	d00b      	beq.n	8006344 <prvTaskExitError+0x2c>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60fb      	str	r3, [r7, #12]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <prvTaskExitError+0x28>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	60bb      	str	r3, [r7, #8]
}
 8006356:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006358:	bf00      	nop
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0fc      	beq.n	800635a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr
 800636c:	20000014 	.word	0x20000014

08006370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006370:	4b07      	ldr	r3, [pc, #28]	@ (8006390 <pxCurrentTCBConst2>)
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	6808      	ldr	r0, [r1, #0]
 8006376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800637a:	f380 8809 	msr	PSP, r0
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8811 	msr	BASEPRI, r0
 800638a:	f04e 0e0d 	orr.w	lr, lr, #13
 800638e:	4770      	bx	lr

08006390 <pxCurrentTCBConst2>:
 8006390:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop

08006398 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006398:	4806      	ldr	r0, [pc, #24]	@ (80063b4 <prvPortStartFirstTask+0x1c>)
 800639a:	6800      	ldr	r0, [r0, #0]
 800639c:	6800      	ldr	r0, [r0, #0]
 800639e:	f380 8808 	msr	MSP, r0
 80063a2:	b662      	cpsie	i
 80063a4:	b661      	cpsie	f
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	df00      	svc	0
 80063b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063b2:	bf00      	nop
 80063b4:	e000ed08 	.word	0xe000ed08

080063b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063be:	4b32      	ldr	r3, [pc, #200]	@ (8006488 <xPortStartScheduler+0xd0>)
 80063c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	22ff      	movs	r2, #255	@ 0xff
 80063ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	4b2a      	ldr	r3, [pc, #168]	@ (800648c <xPortStartScheduler+0xd4>)
 80063e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006490 <xPortStartScheduler+0xd8>)
 80063e8:	2207      	movs	r2, #7
 80063ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ec:	e009      	b.n	8006402 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80063ee:	4b28      	ldr	r3, [pc, #160]	@ (8006490 <xPortStartScheduler+0xd8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	4a26      	ldr	r2, [pc, #152]	@ (8006490 <xPortStartScheduler+0xd8>)
 80063f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640a:	2b80      	cmp	r3, #128	@ 0x80
 800640c:	d0ef      	beq.n	80063ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800640e:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <xPortStartScheduler+0xd8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f1c3 0307 	rsb	r3, r3, #7
 8006416:	2b04      	cmp	r3, #4
 8006418:	d00b      	beq.n	8006432 <xPortStartScheduler+0x7a>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	60bb      	str	r3, [r7, #8]
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	e7fd      	b.n	800642e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006432:	4b17      	ldr	r3, [pc, #92]	@ (8006490 <xPortStartScheduler+0xd8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	4a15      	ldr	r2, [pc, #84]	@ (8006490 <xPortStartScheduler+0xd8>)
 800643a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800643c:	4b14      	ldr	r3, [pc, #80]	@ (8006490 <xPortStartScheduler+0xd8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006444:	4a12      	ldr	r2, [pc, #72]	@ (8006490 <xPortStartScheduler+0xd8>)
 8006446:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	b2da      	uxtb	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006450:	4b10      	ldr	r3, [pc, #64]	@ (8006494 <xPortStartScheduler+0xdc>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a0f      	ldr	r2, [pc, #60]	@ (8006494 <xPortStartScheduler+0xdc>)
 8006456:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800645a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800645c:	4b0d      	ldr	r3, [pc, #52]	@ (8006494 <xPortStartScheduler+0xdc>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a0c      	ldr	r2, [pc, #48]	@ (8006494 <xPortStartScheduler+0xdc>)
 8006462:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006466:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006468:	f000 f8b8 	bl	80065dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800646c:	4b0a      	ldr	r3, [pc, #40]	@ (8006498 <xPortStartScheduler+0xe0>)
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006472:	f7ff ff91 	bl	8006398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006476:	f7ff faaf 	bl	80059d8 <vTaskSwitchContext>
	prvTaskExitError();
 800647a:	f7ff ff4d 	bl	8006318 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	e000e400 	.word	0xe000e400
 800648c:	20000a24 	.word	0x20000a24
 8006490:	20000a28 	.word	0x20000a28
 8006494:	e000ed20 	.word	0xe000ed20
 8006498:	20000014 	.word	0x20000014

0800649c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	607b      	str	r3, [r7, #4]
}
 80064b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064b6:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <vPortEnterCritical+0x58>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3301      	adds	r3, #1
 80064bc:	4a0d      	ldr	r2, [pc, #52]	@ (80064f4 <vPortEnterCritical+0x58>)
 80064be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064c0:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <vPortEnterCritical+0x58>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d110      	bne.n	80064ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064c8:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <vPortEnterCritical+0x5c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <vPortEnterCritical+0x4e>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	603b      	str	r3, [r7, #0]
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	e7fd      	b.n	80064e6 <vPortEnterCritical+0x4a>
	}
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr
 80064f4:	20000014 	.word	0x20000014
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006502:	4b12      	ldr	r3, [pc, #72]	@ (800654c <vPortExitCritical+0x50>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10b      	bne.n	8006522 <vPortExitCritical+0x26>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	607b      	str	r3, [r7, #4]
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	e7fd      	b.n	800651e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006522:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <vPortExitCritical+0x50>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3b01      	subs	r3, #1
 8006528:	4a08      	ldr	r2, [pc, #32]	@ (800654c <vPortExitCritical+0x50>)
 800652a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <vPortExitCritical+0x50>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <vPortExitCritical+0x44>
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800653e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000014 	.word	0x20000014

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006560:	6010      	str	r0, [r2, #0]
 8006562:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006566:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800656a:	f380 8811 	msr	BASEPRI, r0
 800656e:	f7ff fa33 	bl	80059d8 <vTaskSwitchContext>
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8811 	msr	BASEPRI, r0
 800657a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	6808      	ldr	r0, [r1, #0]
 8006582:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006586:	f380 8809 	msr	PSP, r0
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	4770      	bx	lr

08006590 <pxCurrentTCBConst>:
 8006590:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop

08006598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	607b      	str	r3, [r7, #4]
}
 80065b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065b2:	f7ff f957 	bl	8005864 <xTaskIncrementTick>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065bc:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <SysTick_Handler+0x40>)
 80065be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	2300      	movs	r3, #0
 80065c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f383 8811 	msr	BASEPRI, r3
}
 80065ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065e0:	4b0a      	ldr	r3, [pc, #40]	@ (800660c <vPortSetupTimerInterrupt+0x30>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006610 <vPortSetupTimerInterrupt+0x34>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065ec:	4b09      	ldr	r3, [pc, #36]	@ (8006614 <vPortSetupTimerInterrupt+0x38>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a09      	ldr	r2, [pc, #36]	@ (8006618 <vPortSetupTimerInterrupt+0x3c>)
 80065f2:	fba2 2303 	umull	r2, r3, r2, r3
 80065f6:	099b      	lsrs	r3, r3, #6
 80065f8:	4a08      	ldr	r2, [pc, #32]	@ (800661c <vPortSetupTimerInterrupt+0x40>)
 80065fa:	3b01      	subs	r3, #1
 80065fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065fe:	4b03      	ldr	r3, [pc, #12]	@ (800660c <vPortSetupTimerInterrupt+0x30>)
 8006600:	2207      	movs	r2, #7
 8006602:	601a      	str	r2, [r3, #0]
}
 8006604:	bf00      	nop
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr
 800660c:	e000e010 	.word	0xe000e010
 8006610:	e000e018 	.word	0xe000e018
 8006614:	20000008 	.word	0x20000008
 8006618:	10624dd3 	.word	0x10624dd3
 800661c:	e000e014 	.word	0xe000e014

08006620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	@ 0x28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800662c:	f7ff f86e 	bl	800570c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006630:	4b5c      	ldr	r3, [pc, #368]	@ (80067a4 <pvPortMalloc+0x184>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006638:	f000 f924 	bl	8006884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800663c:	4b5a      	ldr	r3, [pc, #360]	@ (80067a8 <pvPortMalloc+0x188>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4013      	ands	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8095 	bne.w	8006774 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006650:	2208      	movs	r2, #8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	2b00      	cmp	r3, #0
 8006660:	d015      	beq.n	800668e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f023 0307 	bic.w	r3, r3, #7
 8006668:	3308      	adds	r3, #8
 800666a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <pvPortMalloc+0x6e>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	617b      	str	r3, [r7, #20]
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	e7fd      	b.n	800668a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d06f      	beq.n	8006774 <pvPortMalloc+0x154>
 8006694:	4b45      	ldr	r3, [pc, #276]	@ (80067ac <pvPortMalloc+0x18c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d86a      	bhi.n	8006774 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800669e:	4b44      	ldr	r3, [pc, #272]	@ (80067b0 <pvPortMalloc+0x190>)
 80066a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066a2:	4b43      	ldr	r3, [pc, #268]	@ (80067b0 <pvPortMalloc+0x190>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066a8:	e004      	b.n	80066b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d903      	bls.n	80066c6 <pvPortMalloc+0xa6>
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f1      	bne.n	80066aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066c6:	4b37      	ldr	r3, [pc, #220]	@ (80067a4 <pvPortMalloc+0x184>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d051      	beq.n	8006774 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2208      	movs	r2, #8
 80066d6:	4413      	add	r3, r2
 80066d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	2308      	movs	r3, #8
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d920      	bls.n	8006734 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4413      	add	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <pvPortMalloc+0xfc>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	613b      	str	r3, [r7, #16]
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800672e:	69b8      	ldr	r0, [r7, #24]
 8006730:	f000 f90a 	bl	8006948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006734:	4b1d      	ldr	r3, [pc, #116]	@ (80067ac <pvPortMalloc+0x18c>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	4a1b      	ldr	r2, [pc, #108]	@ (80067ac <pvPortMalloc+0x18c>)
 8006740:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006742:	4b1a      	ldr	r3, [pc, #104]	@ (80067ac <pvPortMalloc+0x18c>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b1b      	ldr	r3, [pc, #108]	@ (80067b4 <pvPortMalloc+0x194>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d203      	bcs.n	8006756 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800674e:	4b17      	ldr	r3, [pc, #92]	@ (80067ac <pvPortMalloc+0x18c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a18      	ldr	r2, [pc, #96]	@ (80067b4 <pvPortMalloc+0x194>)
 8006754:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	4b13      	ldr	r3, [pc, #76]	@ (80067a8 <pvPortMalloc+0x188>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	431a      	orrs	r2, r3
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800676a:	4b13      	ldr	r3, [pc, #76]	@ (80067b8 <pvPortMalloc+0x198>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	4a11      	ldr	r2, [pc, #68]	@ (80067b8 <pvPortMalloc+0x198>)
 8006772:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006774:	f7fe ffd8 	bl	8005728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00b      	beq.n	800679a <pvPortMalloc+0x17a>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	60fb      	str	r3, [r7, #12]
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop
 8006798:	e7fd      	b.n	8006796 <pvPortMalloc+0x176>
	return pvReturn;
 800679a:	69fb      	ldr	r3, [r7, #28]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3728      	adds	r7, #40	@ 0x28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20001634 	.word	0x20001634
 80067a8:	20001648 	.word	0x20001648
 80067ac:	20001638 	.word	0x20001638
 80067b0:	2000162c 	.word	0x2000162c
 80067b4:	2000163c 	.word	0x2000163c
 80067b8:	20001640 	.word	0x20001640

080067bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d04f      	beq.n	800686e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067ce:	2308      	movs	r3, #8
 80067d0:	425b      	negs	r3, r3
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4413      	add	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	4b25      	ldr	r3, [pc, #148]	@ (8006878 <vPortFree+0xbc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <vPortFree+0x46>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	60fb      	str	r3, [r7, #12]
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	e7fd      	b.n	80067fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00b      	beq.n	8006822 <vPortFree+0x66>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60bb      	str	r3, [r7, #8]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	4b14      	ldr	r3, [pc, #80]	@ (8006878 <vPortFree+0xbc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01e      	beq.n	800686e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11a      	bne.n	800686e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <vPortFree+0xbc>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	43db      	mvns	r3, r3
 8006842:	401a      	ands	r2, r3
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006848:	f7fe ff60 	bl	800570c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	4b0a      	ldr	r3, [pc, #40]	@ (800687c <vPortFree+0xc0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4413      	add	r3, r2
 8006856:	4a09      	ldr	r2, [pc, #36]	@ (800687c <vPortFree+0xc0>)
 8006858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800685a:	6938      	ldr	r0, [r7, #16]
 800685c:	f000 f874 	bl	8006948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006860:	4b07      	ldr	r3, [pc, #28]	@ (8006880 <vPortFree+0xc4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	4a06      	ldr	r2, [pc, #24]	@ (8006880 <vPortFree+0xc4>)
 8006868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800686a:	f7fe ff5d 	bl	8005728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800686e:	bf00      	nop
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20001648 	.word	0x20001648
 800687c:	20001638 	.word	0x20001638
 8006880:	20001644 	.word	0x20001644

08006884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800688a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800688e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006890:	4b27      	ldr	r3, [pc, #156]	@ (8006930 <prvHeapInit+0xac>)
 8006892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00c      	beq.n	80068b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3307      	adds	r3, #7
 80068a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0307 	bic.w	r3, r3, #7
 80068aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006930 <prvHeapInit+0xac>)
 80068b4:	4413      	add	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006934 <prvHeapInit+0xb0>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006934 <prvHeapInit+0xb0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	4413      	add	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068d0:	2208      	movs	r2, #8
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0307 	bic.w	r3, r3, #7
 80068de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a15      	ldr	r2, [pc, #84]	@ (8006938 <prvHeapInit+0xb4>)
 80068e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068e6:	4b14      	ldr	r3, [pc, #80]	@ (8006938 <prvHeapInit+0xb4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2200      	movs	r2, #0
 80068ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ee:	4b12      	ldr	r3, [pc, #72]	@ (8006938 <prvHeapInit+0xb4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <prvHeapInit+0xb4>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4a0a      	ldr	r2, [pc, #40]	@ (800693c <prvHeapInit+0xb8>)
 8006912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	4a09      	ldr	r2, [pc, #36]	@ (8006940 <prvHeapInit+0xbc>)
 800691a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800691c:	4b09      	ldr	r3, [pc, #36]	@ (8006944 <prvHeapInit+0xc0>)
 800691e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20000a2c 	.word	0x20000a2c
 8006934:	2000162c 	.word	0x2000162c
 8006938:	20001634 	.word	0x20001634
 800693c:	2000163c 	.word	0x2000163c
 8006940:	20001638 	.word	0x20001638
 8006944:	20001648 	.word	0x20001648

08006948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006950:	4b27      	ldr	r3, [pc, #156]	@ (80069f0 <prvInsertBlockIntoFreeList+0xa8>)
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e002      	b.n	800695c <prvInsertBlockIntoFreeList+0x14>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	429a      	cmp	r2, r3
 8006964:	d8f7      	bhi.n	8006956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4413      	add	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	d108      	bne.n	800698a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	441a      	add	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d118      	bne.n	80069d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <prvInsertBlockIntoFreeList+0xac>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d00d      	beq.n	80069c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	441a      	add	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	e008      	b.n	80069d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069c6:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <prvInsertBlockIntoFreeList+0xac>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e003      	b.n	80069d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d002      	beq.n	80069e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr
 80069f0:	2000162c 	.word	0x2000162c
 80069f4:	20001634 	.word	0x20001634

080069f8 <siprintf>:
 80069f8:	b40e      	push	{r1, r2, r3}
 80069fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069fe:	b510      	push	{r4, lr}
 8006a00:	2400      	movs	r4, #0
 8006a02:	b09d      	sub	sp, #116	@ 0x74
 8006a04:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006a06:	9002      	str	r0, [sp, #8]
 8006a08:	9006      	str	r0, [sp, #24]
 8006a0a:	9107      	str	r1, [sp, #28]
 8006a0c:	9104      	str	r1, [sp, #16]
 8006a0e:	4809      	ldr	r0, [pc, #36]	@ (8006a34 <siprintf+0x3c>)
 8006a10:	4909      	ldr	r1, [pc, #36]	@ (8006a38 <siprintf+0x40>)
 8006a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a16:	9105      	str	r1, [sp, #20]
 8006a18:	6800      	ldr	r0, [r0, #0]
 8006a1a:	a902      	add	r1, sp, #8
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006a20:	f000 f9fe 	bl	8006e20 <_svfiprintf_r>
 8006a24:	9b02      	ldr	r3, [sp, #8]
 8006a26:	701c      	strb	r4, [r3, #0]
 8006a28:	b01d      	add	sp, #116	@ 0x74
 8006a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2e:	b003      	add	sp, #12
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000018 	.word	0x20000018
 8006a38:	ffff0208 	.word	0xffff0208

08006a3c <memset>:
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4402      	add	r2, r0
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d100      	bne.n	8006a46 <memset+0xa>
 8006a44:	4770      	bx	lr
 8006a46:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4a:	e7f9      	b.n	8006a40 <memset+0x4>

08006a4c <_reclaim_reent>:
 8006a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006b04 <_reclaim_reent+0xb8>)
 8006a4e:	b570      	push	{r4, r5, r6, lr}
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4604      	mov	r4, r0
 8006a54:	4283      	cmp	r3, r0
 8006a56:	d053      	beq.n	8006b00 <_reclaim_reent+0xb4>
 8006a58:	69c3      	ldr	r3, [r0, #28]
 8006a5a:	b31b      	cbz	r3, 8006aa4 <_reclaim_reent+0x58>
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	b163      	cbz	r3, 8006a7a <_reclaim_reent+0x2e>
 8006a60:	2500      	movs	r5, #0
 8006a62:	69e3      	ldr	r3, [r4, #28]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	5959      	ldr	r1, [r3, r5]
 8006a68:	b9b1      	cbnz	r1, 8006a98 <_reclaim_reent+0x4c>
 8006a6a:	3504      	adds	r5, #4
 8006a6c:	2d80      	cmp	r5, #128	@ 0x80
 8006a6e:	d1f8      	bne.n	8006a62 <_reclaim_reent+0x16>
 8006a70:	69e3      	ldr	r3, [r4, #28]
 8006a72:	4620      	mov	r0, r4
 8006a74:	68d9      	ldr	r1, [r3, #12]
 8006a76:	f000 f881 	bl	8006b7c <_free_r>
 8006a7a:	69e3      	ldr	r3, [r4, #28]
 8006a7c:	6819      	ldr	r1, [r3, #0]
 8006a7e:	b111      	cbz	r1, 8006a86 <_reclaim_reent+0x3a>
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 f87b 	bl	8006b7c <_free_r>
 8006a86:	69e3      	ldr	r3, [r4, #28]
 8006a88:	689d      	ldr	r5, [r3, #8]
 8006a8a:	b15d      	cbz	r5, 8006aa4 <_reclaim_reent+0x58>
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	4620      	mov	r0, r4
 8006a90:	682d      	ldr	r5, [r5, #0]
 8006a92:	f000 f873 	bl	8006b7c <_free_r>
 8006a96:	e7f8      	b.n	8006a8a <_reclaim_reent+0x3e>
 8006a98:	680e      	ldr	r6, [r1, #0]
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 f86e 	bl	8006b7c <_free_r>
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	e7e1      	b.n	8006a68 <_reclaim_reent+0x1c>
 8006aa4:	6961      	ldr	r1, [r4, #20]
 8006aa6:	b111      	cbz	r1, 8006aae <_reclaim_reent+0x62>
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 f867 	bl	8006b7c <_free_r>
 8006aae:	69e1      	ldr	r1, [r4, #28]
 8006ab0:	b111      	cbz	r1, 8006ab8 <_reclaim_reent+0x6c>
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 f862 	bl	8006b7c <_free_r>
 8006ab8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006aba:	b111      	cbz	r1, 8006ac2 <_reclaim_reent+0x76>
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 f85d 	bl	8006b7c <_free_r>
 8006ac2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ac4:	b111      	cbz	r1, 8006acc <_reclaim_reent+0x80>
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f858 	bl	8006b7c <_free_r>
 8006acc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006ace:	b111      	cbz	r1, 8006ad6 <_reclaim_reent+0x8a>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 f853 	bl	8006b7c <_free_r>
 8006ad6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ad8:	b111      	cbz	r1, 8006ae0 <_reclaim_reent+0x94>
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 f84e 	bl	8006b7c <_free_r>
 8006ae0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006ae2:	b111      	cbz	r1, 8006aea <_reclaim_reent+0x9e>
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 f849 	bl	8006b7c <_free_r>
 8006aea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006aec:	b111      	cbz	r1, 8006af4 <_reclaim_reent+0xa8>
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f844 	bl	8006b7c <_free_r>
 8006af4:	6a23      	ldr	r3, [r4, #32]
 8006af6:	b11b      	cbz	r3, 8006b00 <_reclaim_reent+0xb4>
 8006af8:	4620      	mov	r0, r4
 8006afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006afe:	4718      	bx	r3
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
 8006b02:	bf00      	nop
 8006b04:	20000018 	.word	0x20000018

08006b08 <__errno>:
 8006b08:	4b01      	ldr	r3, [pc, #4]	@ (8006b10 <__errno+0x8>)
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20000018 	.word	0x20000018

08006b14 <__libc_init_array>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	2600      	movs	r6, #0
 8006b18:	4d0c      	ldr	r5, [pc, #48]	@ (8006b4c <__libc_init_array+0x38>)
 8006b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8006b50 <__libc_init_array+0x3c>)
 8006b1c:	1b64      	subs	r4, r4, r5
 8006b1e:	10a4      	asrs	r4, r4, #2
 8006b20:	42a6      	cmp	r6, r4
 8006b22:	d109      	bne.n	8006b38 <__libc_init_array+0x24>
 8006b24:	f000 fc76 	bl	8007414 <_init>
 8006b28:	2600      	movs	r6, #0
 8006b2a:	4d0a      	ldr	r5, [pc, #40]	@ (8006b54 <__libc_init_array+0x40>)
 8006b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8006b58 <__libc_init_array+0x44>)
 8006b2e:	1b64      	subs	r4, r4, r5
 8006b30:	10a4      	asrs	r4, r4, #2
 8006b32:	42a6      	cmp	r6, r4
 8006b34:	d105      	bne.n	8006b42 <__libc_init_array+0x2e>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3c:	4798      	blx	r3
 8006b3e:	3601      	adds	r6, #1
 8006b40:	e7ee      	b.n	8006b20 <__libc_init_array+0xc>
 8006b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b46:	4798      	blx	r3
 8006b48:	3601      	adds	r6, #1
 8006b4a:	e7f2      	b.n	8006b32 <__libc_init_array+0x1e>
 8006b4c:	08008240 	.word	0x08008240
 8006b50:	08008240 	.word	0x08008240
 8006b54:	08008240 	.word	0x08008240
 8006b58:	08008244 	.word	0x08008244

08006b5c <__retarget_lock_acquire_recursive>:
 8006b5c:	4770      	bx	lr

08006b5e <__retarget_lock_release_recursive>:
 8006b5e:	4770      	bx	lr

08006b60 <memcpy>:
 8006b60:	440a      	add	r2, r1
 8006b62:	4291      	cmp	r1, r2
 8006b64:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	4770      	bx	lr
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b78:	d1f9      	bne.n	8006b6e <memcpy+0xe>
 8006b7a:	bd10      	pop	{r4, pc}

08006b7c <_free_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4605      	mov	r5, r0
 8006b80:	2900      	cmp	r1, #0
 8006b82:	d040      	beq.n	8006c06 <_free_r+0x8a>
 8006b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b88:	1f0c      	subs	r4, r1, #4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	bfb8      	it	lt
 8006b8e:	18e4      	addlt	r4, r4, r3
 8006b90:	f000 f8de 	bl	8006d50 <__malloc_lock>
 8006b94:	4a1c      	ldr	r2, [pc, #112]	@ (8006c08 <_free_r+0x8c>)
 8006b96:	6813      	ldr	r3, [r2, #0]
 8006b98:	b933      	cbnz	r3, 8006ba8 <_free_r+0x2c>
 8006b9a:	6063      	str	r3, [r4, #4]
 8006b9c:	6014      	str	r4, [r2, #0]
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ba4:	f000 b8da 	b.w	8006d5c <__malloc_unlock>
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	d908      	bls.n	8006bbe <_free_r+0x42>
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	1821      	adds	r1, r4, r0
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	bf01      	itttt	eq
 8006bb4:	6819      	ldreq	r1, [r3, #0]
 8006bb6:	685b      	ldreq	r3, [r3, #4]
 8006bb8:	1809      	addeq	r1, r1, r0
 8006bba:	6021      	streq	r1, [r4, #0]
 8006bbc:	e7ed      	b.n	8006b9a <_free_r+0x1e>
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	b10b      	cbz	r3, 8006bc8 <_free_r+0x4c>
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	d9fa      	bls.n	8006bbe <_free_r+0x42>
 8006bc8:	6811      	ldr	r1, [r2, #0]
 8006bca:	1850      	adds	r0, r2, r1
 8006bcc:	42a0      	cmp	r0, r4
 8006bce:	d10b      	bne.n	8006be8 <_free_r+0x6c>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	4401      	add	r1, r0
 8006bd4:	1850      	adds	r0, r2, r1
 8006bd6:	4283      	cmp	r3, r0
 8006bd8:	6011      	str	r1, [r2, #0]
 8006bda:	d1e0      	bne.n	8006b9e <_free_r+0x22>
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4408      	add	r0, r1
 8006be2:	6010      	str	r0, [r2, #0]
 8006be4:	6053      	str	r3, [r2, #4]
 8006be6:	e7da      	b.n	8006b9e <_free_r+0x22>
 8006be8:	d902      	bls.n	8006bf0 <_free_r+0x74>
 8006bea:	230c      	movs	r3, #12
 8006bec:	602b      	str	r3, [r5, #0]
 8006bee:	e7d6      	b.n	8006b9e <_free_r+0x22>
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	1821      	adds	r1, r4, r0
 8006bf4:	428b      	cmp	r3, r1
 8006bf6:	bf01      	itttt	eq
 8006bf8:	6819      	ldreq	r1, [r3, #0]
 8006bfa:	685b      	ldreq	r3, [r3, #4]
 8006bfc:	1809      	addeq	r1, r1, r0
 8006bfe:	6021      	streq	r1, [r4, #0]
 8006c00:	6063      	str	r3, [r4, #4]
 8006c02:	6054      	str	r4, [r2, #4]
 8006c04:	e7cb      	b.n	8006b9e <_free_r+0x22>
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20001790 	.word	0x20001790

08006c0c <sbrk_aligned>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c4c <sbrk_aligned+0x40>)
 8006c10:	460c      	mov	r4, r1
 8006c12:	6831      	ldr	r1, [r6, #0]
 8006c14:	4605      	mov	r5, r0
 8006c16:	b911      	cbnz	r1, 8006c1e <sbrk_aligned+0x12>
 8006c18:	f000 fba8 	bl	800736c <_sbrk_r>
 8006c1c:	6030      	str	r0, [r6, #0]
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 fba3 	bl	800736c <_sbrk_r>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d103      	bne.n	8006c32 <sbrk_aligned+0x26>
 8006c2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006c2e:	4620      	mov	r0, r4
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	1cc4      	adds	r4, r0, #3
 8006c34:	f024 0403 	bic.w	r4, r4, #3
 8006c38:	42a0      	cmp	r0, r4
 8006c3a:	d0f8      	beq.n	8006c2e <sbrk_aligned+0x22>
 8006c3c:	1a21      	subs	r1, r4, r0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 fb94 	bl	800736c <_sbrk_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d1f2      	bne.n	8006c2e <sbrk_aligned+0x22>
 8006c48:	e7ef      	b.n	8006c2a <sbrk_aligned+0x1e>
 8006c4a:	bf00      	nop
 8006c4c:	2000178c 	.word	0x2000178c

08006c50 <_malloc_r>:
 8006c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c54:	1ccd      	adds	r5, r1, #3
 8006c56:	f025 0503 	bic.w	r5, r5, #3
 8006c5a:	3508      	adds	r5, #8
 8006c5c:	2d0c      	cmp	r5, #12
 8006c5e:	bf38      	it	cc
 8006c60:	250c      	movcc	r5, #12
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	4606      	mov	r6, r0
 8006c66:	db01      	blt.n	8006c6c <_malloc_r+0x1c>
 8006c68:	42a9      	cmp	r1, r5
 8006c6a:	d904      	bls.n	8006c76 <_malloc_r+0x26>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	6033      	str	r3, [r6, #0]
 8006c70:	2000      	movs	r0, #0
 8006c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d4c <_malloc_r+0xfc>
 8006c7a:	f000 f869 	bl	8006d50 <__malloc_lock>
 8006c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c82:	461c      	mov	r4, r3
 8006c84:	bb44      	cbnz	r4, 8006cd8 <_malloc_r+0x88>
 8006c86:	4629      	mov	r1, r5
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff ffbf 	bl	8006c0c <sbrk_aligned>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	4604      	mov	r4, r0
 8006c92:	d158      	bne.n	8006d46 <_malloc_r+0xf6>
 8006c94:	f8d8 4000 	ldr.w	r4, [r8]
 8006c98:	4627      	mov	r7, r4
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	d143      	bne.n	8006d26 <_malloc_r+0xd6>
 8006c9e:	2c00      	cmp	r4, #0
 8006ca0:	d04b      	beq.n	8006d3a <_malloc_r+0xea>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	eb04 0903 	add.w	r9, r4, r3
 8006cac:	f000 fb5e 	bl	800736c <_sbrk_r>
 8006cb0:	4581      	cmp	r9, r0
 8006cb2:	d142      	bne.n	8006d3a <_malloc_r+0xea>
 8006cb4:	6821      	ldr	r1, [r4, #0]
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	1a6d      	subs	r5, r5, r1
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f7ff ffa6 	bl	8006c0c <sbrk_aligned>
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d03a      	beq.n	8006d3a <_malloc_r+0xea>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	442b      	add	r3, r5
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	f8d8 3000 	ldr.w	r3, [r8]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	bb62      	cbnz	r2, 8006d2c <_malloc_r+0xdc>
 8006cd2:	f8c8 7000 	str.w	r7, [r8]
 8006cd6:	e00f      	b.n	8006cf8 <_malloc_r+0xa8>
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	1b52      	subs	r2, r2, r5
 8006cdc:	d420      	bmi.n	8006d20 <_malloc_r+0xd0>
 8006cde:	2a0b      	cmp	r2, #11
 8006ce0:	d917      	bls.n	8006d12 <_malloc_r+0xc2>
 8006ce2:	1961      	adds	r1, r4, r5
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	6025      	str	r5, [r4, #0]
 8006ce8:	bf18      	it	ne
 8006cea:	6059      	strne	r1, [r3, #4]
 8006cec:	6863      	ldr	r3, [r4, #4]
 8006cee:	bf08      	it	eq
 8006cf0:	f8c8 1000 	streq.w	r1, [r8]
 8006cf4:	5162      	str	r2, [r4, r5]
 8006cf6:	604b      	str	r3, [r1, #4]
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 f82f 	bl	8006d5c <__malloc_unlock>
 8006cfe:	f104 000b 	add.w	r0, r4, #11
 8006d02:	1d23      	adds	r3, r4, #4
 8006d04:	f020 0007 	bic.w	r0, r0, #7
 8006d08:	1ac2      	subs	r2, r0, r3
 8006d0a:	bf1c      	itt	ne
 8006d0c:	1a1b      	subne	r3, r3, r0
 8006d0e:	50a3      	strne	r3, [r4, r2]
 8006d10:	e7af      	b.n	8006c72 <_malloc_r+0x22>
 8006d12:	6862      	ldr	r2, [r4, #4]
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	bf0c      	ite	eq
 8006d18:	f8c8 2000 	streq.w	r2, [r8]
 8006d1c:	605a      	strne	r2, [r3, #4]
 8006d1e:	e7eb      	b.n	8006cf8 <_malloc_r+0xa8>
 8006d20:	4623      	mov	r3, r4
 8006d22:	6864      	ldr	r4, [r4, #4]
 8006d24:	e7ae      	b.n	8006c84 <_malloc_r+0x34>
 8006d26:	463c      	mov	r4, r7
 8006d28:	687f      	ldr	r7, [r7, #4]
 8006d2a:	e7b6      	b.n	8006c9a <_malloc_r+0x4a>
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	42a3      	cmp	r3, r4
 8006d32:	d1fb      	bne.n	8006d2c <_malloc_r+0xdc>
 8006d34:	2300      	movs	r3, #0
 8006d36:	6053      	str	r3, [r2, #4]
 8006d38:	e7de      	b.n	8006cf8 <_malloc_r+0xa8>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	6033      	str	r3, [r6, #0]
 8006d40:	f000 f80c 	bl	8006d5c <__malloc_unlock>
 8006d44:	e794      	b.n	8006c70 <_malloc_r+0x20>
 8006d46:	6005      	str	r5, [r0, #0]
 8006d48:	e7d6      	b.n	8006cf8 <_malloc_r+0xa8>
 8006d4a:	bf00      	nop
 8006d4c:	20001790 	.word	0x20001790

08006d50 <__malloc_lock>:
 8006d50:	4801      	ldr	r0, [pc, #4]	@ (8006d58 <__malloc_lock+0x8>)
 8006d52:	f7ff bf03 	b.w	8006b5c <__retarget_lock_acquire_recursive>
 8006d56:	bf00      	nop
 8006d58:	20001788 	.word	0x20001788

08006d5c <__malloc_unlock>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	@ (8006d64 <__malloc_unlock+0x8>)
 8006d5e:	f7ff befe 	b.w	8006b5e <__retarget_lock_release_recursive>
 8006d62:	bf00      	nop
 8006d64:	20001788 	.word	0x20001788

08006d68 <__ssputs_r>:
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	461f      	mov	r7, r3
 8006d6e:	688e      	ldr	r6, [r1, #8]
 8006d70:	4682      	mov	sl, r0
 8006d72:	42be      	cmp	r6, r7
 8006d74:	460c      	mov	r4, r1
 8006d76:	4690      	mov	r8, r2
 8006d78:	680b      	ldr	r3, [r1, #0]
 8006d7a:	d82d      	bhi.n	8006dd8 <__ssputs_r+0x70>
 8006d7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d84:	d026      	beq.n	8006dd4 <__ssputs_r+0x6c>
 8006d86:	6965      	ldr	r5, [r4, #20]
 8006d88:	6909      	ldr	r1, [r1, #16]
 8006d8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d8e:	eba3 0901 	sub.w	r9, r3, r1
 8006d92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d96:	1c7b      	adds	r3, r7, #1
 8006d98:	444b      	add	r3, r9
 8006d9a:	106d      	asrs	r5, r5, #1
 8006d9c:	429d      	cmp	r5, r3
 8006d9e:	bf38      	it	cc
 8006da0:	461d      	movcc	r5, r3
 8006da2:	0553      	lsls	r3, r2, #21
 8006da4:	d527      	bpl.n	8006df6 <__ssputs_r+0x8e>
 8006da6:	4629      	mov	r1, r5
 8006da8:	f7ff ff52 	bl	8006c50 <_malloc_r>
 8006dac:	4606      	mov	r6, r0
 8006dae:	b360      	cbz	r0, 8006e0a <__ssputs_r+0xa2>
 8006db0:	464a      	mov	r2, r9
 8006db2:	6921      	ldr	r1, [r4, #16]
 8006db4:	f7ff fed4 	bl	8006b60 <memcpy>
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	6126      	str	r6, [r4, #16]
 8006dc6:	444e      	add	r6, r9
 8006dc8:	6026      	str	r6, [r4, #0]
 8006dca:	463e      	mov	r6, r7
 8006dcc:	6165      	str	r5, [r4, #20]
 8006dce:	eba5 0509 	sub.w	r5, r5, r9
 8006dd2:	60a5      	str	r5, [r4, #8]
 8006dd4:	42be      	cmp	r6, r7
 8006dd6:	d900      	bls.n	8006dda <__ssputs_r+0x72>
 8006dd8:	463e      	mov	r6, r7
 8006dda:	4632      	mov	r2, r6
 8006ddc:	4641      	mov	r1, r8
 8006dde:	6820      	ldr	r0, [r4, #0]
 8006de0:	f000 faaa 	bl	8007338 <memmove>
 8006de4:	2000      	movs	r0, #0
 8006de6:	68a3      	ldr	r3, [r4, #8]
 8006de8:	1b9b      	subs	r3, r3, r6
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	4433      	add	r3, r6
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df6:	462a      	mov	r2, r5
 8006df8:	f000 fad6 	bl	80073a8 <_realloc_r>
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d1e0      	bne.n	8006dc4 <__ssputs_r+0x5c>
 8006e02:	4650      	mov	r0, sl
 8006e04:	6921      	ldr	r1, [r4, #16]
 8006e06:	f7ff feb9 	bl	8006b7c <_free_r>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	f8ca 3000 	str.w	r3, [sl]
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e1a:	81a3      	strh	r3, [r4, #12]
 8006e1c:	e7e9      	b.n	8006df2 <__ssputs_r+0x8a>
	...

08006e20 <_svfiprintf_r>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	4698      	mov	r8, r3
 8006e26:	898b      	ldrh	r3, [r1, #12]
 8006e28:	4607      	mov	r7, r0
 8006e2a:	061b      	lsls	r3, r3, #24
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	4614      	mov	r4, r2
 8006e30:	b09d      	sub	sp, #116	@ 0x74
 8006e32:	d510      	bpl.n	8006e56 <_svfiprintf_r+0x36>
 8006e34:	690b      	ldr	r3, [r1, #16]
 8006e36:	b973      	cbnz	r3, 8006e56 <_svfiprintf_r+0x36>
 8006e38:	2140      	movs	r1, #64	@ 0x40
 8006e3a:	f7ff ff09 	bl	8006c50 <_malloc_r>
 8006e3e:	6028      	str	r0, [r5, #0]
 8006e40:	6128      	str	r0, [r5, #16]
 8006e42:	b930      	cbnz	r0, 8006e52 <_svfiprintf_r+0x32>
 8006e44:	230c      	movs	r3, #12
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e4c:	b01d      	add	sp, #116	@ 0x74
 8006e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e52:	2340      	movs	r3, #64	@ 0x40
 8006e54:	616b      	str	r3, [r5, #20]
 8006e56:	2300      	movs	r3, #0
 8006e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e5a:	2320      	movs	r3, #32
 8006e5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e60:	2330      	movs	r3, #48	@ 0x30
 8006e62:	f04f 0901 	mov.w	r9, #1
 8006e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007004 <_svfiprintf_r+0x1e4>
 8006e6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e72:	4623      	mov	r3, r4
 8006e74:	469a      	mov	sl, r3
 8006e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e7a:	b10a      	cbz	r2, 8006e80 <_svfiprintf_r+0x60>
 8006e7c:	2a25      	cmp	r2, #37	@ 0x25
 8006e7e:	d1f9      	bne.n	8006e74 <_svfiprintf_r+0x54>
 8006e80:	ebba 0b04 	subs.w	fp, sl, r4
 8006e84:	d00b      	beq.n	8006e9e <_svfiprintf_r+0x7e>
 8006e86:	465b      	mov	r3, fp
 8006e88:	4622      	mov	r2, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f7ff ff6b 	bl	8006d68 <__ssputs_r>
 8006e92:	3001      	adds	r0, #1
 8006e94:	f000 80a7 	beq.w	8006fe6 <_svfiprintf_r+0x1c6>
 8006e98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e9a:	445a      	add	r2, fp
 8006e9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 809f 	beq.w	8006fe6 <_svfiprintf_r+0x1c6>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eb2:	f10a 0a01 	add.w	sl, sl, #1
 8006eb6:	9304      	str	r3, [sp, #16]
 8006eb8:	9307      	str	r3, [sp, #28]
 8006eba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ebe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ec0:	4654      	mov	r4, sl
 8006ec2:	2205      	movs	r2, #5
 8006ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec8:	484e      	ldr	r0, [pc, #312]	@ (8007004 <_svfiprintf_r+0x1e4>)
 8006eca:	f000 fa5f 	bl	800738c <memchr>
 8006ece:	9a04      	ldr	r2, [sp, #16]
 8006ed0:	b9d8      	cbnz	r0, 8006f0a <_svfiprintf_r+0xea>
 8006ed2:	06d0      	lsls	r0, r2, #27
 8006ed4:	bf44      	itt	mi
 8006ed6:	2320      	movmi	r3, #32
 8006ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006edc:	0711      	lsls	r1, r2, #28
 8006ede:	bf44      	itt	mi
 8006ee0:	232b      	movmi	r3, #43	@ 0x2b
 8006ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eec:	d015      	beq.n	8006f1a <_svfiprintf_r+0xfa>
 8006eee:	4654      	mov	r4, sl
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	f04f 0c0a 	mov.w	ip, #10
 8006ef6:	9a07      	ldr	r2, [sp, #28]
 8006ef8:	4621      	mov	r1, r4
 8006efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006efe:	3b30      	subs	r3, #48	@ 0x30
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	d94b      	bls.n	8006f9c <_svfiprintf_r+0x17c>
 8006f04:	b1b0      	cbz	r0, 8006f34 <_svfiprintf_r+0x114>
 8006f06:	9207      	str	r2, [sp, #28]
 8006f08:	e014      	b.n	8006f34 <_svfiprintf_r+0x114>
 8006f0a:	eba0 0308 	sub.w	r3, r0, r8
 8006f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f12:	4313      	orrs	r3, r2
 8006f14:	46a2      	mov	sl, r4
 8006f16:	9304      	str	r3, [sp, #16]
 8006f18:	e7d2      	b.n	8006ec0 <_svfiprintf_r+0xa0>
 8006f1a:	9b03      	ldr	r3, [sp, #12]
 8006f1c:	1d19      	adds	r1, r3, #4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	9103      	str	r1, [sp, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bfbb      	ittet	lt
 8006f26:	425b      	neglt	r3, r3
 8006f28:	f042 0202 	orrlt.w	r2, r2, #2
 8006f2c:	9307      	strge	r3, [sp, #28]
 8006f2e:	9307      	strlt	r3, [sp, #28]
 8006f30:	bfb8      	it	lt
 8006f32:	9204      	strlt	r2, [sp, #16]
 8006f34:	7823      	ldrb	r3, [r4, #0]
 8006f36:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f38:	d10a      	bne.n	8006f50 <_svfiprintf_r+0x130>
 8006f3a:	7863      	ldrb	r3, [r4, #1]
 8006f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f3e:	d132      	bne.n	8006fa6 <_svfiprintf_r+0x186>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	3402      	adds	r4, #2
 8006f44:	1d1a      	adds	r2, r3, #4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	9203      	str	r2, [sp, #12]
 8006f4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007008 <_svfiprintf_r+0x1e8>
 8006f54:	2203      	movs	r2, #3
 8006f56:	4650      	mov	r0, sl
 8006f58:	7821      	ldrb	r1, [r4, #0]
 8006f5a:	f000 fa17 	bl	800738c <memchr>
 8006f5e:	b138      	cbz	r0, 8006f70 <_svfiprintf_r+0x150>
 8006f60:	2240      	movs	r2, #64	@ 0x40
 8006f62:	9b04      	ldr	r3, [sp, #16]
 8006f64:	eba0 000a 	sub.w	r0, r0, sl
 8006f68:	4082      	lsls	r2, r0
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	3401      	adds	r4, #1
 8006f6e:	9304      	str	r3, [sp, #16]
 8006f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f74:	2206      	movs	r2, #6
 8006f76:	4825      	ldr	r0, [pc, #148]	@ (800700c <_svfiprintf_r+0x1ec>)
 8006f78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f7c:	f000 fa06 	bl	800738c <memchr>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d036      	beq.n	8006ff2 <_svfiprintf_r+0x1d2>
 8006f84:	4b22      	ldr	r3, [pc, #136]	@ (8007010 <_svfiprintf_r+0x1f0>)
 8006f86:	bb1b      	cbnz	r3, 8006fd0 <_svfiprintf_r+0x1b0>
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	3307      	adds	r3, #7
 8006f8c:	f023 0307 	bic.w	r3, r3, #7
 8006f90:	3308      	adds	r3, #8
 8006f92:	9303      	str	r3, [sp, #12]
 8006f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f96:	4433      	add	r3, r6
 8006f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f9a:	e76a      	b.n	8006e72 <_svfiprintf_r+0x52>
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fa4:	e7a8      	b.n	8006ef8 <_svfiprintf_r+0xd8>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f04f 0c0a 	mov.w	ip, #10
 8006fac:	4619      	mov	r1, r3
 8006fae:	3401      	adds	r4, #1
 8006fb0:	9305      	str	r3, [sp, #20]
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb8:	3a30      	subs	r2, #48	@ 0x30
 8006fba:	2a09      	cmp	r2, #9
 8006fbc:	d903      	bls.n	8006fc6 <_svfiprintf_r+0x1a6>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0c6      	beq.n	8006f50 <_svfiprintf_r+0x130>
 8006fc2:	9105      	str	r1, [sp, #20]
 8006fc4:	e7c4      	b.n	8006f50 <_svfiprintf_r+0x130>
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	2301      	movs	r3, #1
 8006fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fce:	e7f0      	b.n	8006fb2 <_svfiprintf_r+0x192>
 8006fd0:	ab03      	add	r3, sp, #12
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007014 <_svfiprintf_r+0x1f4>)
 8006fda:	a904      	add	r1, sp, #16
 8006fdc:	f3af 8000 	nop.w
 8006fe0:	1c42      	adds	r2, r0, #1
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	d1d6      	bne.n	8006f94 <_svfiprintf_r+0x174>
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	065b      	lsls	r3, r3, #25
 8006fea:	f53f af2d 	bmi.w	8006e48 <_svfiprintf_r+0x28>
 8006fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ff0:	e72c      	b.n	8006e4c <_svfiprintf_r+0x2c>
 8006ff2:	ab03      	add	r3, sp, #12
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	462a      	mov	r2, r5
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <_svfiprintf_r+0x1f4>)
 8006ffc:	a904      	add	r1, sp, #16
 8006ffe:	f000 f87d 	bl	80070fc <_printf_i>
 8007002:	e7ed      	b.n	8006fe0 <_svfiprintf_r+0x1c0>
 8007004:	0800820a 	.word	0x0800820a
 8007008:	08008210 	.word	0x08008210
 800700c:	08008214 	.word	0x08008214
 8007010:	00000000 	.word	0x00000000
 8007014:	08006d69 	.word	0x08006d69

08007018 <_printf_common>:
 8007018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800701c:	4616      	mov	r6, r2
 800701e:	4698      	mov	r8, r3
 8007020:	688a      	ldr	r2, [r1, #8]
 8007022:	690b      	ldr	r3, [r1, #16]
 8007024:	4607      	mov	r7, r0
 8007026:	4293      	cmp	r3, r2
 8007028:	bfb8      	it	lt
 800702a:	4613      	movlt	r3, r2
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007032:	460c      	mov	r4, r1
 8007034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007038:	b10a      	cbz	r2, 800703e <_printf_common+0x26>
 800703a:	3301      	adds	r3, #1
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	0699      	lsls	r1, r3, #26
 8007042:	bf42      	ittt	mi
 8007044:	6833      	ldrmi	r3, [r6, #0]
 8007046:	3302      	addmi	r3, #2
 8007048:	6033      	strmi	r3, [r6, #0]
 800704a:	6825      	ldr	r5, [r4, #0]
 800704c:	f015 0506 	ands.w	r5, r5, #6
 8007050:	d106      	bne.n	8007060 <_printf_common+0x48>
 8007052:	f104 0a19 	add.w	sl, r4, #25
 8007056:	68e3      	ldr	r3, [r4, #12]
 8007058:	6832      	ldr	r2, [r6, #0]
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	42ab      	cmp	r3, r5
 800705e:	dc2b      	bgt.n	80070b8 <_printf_common+0xa0>
 8007060:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	3b00      	subs	r3, #0
 8007068:	bf18      	it	ne
 800706a:	2301      	movne	r3, #1
 800706c:	0692      	lsls	r2, r2, #26
 800706e:	d430      	bmi.n	80070d2 <_printf_common+0xba>
 8007070:	4641      	mov	r1, r8
 8007072:	4638      	mov	r0, r7
 8007074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007078:	47c8      	blx	r9
 800707a:	3001      	adds	r0, #1
 800707c:	d023      	beq.n	80070c6 <_printf_common+0xae>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	6922      	ldr	r2, [r4, #16]
 8007082:	f003 0306 	and.w	r3, r3, #6
 8007086:	2b04      	cmp	r3, #4
 8007088:	bf14      	ite	ne
 800708a:	2500      	movne	r5, #0
 800708c:	6833      	ldreq	r3, [r6, #0]
 800708e:	f04f 0600 	mov.w	r6, #0
 8007092:	bf08      	it	eq
 8007094:	68e5      	ldreq	r5, [r4, #12]
 8007096:	f104 041a 	add.w	r4, r4, #26
 800709a:	bf08      	it	eq
 800709c:	1aed      	subeq	r5, r5, r3
 800709e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80070a2:	bf08      	it	eq
 80070a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a8:	4293      	cmp	r3, r2
 80070aa:	bfc4      	itt	gt
 80070ac:	1a9b      	subgt	r3, r3, r2
 80070ae:	18ed      	addgt	r5, r5, r3
 80070b0:	42b5      	cmp	r5, r6
 80070b2:	d11a      	bne.n	80070ea <_printf_common+0xd2>
 80070b4:	2000      	movs	r0, #0
 80070b6:	e008      	b.n	80070ca <_printf_common+0xb2>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4652      	mov	r2, sl
 80070bc:	4641      	mov	r1, r8
 80070be:	4638      	mov	r0, r7
 80070c0:	47c8      	blx	r9
 80070c2:	3001      	adds	r0, #1
 80070c4:	d103      	bne.n	80070ce <_printf_common+0xb6>
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ce:	3501      	adds	r5, #1
 80070d0:	e7c1      	b.n	8007056 <_printf_common+0x3e>
 80070d2:	2030      	movs	r0, #48	@ 0x30
 80070d4:	18e1      	adds	r1, r4, r3
 80070d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070e0:	4422      	add	r2, r4
 80070e2:	3302      	adds	r3, #2
 80070e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070e8:	e7c2      	b.n	8007070 <_printf_common+0x58>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4622      	mov	r2, r4
 80070ee:	4641      	mov	r1, r8
 80070f0:	4638      	mov	r0, r7
 80070f2:	47c8      	blx	r9
 80070f4:	3001      	adds	r0, #1
 80070f6:	d0e6      	beq.n	80070c6 <_printf_common+0xae>
 80070f8:	3601      	adds	r6, #1
 80070fa:	e7d9      	b.n	80070b0 <_printf_common+0x98>

080070fc <_printf_i>:
 80070fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	7e0f      	ldrb	r7, [r1, #24]
 8007102:	4691      	mov	r9, r2
 8007104:	2f78      	cmp	r7, #120	@ 0x78
 8007106:	4680      	mov	r8, r0
 8007108:	460c      	mov	r4, r1
 800710a:	469a      	mov	sl, r3
 800710c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800710e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007112:	d807      	bhi.n	8007124 <_printf_i+0x28>
 8007114:	2f62      	cmp	r7, #98	@ 0x62
 8007116:	d80a      	bhi.n	800712e <_printf_i+0x32>
 8007118:	2f00      	cmp	r7, #0
 800711a:	f000 80d1 	beq.w	80072c0 <_printf_i+0x1c4>
 800711e:	2f58      	cmp	r7, #88	@ 0x58
 8007120:	f000 80b8 	beq.w	8007294 <_printf_i+0x198>
 8007124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007128:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800712c:	e03a      	b.n	80071a4 <_printf_i+0xa8>
 800712e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007132:	2b15      	cmp	r3, #21
 8007134:	d8f6      	bhi.n	8007124 <_printf_i+0x28>
 8007136:	a101      	add	r1, pc, #4	@ (adr r1, 800713c <_printf_i+0x40>)
 8007138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800713c:	08007195 	.word	0x08007195
 8007140:	080071a9 	.word	0x080071a9
 8007144:	08007125 	.word	0x08007125
 8007148:	08007125 	.word	0x08007125
 800714c:	08007125 	.word	0x08007125
 8007150:	08007125 	.word	0x08007125
 8007154:	080071a9 	.word	0x080071a9
 8007158:	08007125 	.word	0x08007125
 800715c:	08007125 	.word	0x08007125
 8007160:	08007125 	.word	0x08007125
 8007164:	08007125 	.word	0x08007125
 8007168:	080072a7 	.word	0x080072a7
 800716c:	080071d3 	.word	0x080071d3
 8007170:	08007261 	.word	0x08007261
 8007174:	08007125 	.word	0x08007125
 8007178:	08007125 	.word	0x08007125
 800717c:	080072c9 	.word	0x080072c9
 8007180:	08007125 	.word	0x08007125
 8007184:	080071d3 	.word	0x080071d3
 8007188:	08007125 	.word	0x08007125
 800718c:	08007125 	.word	0x08007125
 8007190:	08007269 	.word	0x08007269
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6032      	str	r2, [r6, #0]
 800719c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071a4:	2301      	movs	r3, #1
 80071a6:	e09c      	b.n	80072e2 <_printf_i+0x1e6>
 80071a8:	6833      	ldr	r3, [r6, #0]
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	1d19      	adds	r1, r3, #4
 80071ae:	6031      	str	r1, [r6, #0]
 80071b0:	0606      	lsls	r6, r0, #24
 80071b2:	d501      	bpl.n	80071b8 <_printf_i+0xbc>
 80071b4:	681d      	ldr	r5, [r3, #0]
 80071b6:	e003      	b.n	80071c0 <_printf_i+0xc4>
 80071b8:	0645      	lsls	r5, r0, #25
 80071ba:	d5fb      	bpl.n	80071b4 <_printf_i+0xb8>
 80071bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	da03      	bge.n	80071cc <_printf_i+0xd0>
 80071c4:	232d      	movs	r3, #45	@ 0x2d
 80071c6:	426d      	negs	r5, r5
 80071c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071cc:	230a      	movs	r3, #10
 80071ce:	4858      	ldr	r0, [pc, #352]	@ (8007330 <_printf_i+0x234>)
 80071d0:	e011      	b.n	80071f6 <_printf_i+0xfa>
 80071d2:	6821      	ldr	r1, [r4, #0]
 80071d4:	6833      	ldr	r3, [r6, #0]
 80071d6:	0608      	lsls	r0, r1, #24
 80071d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071dc:	d402      	bmi.n	80071e4 <_printf_i+0xe8>
 80071de:	0649      	lsls	r1, r1, #25
 80071e0:	bf48      	it	mi
 80071e2:	b2ad      	uxthmi	r5, r5
 80071e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071e6:	6033      	str	r3, [r6, #0]
 80071e8:	bf14      	ite	ne
 80071ea:	230a      	movne	r3, #10
 80071ec:	2308      	moveq	r3, #8
 80071ee:	4850      	ldr	r0, [pc, #320]	@ (8007330 <_printf_i+0x234>)
 80071f0:	2100      	movs	r1, #0
 80071f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071f6:	6866      	ldr	r6, [r4, #4]
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	60a6      	str	r6, [r4, #8]
 80071fc:	db05      	blt.n	800720a <_printf_i+0x10e>
 80071fe:	6821      	ldr	r1, [r4, #0]
 8007200:	432e      	orrs	r6, r5
 8007202:	f021 0104 	bic.w	r1, r1, #4
 8007206:	6021      	str	r1, [r4, #0]
 8007208:	d04b      	beq.n	80072a2 <_printf_i+0x1a6>
 800720a:	4616      	mov	r6, r2
 800720c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007210:	fb03 5711 	mls	r7, r3, r1, r5
 8007214:	5dc7      	ldrb	r7, [r0, r7]
 8007216:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800721a:	462f      	mov	r7, r5
 800721c:	42bb      	cmp	r3, r7
 800721e:	460d      	mov	r5, r1
 8007220:	d9f4      	bls.n	800720c <_printf_i+0x110>
 8007222:	2b08      	cmp	r3, #8
 8007224:	d10b      	bne.n	800723e <_printf_i+0x142>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	07df      	lsls	r7, r3, #31
 800722a:	d508      	bpl.n	800723e <_printf_i+0x142>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	6861      	ldr	r1, [r4, #4]
 8007230:	4299      	cmp	r1, r3
 8007232:	bfde      	ittt	le
 8007234:	2330      	movle	r3, #48	@ 0x30
 8007236:	f806 3c01 	strble.w	r3, [r6, #-1]
 800723a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800723e:	1b92      	subs	r2, r2, r6
 8007240:	6122      	str	r2, [r4, #16]
 8007242:	464b      	mov	r3, r9
 8007244:	4621      	mov	r1, r4
 8007246:	4640      	mov	r0, r8
 8007248:	f8cd a000 	str.w	sl, [sp]
 800724c:	aa03      	add	r2, sp, #12
 800724e:	f7ff fee3 	bl	8007018 <_printf_common>
 8007252:	3001      	adds	r0, #1
 8007254:	d14a      	bne.n	80072ec <_printf_i+0x1f0>
 8007256:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800725a:	b004      	add	sp, #16
 800725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	f043 0320 	orr.w	r3, r3, #32
 8007266:	6023      	str	r3, [r4, #0]
 8007268:	2778      	movs	r7, #120	@ 0x78
 800726a:	4832      	ldr	r0, [pc, #200]	@ (8007334 <_printf_i+0x238>)
 800726c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	061f      	lsls	r7, r3, #24
 8007276:	f851 5b04 	ldr.w	r5, [r1], #4
 800727a:	d402      	bmi.n	8007282 <_printf_i+0x186>
 800727c:	065f      	lsls	r7, r3, #25
 800727e:	bf48      	it	mi
 8007280:	b2ad      	uxthmi	r5, r5
 8007282:	6031      	str	r1, [r6, #0]
 8007284:	07d9      	lsls	r1, r3, #31
 8007286:	bf44      	itt	mi
 8007288:	f043 0320 	orrmi.w	r3, r3, #32
 800728c:	6023      	strmi	r3, [r4, #0]
 800728e:	b11d      	cbz	r5, 8007298 <_printf_i+0x19c>
 8007290:	2310      	movs	r3, #16
 8007292:	e7ad      	b.n	80071f0 <_printf_i+0xf4>
 8007294:	4826      	ldr	r0, [pc, #152]	@ (8007330 <_printf_i+0x234>)
 8007296:	e7e9      	b.n	800726c <_printf_i+0x170>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	f023 0320 	bic.w	r3, r3, #32
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	e7f6      	b.n	8007290 <_printf_i+0x194>
 80072a2:	4616      	mov	r6, r2
 80072a4:	e7bd      	b.n	8007222 <_printf_i+0x126>
 80072a6:	6833      	ldr	r3, [r6, #0]
 80072a8:	6825      	ldr	r5, [r4, #0]
 80072aa:	1d18      	adds	r0, r3, #4
 80072ac:	6961      	ldr	r1, [r4, #20]
 80072ae:	6030      	str	r0, [r6, #0]
 80072b0:	062e      	lsls	r6, r5, #24
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	d501      	bpl.n	80072ba <_printf_i+0x1be>
 80072b6:	6019      	str	r1, [r3, #0]
 80072b8:	e002      	b.n	80072c0 <_printf_i+0x1c4>
 80072ba:	0668      	lsls	r0, r5, #25
 80072bc:	d5fb      	bpl.n	80072b6 <_printf_i+0x1ba>
 80072be:	8019      	strh	r1, [r3, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	4616      	mov	r6, r2
 80072c4:	6123      	str	r3, [r4, #16]
 80072c6:	e7bc      	b.n	8007242 <_printf_i+0x146>
 80072c8:	6833      	ldr	r3, [r6, #0]
 80072ca:	2100      	movs	r1, #0
 80072cc:	1d1a      	adds	r2, r3, #4
 80072ce:	6032      	str	r2, [r6, #0]
 80072d0:	681e      	ldr	r6, [r3, #0]
 80072d2:	6862      	ldr	r2, [r4, #4]
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 f859 	bl	800738c <memchr>
 80072da:	b108      	cbz	r0, 80072e0 <_printf_i+0x1e4>
 80072dc:	1b80      	subs	r0, r0, r6
 80072de:	6060      	str	r0, [r4, #4]
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	6123      	str	r3, [r4, #16]
 80072e4:	2300      	movs	r3, #0
 80072e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ea:	e7aa      	b.n	8007242 <_printf_i+0x146>
 80072ec:	4632      	mov	r2, r6
 80072ee:	4649      	mov	r1, r9
 80072f0:	4640      	mov	r0, r8
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	47d0      	blx	sl
 80072f6:	3001      	adds	r0, #1
 80072f8:	d0ad      	beq.n	8007256 <_printf_i+0x15a>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	079b      	lsls	r3, r3, #30
 80072fe:	d413      	bmi.n	8007328 <_printf_i+0x22c>
 8007300:	68e0      	ldr	r0, [r4, #12]
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	4298      	cmp	r0, r3
 8007306:	bfb8      	it	lt
 8007308:	4618      	movlt	r0, r3
 800730a:	e7a6      	b.n	800725a <_printf_i+0x15e>
 800730c:	2301      	movs	r3, #1
 800730e:	4632      	mov	r2, r6
 8007310:	4649      	mov	r1, r9
 8007312:	4640      	mov	r0, r8
 8007314:	47d0      	blx	sl
 8007316:	3001      	adds	r0, #1
 8007318:	d09d      	beq.n	8007256 <_printf_i+0x15a>
 800731a:	3501      	adds	r5, #1
 800731c:	68e3      	ldr	r3, [r4, #12]
 800731e:	9903      	ldr	r1, [sp, #12]
 8007320:	1a5b      	subs	r3, r3, r1
 8007322:	42ab      	cmp	r3, r5
 8007324:	dcf2      	bgt.n	800730c <_printf_i+0x210>
 8007326:	e7eb      	b.n	8007300 <_printf_i+0x204>
 8007328:	2500      	movs	r5, #0
 800732a:	f104 0619 	add.w	r6, r4, #25
 800732e:	e7f5      	b.n	800731c <_printf_i+0x220>
 8007330:	0800821b 	.word	0x0800821b
 8007334:	0800822c 	.word	0x0800822c

08007338 <memmove>:
 8007338:	4288      	cmp	r0, r1
 800733a:	b510      	push	{r4, lr}
 800733c:	eb01 0402 	add.w	r4, r1, r2
 8007340:	d902      	bls.n	8007348 <memmove+0x10>
 8007342:	4284      	cmp	r4, r0
 8007344:	4623      	mov	r3, r4
 8007346:	d807      	bhi.n	8007358 <memmove+0x20>
 8007348:	1e43      	subs	r3, r0, #1
 800734a:	42a1      	cmp	r1, r4
 800734c:	d008      	beq.n	8007360 <memmove+0x28>
 800734e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007356:	e7f8      	b.n	800734a <memmove+0x12>
 8007358:	4601      	mov	r1, r0
 800735a:	4402      	add	r2, r0
 800735c:	428a      	cmp	r2, r1
 800735e:	d100      	bne.n	8007362 <memmove+0x2a>
 8007360:	bd10      	pop	{r4, pc}
 8007362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800736a:	e7f7      	b.n	800735c <memmove+0x24>

0800736c <_sbrk_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	2300      	movs	r3, #0
 8007370:	4d05      	ldr	r5, [pc, #20]	@ (8007388 <_sbrk_r+0x1c>)
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7f9 ff90 	bl	800129c <_sbrk>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_sbrk_r+0x1a>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_sbrk_r+0x1a>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20001784 	.word	0x20001784

0800738c <memchr>:
 800738c:	4603      	mov	r3, r0
 800738e:	b510      	push	{r4, lr}
 8007390:	b2c9      	uxtb	r1, r1
 8007392:	4402      	add	r2, r0
 8007394:	4293      	cmp	r3, r2
 8007396:	4618      	mov	r0, r3
 8007398:	d101      	bne.n	800739e <memchr+0x12>
 800739a:	2000      	movs	r0, #0
 800739c:	e003      	b.n	80073a6 <memchr+0x1a>
 800739e:	7804      	ldrb	r4, [r0, #0]
 80073a0:	3301      	adds	r3, #1
 80073a2:	428c      	cmp	r4, r1
 80073a4:	d1f6      	bne.n	8007394 <memchr+0x8>
 80073a6:	bd10      	pop	{r4, pc}

080073a8 <_realloc_r>:
 80073a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ac:	4607      	mov	r7, r0
 80073ae:	4614      	mov	r4, r2
 80073b0:	460d      	mov	r5, r1
 80073b2:	b921      	cbnz	r1, 80073be <_realloc_r+0x16>
 80073b4:	4611      	mov	r1, r2
 80073b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ba:	f7ff bc49 	b.w	8006c50 <_malloc_r>
 80073be:	b92a      	cbnz	r2, 80073cc <_realloc_r+0x24>
 80073c0:	f7ff fbdc 	bl	8006b7c <_free_r>
 80073c4:	4625      	mov	r5, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073cc:	f000 f81a 	bl	8007404 <_malloc_usable_size_r>
 80073d0:	4284      	cmp	r4, r0
 80073d2:	4606      	mov	r6, r0
 80073d4:	d802      	bhi.n	80073dc <_realloc_r+0x34>
 80073d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073da:	d8f4      	bhi.n	80073c6 <_realloc_r+0x1e>
 80073dc:	4621      	mov	r1, r4
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff fc36 	bl	8006c50 <_malloc_r>
 80073e4:	4680      	mov	r8, r0
 80073e6:	b908      	cbnz	r0, 80073ec <_realloc_r+0x44>
 80073e8:	4645      	mov	r5, r8
 80073ea:	e7ec      	b.n	80073c6 <_realloc_r+0x1e>
 80073ec:	42b4      	cmp	r4, r6
 80073ee:	4622      	mov	r2, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	bf28      	it	cs
 80073f4:	4632      	movcs	r2, r6
 80073f6:	f7ff fbb3 	bl	8006b60 <memcpy>
 80073fa:	4629      	mov	r1, r5
 80073fc:	4638      	mov	r0, r7
 80073fe:	f7ff fbbd 	bl	8006b7c <_free_r>
 8007402:	e7f1      	b.n	80073e8 <_realloc_r+0x40>

08007404 <_malloc_usable_size_r>:
 8007404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007408:	1f18      	subs	r0, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	bfbc      	itt	lt
 800740e:	580b      	ldrlt	r3, [r1, r0]
 8007410:	18c0      	addlt	r0, r0, r3
 8007412:	4770      	bx	lr

08007414 <_init>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	bf00      	nop
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr

08007420 <_fini>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr
