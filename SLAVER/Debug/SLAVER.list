
SLAVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800696c  0800696c  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800696c  0800696c  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800696c  0800696c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800696c  0800696c  0000796c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006970  08006970  00007970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006974  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  20000068  080069dc  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001354  080069dc  00008354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fab9  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e1  00000000  00000000  00017b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001a530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b68  00000000  00000000  0001b408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019278  00000000  00000000  0001bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbab  00000000  00000000  000351e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927e6  00000000  00000000  00044d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000d75bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000db890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080068e8 	.word	0x080068e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080068e8 	.word	0x080068e8

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__gedf2>:
 8000630:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000634:	e006      	b.n	8000644 <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__ledf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	e002      	b.n	8000644 <__cmpdf2+0x4>
 800063e:	bf00      	nop

08000640 <__cmpdf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800064c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000650:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000654:	bf18      	it	ne
 8000656:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800065a:	d01b      	beq.n	8000694 <__cmpdf2+0x54>
 800065c:	b001      	add	sp, #4
 800065e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000662:	bf0c      	ite	eq
 8000664:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000668:	ea91 0f03 	teqne	r1, r3
 800066c:	bf02      	ittt	eq
 800066e:	ea90 0f02 	teqeq	r0, r2
 8000672:	2000      	moveq	r0, #0
 8000674:	4770      	bxeq	lr
 8000676:	f110 0f00 	cmn.w	r0, #0
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf58      	it	pl
 8000680:	4299      	cmppl	r1, r3
 8000682:	bf08      	it	eq
 8000684:	4290      	cmpeq	r0, r2
 8000686:	bf2c      	ite	cs
 8000688:	17d8      	asrcs	r0, r3, #31
 800068a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800068e:	f040 0001 	orr.w	r0, r0, #1
 8000692:	4770      	bx	lr
 8000694:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800069c:	d102      	bne.n	80006a4 <__cmpdf2+0x64>
 800069e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006a2:	d107      	bne.n	80006b4 <__cmpdf2+0x74>
 80006a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006ac:	d1d6      	bne.n	800065c <__cmpdf2+0x1c>
 80006ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006b2:	d0d3      	beq.n	800065c <__cmpdf2+0x1c>
 80006b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__aeabi_cdrcmple>:
 80006bc:	4684      	mov	ip, r0
 80006be:	4610      	mov	r0, r2
 80006c0:	4662      	mov	r2, ip
 80006c2:	468c      	mov	ip, r1
 80006c4:	4619      	mov	r1, r3
 80006c6:	4663      	mov	r3, ip
 80006c8:	e000      	b.n	80006cc <__aeabi_cdcmpeq>
 80006ca:	bf00      	nop

080006cc <__aeabi_cdcmpeq>:
 80006cc:	b501      	push	{r0, lr}
 80006ce:	f7ff ffb7 	bl	8000640 <__cmpdf2>
 80006d2:	2800      	cmp	r0, #0
 80006d4:	bf48      	it	mi
 80006d6:	f110 0f00 	cmnmi.w	r0, #0
 80006da:	bd01      	pop	{r0, pc}

080006dc <__aeabi_dcmpeq>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff fff4 	bl	80006cc <__aeabi_cdcmpeq>
 80006e4:	bf0c      	ite	eq
 80006e6:	2001      	moveq	r0, #1
 80006e8:	2000      	movne	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmplt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffea 	bl	80006cc <__aeabi_cdcmpeq>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_dcmple>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffe0 	bl	80006cc <__aeabi_cdcmpeq>
 800070c:	bf94      	ite	ls
 800070e:	2001      	movls	r0, #1
 8000710:	2000      	movhi	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_dcmpge>:
 8000718:	f84d ed08 	str.w	lr, [sp, #-8]!
 800071c:	f7ff ffce 	bl	80006bc <__aeabi_cdrcmple>
 8000720:	bf94      	ite	ls
 8000722:	2001      	movls	r0, #1
 8000724:	2000      	movhi	r0, #0
 8000726:	f85d fb08 	ldr.w	pc, [sp], #8
 800072a:	bf00      	nop

0800072c <__aeabi_dcmpgt>:
 800072c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000730:	f7ff ffc4 	bl	80006bc <__aeabi_cdrcmple>
 8000734:	bf34      	ite	cc
 8000736:	2001      	movcc	r0, #1
 8000738:	2000      	movcs	r0, #0
 800073a:	f85d fb08 	ldr.w	pc, [sp], #8
 800073e:	bf00      	nop

08000740 <__aeabi_frsub>:
 8000740:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000744:	e002      	b.n	800074c <__addsf3>
 8000746:	bf00      	nop

08000748 <__aeabi_fsub>:
 8000748:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800074c <__addsf3>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	bf1f      	itttt	ne
 8000750:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000754:	ea92 0f03 	teqne	r2, r3
 8000758:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800075c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000760:	d06a      	beq.n	8000838 <__addsf3+0xec>
 8000762:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000766:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800076a:	bfc1      	itttt	gt
 800076c:	18d2      	addgt	r2, r2, r3
 800076e:	4041      	eorgt	r1, r0
 8000770:	4048      	eorgt	r0, r1
 8000772:	4041      	eorgt	r1, r0
 8000774:	bfb8      	it	lt
 8000776:	425b      	neglt	r3, r3
 8000778:	2b19      	cmp	r3, #25
 800077a:	bf88      	it	hi
 800077c:	4770      	bxhi	lr
 800077e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000782:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000786:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800078a:	bf18      	it	ne
 800078c:	4240      	negne	r0, r0
 800078e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000792:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000796:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800079a:	bf18      	it	ne
 800079c:	4249      	negne	r1, r1
 800079e:	ea92 0f03 	teq	r2, r3
 80007a2:	d03f      	beq.n	8000824 <__addsf3+0xd8>
 80007a4:	f1a2 0201 	sub.w	r2, r2, #1
 80007a8:	fa41 fc03 	asr.w	ip, r1, r3
 80007ac:	eb10 000c 	adds.w	r0, r0, ip
 80007b0:	f1c3 0320 	rsb	r3, r3, #32
 80007b4:	fa01 f103 	lsl.w	r1, r1, r3
 80007b8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007bc:	d502      	bpl.n	80007c4 <__addsf3+0x78>
 80007be:	4249      	negs	r1, r1
 80007c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007c4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007c8:	d313      	bcc.n	80007f2 <__addsf3+0xa6>
 80007ca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007ce:	d306      	bcc.n	80007de <__addsf3+0x92>
 80007d0:	0840      	lsrs	r0, r0, #1
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	f102 0201 	add.w	r2, r2, #1
 80007da:	2afe      	cmp	r2, #254	@ 0xfe
 80007dc:	d251      	bcs.n	8000882 <__addsf3+0x136>
 80007de:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e6:	bf08      	it	eq
 80007e8:	f020 0001 	biceq.w	r0, r0, #1
 80007ec:	ea40 0003 	orr.w	r0, r0, r3
 80007f0:	4770      	bx	lr
 80007f2:	0049      	lsls	r1, r1, #1
 80007f4:	eb40 0000 	adc.w	r0, r0, r0
 80007f8:	3a01      	subs	r2, #1
 80007fa:	bf28      	it	cs
 80007fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000800:	d2ed      	bcs.n	80007de <__addsf3+0x92>
 8000802:	fab0 fc80 	clz	ip, r0
 8000806:	f1ac 0c08 	sub.w	ip, ip, #8
 800080a:	ebb2 020c 	subs.w	r2, r2, ip
 800080e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000812:	bfaa      	itet	ge
 8000814:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000818:	4252      	neglt	r2, r2
 800081a:	4318      	orrge	r0, r3
 800081c:	bfbc      	itt	lt
 800081e:	40d0      	lsrlt	r0, r2
 8000820:	4318      	orrlt	r0, r3
 8000822:	4770      	bx	lr
 8000824:	f092 0f00 	teq	r2, #0
 8000828:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800082c:	bf06      	itte	eq
 800082e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000832:	3201      	addeq	r2, #1
 8000834:	3b01      	subne	r3, #1
 8000836:	e7b5      	b.n	80007a4 <__addsf3+0x58>
 8000838:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800083c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000840:	bf18      	it	ne
 8000842:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000846:	d021      	beq.n	800088c <__addsf3+0x140>
 8000848:	ea92 0f03 	teq	r2, r3
 800084c:	d004      	beq.n	8000858 <__addsf3+0x10c>
 800084e:	f092 0f00 	teq	r2, #0
 8000852:	bf08      	it	eq
 8000854:	4608      	moveq	r0, r1
 8000856:	4770      	bx	lr
 8000858:	ea90 0f01 	teq	r0, r1
 800085c:	bf1c      	itt	ne
 800085e:	2000      	movne	r0, #0
 8000860:	4770      	bxne	lr
 8000862:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000866:	d104      	bne.n	8000872 <__addsf3+0x126>
 8000868:	0040      	lsls	r0, r0, #1
 800086a:	bf28      	it	cs
 800086c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000870:	4770      	bx	lr
 8000872:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000876:	bf3c      	itt	cc
 8000878:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800087c:	4770      	bxcc	lr
 800087e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000882:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000886:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800088a:	4770      	bx	lr
 800088c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000890:	bf16      	itet	ne
 8000892:	4608      	movne	r0, r1
 8000894:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000898:	4601      	movne	r1, r0
 800089a:	0242      	lsls	r2, r0, #9
 800089c:	bf06      	itte	eq
 800089e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008a2:	ea90 0f01 	teqeq	r0, r1
 80008a6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008aa:	4770      	bx	lr

080008ac <__aeabi_ui2f>:
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	e004      	b.n	80008bc <__aeabi_i2f+0x8>
 80008b2:	bf00      	nop

080008b4 <__aeabi_i2f>:
 80008b4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008b8:	bf48      	it	mi
 80008ba:	4240      	negmi	r0, r0
 80008bc:	ea5f 0c00 	movs.w	ip, r0
 80008c0:	bf08      	it	eq
 80008c2:	4770      	bxeq	lr
 80008c4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008c8:	4601      	mov	r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	e01c      	b.n	800090a <__aeabi_l2f+0x2a>

080008d0 <__aeabi_ul2f>:
 80008d0:	ea50 0201 	orrs.w	r2, r0, r1
 80008d4:	bf08      	it	eq
 80008d6:	4770      	bxeq	lr
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e00a      	b.n	80008f4 <__aeabi_l2f+0x14>
 80008de:	bf00      	nop

080008e0 <__aeabi_l2f>:
 80008e0:	ea50 0201 	orrs.w	r2, r0, r1
 80008e4:	bf08      	it	eq
 80008e6:	4770      	bxeq	lr
 80008e8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008ec:	d502      	bpl.n	80008f4 <__aeabi_l2f+0x14>
 80008ee:	4240      	negs	r0, r0
 80008f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008f4:	ea5f 0c01 	movs.w	ip, r1
 80008f8:	bf02      	ittt	eq
 80008fa:	4684      	moveq	ip, r0
 80008fc:	4601      	moveq	r1, r0
 80008fe:	2000      	moveq	r0, #0
 8000900:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000904:	bf08      	it	eq
 8000906:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800090a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800090e:	fabc f28c 	clz	r2, ip
 8000912:	3a08      	subs	r2, #8
 8000914:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000918:	db10      	blt.n	800093c <__aeabi_l2f+0x5c>
 800091a:	fa01 fc02 	lsl.w	ip, r1, r2
 800091e:	4463      	add	r3, ip
 8000920:	fa00 fc02 	lsl.w	ip, r0, r2
 8000924:	f1c2 0220 	rsb	r2, r2, #32
 8000928:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800092c:	fa20 f202 	lsr.w	r2, r0, r2
 8000930:	eb43 0002 	adc.w	r0, r3, r2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f102 0220 	add.w	r2, r2, #32
 8000940:	fa01 fc02 	lsl.w	ip, r1, r2
 8000944:	f1c2 0220 	rsb	r2, r2, #32
 8000948:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800094c:	fa21 f202 	lsr.w	r2, r1, r2
 8000950:	eb43 0002 	adc.w	r0, r3, r2
 8000954:	bf08      	it	eq
 8000956:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800095a:	4770      	bx	lr

0800095c <__gesf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000960:	e006      	b.n	8000970 <__cmpsf2+0x4>
 8000962:	bf00      	nop

08000964 <__lesf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpsf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpsf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000978:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800097c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000980:	bf18      	it	ne
 8000982:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000986:	d011      	beq.n	80009ac <__cmpsf2+0x40>
 8000988:	b001      	add	sp, #4
 800098a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800098e:	bf18      	it	ne
 8000990:	ea90 0f01 	teqne	r0, r1
 8000994:	bf58      	it	pl
 8000996:	ebb2 0003 	subspl.w	r0, r2, r3
 800099a:	bf88      	it	hi
 800099c:	17c8      	asrhi	r0, r1, #31
 800099e:	bf38      	it	cc
 80009a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009a4:	bf18      	it	ne
 80009a6:	f040 0001 	orrne.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b0:	d102      	bne.n	80009b8 <__cmpsf2+0x4c>
 80009b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009b6:	d105      	bne.n	80009c4 <__cmpsf2+0x58>
 80009b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009bc:	d1e4      	bne.n	8000988 <__cmpsf2+0x1c>
 80009be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009c2:	d0e1      	beq.n	8000988 <__cmpsf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cfrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4608      	mov	r0, r1
 80009d0:	4661      	mov	r1, ip
 80009d2:	e7ff      	b.n	80009d4 <__aeabi_cfcmpeq>

080009d4 <__aeabi_cfcmpeq>:
 80009d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80009d6:	f7ff ffc9 	bl	800096c <__cmpsf2>
 80009da:	2800      	cmp	r0, #0
 80009dc:	bf48      	it	mi
 80009de:	f110 0f00 	cmnmi.w	r0, #0
 80009e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009e4 <__aeabi_fcmpeq>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff fff4 	bl	80009d4 <__aeabi_cfcmpeq>
 80009ec:	bf0c      	ite	eq
 80009ee:	2001      	moveq	r0, #1
 80009f0:	2000      	movne	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_fcmplt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffea 	bl	80009d4 <__aeabi_cfcmpeq>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fcmple>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffe0 	bl	80009d4 <__aeabi_cfcmpeq>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_fcmpge>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffd2 	bl	80009cc <__aeabi_cfrcmple>
 8000a28:	bf94      	ite	ls
 8000a2a:	2001      	movls	r0, #1
 8000a2c:	2000      	movhi	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_fcmpgt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffc8 	bl	80009cc <__aeabi_cfrcmple>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_f2uiz>:
 8000a48:	0042      	lsls	r2, r0, #1
 8000a4a:	d20e      	bcs.n	8000a6a <__aeabi_f2uiz+0x22>
 8000a4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a50:	d30b      	bcc.n	8000a6a <__aeabi_f2uiz+0x22>
 8000a52:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a5a:	d409      	bmi.n	8000a70 <__aeabi_f2uiz+0x28>
 8000a5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a64:	fa23 f002 	lsr.w	r0, r3, r2
 8000a68:	4770      	bx	lr
 8000a6a:	f04f 0000 	mov.w	r0, #0
 8000a6e:	4770      	bx	lr
 8000a70:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a74:	d101      	bne.n	8000a7a <__aeabi_f2uiz+0x32>
 8000a76:	0242      	lsls	r2, r0, #9
 8000a78:	d102      	bne.n	8000a80 <__aeabi_f2uiz+0x38>
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <vApplicationGetIdleTaskMemory+0x28>)
 8000a98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2280      	movs	r2, #128	@ 0x80
 8000aa4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000084 	.word	0x20000084
 8000ab4:	20000124 	.word	0x20000124

08000ab8 <HAL_CAN_RxFifo1MsgPendingCallback>:
void Task_SendMessage (void *argument);
void Task_ReceiveMessage (void *argument);

int lastDataRx;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f001 f915 	bl	8001cfa <HAL_CAN_GetRxMessage>
	if(lastDataRx != RxData[7]){
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8000ad2:	79db      	ldrb	r3, [r3, #7]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d017      	beq.n	8000b0e <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		lastDataRx = RxData[7];
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8000ae0:	79db      	ldrb	r3, [r3, #7]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8000ae6:	601a      	str	r2, [r3, #0]
		xQueueSendFromISR(ControlSignalQueue, &lastDataRx, &xHigherPriorityTaskWoken);
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	f107 020c 	add.w	r2, r7, #12
 8000af0:	2300      	movs	r3, #0
 8000af2:	490b      	ldr	r1, [pc, #44]	@ (8000b20 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8000af4:	f003 fe44 	bl	8004780 <xQueueGenericSendFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d007      	beq.n	8000b0e <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8000b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	f3bf 8f4f 	dsb	sy
 8000b0a:	f3bf 8f6f 	isb	sy
	}
//	signal_control = RxData[7];

}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000043c 	.word	0x2000043c
 8000b1c:	20000420 	.word	0x20000420
 8000b20:	20000470 	.word	0x20000470
 8000b24:	20000458 	.word	0x20000458
 8000b28:	e000ed04 	.word	0xe000ed04

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f000 fdd9 	bl	80016e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b36:	f000 f8c1 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f000 fa05 	bl	8000f48 <MX_GPIO_Init>
  MX_CAN_Init();
 8000b3e:	f000 f903 	bl	8000d48 <MX_CAN_Init>
  MX_TIM2_Init();
 8000b42:	f000 f937 	bl	8000db4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b46:	f000 f9ab 	bl	8000ea0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Init CAN
  HAL_CAN_Start(&hcan);
 8000b4a:	4845      	ldr	r0, [pc, #276]	@ (8000c60 <main+0x134>)
 8000b4c:	f000 ffc2 	bl	8001ad4 <HAL_CAN_Start>
  // Configure the filter
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b50:	4b44      	ldr	r3, [pc, #272]	@ (8000c64 <main+0x138>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000b56:	4b43      	ldr	r3, [pc, #268]	@ (8000c64 <main+0x138>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b5c:	4b41      	ldr	r3, [pc, #260]	@ (8000c64 <main+0x138>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6A5<<5;
 8000b62:	4b40      	ldr	r3, [pc, #256]	@ (8000c64 <main+0x138>)
 8000b64:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 8000b68:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c64 <main+0x138>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000b70:	4b3c      	ldr	r3, [pc, #240]	@ (8000c64 <main+0x138>)
 8000b72:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000b76:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000b78:	4b3a      	ldr	r3, [pc, #232]	@ (8000c64 <main+0x138>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b7e:	4b39      	ldr	r3, [pc, #228]	@ (8000c64 <main+0x138>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000b84:	4937      	ldr	r1, [pc, #220]	@ (8000c64 <main+0x138>)
 8000b86:	4836      	ldr	r0, [pc, #216]	@ (8000c60 <main+0x134>)
 8000b88:	f000 fedb 	bl	8001942 <HAL_CAN_ConfigFilter>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000b8c:	2110      	movs	r1, #16
 8000b8e:	4834      	ldr	r0, [pc, #208]	@ (8000c60 <main+0x134>)
 8000b90:	f001 f9d4 	bl	8001f3c <HAL_CAN_ActivateNotification>
  // config tx
  TxHeader.DLC = 8;  // data length
 8000b94:	4b34      	ldr	r3, [pc, #208]	@ (8000c68 <main+0x13c>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000b9a:	4b33      	ldr	r3, [pc, #204]	@ (8000c68 <main+0x13c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000ba0:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <main+0x13c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x6F5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 8000ba6:	4b30      	ldr	r3, [pc, #192]	@ (8000c68 <main+0x13c>)
 8000ba8:	f240 62f5 	movw	r2, #1781	@ 0x6f5
 8000bac:	601a      	str	r2, [r3, #0]

  // Motor
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PA1 TIM2 CH2
 8000bae:	2104      	movs	r1, #4
 8000bb0:	482e      	ldr	r0, [pc, #184]	@ (8000c6c <main+0x140>)
 8000bb2:	f002 fbad 	bl	8003310 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2180      	movs	r1, #128	@ 0x80
 8000bba:	482d      	ldr	r0, [pc, #180]	@ (8000c70 <main+0x144>)
 8000bbc:	f001 fe6a 	bl	8002894 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	482a      	ldr	r0, [pc, #168]	@ (8000c70 <main+0x144>)
 8000bc6:	f001 fe65 	bl	8002894 <HAL_GPIO_WritePin>

  // Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bca:	213c      	movs	r1, #60	@ 0x3c
 8000bcc:	4829      	ldr	r0, [pc, #164]	@ (8000c74 <main+0x148>)
 8000bce:	f002 fce3 	bl	8003598 <HAL_TIM_Encoder_Start>


  // create task
  CurrentAngleMutex = xSemaphoreCreateMutex();
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f003 fcba 	bl	800454c <xQueueCreateMutex>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a27      	ldr	r2, [pc, #156]	@ (8000c78 <main+0x14c>)
 8000bdc:	6013      	str	r3, [r2, #0]

  ControlSignalQueue = xQueueCreate(5, sizeof (int));
 8000bde:	2200      	movs	r2, #0
 8000be0:	2104      	movs	r1, #4
 8000be2:	2005      	movs	r0, #5
 8000be4:	f003 fc3e 	bl	8004464 <xQueueGenericCreate>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4a24      	ldr	r2, [pc, #144]	@ (8000c7c <main+0x150>)
 8000bec:	6013      	str	r3, [r2, #0]

  BaseType_t result = xTaskCreate(Task_ReceiveMessage, "ReceiveMessage", 128, NULL, 4, &ReceiveMessage_Handler);
 8000bee:	4b24      	ldr	r3, [pc, #144]	@ (8000c80 <main+0x154>)
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	4922      	ldr	r1, [pc, #136]	@ (8000c84 <main+0x158>)
 8000bfc:	4822      	ldr	r0, [pc, #136]	@ (8000c88 <main+0x15c>)
 8000bfe:	f004 f9d6 	bl	8004fae <xTaskCreate>
 8000c02:	6078      	str	r0, [r7, #4]
  xTaskCreate(Task_ReadEncoder, "EncoderRead", 128, NULL, 3, &ReadEncoder_Handler);
 8000c04:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <main+0x160>)
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	2303      	movs	r3, #3
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	491f      	ldr	r1, [pc, #124]	@ (8000c90 <main+0x164>)
 8000c12:	4820      	ldr	r0, [pc, #128]	@ (8000c94 <main+0x168>)
 8000c14:	f004 f9cb 	bl	8004fae <xTaskCreate>
  xTaskCreate(Task_SendMessage, "SendMessage", 128, NULL, 2, &SendMessage_Handler);
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <main+0x16c>)
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2300      	movs	r3, #0
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	491d      	ldr	r1, [pc, #116]	@ (8000c9c <main+0x170>)
 8000c26:	481e      	ldr	r0, [pc, #120]	@ (8000ca0 <main+0x174>)
 8000c28:	f004 f9c1 	bl	8004fae <xTaskCreate>
  xTaskCreate(Task_ControlMotor, "ControlMotor", 128, NULL, 1, &ControlMotor_Handler);
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <main+0x178>)
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	2301      	movs	r3, #1
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2300      	movs	r3, #0
 8000c36:	2280      	movs	r2, #128	@ 0x80
 8000c38:	491b      	ldr	r1, [pc, #108]	@ (8000ca8 <main+0x17c>)
 8000c3a:	481c      	ldr	r0, [pc, #112]	@ (8000cac <main+0x180>)
 8000c3c:	f004 f9b7 	bl	8004fae <xTaskCreate>
  if (result != pdPASS) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d002      	beq.n	8000c4c <main+0x120>
      debug = 99999; // Task failed to create
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <main+0x184>)
 8000c48:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb4 <main+0x188>)
 8000c4a:	601a      	str	r2, [r3, #0]
  }
  freeHeap = xPortGetFreeHeapSize();
 8000c4c:	f005 fc9a 	bl	8006584 <xPortGetFreeHeapSize>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <main+0x18c>)
 8000c54:	6013      	str	r3, [r2, #0]


  vTaskStartScheduler();
 8000c56:	f004 fb2f 	bl	80052b8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000c5a:	bf00      	nop
 8000c5c:	e7fd      	b.n	8000c5a <main+0x12e>
 8000c5e:	bf00      	nop
 8000c60:	20000324 	.word	0x20000324
 8000c64:	200003f8 	.word	0x200003f8
 8000c68:	200003dc 	.word	0x200003dc
 8000c6c:	2000034c 	.word	0x2000034c
 8000c70:	40010800 	.word	0x40010800
 8000c74:	20000394 	.word	0x20000394
 8000c78:	2000045c 	.word	0x2000045c
 8000c7c:	20000458 	.word	0x20000458
 8000c80:	2000046c 	.word	0x2000046c
 8000c84:	08006900 	.word	0x08006900
 8000c88:	0800125d 	.word	0x0800125d
 8000c8c:	20000464 	.word	0x20000464
 8000c90:	08006910 	.word	0x08006910
 8000c94:	080011a9 	.word	0x080011a9
 8000c98:	20000468 	.word	0x20000468
 8000c9c:	0800691c 	.word	0x0800691c
 8000ca0:	080011f1 	.word	0x080011f1
 8000ca4:	20000460 	.word	0x20000460
 8000ca8:	08006928 	.word	0x08006928
 8000cac:	08000fdd 	.word	0x08000fdd
 8000cb0:	20000448 	.word	0x20000448
 8000cb4:	0001869f 	.word	0x0001869f
 8000cb8:	20000450 	.word	0x20000450

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	@ 0x40
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	2228      	movs	r2, #40	@ 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f005 fd1e 	bl	800670c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ce6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cfa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0318 	add.w	r3, r7, #24
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fddd 	bl	80028c4 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d10:	f000 fada 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 f84a 	bl	8002dc8 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d3a:	f000 fac5 	bl	80012c8 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3740      	adds	r7, #64	@ 0x40
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d4e:	4a18      	ldr	r2, [pc, #96]	@ (8000db0 <MX_CAN_Init+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d54:	2248      	movs	r2, #72	@ 0x48
 8000d56:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d6a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_CAN_Init+0x64>)
 8000d98:	f000 fcd8 	bl	800174c <HAL_CAN_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000da2:	f000 fa91 	bl	80012c8 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000324 	.word	0x20000324
 8000db0:	40006400 	.word	0x40006400

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	@ 0x38
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	f107 0320 	add.w	r3, r7, #32
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000de6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000dec:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000dee:	227f      	movs	r2, #127	@ 0x7f
 8000df0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000df8:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000dfa:	f240 2271 	movw	r2, #625	@ 0x271
 8000dfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e00:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e0c:	4823      	ldr	r0, [pc, #140]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000e0e:	f002 f985 	bl	800311c <HAL_TIM_Base_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e18:	f000 fa56 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e26:	4619      	mov	r1, r3
 8000e28:	481c      	ldr	r0, [pc, #112]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000e2a:	f002 fdf5 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e34:	f000 fa48 	bl	80012c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e38:	4818      	ldr	r0, [pc, #96]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000e3a:	f002 fa11 	bl	8003260 <HAL_TIM_PWM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e44:	f000 fa40 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	4619      	mov	r1, r3
 8000e56:	4811      	ldr	r0, [pc, #68]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000e58:	f003 f97a 	bl	8004150 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e62:	f000 fa31 	bl	80012c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e66:	2360      	movs	r3, #96	@ 0x60
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000e7e:	f002 fd09 	bl	8003894 <HAL_TIM_PWM_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e88:	f000 fa1e 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e8c:	4803      	ldr	r0, [pc, #12]	@ (8000e9c <MX_TIM2_Init+0xe8>)
 8000e8e:	f000 fb2f 	bl	80014f0 <HAL_TIM_MspPostInit>

}
 8000e92:	bf00      	nop
 8000e94:	3738      	adds	r7, #56	@ 0x38
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000034c 	.word	0x2000034c

08000ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	@ 0x30
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2224      	movs	r2, #36	@ 0x24
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 fc2c 	bl	800670c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ebc:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <MX_TIM3_Init+0xa0>)
 8000ebe:	4a21      	ldr	r2, [pc, #132]	@ (8000f44 <MX_TIM3_Init+0xa4>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <MX_TIM3_Init+0xa0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <MX_TIM3_Init+0xa0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <MX_TIM3_Init+0xa0>)
 8000ed0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000ed4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_TIM3_Init+0xa0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <MX_TIM3_Init+0xa0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eea:	2301      	movs	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000efa:	2301      	movs	r3, #1
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <MX_TIM3_Init+0xa0>)
 8000f0e:	f002 faa1 	bl	8003454 <HAL_TIM_Encoder_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f18:	f000 f9d6 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <MX_TIM3_Init+0xa0>)
 8000f2a:	f003 f911 	bl	8004150 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f34:	f000 f9c8 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3730      	adds	r7, #48	@ 0x30
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000394 	.word	0x20000394
 8000f44:	40000400 	.word	0x40000400

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f62:	f043 0320 	orr.w	r3, r3, #32
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a16      	ldr	r2, [pc, #88]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a10      	ldr	r2, [pc, #64]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_GPIO_Init+0x8c>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	21a0      	movs	r1, #160	@ 0xa0
 8000fa8:	480b      	ldr	r0, [pc, #44]	@ (8000fd8 <MX_GPIO_Init+0x90>)
 8000faa:	f001 fc73 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fae:	23a0      	movs	r3, #160	@ 0xa0
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <MX_GPIO_Init+0x90>)
 8000fc6:	f001 fae1 	bl	800258c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010800 	.word	0x40010800

08000fdc <Task_ControlMotor>:

/* USER CODE BEGIN 4 */
//define task
void Task_ControlMotor(void *argument){
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fde:	b08d      	sub	sp, #52	@ 0x34
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	int desire_angle;
	int error;
	float derivative;
	float output;

	float Kp = 15.0f;
 8000fe4:	4b67      	ldr	r3, [pc, #412]	@ (8001184 <Task_ControlMotor+0x1a8>)
 8000fe6:	623b      	str	r3, [r7, #32]
	float Ki = 0.5f;
 8000fe8:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000fec:	61fb      	str	r3, [r7, #28]
	float Kd = 0.5f;
 8000fee:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000ff2:	61bb      	str	r3, [r7, #24]

	float integral = 0.0f;
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
	float previous_error = 0.0f;
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24

	while(1){
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 8001000:	4b61      	ldr	r3, [pc, #388]	@ (8001188 <Task_ControlMotor+0x1ac>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001008:	4618      	mov	r0, r3
 800100a:	f003 fd39 	bl	8004a80 <xQueueSemaphoreTake>

		// Tính góc mong muốn và góc hiện tại
		desire_angle = signal_control/2;
 800100e:	4b5f      	ldr	r3, [pc, #380]	@ (800118c <Task_ControlMotor+0x1b0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	085b      	lsrs	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	617b      	str	r3, [r7, #20]
		current_angle = position/80;
 8001018:	4b5d      	ldr	r3, [pc, #372]	@ (8001190 <Task_ControlMotor+0x1b4>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4a5d      	ldr	r2, [pc, #372]	@ (8001194 <Task_ControlMotor+0x1b8>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	099b      	lsrs	r3, r3, #6
 8001024:	b29b      	uxth	r3, r3
 8001026:	613b      	str	r3, [r7, #16]
		error = desire_angle - current_angle;
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	60fb      	str	r3, [r7, #12]

		// Tính các thành phần PID
		integral += error;
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff fc3f 	bl	80008b4 <__aeabi_i2f>
 8001036:	4603      	mov	r3, r0
 8001038:	4619      	mov	r1, r3
 800103a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800103c:	f7ff fb86 	bl	800074c <__addsf3>
 8001040:	4603      	mov	r3, r0
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
		derivative = error - previous_error;
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fc35 	bl	80008b4 <__aeabi_i2f>
 800104a:	4603      	mov	r3, r0
 800104c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fb7a 	bl	8000748 <__aeabi_fsub>
 8001054:	4603      	mov	r3, r0
 8001056:	60bb      	str	r3, [r7, #8]
		output = Kp * error + Ki * integral + Kd * derivative;
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff fc2b 	bl	80008b4 <__aeabi_i2f>
 800105e:	4603      	mov	r3, r0
 8001060:	6a39      	ldr	r1, [r7, #32]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f874 	bl	8000150 <__aeabi_fmul>
 8001068:	4603      	mov	r3, r0
 800106a:	461e      	mov	r6, r3
 800106c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800106e:	69f8      	ldr	r0, [r7, #28]
 8001070:	f7ff f86e 	bl	8000150 <__aeabi_fmul>
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	4630      	mov	r0, r6
 800107a:	f7ff fb67 	bl	800074c <__addsf3>
 800107e:	4603      	mov	r3, r0
 8001080:	461e      	mov	r6, r3
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	69b8      	ldr	r0, [r7, #24]
 8001086:	f7ff f863 	bl	8000150 <__aeabi_fmul>
 800108a:	4603      	mov	r3, r0
 800108c:	4619      	mov	r1, r3
 800108e:	4630      	mov	r0, r6
 8001090:	f7ff fb5c 	bl	800074c <__addsf3>
 8001094:	4603      	mov	r3, r0
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
		previous_error = error;
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff fc0b 	bl	80008b4 <__aeabi_i2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24

		// Giới hạn output thành giá trị PWM hợp lệ (0–100%)
		if (output > MAX_SPEED) output = 625;
 80010a2:	493d      	ldr	r1, [pc, #244]	@ (8001198 <Task_ControlMotor+0x1bc>)
 80010a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010a6:	f7ff fcc5 	bl	8000a34 <__aeabi_fcmpgt>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <Task_ControlMotor+0xd8>
 80010b0:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <Task_ControlMotor+0x1bc>)
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (output < -MAX_SPEED) output = -625;
 80010b4:	4939      	ldr	r1, [pc, #228]	@ (800119c <Task_ControlMotor+0x1c0>)
 80010b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010b8:	f7ff fc9e 	bl	80009f8 <__aeabi_fcmplt>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <Task_ControlMotor+0xea>
 80010c2:	4b36      	ldr	r3, [pc, #216]	@ (800119c <Task_ControlMotor+0x1c0>)
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (fabs(error) > 0) {
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff fa48 	bl	800055c <__aeabi_i2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4614      	mov	r4, r2
 80010d2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	4620      	mov	r0, r4
 80010e0:	4629      	mov	r1, r5
 80010e2:	f7ff fb23 	bl	800072c <__aeabi_dcmpgt>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02e      	beq.n	800114a <Task_ControlMotor+0x16e>
			if (output > 0) {
 80010ec:	f04f 0100 	mov.w	r1, #0
 80010f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010f2:	f7ff fc9f 	bl	8000a34 <__aeabi_fcmpgt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00a      	beq.n	8001112 <Task_ControlMotor+0x136>
				// Quay phải
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // IN1 = 0
 80010fc:	2200      	movs	r2, #0
 80010fe:	2120      	movs	r1, #32
 8001100:	4827      	ldr	r0, [pc, #156]	@ (80011a0 <Task_ControlMotor+0x1c4>)
 8001102:	f001 fbc7 	bl	8002894 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN2 = 1
 8001106:	2201      	movs	r2, #1
 8001108:	2180      	movs	r1, #128	@ 0x80
 800110a:	4825      	ldr	r0, [pc, #148]	@ (80011a0 <Task_ControlMotor+0x1c4>)
 800110c:	f001 fbc2 	bl	8002894 <HAL_GPIO_WritePin>
 8001110:	e00d      	b.n	800112e <Task_ControlMotor+0x152>
			}
			else {
				// Quay trái
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2120      	movs	r1, #32
 8001116:	4822      	ldr	r0, [pc, #136]	@ (80011a0 <Task_ControlMotor+0x1c4>)
 8001118:	f001 fbbc 	bl	8002894 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2180      	movs	r1, #128	@ 0x80
 8001120:	481f      	ldr	r0, [pc, #124]	@ (80011a0 <Task_ControlMotor+0x1c4>)
 8001122:	f001 fbb7 	bl	8002894 <HAL_GPIO_WritePin>
				output = -output; // PWM phải luôn dương
 8001126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001128:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			// inverter output (using 6N137)
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint32_t)(MAX_SPEED - output));
 800112e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001130:	4819      	ldr	r0, [pc, #100]	@ (8001198 <Task_ControlMotor+0x1bc>)
 8001132:	f7ff fb09 	bl	8000748 <__aeabi_fsub>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <Task_ControlMotor+0x1c8>)
 800113c:	681e      	ldr	r6, [r3, #0]
 800113e:	4610      	mov	r0, r2
 8001140:	f7ff fc82 	bl	8000a48 <__aeabi_f2uiz>
 8001144:	4603      	mov	r3, r0
 8001146:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001148:	e011      	b.n	800116e <Task_ControlMotor+0x192>
		}
		else {
			// Dừng motor khi đủ chính xác
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2120      	movs	r1, #32
 800114e:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <Task_ControlMotor+0x1c4>)
 8001150:	f001 fba0 	bl	8002894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2180      	movs	r1, #128	@ 0x80
 8001158:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <Task_ControlMotor+0x1c4>)
 800115a:	f001 fb9b 	bl	8002894 <HAL_GPIO_WritePin>
			// inverter output (using 6N137)
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MAX_SPEED);
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <Task_ControlMotor+0x1c8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f240 2271 	movw	r2, #625	@ 0x271
 8001166:	639a      	str	r2, [r3, #56]	@ 0x38
			integral = 0.0f;
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		xSemaphoreGive(CurrentAngleMutex);
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <Task_ControlMotor+0x1ac>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	f003 fa00 	bl	800457c <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(50)); // PID hoạt động mỗi 50ms
 800117c:	2032      	movs	r0, #50	@ 0x32
 800117e:	f004 f865 	bl	800524c <vTaskDelay>
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 8001182:	e73d      	b.n	8001000 <Task_ControlMotor+0x24>
 8001184:	41700000 	.word	0x41700000
 8001188:	2000045c 	.word	0x2000045c
 800118c:	20000444 	.word	0x20000444
 8001190:	20000454 	.word	0x20000454
 8001194:	cccccccd 	.word	0xcccccccd
 8001198:	441c4000 	.word	0x441c4000
 800119c:	c41c4000 	.word	0xc41c4000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	2000034c 	.word	0x2000034c

080011a8 <Task_ReadEncoder>:
	}
}


void Task_ReadEncoder(void *argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <Task_ReadEncoder+0x3c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fc61 	bl	8004a80 <xQueueSemaphoreTake>
    	position = __HAL_TIM_GET_COUNTER(&htim3);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <Task_ReadEncoder+0x40>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <Task_ReadEncoder+0x44>)
 80011c8:	801a      	strh	r2, [r3, #0]
        xSemaphoreGive(CurrentAngleMutex);
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <Task_ReadEncoder+0x3c>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	2300      	movs	r3, #0
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	f003 f9d2 	bl	800457c <xQueueGenericSend>
        vTaskDelay(100); // đọc mỗi 100ms
 80011d8:	2064      	movs	r0, #100	@ 0x64
 80011da:	f004 f837 	bl	800524c <vTaskDelay>
    	xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 80011de:	bf00      	nop
 80011e0:	e7e6      	b.n	80011b0 <Task_ReadEncoder+0x8>
 80011e2:	bf00      	nop
 80011e4:	2000045c 	.word	0x2000045c
 80011e8:	20000394 	.word	0x20000394
 80011ec:	20000454 	.word	0x20000454

080011f0 <Task_SendMessage>:
    }
}

void Task_SendMessage(void *argument)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <Task_SendMessage+0x50>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fc3d 	bl	8004a80 <xQueueSemaphoreTake>
		TxData[7] = position/80;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <Task_SendMessage+0x54>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <Task_SendMessage+0x58>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	b29b      	uxth	r3, r3
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <Task_SendMessage+0x5c>)
 8001218:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <Task_SendMessage+0x60>)
 800121c:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <Task_SendMessage+0x5c>)
 800121e:	490d      	ldr	r1, [pc, #52]	@ (8001254 <Task_SendMessage+0x64>)
 8001220:	480d      	ldr	r0, [pc, #52]	@ (8001258 <Task_SendMessage+0x68>)
 8001222:	f000 fc9b 	bl	8001b5c <HAL_CAN_AddTxMessage>
		xSemaphoreGive(CurrentAngleMutex);
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <Task_SendMessage+0x50>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	f003 f9a4 	bl	800457c <xQueueGenericSend>
		vTaskDelay(200);
 8001234:	20c8      	movs	r0, #200	@ 0xc8
 8001236:	f004 f809 	bl	800524c <vTaskDelay>
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 800123a:	bf00      	nop
 800123c:	e7dc      	b.n	80011f8 <Task_SendMessage+0x8>
 800123e:	bf00      	nop
 8001240:	2000045c 	.word	0x2000045c
 8001244:	20000454 	.word	0x20000454
 8001248:	cccccccd 	.word	0xcccccccd
 800124c:	20000000 	.word	0x20000000
 8001250:	200003f4 	.word	0x200003f4
 8001254:	200003dc 	.word	0x200003dc
 8001258:	20000324 	.word	0x20000324

0800125c <Task_ReceiveMessage>:
	}
}

void Task_ReceiveMessage(void *argument)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	int received;
	while(1){
		if (xQueueReceive(ControlSignalQueue, &received, portMAX_DELAY) == pdTRUE){
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <Task_ReceiveMessage+0x3c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f107 010c 	add.w	r1, r7, #12
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fb23 	bl	80048bc <xQueueReceive>
 8001276:	4603      	mov	r3, r0
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <Task_ReceiveMessage+0x32>
			signal_control = received;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <Task_ReceiveMessage+0x40>)
 8001282:	701a      	strb	r2, [r3, #0]
			debug2 =5000;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <Task_ReceiveMessage+0x44>)
 8001286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e7ea      	b.n	8001264 <Task_ReceiveMessage+0x8>
		}else{
			debug2 = 10000;
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <Task_ReceiveMessage+0x44>)
 8001290:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001294:	601a      	str	r2, [r3, #0]
		if (xQueueReceive(ControlSignalQueue, &received, portMAX_DELAY) == pdTRUE){
 8001296:	e7e5      	b.n	8001264 <Task_ReceiveMessage+0x8>
 8001298:	20000458 	.word	0x20000458
 800129c:	20000444 	.word	0x20000444
 80012a0:	2000044c 	.word	0x2000044c

080012a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012b6:	f000 fa2d 	bl	8001714 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40012c00 	.word	0x40012c00

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <Error_Handler+0x8>

080012d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_MspInit+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_MspInit+0x68>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6193      	str	r3, [r2, #24]
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_MspInit+0x68>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_MspInit+0x68>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a11      	ldr	r2, [pc, #68]	@ (800133c <HAL_MspInit+0x68>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_MspInit+0x68>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	210f      	movs	r1, #15
 800130e:	f06f 0001 	mvn.w	r0, #1
 8001312:	f001 f910 	bl	8002536 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_MspInit+0x6c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <HAL_MspInit+0x6c>)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000

08001344 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a29      	ldr	r2, [pc, #164]	@ (8001404 <HAL_CAN_MspInit+0xc0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d14b      	bne.n	80013fc <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001364:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <HAL_CAN_MspInit+0xc4>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a27      	ldr	r2, [pc, #156]	@ (8001408 <HAL_CAN_MspInit+0xc4>)
 800136a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <HAL_CAN_MspInit+0xc4>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <HAL_CAN_MspInit+0xc4>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a21      	ldr	r2, [pc, #132]	@ (8001408 <HAL_CAN_MspInit+0xc4>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_CAN_MspInit+0xc4>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4818      	ldr	r0, [pc, #96]	@ (800140c <HAL_CAN_MspInit+0xc8>)
 80013aa:	f001 f8ef 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4812      	ldr	r0, [pc, #72]	@ (800140c <HAL_CAN_MspInit+0xc8>)
 80013c4:	f001 f8e2 	bl	800258c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_CAN_MspInit+0xcc>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_CAN_MspInit+0xcc>)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ea:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2105      	movs	r1, #5
 80013f0:	2015      	movs	r0, #21
 80013f2:	f001 f8a0 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80013f6:	2015      	movs	r0, #21
 80013f8:	f001 f8b9 	bl	800256e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40006400 	.word	0x40006400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40010000 	.word	0x40010000

08001414 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001424:	d10b      	bne.n	800143e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_TIM_Base_MspInit+0x34>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <HAL_TIM_Base_MspInit+0x34>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_TIM_Base_MspInit+0x34>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1e      	ldr	r2, [pc, #120]	@ (80014e0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d135      	bne.n	80014d8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800146c:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0x98>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	4a1c      	ldr	r2, [pc, #112]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	61d3      	str	r3, [r2, #28]
 8001478:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0x98>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0x98>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800149c:	2330      	movs	r3, #48	@ 0x30
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	480e      	ldr	r0, [pc, #56]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014b0:	f001 f86c 	bl	800258c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_TIM_Encoder_MspInit+0xa0>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d2:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <HAL_TIM_Encoder_MspInit+0xa0>)
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010c00 	.word	0x40010c00
 80014ec:	40010000 	.word	0x40010000

080014f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800150e:	d117      	bne.n	8001540 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_TIM_MspPostInit+0x58>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a0c      	ldr	r2, [pc, #48]	@ (8001548 <HAL_TIM_MspPostInit+0x58>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_TIM_MspPostInit+0x58>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001528:	2302      	movs	r3, #2
 800152a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	4804      	ldr	r0, [pc, #16]	@ (800154c <HAL_TIM_MspPostInit+0x5c>)
 800153c:	f001 f826 	bl	800258c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	40010800 	.word	0x40010800

08001550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	@ 0x30
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001566:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <HAL_InitTick+0xd0>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a2d      	ldr	r2, [pc, #180]	@ (8001620 <HAL_InitTick+0xd0>)
 800156c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <HAL_InitTick+0xd0>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fd79 	bl	8003080 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800158e:	f001 fd63 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 8001592:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001596:	4a23      	ldr	r2, [pc, #140]	@ (8001624 <HAL_InitTick+0xd4>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	3b01      	subs	r3, #1
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <HAL_InitTick+0xd8>)
 80015a4:	4a21      	ldr	r2, [pc, #132]	@ (800162c <HAL_InitTick+0xdc>)
 80015a6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <HAL_InitTick+0xd8>)
 80015aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <HAL_InitTick+0xd8>)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <HAL_InitTick+0xd8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_InitTick+0xd8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_InitTick+0xd8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015c8:	4817      	ldr	r0, [pc, #92]	@ (8001628 <HAL_InitTick+0xd8>)
 80015ca:	f001 fda7 	bl	800311c <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d11b      	bne.n	8001614 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015dc:	4812      	ldr	r0, [pc, #72]	@ (8001628 <HAL_InitTick+0xd8>)
 80015de:	f001 fded 	bl	80031bc <HAL_TIM_Base_Start_IT>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d111      	bne.n	8001614 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80015f0:	2019      	movs	r0, #25
 80015f2:	f000 ffbc 	bl	800256e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d808      	bhi.n	800160e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	2019      	movs	r0, #25
 8001602:	f000 ff98 	bl	8002536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <HAL_InitTick+0xe0>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e002      	b.n	8001614 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001614:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001618:	4618      	mov	r0, r3
 800161a:	3730      	adds	r7, #48	@ 0x30
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	431bde83 	.word	0x431bde83
 8001628:	20000474 	.word	0x20000474
 800162c:	40012c00 	.word	0x40012c00
 8001630:	2000000c 	.word	0x2000000c

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <NMI_Handler+0x4>

0800163c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <UsageFault_Handler+0x4>

0800165c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <CAN1_RX1_IRQHandler+0x10>)
 800166e:	f000 fc8a 	bl	8001f86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000324 	.word	0x20000324

0800167c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <TIM1_UP_IRQHandler+0x10>)
 8001682:	f002 f817 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000474 	.word	0x20000474

08001690 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800169c:	f7ff fff8 	bl	8001690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a0:	480b      	ldr	r0, [pc, #44]	@ (80016d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016a2:	490c      	ldr	r1, [pc, #48]	@ (80016d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016a4:	4a0c      	ldr	r2, [pc, #48]	@ (80016d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a09      	ldr	r2, [pc, #36]	@ (80016dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016b8:	4c09      	ldr	r4, [pc, #36]	@ (80016e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c6:	f005 f887 	bl	80067d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ca:	f7ff fa2f 	bl	8000b2c <main>
  bx lr
 80016ce:	4770      	bx	lr
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016d8:	08006974 	.word	0x08006974
  ldr r2, =_sbss
 80016dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016e0:	20001354 	.word	0x20001354

080016e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_2_IRQHandler>
	...

080016e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <HAL_Init+0x28>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <HAL_Init+0x28>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 ff11 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	200f      	movs	r0, #15
 8001700:	f7ff ff26 	bl	8001550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fde6 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000

08001714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_IncTick+0x1c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_IncTick+0x20>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a03      	ldr	r2, [pc, #12]	@ (8001734 <HAL_IncTick+0x20>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	20000010 	.word	0x20000010
 8001734:	200004bc 	.word	0x200004bc

08001738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b02      	ldr	r3, [pc, #8]	@ (8001748 <HAL_GetTick+0x10>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	200004bc 	.word	0x200004bc

0800174c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0ed      	b.n	800193a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fdea 	bl	8001344 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001780:	f7ff ffda 	bl	8001738 <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001786:	e012      	b.n	80017ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001788:	f7ff ffd6 	bl	8001738 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b0a      	cmp	r3, #10
 8001794:	d90b      	bls.n	80017ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2205      	movs	r2, #5
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0c5      	b.n	800193a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0e5      	beq.n	8001788 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0202 	bic.w	r2, r2, #2
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017cc:	f7ff ffb4 	bl	8001738 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017d2:	e012      	b.n	80017fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017d4:	f7ff ffb0 	bl	8001738 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d90b      	bls.n	80017fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2205      	movs	r2, #5
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e09f      	b.n	800193a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e5      	bne.n	80017d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7e1b      	ldrb	r3, [r3, #24]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d108      	bne.n	8001822 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e007      	b.n	8001832 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e5b      	ldrb	r3, [r3, #25]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e007      	b.n	800185c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800185a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e9b      	ldrb	r3, [r3, #26]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d108      	bne.n	8001876 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e007      	b.n	8001886 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0220 	bic.w	r2, r2, #32
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7edb      	ldrb	r3, [r3, #27]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0210 	bic.w	r2, r2, #16
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e007      	b.n	80018b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0210 	orr.w	r2, r2, #16
 80018ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7f1b      	ldrb	r3, [r3, #28]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0208 	orr.w	r2, r2, #8
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e007      	b.n	80018da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0208 	bic.w	r2, r2, #8
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7f5b      	ldrb	r3, [r3, #29]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d108      	bne.n	80018f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0204 	orr.w	r2, r2, #4
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e007      	b.n	8001904 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0204 	bic.w	r2, r2, #4
 8001902:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	ea42 0103 	orr.w	r1, r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800195a:	7cfb      	ldrb	r3, [r7, #19]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d003      	beq.n	8001968 <HAL_CAN_ConfigFilter+0x26>
 8001960:	7cfb      	ldrb	r3, [r7, #19]
 8001962:	2b02      	cmp	r3, #2
 8001964:	f040 80aa 	bne.w	8001abc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2201      	movs	r2, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d123      	bne.n	80019ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3248      	adds	r2, #72	@ 0x48
 80019ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	3348      	adds	r3, #72	@ 0x48
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d122      	bne.n	8001a38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3248      	adds	r2, #72	@ 0x48
 8001a18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a2e:	6979      	ldr	r1, [r7, #20]
 8001a30:	3348      	adds	r3, #72	@ 0x48
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001a52:	e007      	b.n	8001a64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001a7e:	e007      	b.n	8001a90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d107      	bne.n	8001aa8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001aae:	f023 0201 	bic.w	r2, r3, #1
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e006      	b.n	8001aca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
  }
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d12e      	bne.n	8001b46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b00:	f7ff fe1a 	bl	8001738 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b06:	e012      	b.n	8001b2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b08:	f7ff fe16 	bl	8001738 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b0a      	cmp	r3, #10
 8001b14:	d90b      	bls.n	8001b2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2205      	movs	r2, #5
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e012      	b.n	8001b54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e5      	bne.n	8001b08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e006      	b.n	8001b54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
  }
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b7a:	7ffb      	ldrb	r3, [r7, #31]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d003      	beq.n	8001b88 <HAL_CAN_AddTxMessage+0x2c>
 8001b80:	7ffb      	ldrb	r3, [r7, #31]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	f040 80ad 	bne.w	8001ce2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10a      	bne.n	8001ba8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8095 	beq.w	8001cd2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	0e1b      	lsrs	r3, r3, #24
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	6809      	ldr	r1, [r1, #0]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3318      	adds	r3, #24
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	440b      	add	r3, r1
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e00f      	b.n	8001c00 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bf4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	440b      	add	r3, r1
 8001bfe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	440b      	add	r3, r1
 8001c10:	3304      	adds	r3, #4
 8001c12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	7d1b      	ldrb	r3, [r3, #20]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d111      	bne.n	8001c40 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3318      	adds	r3, #24
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	6811      	ldr	r1, [r2, #0]
 8001c30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3318      	adds	r3, #24
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3307      	adds	r3, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	061a      	lsls	r2, r3, #24
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3306      	adds	r3, #6
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3305      	adds	r3, #5
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	3204      	adds	r2, #4
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	4610      	mov	r0, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	6811      	ldr	r1, [r2, #0]
 8001c68:	ea43 0200 	orr.w	r2, r3, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3303      	adds	r3, #3
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	061a      	lsls	r2, r3, #24
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3302      	adds	r3, #2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	4313      	orrs	r3, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	4610      	mov	r0, r2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	6811      	ldr	r1, [r2, #0]
 8001c9e:	ea43 0200 	orr.w	r2, r3, r0
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3318      	adds	r3, #24
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	6811      	ldr	r1, [r2, #0]
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3318      	adds	r3, #24
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	440b      	add	r3, r1
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e00e      	b.n	8001cf0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e006      	b.n	8001cf0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3724      	adds	r7, #36	@ 0x24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d003      	beq.n	8001d1e <HAL_CAN_GetRxMessage+0x24>
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	f040 8103 	bne.w	8001f24 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10e      	bne.n	8001d42 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0f7      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0e8      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	331b      	adds	r3, #27
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0204 	and.w	r2, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	331b      	adds	r3, #27
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0d5b      	lsrs	r3, r3, #21
 8001d8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	331b      	adds	r3, #27
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	4413      	add	r3, r2
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	331b      	adds	r3, #27
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0202 	and.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	331b      	adds	r3, #27
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2208      	movs	r2, #8
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	e00b      	b.n	8001dfe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	331b      	adds	r3, #27
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	331b      	adds	r3, #27
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	331b      	adds	r3, #27
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0a1a      	lsrs	r2, r3, #8
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0c1a      	lsrs	r2, r3, #16
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3302      	adds	r3, #2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e1a      	lsrs	r2, r3, #24
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0a1a      	lsrs	r2, r3, #8
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3305      	adds	r3, #5
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0c1a      	lsrs	r2, r3, #16
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3306      	adds	r3, #6
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e1a      	lsrs	r2, r3, #24
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	3307      	adds	r3, #7
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e006      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d002      	beq.n	8001f5a <HAL_CAN_ActivateNotification+0x1e>
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d109      	bne.n	8001f6e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6959      	ldr	r1, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e006      	b.n	8001f7c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
  }
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b08a      	sub	sp, #40	@ 0x28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d07c      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d023      	beq.n	800201e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f983 	bl	80022f4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fee:	e016      	b.n	800201e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
 8002002:	e00c      	b.n	800201e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
 8002016:	e002      	b.n	800201e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f986 	bl	800232a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d024      	beq.n	8002072 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002030:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f962 	bl	8002306 <HAL_CAN_TxMailbox1CompleteCallback>
 8002042:	e016      	b.n	8002072 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
 8002056:	e00c      	b.n	8002072 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
 800206a:	e002      	b.n	8002072 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f965 	bl	800233c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d024      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002084:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f941 	bl	8002318 <HAL_CAN_TxMailbox2CompleteCallback>
 8002096:	e016      	b.n	80020c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020aa:	e00c      	b.n	80020c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80020be:	e002      	b.n	80020c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f944 	bl	800234e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00c      	beq.n	80020ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2210      	movs	r2, #16
 80020e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2208      	movs	r2, #8
 8002104:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f933 	bl	8002372 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f91b 	bl	8002360 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00c      	beq.n	800214e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2210      	movs	r2, #16
 800214c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2208      	movs	r2, #8
 8002168:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f90a 	bl	8002384 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7fe fc95 	bl	8000ab8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2210      	movs	r2, #16
 80021a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f8f3 	bl	8002396 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2208      	movs	r2, #8
 80021ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f8eb 	bl	80023a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d07b      	beq.n	80022d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d072      	beq.n	80022cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002240:	2b00      	cmp	r3, #0
 8002242:	d043      	beq.n	80022cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	d03e      	beq.n	80022cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002254:	2b60      	cmp	r3, #96	@ 0x60
 8002256:	d02b      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x32a>
 8002258:	2b60      	cmp	r3, #96	@ 0x60
 800225a:	d82e      	bhi.n	80022ba <HAL_CAN_IRQHandler+0x334>
 800225c:	2b50      	cmp	r3, #80	@ 0x50
 800225e:	d022      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x320>
 8002260:	2b50      	cmp	r3, #80	@ 0x50
 8002262:	d82a      	bhi.n	80022ba <HAL_CAN_IRQHandler+0x334>
 8002264:	2b40      	cmp	r3, #64	@ 0x40
 8002266:	d019      	beq.n	800229c <HAL_CAN_IRQHandler+0x316>
 8002268:	2b40      	cmp	r3, #64	@ 0x40
 800226a:	d826      	bhi.n	80022ba <HAL_CAN_IRQHandler+0x334>
 800226c:	2b30      	cmp	r3, #48	@ 0x30
 800226e:	d010      	beq.n	8002292 <HAL_CAN_IRQHandler+0x30c>
 8002270:	2b30      	cmp	r3, #48	@ 0x30
 8002272:	d822      	bhi.n	80022ba <HAL_CAN_IRQHandler+0x334>
 8002274:	2b10      	cmp	r3, #16
 8002276:	d002      	beq.n	800227e <HAL_CAN_IRQHandler+0x2f8>
 8002278:	2b20      	cmp	r3, #32
 800227a:	d005      	beq.n	8002288 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800227c:	e01d      	b.n	80022ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002286:	e019      	b.n	80022bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	f043 0310 	orr.w	r3, r3, #16
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002290:	e014      	b.n	80022bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	f043 0320 	orr.w	r3, r3, #32
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800229a:	e00f      	b.n	80022bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022a4:	e00a      	b.n	80022bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022ae:	e005      	b.n	80022bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022b8:	e000      	b.n	80022bc <HAL_CAN_IRQHandler+0x336>
            break;
 80022ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80022ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2204      	movs	r2, #4
 80022d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f867 	bl	80023ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	@ 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0b      	blt.n	800245a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	4906      	ldr	r1, [pc, #24]	@ (8002464 <__NVIC_EnableIRQ+0x34>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2001      	movs	r0, #1
 8002452:	fa00 f202 	lsl.w	r2, r0, r2
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	@ (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
         );
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff4f 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff64 	bl	8002414 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ffb2 	bl	80024bc <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff81 	bl	8002468 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff57 	bl	8002430 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b08b      	sub	sp, #44	@ 0x2c
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259e:	e169      	b.n	8002874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025a0:	2201      	movs	r2, #1
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f040 8158 	bne.w	800286e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a9a      	ldr	r2, [pc, #616]	@ (800282c <HAL_GPIO_Init+0x2a0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d05e      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025c8:	4a98      	ldr	r2, [pc, #608]	@ (800282c <HAL_GPIO_Init+0x2a0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d875      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025ce:	4a98      	ldr	r2, [pc, #608]	@ (8002830 <HAL_GPIO_Init+0x2a4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d058      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025d4:	4a96      	ldr	r2, [pc, #600]	@ (8002830 <HAL_GPIO_Init+0x2a4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d86f      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025da:	4a96      	ldr	r2, [pc, #600]	@ (8002834 <HAL_GPIO_Init+0x2a8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d052      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025e0:	4a94      	ldr	r2, [pc, #592]	@ (8002834 <HAL_GPIO_Init+0x2a8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d869      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025e6:	4a94      	ldr	r2, [pc, #592]	@ (8002838 <HAL_GPIO_Init+0x2ac>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d04c      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025ec:	4a92      	ldr	r2, [pc, #584]	@ (8002838 <HAL_GPIO_Init+0x2ac>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d863      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025f2:	4a92      	ldr	r2, [pc, #584]	@ (800283c <HAL_GPIO_Init+0x2b0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d046      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025f8:	4a90      	ldr	r2, [pc, #576]	@ (800283c <HAL_GPIO_Init+0x2b0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d85d      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025fe:	2b12      	cmp	r3, #18
 8002600:	d82a      	bhi.n	8002658 <HAL_GPIO_Init+0xcc>
 8002602:	2b12      	cmp	r3, #18
 8002604:	d859      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 8002606:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <HAL_GPIO_Init+0x80>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	08002687 	.word	0x08002687
 8002610:	08002661 	.word	0x08002661
 8002614:	08002673 	.word	0x08002673
 8002618:	080026b5 	.word	0x080026b5
 800261c:	080026bb 	.word	0x080026bb
 8002620:	080026bb 	.word	0x080026bb
 8002624:	080026bb 	.word	0x080026bb
 8002628:	080026bb 	.word	0x080026bb
 800262c:	080026bb 	.word	0x080026bb
 8002630:	080026bb 	.word	0x080026bb
 8002634:	080026bb 	.word	0x080026bb
 8002638:	080026bb 	.word	0x080026bb
 800263c:	080026bb 	.word	0x080026bb
 8002640:	080026bb 	.word	0x080026bb
 8002644:	080026bb 	.word	0x080026bb
 8002648:	080026bb 	.word	0x080026bb
 800264c:	080026bb 	.word	0x080026bb
 8002650:	08002669 	.word	0x08002669
 8002654:	0800267d 	.word	0x0800267d
 8002658:	4a79      	ldr	r2, [pc, #484]	@ (8002840 <HAL_GPIO_Init+0x2b4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800265e:	e02c      	b.n	80026ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	623b      	str	r3, [r7, #32]
          break;
 8002666:	e029      	b.n	80026bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	3304      	adds	r3, #4
 800266e:	623b      	str	r3, [r7, #32]
          break;
 8002670:	e024      	b.n	80026bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	3308      	adds	r3, #8
 8002678:	623b      	str	r3, [r7, #32]
          break;
 800267a:	e01f      	b.n	80026bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	330c      	adds	r3, #12
 8002682:	623b      	str	r3, [r7, #32]
          break;
 8002684:	e01a      	b.n	80026bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800268e:	2304      	movs	r3, #4
 8002690:	623b      	str	r3, [r7, #32]
          break;
 8002692:	e013      	b.n	80026bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800269c:	2308      	movs	r3, #8
 800269e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	611a      	str	r2, [r3, #16]
          break;
 80026a6:	e009      	b.n	80026bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	615a      	str	r2, [r3, #20]
          break;
 80026b2:	e003      	b.n	80026bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
          break;
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x130>
          break;
 80026ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2bff      	cmp	r3, #255	@ 0xff
 80026c0:	d801      	bhi.n	80026c6 <HAL_GPIO_Init+0x13a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	e001      	b.n	80026ca <HAL_GPIO_Init+0x13e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2bff      	cmp	r3, #255	@ 0xff
 80026d0:	d802      	bhi.n	80026d8 <HAL_GPIO_Init+0x14c>
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	e002      	b.n	80026de <HAL_GPIO_Init+0x152>
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	3b08      	subs	r3, #8
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	210f      	movs	r1, #15
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	6a39      	ldr	r1, [r7, #32]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	431a      	orrs	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80b1 	beq.w	800286e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800270c:	4b4d      	ldr	r3, [pc, #308]	@ (8002844 <HAL_GPIO_Init+0x2b8>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a4c      	ldr	r2, [pc, #304]	@ (8002844 <HAL_GPIO_Init+0x2b8>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b4a      	ldr	r3, [pc, #296]	@ (8002844 <HAL_GPIO_Init+0x2b8>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002724:	4a48      	ldr	r2, [pc, #288]	@ (8002848 <HAL_GPIO_Init+0x2bc>)
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a40      	ldr	r2, [pc, #256]	@ (800284c <HAL_GPIO_Init+0x2c0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_GPIO_Init+0x1ec>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3f      	ldr	r2, [pc, #252]	@ (8002850 <HAL_GPIO_Init+0x2c4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00d      	beq.n	8002774 <HAL_GPIO_Init+0x1e8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3e      	ldr	r2, [pc, #248]	@ (8002854 <HAL_GPIO_Init+0x2c8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <HAL_GPIO_Init+0x1e4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a3d      	ldr	r2, [pc, #244]	@ (8002858 <HAL_GPIO_Init+0x2cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_GPIO_Init+0x1e0>
 8002768:	2303      	movs	r3, #3
 800276a:	e006      	b.n	800277a <HAL_GPIO_Init+0x1ee>
 800276c:	2304      	movs	r3, #4
 800276e:	e004      	b.n	800277a <HAL_GPIO_Init+0x1ee>
 8002770:	2302      	movs	r3, #2
 8002772:	e002      	b.n	800277a <HAL_GPIO_Init+0x1ee>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_GPIO_Init+0x1ee>
 8002778:	2300      	movs	r3, #0
 800277a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277c:	f002 0203 	and.w	r2, r2, #3
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	4093      	lsls	r3, r2
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800278a:	492f      	ldr	r1, [pc, #188]	@ (8002848 <HAL_GPIO_Init+0x2bc>)
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027a4:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	492c      	ldr	r1, [pc, #176]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027b2:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	4928      	ldr	r1, [pc, #160]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027bc:	4013      	ands	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027cc:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	4922      	ldr	r1, [pc, #136]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	491e      	ldr	r1, [pc, #120]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d006      	beq.n	8002802 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4918      	ldr	r1, [pc, #96]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002802:	4b16      	ldr	r3, [pc, #88]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	43db      	mvns	r3, r3
 800280a:	4914      	ldr	r1, [pc, #80]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 800280c:	4013      	ands	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d021      	beq.n	8002860 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	490e      	ldr	r1, [pc, #56]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
 8002828:	e021      	b.n	800286e <HAL_GPIO_Init+0x2e2>
 800282a:	bf00      	nop
 800282c:	10320000 	.word	0x10320000
 8002830:	10310000 	.word	0x10310000
 8002834:	10220000 	.word	0x10220000
 8002838:	10210000 	.word	0x10210000
 800283c:	10120000 	.word	0x10120000
 8002840:	10110000 	.word	0x10110000
 8002844:	40021000 	.word	0x40021000
 8002848:	40010000 	.word	0x40010000
 800284c:	40010800 	.word	0x40010800
 8002850:	40010c00 	.word	0x40010c00
 8002854:	40011000 	.word	0x40011000
 8002858:	40011400 	.word	0x40011400
 800285c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002860:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_GPIO_Init+0x304>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	43db      	mvns	r3, r3
 8002868:	4909      	ldr	r1, [pc, #36]	@ (8002890 <HAL_GPIO_Init+0x304>)
 800286a:	4013      	ands	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	3301      	adds	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	f47f ae8e 	bne.w	80025a0 <HAL_GPIO_Init+0x14>
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	372c      	adds	r7, #44	@ 0x2c
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40010400 	.word	0x40010400

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	611a      	str	r2, [r3, #16]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e272      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8087 	beq.w	80029f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e4:	4b92      	ldr	r3, [pc, #584]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d00c      	beq.n	800290a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d112      	bne.n	8002922 <HAL_RCC_OscConfig+0x5e>
 80028fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002908:	d10b      	bne.n	8002922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	4b89      	ldr	r3, [pc, #548]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d06c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x12c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d168      	bne.n	80029f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e24c      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x76>
 800292c:	4b80      	ldr	r3, [pc, #512]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7f      	ldr	r2, [pc, #508]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	e02e      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x98>
 8002942:	4b7b      	ldr	r3, [pc, #492]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7a      	ldr	r2, [pc, #488]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b78      	ldr	r3, [pc, #480]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a77      	ldr	r2, [pc, #476]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002954:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e01d      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0xbc>
 8002966:	4b72      	ldr	r3, [pc, #456]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a71      	ldr	r2, [pc, #452]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b6f      	ldr	r3, [pc, #444]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6e      	ldr	r2, [pc, #440]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 8002980:	4b6b      	ldr	r3, [pc, #428]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a6a      	ldr	r2, [pc, #424]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b68      	ldr	r3, [pc, #416]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a67      	ldr	r2, [pc, #412]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002996:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe feca 	bl	8001738 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fe fec6 	bl	8001738 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	@ 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e200      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe4>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe feb6 	bl	8001738 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe feb2 	bl	8001738 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	@ 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1ec      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x10c>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a0a:	4b49      	ldr	r3, [pc, #292]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d11c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x18c>
 8002a16:	4b46      	ldr	r3, [pc, #280]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	4b43      	ldr	r3, [pc, #268]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x176>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1c0      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4939      	ldr	r1, [pc, #228]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	e03a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a58:	4b36      	ldr	r3, [pc, #216]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fe6b 	bl	8001738 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe fe67 	bl	8001738 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1a1      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4927      	ldr	r1, [pc, #156]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
 8002a98:	e015      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fe4a 	bl	8001738 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fe46 	bl	8001738 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e180      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03a      	beq.n	8002b48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d019      	beq.n	8002b0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ada:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <HAL_RCC_OscConfig+0x274>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fe2a 	bl	8001738 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fe26 	bl	8001738 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e160      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b06:	2001      	movs	r0, #1
 8002b08:	f000 faea 	bl	80030e0 <RCC_Delay>
 8002b0c:	e01c      	b.n	8002b48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_RCC_OscConfig+0x274>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7fe fe10 	bl	8001738 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1a:	e00f      	b.n	8002b3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7fe fe0c 	bl	8001738 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d908      	bls.n	8002b3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e146      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	42420000 	.word	0x42420000
 8002b38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b92      	ldr	r3, [pc, #584]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e9      	bne.n	8002b1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a6 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	4b88      	ldr	r3, [pc, #544]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a87      	ldr	r2, [pc, #540]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	4b85      	ldr	r3, [pc, #532]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	4b82      	ldr	r3, [pc, #520]	@ (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d118      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a7e      	ldr	r2, [pc, #504]	@ (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fdcd 	bl	8001738 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba2:	f7fe fdc9 	bl	8001738 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	@ 0x64
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e103      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	4b75      	ldr	r3, [pc, #468]	@ (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x312>
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	e02d      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x334>
 8002bde:	4b6a      	ldr	r3, [pc, #424]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4a69      	ldr	r2, [pc, #420]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6213      	str	r3, [r2, #32]
 8002bea:	4b67      	ldr	r3, [pc, #412]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a66      	ldr	r2, [pc, #408]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	e01c      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x356>
 8002c00:	4b61      	ldr	r3, [pc, #388]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a60      	ldr	r2, [pc, #384]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a5d      	ldr	r2, [pc, #372]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6213      	str	r3, [r2, #32]
 8002c18:	e00b      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6213      	str	r3, [r2, #32]
 8002c26:	4b58      	ldr	r3, [pc, #352]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a57      	ldr	r2, [pc, #348]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fd7d 	bl	8001738 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe fd79 	bl	8001738 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0b1      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	4b4b      	ldr	r3, [pc, #300]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ee      	beq.n	8002c42 <HAL_RCC_OscConfig+0x37e>
 8002c64:	e014      	b.n	8002c90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fd67 	bl	8001738 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fd63 	bl	8001738 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e09b      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	4b40      	ldr	r3, [pc, #256]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b3c      	ldr	r3, [pc, #240]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8087 	beq.w	8002dba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cac:	4b36      	ldr	r3, [pc, #216]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d061      	beq.n	8002d7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d146      	bne.n	8002d4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b33      	ldr	r3, [pc, #204]	@ (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fd37 	bl	8001738 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe fd33 	bl	8001738 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e06d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce0:	4b29      	ldr	r3, [pc, #164]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf4:	d108      	bne.n	8002d08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cf6:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4921      	ldr	r1, [pc, #132]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d08:	4b1f      	ldr	r3, [pc, #124]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a19      	ldr	r1, [r3, #32]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	491b      	ldr	r1, [pc, #108]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d20:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe fd07 	bl	8001738 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe fd03 	bl	8001738 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e03d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x46a>
 8002d4c:	e035      	b.n	8002dba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fcf0 	bl	8001738 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe fcec 	bl	8001738 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e026      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x498>
 8002d7a:	e01e      	b.n	8002dba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e019      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_OscConfig+0x500>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d0      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b67      	ldr	r3, [pc, #412]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0207 	bic.w	r2, r3, #7
 8002df2:	4965      	ldr	r1, [pc, #404]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a58      	ldr	r2, [pc, #352]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a52      	ldr	r2, [pc, #328]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d040      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b41      	ldr	r3, [pc, #260]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e073      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3d      	ldr	r3, [pc, #244]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06b      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4936      	ldr	r1, [pc, #216]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fc3e 	bl	8001738 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe fc3a 	bl	8001738 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e053      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d210      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 0207 	bic.w	r2, r3, #7
 8002efe:	4922      	ldr	r1, [pc, #136]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490a      	ldr	r1, [pc, #40]	@ (8002f90 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <HAL_RCC_ClockConfig+0x1cc>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_RCC_ClockConfig+0x1d0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe faea 	bl	8001550 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08006940 	.word	0x08006940
 8002f94:	20000008 	.word	0x20000008
 8002f98:	2000000c 	.word	0x2000000c

08002f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x30>
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002fca:	e027      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fce:	613b      	str	r3, [r7, #16]
      break;
 8002fd0:	e027      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	0c9b      	lsrs	r3, r3, #18
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a17      	ldr	r2, [pc, #92]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fea:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0c5b      	lsrs	r3, r3, #17
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	4a11      	ldr	r2, [pc, #68]	@ (800303c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffe:	fb03 f202 	mul.w	r2, r3, r2
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e004      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0c      	ldr	r2, [pc, #48]	@ (8003040 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	613b      	str	r3, [r7, #16]
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 800301e:	613b      	str	r3, [r7, #16]
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	693b      	ldr	r3, [r7, #16]
}
 8003024:	4618      	mov	r0, r3
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	007a1200 	.word	0x007a1200
 8003038:	08006958 	.word	0x08006958
 800303c:	08006968 	.word	0x08006968
 8003040:	003d0900 	.word	0x003d0900

08003044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b02      	ldr	r3, [pc, #8]	@ (8003054 <HAL_RCC_GetHCLKFreq+0x10>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	20000008 	.word	0x20000008

08003058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800305c:	f7ff fff2 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	0adb      	lsrs	r3, r3, #11
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4903      	ldr	r1, [pc, #12]	@ (800307c <HAL_RCC_GetPCLK2Freq+0x24>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	08006950 	.word	0x08006950

08003080 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	220f      	movs	r2, #15
 800308e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003090:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <HAL_RCC_GetClockConfig+0x58>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0203 	and.w	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800309c:	4b0e      	ldr	r3, [pc, #56]	@ (80030d8 <HAL_RCC_GetClockConfig+0x58>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCC_GetClockConfig+0x58>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030b4:	4b08      	ldr	r3, [pc, #32]	@ (80030d8 <HAL_RCC_GetClockConfig+0x58>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCC_GetClockConfig+0x5c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0207 	and.w	r2, r3, #7
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40022000 	.word	0x40022000

080030e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <RCC_Delay+0x34>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <RCC_Delay+0x38>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0a5b      	lsrs	r3, r3, #9
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030fc:	bf00      	nop
  }
  while (Delay --);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <RCC_Delay+0x1c>
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	20000008 	.word	0x20000008
 8003118:	10624dd3 	.word	0x10624dd3

0800311c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e041      	b.n	80031b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe f966 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f000 fd48 	bl	8003bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d001      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e03a      	b.n	800324a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a18      	ldr	r2, [pc, #96]	@ (8003254 <HAL_TIM_Base_Start_IT+0x98>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x58>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fe:	d009      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x58>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <HAL_TIM_Base_Start_IT+0x9c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x58>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a13      	ldr	r2, [pc, #76]	@ (800325c <HAL_TIM_Base_Start_IT+0xa0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d010      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003236:	e007      	b.n	8003248 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800

08003260 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e041      	b.n	80032f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f839 	bl	80032fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 fca6 	bl	8003bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_TIM_PWM_Start+0x24>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e022      	b.n	800337a <HAL_TIM_PWM_Start+0x6a>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b04      	cmp	r3, #4
 8003338:	d109      	bne.n	800334e <HAL_TIM_PWM_Start+0x3e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e015      	b.n	800337a <HAL_TIM_PWM_Start+0x6a>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d109      	bne.n	8003368 <HAL_TIM_PWM_Start+0x58>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e008      	b.n	800337a <HAL_TIM_PWM_Start+0x6a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e05e      	b.n	8003440 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d104      	bne.n	8003392 <HAL_TIM_PWM_Start+0x82>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003390:	e013      	b.n	80033ba <HAL_TIM_PWM_Start+0xaa>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d104      	bne.n	80033a2 <HAL_TIM_PWM_Start+0x92>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033a0:	e00b      	b.n	80033ba <HAL_TIM_PWM_Start+0xaa>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d104      	bne.n	80033b2 <HAL_TIM_PWM_Start+0xa2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b0:	e003      	b.n	80033ba <HAL_TIM_PWM_Start+0xaa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2201      	movs	r2, #1
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fea0 	bl	8004108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003448 <HAL_TIM_PWM_Start+0x138>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d107      	bne.n	80033e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a18      	ldr	r2, [pc, #96]	@ (8003448 <HAL_TIM_PWM_Start+0x138>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00e      	beq.n	800340a <HAL_TIM_PWM_Start+0xfa>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f4:	d009      	beq.n	800340a <HAL_TIM_PWM_Start+0xfa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a14      	ldr	r2, [pc, #80]	@ (800344c <HAL_TIM_PWM_Start+0x13c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_TIM_PWM_Start+0xfa>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a12      	ldr	r2, [pc, #72]	@ (8003450 <HAL_TIM_PWM_Start+0x140>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d111      	bne.n	800342e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b06      	cmp	r3, #6
 800341a:	d010      	beq.n	800343e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342c:	e007      	b.n	800343e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800

08003454 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e093      	b.n	8003590 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fd ffe5 	bl	800144c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003498:	f023 0307 	bic.w	r3, r3, #7
 800349c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f000 fba1 	bl	8003bf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	4313      	orrs	r3, r2
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80034f4:	f023 030c 	bic.w	r3, r3, #12
 80034f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003500:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	4313      	orrs	r3, r2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	011a      	lsls	r2, r3, #4
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	031b      	lsls	r3, r3, #12
 8003524:	4313      	orrs	r3, r2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	4313      	orrs	r3, r2
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d110      	bne.n	80035ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d102      	bne.n	80035d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80035ce:	7b7b      	ldrb	r3, [r7, #13]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d001      	beq.n	80035d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e069      	b.n	80036ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035e8:	e031      	b.n	800364e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d110      	bne.n	8003612 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80035f6:	7b3b      	ldrb	r3, [r7, #12]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d001      	beq.n	8003600 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e055      	b.n	80036ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003610:	e01d      	b.n	800364e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d108      	bne.n	800362a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003618:	7bbb      	ldrb	r3, [r7, #14]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d105      	bne.n	800362a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800361e:	7b7b      	ldrb	r3, [r7, #13]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003624:	7b3b      	ldrb	r3, [r7, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e03e      	b.n	80036ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_TIM_Encoder_Start+0xc4>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b04      	cmp	r3, #4
 8003658:	d008      	beq.n	800366c <HAL_TIM_Encoder_Start+0xd4>
 800365a:	e00f      	b.n	800367c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2201      	movs	r2, #1
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fd4f 	bl	8004108 <TIM_CCxChannelCmd>
      break;
 800366a:	e016      	b.n	800369a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2201      	movs	r2, #1
 8003672:	2104      	movs	r1, #4
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fd47 	bl	8004108 <TIM_CCxChannelCmd>
      break;
 800367a:	e00e      	b.n	800369a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fd3f 	bl	8004108 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2201      	movs	r2, #1
 8003690:	2104      	movs	r1, #4
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fd38 	bl	8004108 <TIM_CCxChannelCmd>
      break;
 8003698:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d020      	beq.n	8003718 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0202 	mvn.w	r2, #2
 80036e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa5a 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa4d 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa5c 	bl	8003bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0204 	mvn.w	r2, #4
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fa34 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fa27 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fa36 	bl	8003bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0208 	mvn.w	r2, #8
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2204      	movs	r2, #4
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa0e 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa01 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fa10 	bl	8003bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0210 	mvn.w	r2, #16
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2208      	movs	r2, #8
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9e8 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9db 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f9ea 	bl	8003bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0201 	mvn.w	r2, #1
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fd42 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fced 	bl	800421e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9ba 	bl	8003bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0220 	mvn.w	r2, #32
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fcc0 	bl	800420c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0ae      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	f200 809f 	bhi.w	8003a00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038c2:	a201      	add	r2, pc, #4	@ (adr r2, 80038c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038fd 	.word	0x080038fd
 80038cc:	08003a01 	.word	0x08003a01
 80038d0:	08003a01 	.word	0x08003a01
 80038d4:	08003a01 	.word	0x08003a01
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	08003a01 	.word	0x08003a01
 80038e0:	08003a01 	.word	0x08003a01
 80038e4:	08003a01 	.word	0x08003a01
 80038e8:	0800397f 	.word	0x0800397f
 80038ec:	08003a01 	.word	0x08003a01
 80038f0:	08003a01 	.word	0x08003a01
 80038f4:	08003a01 	.word	0x08003a01
 80038f8:	080039bf 	.word	0x080039bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f9e2 	bl	8003ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	619a      	str	r2, [r3, #24]
      break;
 800393a:	e064      	b.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fa28 	bl	8003d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6999      	ldr	r1, [r3, #24]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	021a      	lsls	r2, r3, #8
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	619a      	str	r2, [r3, #24]
      break;
 800397c:	e043      	b.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fa71 	bl	8003e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0208 	orr.w	r2, r2, #8
 8003998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0204 	bic.w	r2, r2, #4
 80039a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	61da      	str	r2, [r3, #28]
      break;
 80039bc:	e023      	b.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fabb 	bl	8003f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69d9      	ldr	r1, [r3, #28]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	021a      	lsls	r2, r3, #8
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	61da      	str	r2, [r3, #28]
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x1c>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0b4      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x186>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6c:	d03e      	beq.n	8003aec <HAL_TIM_ConfigClockSource+0xd4>
 8003a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a72:	f200 8087 	bhi.w	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a7a:	f000 8086 	beq.w	8003b8a <HAL_TIM_ConfigClockSource+0x172>
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a82:	d87f      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a84:	2b70      	cmp	r3, #112	@ 0x70
 8003a86:	d01a      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0xa6>
 8003a88:	2b70      	cmp	r3, #112	@ 0x70
 8003a8a:	d87b      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8c:	2b60      	cmp	r3, #96	@ 0x60
 8003a8e:	d050      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x11a>
 8003a90:	2b60      	cmp	r3, #96	@ 0x60
 8003a92:	d877      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b50      	cmp	r3, #80	@ 0x50
 8003a96:	d03c      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0xfa>
 8003a98:	2b50      	cmp	r3, #80	@ 0x50
 8003a9a:	d873      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b40      	cmp	r3, #64	@ 0x40
 8003a9e:	d058      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x13a>
 8003aa0:	2b40      	cmp	r3, #64	@ 0x40
 8003aa2:	d86f      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b30      	cmp	r3, #48	@ 0x30
 8003aa6:	d064      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x15a>
 8003aa8:	2b30      	cmp	r3, #48	@ 0x30
 8003aaa:	d86b      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d060      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x15a>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d867      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05c      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x15a>
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d05a      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x15a>
 8003abc:	e062      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ace:	f000 fafc 	bl	80040ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ae0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	609a      	str	r2, [r3, #8]
      break;
 8003aea:	e04f      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003afc:	f000 fae5 	bl	80040ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b0e:	609a      	str	r2, [r3, #8]
      break;
 8003b10:	e03c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f000 fa5c 	bl	8003fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2150      	movs	r1, #80	@ 0x50
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fab3 	bl	8004096 <TIM_ITRx_SetConfig>
      break;
 8003b30:	e02c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f000 fa7a 	bl	8004038 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2160      	movs	r1, #96	@ 0x60
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 faa3 	bl	8004096 <TIM_ITRx_SetConfig>
      break;
 8003b50:	e01c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f000 fa3c 	bl	8003fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2140      	movs	r1, #64	@ 0x40
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fa93 	bl	8004096 <TIM_ITRx_SetConfig>
      break;
 8003b70:	e00c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f000 fa8a 	bl	8004096 <TIM_ITRx_SetConfig>
      break;
 8003b82:	e003      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      break;
 8003b88:	e000      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
	...

08003bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc0 <TIM_Base_SetConfig+0xd0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00b      	beq.n	8003c20 <TIM_Base_SetConfig+0x30>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0e:	d007      	beq.n	8003c20 <TIM_Base_SetConfig+0x30>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc4 <TIM_Base_SetConfig+0xd4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0x30>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc8 <TIM_Base_SetConfig+0xd8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d108      	bne.n	8003c32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a22      	ldr	r2, [pc, #136]	@ (8003cc0 <TIM_Base_SetConfig+0xd0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0x62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0x62>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc4 <TIM_Base_SetConfig+0xd4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0x62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc8 <TIM_Base_SetConfig+0xd8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc0 <TIM_Base_SetConfig+0xd0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800

08003ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 0201 	bic.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0302 	bic.w	r3, r3, #2
 8003d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1c      	ldr	r2, [pc, #112]	@ (8003d94 <TIM_OC1_SetConfig+0xc8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10c      	bne.n	8003d42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0308 	bic.w	r3, r3, #8
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 0304 	bic.w	r3, r3, #4
 8003d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a13      	ldr	r2, [pc, #76]	@ (8003d94 <TIM_OC1_SetConfig+0xc8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d111      	bne.n	8003d6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	621a      	str	r2, [r3, #32]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40012c00 	.word	0x40012c00

08003d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f023 0210 	bic.w	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <TIM_OC2_SetConfig+0xd0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10d      	bne.n	8003e14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a14      	ldr	r2, [pc, #80]	@ (8003e68 <TIM_OC2_SetConfig+0xd0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d113      	bne.n	8003e44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	40012c00 	.word	0x40012c00

08003e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f3c <TIM_OC3_SetConfig+0xd0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10d      	bne.n	8003ee6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <TIM_OC3_SetConfig+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d113      	bne.n	8003f16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	621a      	str	r2, [r3, #32]
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00

08003f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	031b      	lsls	r3, r3, #12
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd8 <TIM_OC4_SetConfig+0x98>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d109      	bne.n	8003fb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	019b      	lsls	r3, r3, #6
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	40012c00 	.word	0x40012c00

08003fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0201 	bic.w	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 030a 	bic.w	r3, r3, #10
 8004018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0210 	bic.w	r2, r3, #16
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	031b      	lsls	r3, r3, #12
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004074:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f043 0307 	orr.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	609a      	str	r2, [r3, #8]
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	021a      	lsls	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	609a      	str	r2, [r3, #8]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2201      	movs	r2, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1a      	ldr	r2, [r3, #32]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	43db      	mvns	r3, r3
 800412a:	401a      	ands	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a1a      	ldr	r2, [r3, #32]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e046      	b.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a16      	ldr	r2, [pc, #88]	@ (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b4:	d009      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a12      	ldr	r2, [pc, #72]	@ (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a10      	ldr	r2, [pc, #64]	@ (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10c      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800

0800420c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f103 0208 	add.w	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f103 0208 	add.w	r2, r3, #8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f103 0208 	add.w	r2, r3, #8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042e2:	d103      	bne.n	80042ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e00c      	b.n	8004306 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3308      	adds	r3, #8
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e002      	b.n	80042fa <vListInsert+0x2e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	d2f6      	bcs.n	80042f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	601a      	str	r2, [r3, #0]
}
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6892      	ldr	r2, [r2, #8]
 8004352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6852      	ldr	r2, [r2, #4]
 800435c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d103      	bne.n	8004370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
	...

08004390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043bc:	f001 feae 	bl	800611c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	441a      	add	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ec:	3b01      	subs	r3, #1
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	441a      	add	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	22ff      	movs	r2, #255	@ 0xff
 8004400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	22ff      	movs	r2, #255	@ 0xff
 8004408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d114      	bne.n	800443c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01a      	beq.n	8004450 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3310      	adds	r3, #16
 800441e:	4618      	mov	r0, r3
 8004420:	f001 f9a2 	bl	8005768 <xTaskRemoveFromEventList>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d012      	beq.n	8004450 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <xQueueGenericReset+0xd0>)
 800442c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	e009      	b.n	8004450 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3310      	adds	r3, #16
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fef5 	bl	8004230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3324      	adds	r3, #36	@ 0x24
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fef0 	bl	8004230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004450:	f001 fe94 	bl	800617c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004454:	2301      	movs	r3, #1
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	@ 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	613b      	str	r3, [r7, #16]
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3348      	adds	r3, #72	@ 0x48
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 ff3e 	bl	8006320 <pvPortMalloc>
 80044a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d011      	beq.n	80044d0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3348      	adds	r3, #72	@ 0x48
 80044b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044be:	79fa      	ldrb	r2, [r7, #7]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f805 	bl	80044da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044d0:	69bb      	ldr	r3, [r7, #24]
	}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e002      	b.n	80044fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004508:	2101      	movs	r1, #1
 800450a:	69b8      	ldr	r0, [r7, #24]
 800450c:	f7ff ff40 	bl	8004390 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004538:	2300      	movs	r3, #0
 800453a:	2200      	movs	r2, #0
 800453c:	2100      	movs	r1, #0
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f81c 	bl	800457c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004556:	2301      	movs	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	461a      	mov	r2, r3
 8004562:	6939      	ldr	r1, [r7, #16]
 8004564:	6978      	ldr	r0, [r7, #20]
 8004566:	f7ff ff7d 	bl	8004464 <xQueueGenericCreate>
 800456a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff ffd3 	bl	8004518 <prvInitialiseMutex>

		return xNewQueue;
 8004572:	68fb      	ldr	r3, [r7, #12]
	}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	@ 0x38
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800458a:	2300      	movs	r3, #0
 800458c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <xQueueGenericSend+0x34>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <xQueueGenericSend+0x42>
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <xQueueGenericSend+0x46>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <xQueueGenericSend+0x48>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <xQueueGenericSend+0x64>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d103      	bne.n	80045ee <xQueueGenericSend+0x72>
 80045e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <xQueueGenericSend+0x76>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <xQueueGenericSend+0x78>
 80045f2:	2300      	movs	r3, #0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <xQueueGenericSend+0x94>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	623b      	str	r3, [r7, #32]
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	e7fd      	b.n	800460c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004610:	f001 fa70 	bl	8005af4 <xTaskGetSchedulerState>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <xQueueGenericSend+0xa4>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <xQueueGenericSend+0xa8>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <xQueueGenericSend+0xaa>
 8004624:	2300      	movs	r3, #0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <xQueueGenericSend+0xc6>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	61fb      	str	r3, [r7, #28]
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	e7fd      	b.n	800463e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004642:	f001 fd6b 	bl	800611c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <xQueueGenericSend+0xdc>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d129      	bne.n	80046ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800465e:	f000 fb36 	bl	8004cce <prvCopyDataToQueue>
 8004662:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	3324      	adds	r3, #36	@ 0x24
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f879 	bl	8005768 <xTaskRemoveFromEventList>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800467c:	4b3f      	ldr	r3, [pc, #252]	@ (800477c <xQueueGenericSend+0x200>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	e00a      	b.n	80046a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800468e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004694:	4b39      	ldr	r3, [pc, #228]	@ (800477c <xQueueGenericSend+0x200>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046a4:	f001 fd6a 	bl	800617c <vPortExitCritical>
				return pdPASS;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e063      	b.n	8004774 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046b2:	f001 fd63 	bl	800617c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e05c      	b.n	8004774 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 f8b3 	bl	8005830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ce:	f001 fd55 	bl	800617c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046d2:	f000 fe5b 	bl	800538c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046d6:	f001 fd21 	bl	800611c <vPortEnterCritical>
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046e0:	b25b      	sxtb	r3, r3
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046e6:	d103      	bne.n	80046f0 <xQueueGenericSend+0x174>
 80046e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046f6:	b25b      	sxtb	r3, r3
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046fc:	d103      	bne.n	8004706 <xQueueGenericSend+0x18a>
 80046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004706:	f001 fd39 	bl	800617c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800470a:	1d3a      	adds	r2, r7, #4
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f001 f8a2 	bl	800585c <xTaskCheckForTimeOut>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d124      	bne.n	8004768 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800471e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004720:	f000 fbcd 	bl	8004ebe <prvIsQueueFull>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d018      	beq.n	800475c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	3310      	adds	r3, #16
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fff2 	bl	800571c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800473a:	f000 fb58 	bl	8004dee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800473e:	f000 fe33 	bl	80053a8 <xTaskResumeAll>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	f47f af7c 	bne.w	8004642 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800474a:	4b0c      	ldr	r3, [pc, #48]	@ (800477c <xQueueGenericSend+0x200>)
 800474c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	e772      	b.n	8004642 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800475c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800475e:	f000 fb46 	bl	8004dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004762:	f000 fe21 	bl	80053a8 <xTaskResumeAll>
 8004766:	e76c      	b.n	8004642 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800476a:	f000 fb40 	bl	8004dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800476e:	f000 fe1b 	bl	80053a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004772:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004774:	4618      	mov	r0, r3
 8004776:	3738      	adds	r7, #56	@ 0x38
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b090      	sub	sp, #64	@ 0x40
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10b      	bne.n	80047b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <xQueueGenericSendFromISR+0x3e>
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <xQueueGenericSendFromISR+0x42>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <xQueueGenericSendFromISR+0x44>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047da:	bf00      	nop
 80047dc:	bf00      	nop
 80047de:	e7fd      	b.n	80047dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d103      	bne.n	80047ee <xQueueGenericSendFromISR+0x6e>
 80047e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <xQueueGenericSendFromISR+0x72>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <xQueueGenericSendFromISR+0x74>
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	623b      	str	r3, [r7, #32]
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	e7fd      	b.n	800480c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004810:	f001 fd46 	bl	80062a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004814:	f3ef 8211 	mrs	r2, BASEPRI
 8004818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	61fa      	str	r2, [r7, #28]
 800482a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800482c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800482e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <xQueueGenericSendFromISR+0xc2>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d12f      	bne.n	80048a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800484c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004858:	f000 fa39 	bl	8004cce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800485c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004864:	d112      	bne.n	800488c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d016      	beq.n	800489c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	3324      	adds	r3, #36	@ 0x24
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ff78 	bl	8005768 <xTaskRemoveFromEventList>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00e      	beq.n	800489c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e007      	b.n	800489c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800488c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004890:	3301      	adds	r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	b25a      	sxtb	r2, r3
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800489c:	2301      	movs	r3, #1
 800489e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80048a0:	e001      	b.n	80048a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3740      	adds	r7, #64	@ 0x40
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08c      	sub	sp, #48	@ 0x30
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <xQueueReceive+0x32>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	623b      	str	r3, [r7, #32]
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d103      	bne.n	80048fc <xQueueReceive+0x40>
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <xQueueReceive+0x44>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <xQueueReceive+0x46>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <xQueueReceive+0x62>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	61fb      	str	r3, [r7, #28]
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800491e:	f001 f8e9 	bl	8005af4 <xTaskGetSchedulerState>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <xQueueReceive+0x72>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <xQueueReceive+0x76>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <xQueueReceive+0x78>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <xQueueReceive+0x94>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	61bb      	str	r3, [r7, #24]
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004950:	f001 fbe4 	bl	800611c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01f      	beq.n	80049a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004964:	f000 fa1d 	bl	8004da2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	1e5a      	subs	r2, r3, #1
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00f      	beq.n	8004998 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	3310      	adds	r3, #16
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fef3 	bl	8005768 <xTaskRemoveFromEventList>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004988:	4b3c      	ldr	r3, [pc, #240]	@ (8004a7c <xQueueReceive+0x1c0>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004998:	f001 fbf0 	bl	800617c <vPortExitCritical>
				return pdPASS;
 800499c:	2301      	movs	r3, #1
 800499e:	e069      	b.n	8004a74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049a6:	f001 fbe9 	bl	800617c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e062      	b.n	8004a74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049b4:	f107 0310 	add.w	r3, r7, #16
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 ff39 	bl	8005830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049be:	2301      	movs	r3, #1
 80049c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049c2:	f001 fbdb 	bl	800617c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049c6:	f000 fce1 	bl	800538c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049ca:	f001 fba7 	bl	800611c <vPortEnterCritical>
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049d4:	b25b      	sxtb	r3, r3
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049da:	d103      	bne.n	80049e4 <xQueueReceive+0x128>
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049ea:	b25b      	sxtb	r3, r3
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049f0:	d103      	bne.n	80049fa <xQueueReceive+0x13e>
 80049f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049fa:	f001 fbbf 	bl	800617c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049fe:	1d3a      	adds	r2, r7, #4
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff28 	bl	800585c <xTaskCheckForTimeOut>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d123      	bne.n	8004a5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a14:	f000 fa3d 	bl	8004e92 <prvIsQueueEmpty>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a20:	3324      	adds	r3, #36	@ 0x24
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fe78 	bl	800571c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a2e:	f000 f9de 	bl	8004dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a32:	f000 fcb9 	bl	80053a8 <xTaskResumeAll>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d189      	bne.n	8004950 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a7c <xQueueReceive+0x1c0>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	e780      	b.n	8004950 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a50:	f000 f9cd 	bl	8004dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a54:	f000 fca8 	bl	80053a8 <xTaskResumeAll>
 8004a58:	e77a      	b.n	8004950 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a5c:	f000 f9c7 	bl	8004dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a60:	f000 fca2 	bl	80053a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a66:	f000 fa14 	bl	8004e92 <prvIsQueueEmpty>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f43f af6f 	beq.w	8004950 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3730      	adds	r7, #48	@ 0x30
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08e      	sub	sp, #56	@ 0x38
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	623b      	str	r3, [r7, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00b      	beq.n	8004ad4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	61fb      	str	r3, [r7, #28]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad4:	f001 f80e 	bl	8005af4 <xTaskGetSchedulerState>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <xQueueSemaphoreTake+0x64>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <xQueueSemaphoreTake+0x68>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <xQueueSemaphoreTake+0x6a>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	61bb      	str	r3, [r7, #24]
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	e7fd      	b.n	8004b02 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b06:	f001 fb09 	bl	800611c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d024      	beq.n	8004b60 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b18:	1e5a      	subs	r2, r3, #1
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d104      	bne.n	8004b30 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b26:	f001 f991 	bl	8005e4c <pvTaskIncrementMutexHeldCount>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00f      	beq.n	8004b58 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3a:	3310      	adds	r3, #16
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fe13 	bl	8005768 <xTaskRemoveFromEventList>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b48:	4b54      	ldr	r3, [pc, #336]	@ (8004c9c <xQueueSemaphoreTake+0x21c>)
 8004b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b58:	f001 fb10 	bl	800617c <vPortExitCritical>
				return pdPASS;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e098      	b.n	8004c92 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d112      	bne.n	8004b8c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	617b      	str	r3, [r7, #20]
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b84:	f001 fafa 	bl	800617c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e082      	b.n	8004c92 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fe4a 	bl	8005830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ba0:	f001 faec 	bl	800617c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ba4:	f000 fbf2 	bl	800538c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ba8:	f001 fab8 	bl	800611c <vPortEnterCritical>
 8004bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bb8:	d103      	bne.n	8004bc2 <xQueueSemaphoreTake+0x142>
 8004bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bc8:	b25b      	sxtb	r3, r3
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bce:	d103      	bne.n	8004bd8 <xQueueSemaphoreTake+0x158>
 8004bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bd8:	f001 fad0 	bl	800617c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bdc:	463a      	mov	r2, r7
 8004bde:	f107 030c 	add.w	r3, r7, #12
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fe39 	bl	800585c <xTaskCheckForTimeOut>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d132      	bne.n	8004c56 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bf2:	f000 f94e 	bl	8004e92 <prvIsQueueEmpty>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d026      	beq.n	8004c4a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004c04:	f001 fa8a 	bl	800611c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 ff8f 	bl	8005b30 <xTaskPriorityInherit>
 8004c12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004c14:	f001 fab2 	bl	800617c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1a:	3324      	adds	r3, #36	@ 0x24
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fd7b 	bl	800571c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c28:	f000 f8e1 	bl	8004dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c2c:	f000 fbbc 	bl	80053a8 <xTaskResumeAll>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f47f af67 	bne.w	8004b06 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004c38:	4b18      	ldr	r3, [pc, #96]	@ (8004c9c <xQueueSemaphoreTake+0x21c>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	e75d      	b.n	8004b06 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c4c:	f000 f8cf 	bl	8004dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c50:	f000 fbaa 	bl	80053a8 <xTaskResumeAll>
 8004c54:	e757      	b.n	8004b06 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c58:	f000 f8c9 	bl	8004dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c5c:	f000 fba4 	bl	80053a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c62:	f000 f916 	bl	8004e92 <prvIsQueueEmpty>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f43f af4c 	beq.w	8004b06 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004c74:	f001 fa52 	bl	800611c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c7a:	f000 f811 	bl	8004ca0 <prvGetDisinheritPriorityAfterTimeout>
 8004c7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 f850 	bl	8005d2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c8c:	f001 fa76 	bl	800617c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3738      	adds	r7, #56	@ 0x38
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f1c3 0307 	rsb	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e001      	b.n	8004cc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
	}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10d      	bne.n	8004d08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d14d      	bne.n	8004d90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 ff8f 	bl	8005c1c <xTaskPriorityDisinherit>
 8004cfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	e043      	b.n	8004d90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d119      	bne.n	8004d42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6858      	ldr	r0, [r3, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	461a      	mov	r2, r3
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	f001 fd83 	bl	8006824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	441a      	add	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d32b      	bcc.n	8004d90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	e026      	b.n	8004d90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	68d8      	ldr	r0, [r3, #12]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	f001 fd69 	bl	8006824 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	425b      	negs	r3, r3
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d207      	bcs.n	8004d7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	425b      	negs	r3, r3
 8004d78:	441a      	add	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d105      	bne.n	8004d90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d98:	697b      	ldr	r3, [r7, #20]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d018      	beq.n	8004de6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d303      	bcc.n	8004dd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68d9      	ldr	r1, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	461a      	mov	r2, r3
 8004de0:	6838      	ldr	r0, [r7, #0]
 8004de2:	f001 fd1f 	bl	8006824 <memcpy>
	}
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004df6:	f001 f991 	bl	800611c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e02:	e011      	b.n	8004e28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d012      	beq.n	8004e32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3324      	adds	r3, #36	@ 0x24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fca9 	bl	8005768 <xTaskRemoveFromEventList>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e1c:	f000 fd82 	bl	8005924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dce9      	bgt.n	8004e04 <prvUnlockQueue+0x16>
 8004e30:	e000      	b.n	8004e34 <prvUnlockQueue+0x46>
					break;
 8004e32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	22ff      	movs	r2, #255	@ 0xff
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e3c:	f001 f99e 	bl	800617c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e40:	f001 f96c 	bl	800611c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e4c:	e011      	b.n	8004e72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d012      	beq.n	8004e7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3310      	adds	r3, #16
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fc84 	bl	8005768 <xTaskRemoveFromEventList>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e66:	f000 fd5d 	bl	8005924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e6a:	7bbb      	ldrb	r3, [r7, #14]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dce9      	bgt.n	8004e4e <prvUnlockQueue+0x60>
 8004e7a:	e000      	b.n	8004e7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	22ff      	movs	r2, #255	@ 0xff
 8004e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e86:	f001 f979 	bl	800617c <vPortExitCritical>
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e9a:	f001 f93f 	bl	800611c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e001      	b.n	8004eb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eb0:	f001 f964 	bl	800617c <vPortExitCritical>

	return xReturn;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ec6:	f001 f929 	bl	800611c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d102      	bne.n	8004edc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e001      	b.n	8004ee0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ee0:	f001 f94c 	bl	800617c <vPortExitCritical>

	return xReturn;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b08e      	sub	sp, #56	@ 0x38
 8004ef2:	af04      	add	r7, sp, #16
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	623b      	str	r3, [r7, #32]
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	e7fd      	b.n	8004f16 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	61fb      	str	r3, [r7, #28]
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	e7fd      	b.n	8004f34 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f38:	23a0      	movs	r3, #160	@ 0xa0
 8004f3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f40:	d00b      	beq.n	8004f5a <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	61bb      	str	r3, [r7, #24]
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01e      	beq.n	8004fa0 <xTaskCreateStatic+0xb2>
 8004f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01b      	beq.n	8004fa0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	9302      	str	r3, [sp, #8]
 8004f82:	f107 0314 	add.w	r3, r7, #20
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f850 	bl	8005038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f9a:	f000 f8ed 	bl	8005178 <prvAddNewTaskToReadyList>
 8004f9e:	e001      	b.n	8004fa4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fa4:	697b      	ldr	r3, [r7, #20]
	}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3728      	adds	r7, #40	@ 0x28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b08c      	sub	sp, #48	@ 0x30
 8004fb2:	af04      	add	r7, sp, #16
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 f9ac 	bl	8006320 <pvPortMalloc>
 8004fc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00e      	beq.n	8004fee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fd0:	20a0      	movs	r0, #160	@ 0xa0
 8004fd2:	f001 f9a5 	bl	8006320 <pvPortMalloc>
 8004fd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fe4:	e005      	b.n	8004ff2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fe6:	6978      	ldr	r0, [r7, #20]
 8004fe8:	f001 fa68 	bl	80064bc <vPortFree>
 8004fec:	e001      	b.n	8004ff2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d017      	beq.n	8005028 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	2300      	movs	r3, #0
 8005004:	9303      	str	r3, [sp, #12]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f80e 	bl	8005038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800501c:	69f8      	ldr	r0, [r7, #28]
 800501e:	f000 f8ab 	bl	8005178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005022:	2301      	movs	r3, #1
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	e002      	b.n	800502e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800502c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800502e:	69bb      	ldr	r3, [r7, #24]
	}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005050:	3b01      	subs	r3, #1
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f023 0307 	bic.w	r3, r3, #7
 800505e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	617b      	str	r3, [r7, #20]
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01f      	beq.n	80050c8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e012      	b.n	80050b4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	7819      	ldrb	r1, [r3, #0]
 8005096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	3334      	adds	r3, #52	@ 0x34
 800509e:	460a      	mov	r2, r1
 80050a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d006      	beq.n	80050bc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3301      	adds	r3, #1
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	d9e9      	bls.n	800508e <prvInitialiseNewTask+0x56>
 80050ba:	e000      	b.n	80050be <prvInitialiseNewTask+0x86>
			{
				break;
 80050bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050c6:	e003      	b.n	80050d0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d901      	bls.n	80050da <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050d6:	2306      	movs	r3, #6
 80050d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	2200      	movs	r2, #0
 80050ea:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	3304      	adds	r3, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff f8bc 	bl	800426e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	3318      	adds	r3, #24
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff f8b7 	bl	800426e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005104:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005108:	f1c3 0207 	rsb	r2, r3, #7
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005114:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	2200      	movs	r2, #0
 800511a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	2200      	movs	r2, #0
 8005122:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	334c      	adds	r3, #76	@ 0x4c
 800512a:	224c      	movs	r2, #76	@ 0x4c
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f001 faec 	bl	800670c <memset>
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	4a0d      	ldr	r2, [pc, #52]	@ (800516c <prvInitialiseNewTask+0x134>)
 8005138:	651a      	str	r2, [r3, #80]	@ 0x50
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	4a0c      	ldr	r2, [pc, #48]	@ (8005170 <prvInitialiseNewTask+0x138>)
 800513e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005142:	4a0c      	ldr	r2, [pc, #48]	@ (8005174 <prvInitialiseNewTask+0x13c>)
 8005144:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	69b8      	ldr	r0, [r7, #24]
 800514c:	f000 fef8 	bl	8005f40 <pxPortInitialiseStack>
 8005150:	4602      	mov	r2, r0
 8005152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005154:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800515c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005162:	bf00      	nop
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20001214 	.word	0x20001214
 8005170:	2000127c 	.word	0x2000127c
 8005174:	200012e4 	.word	0x200012e4

08005178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005180:	f000 ffcc 	bl	800611c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005184:	4b2a      	ldr	r3, [pc, #168]	@ (8005230 <prvAddNewTaskToReadyList+0xb8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	4a29      	ldr	r2, [pc, #164]	@ (8005230 <prvAddNewTaskToReadyList+0xb8>)
 800518c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800518e:	4b29      	ldr	r3, [pc, #164]	@ (8005234 <prvAddNewTaskToReadyList+0xbc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005196:	4a27      	ldr	r2, [pc, #156]	@ (8005234 <prvAddNewTaskToReadyList+0xbc>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800519c:	4b24      	ldr	r3, [pc, #144]	@ (8005230 <prvAddNewTaskToReadyList+0xb8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d110      	bne.n	80051c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051a4:	f000 fbe2 	bl	800596c <prvInitialiseTaskLists>
 80051a8:	e00d      	b.n	80051c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051aa:	4b23      	ldr	r3, [pc, #140]	@ (8005238 <prvAddNewTaskToReadyList+0xc0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051b2:	4b20      	ldr	r3, [pc, #128]	@ (8005234 <prvAddNewTaskToReadyList+0xbc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	429a      	cmp	r2, r3
 80051be:	d802      	bhi.n	80051c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005234 <prvAddNewTaskToReadyList+0xbc>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051c6:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <prvAddNewTaskToReadyList+0xc4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3301      	adds	r3, #1
 80051cc:	4a1b      	ldr	r2, [pc, #108]	@ (800523c <prvAddNewTaskToReadyList+0xc4>)
 80051ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	2201      	movs	r2, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	4b19      	ldr	r3, [pc, #100]	@ (8005240 <prvAddNewTaskToReadyList+0xc8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4313      	orrs	r3, r2
 80051de:	4a18      	ldr	r2, [pc, #96]	@ (8005240 <prvAddNewTaskToReadyList+0xc8>)
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4a15      	ldr	r2, [pc, #84]	@ (8005244 <prvAddNewTaskToReadyList+0xcc>)
 80051f0:	441a      	add	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7ff f844 	bl	8004286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051fe:	f000 ffbd 	bl	800617c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <prvAddNewTaskToReadyList+0xc0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00e      	beq.n	8005228 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800520a:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <prvAddNewTaskToReadyList+0xbc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	429a      	cmp	r2, r3
 8005216:	d207      	bcs.n	8005228 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <prvAddNewTaskToReadyList+0xd0>)
 800521a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200005c0 	.word	0x200005c0
 8005234:	200004c0 	.word	0x200004c0
 8005238:	200005cc 	.word	0x200005cc
 800523c:	200005dc 	.word	0x200005dc
 8005240:	200005c8 	.word	0x200005c8
 8005244:	200004c4 	.word	0x200004c4
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d018      	beq.n	8005290 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800525e:	4b14      	ldr	r3, [pc, #80]	@ (80052b0 <vTaskDelay+0x64>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <vTaskDelay+0x32>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60bb      	str	r3, [r7, #8]
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	e7fd      	b.n	800527a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800527e:	f000 f885 	bl	800538c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005282:	2100      	movs	r1, #0
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fdf5 	bl	8005e74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800528a:	f000 f88d 	bl	80053a8 <xTaskResumeAll>
 800528e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005296:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <vTaskDelay+0x68>)
 8005298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200005e8 	.word	0x200005e8
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	@ 0x28
 80052bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052c6:	463a      	mov	r2, r7
 80052c8:	1d39      	adds	r1, r7, #4
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fb fbda 	bl	8000a88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	9202      	str	r2, [sp, #8]
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	2300      	movs	r3, #0
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	460a      	mov	r2, r1
 80052e6:	4921      	ldr	r1, [pc, #132]	@ (800536c <vTaskStartScheduler+0xb4>)
 80052e8:	4821      	ldr	r0, [pc, #132]	@ (8005370 <vTaskStartScheduler+0xb8>)
 80052ea:	f7ff fe00 	bl	8004eee <xTaskCreateStatic>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a20      	ldr	r2, [pc, #128]	@ (8005374 <vTaskStartScheduler+0xbc>)
 80052f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <vTaskStartScheduler+0xbc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052fc:	2301      	movs	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e001      	b.n	8005306 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d11b      	bne.n	8005344 <vTaskStartScheduler+0x8c>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	613b      	str	r3, [r7, #16]
}
 800531e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005320:	4b15      	ldr	r3, [pc, #84]	@ (8005378 <vTaskStartScheduler+0xc0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	334c      	adds	r3, #76	@ 0x4c
 8005326:	4a15      	ldr	r2, [pc, #84]	@ (800537c <vTaskStartScheduler+0xc4>)
 8005328:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800532a:	4b15      	ldr	r3, [pc, #84]	@ (8005380 <vTaskStartScheduler+0xc8>)
 800532c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005330:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005332:	4b14      	ldr	r3, [pc, #80]	@ (8005384 <vTaskStartScheduler+0xcc>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005338:	4b13      	ldr	r3, [pc, #76]	@ (8005388 <vTaskStartScheduler+0xd0>)
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800533e:	f000 fe7b 	bl	8006038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005342:	e00f      	b.n	8005364 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800534a:	d10b      	bne.n	8005364 <vTaskStartScheduler+0xac>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	60fb      	str	r3, [r7, #12]
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <vTaskStartScheduler+0xa8>
}
 8005364:	bf00      	nop
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	08006938 	.word	0x08006938
 8005370:	0800593d 	.word	0x0800593d
 8005374:	200005e4 	.word	0x200005e4
 8005378:	200004c0 	.word	0x200004c0
 800537c:	20000018 	.word	0x20000018
 8005380:	200005e0 	.word	0x200005e0
 8005384:	200005cc 	.word	0x200005cc
 8005388:	200005c4 	.word	0x200005c4

0800538c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005390:	4b04      	ldr	r3, [pc, #16]	@ (80053a4 <vTaskSuspendAll+0x18>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	4a03      	ldr	r2, [pc, #12]	@ (80053a4 <vTaskSuspendAll+0x18>)
 8005398:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	200005e8 	.word	0x200005e8

080053a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053b6:	4b42      	ldr	r3, [pc, #264]	@ (80054c0 <xTaskResumeAll+0x118>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	603b      	str	r3, [r7, #0]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053d6:	f000 fea1 	bl	800611c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053da:	4b39      	ldr	r3, [pc, #228]	@ (80054c0 <xTaskResumeAll+0x118>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3b01      	subs	r3, #1
 80053e0:	4a37      	ldr	r2, [pc, #220]	@ (80054c0 <xTaskResumeAll+0x118>)
 80053e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e4:	4b36      	ldr	r3, [pc, #216]	@ (80054c0 <xTaskResumeAll+0x118>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d161      	bne.n	80054b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053ec:	4b35      	ldr	r3, [pc, #212]	@ (80054c4 <xTaskResumeAll+0x11c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05d      	beq.n	80054b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053f4:	e02e      	b.n	8005454 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f6:	4b34      	ldr	r3, [pc, #208]	@ (80054c8 <xTaskResumeAll+0x120>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3318      	adds	r3, #24
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe ff9a 	bl	800433c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3304      	adds	r3, #4
 800540c:	4618      	mov	r0, r3
 800540e:	f7fe ff95 	bl	800433c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005416:	2201      	movs	r2, #1
 8005418:	409a      	lsls	r2, r3
 800541a:	4b2c      	ldr	r3, [pc, #176]	@ (80054cc <xTaskResumeAll+0x124>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	4a2a      	ldr	r2, [pc, #168]	@ (80054cc <xTaskResumeAll+0x124>)
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4a27      	ldr	r2, [pc, #156]	@ (80054d0 <xTaskResumeAll+0x128>)
 8005432:	441a      	add	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3304      	adds	r3, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7fe ff23 	bl	8004286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005444:	4b23      	ldr	r3, [pc, #140]	@ (80054d4 <xTaskResumeAll+0x12c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800544e:	4b22      	ldr	r3, [pc, #136]	@ (80054d8 <xTaskResumeAll+0x130>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005454:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <xTaskResumeAll+0x120>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1cc      	bne.n	80053f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005462:	f000 fb27 	bl	8005ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005466:	4b1d      	ldr	r3, [pc, #116]	@ (80054dc <xTaskResumeAll+0x134>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005472:	f000 f837 	bl	80054e4 <xTaskIncrementTick>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800547c:	4b16      	ldr	r3, [pc, #88]	@ (80054d8 <xTaskResumeAll+0x130>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3b01      	subs	r3, #1
 8005486:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f1      	bne.n	8005472 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800548e:	4b13      	ldr	r3, [pc, #76]	@ (80054dc <xTaskResumeAll+0x134>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005494:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <xTaskResumeAll+0x130>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d009      	beq.n	80054b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054a0:	4b0f      	ldr	r3, [pc, #60]	@ (80054e0 <xTaskResumeAll+0x138>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054b0:	f000 fe64 	bl	800617c <vPortExitCritical>

	return xAlreadyYielded;
 80054b4:	68bb      	ldr	r3, [r7, #8]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	200005e8 	.word	0x200005e8
 80054c4:	200005c0 	.word	0x200005c0
 80054c8:	20000580 	.word	0x20000580
 80054cc:	200005c8 	.word	0x200005c8
 80054d0:	200004c4 	.word	0x200004c4
 80054d4:	200004c0 	.word	0x200004c0
 80054d8:	200005d4 	.word	0x200005d4
 80054dc:	200005d0 	.word	0x200005d0
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ee:	4b4f      	ldr	r3, [pc, #316]	@ (800562c <xTaskIncrementTick+0x148>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 808f 	bne.w	8005616 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005630 <xTaskIncrementTick+0x14c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005500:	4a4b      	ldr	r2, [pc, #300]	@ (8005630 <xTaskIncrementTick+0x14c>)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d121      	bne.n	8005550 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800550c:	4b49      	ldr	r3, [pc, #292]	@ (8005634 <xTaskIncrementTick+0x150>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	603b      	str	r3, [r7, #0]
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	e7fd      	b.n	800552a <xTaskIncrementTick+0x46>
 800552e:	4b41      	ldr	r3, [pc, #260]	@ (8005634 <xTaskIncrementTick+0x150>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	4b40      	ldr	r3, [pc, #256]	@ (8005638 <xTaskIncrementTick+0x154>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a3e      	ldr	r2, [pc, #248]	@ (8005634 <xTaskIncrementTick+0x150>)
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	4a3e      	ldr	r2, [pc, #248]	@ (8005638 <xTaskIncrementTick+0x154>)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	4b3e      	ldr	r3, [pc, #248]	@ (800563c <xTaskIncrementTick+0x158>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	4a3c      	ldr	r2, [pc, #240]	@ (800563c <xTaskIncrementTick+0x158>)
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	f000 fab2 	bl	8005ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005550:	4b3b      	ldr	r3, [pc, #236]	@ (8005640 <xTaskIncrementTick+0x15c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	429a      	cmp	r2, r3
 8005558:	d348      	bcc.n	80055ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800555a:	4b36      	ldr	r3, [pc, #216]	@ (8005634 <xTaskIncrementTick+0x150>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005564:	4b36      	ldr	r3, [pc, #216]	@ (8005640 <xTaskIncrementTick+0x15c>)
 8005566:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800556a:	601a      	str	r2, [r3, #0]
					break;
 800556c:	e03e      	b.n	80055ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800556e:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <xTaskIncrementTick+0x150>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d203      	bcs.n	800558e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005586:	4a2e      	ldr	r2, [pc, #184]	@ (8005640 <xTaskIncrementTick+0x15c>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800558c:	e02e      	b.n	80055ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	3304      	adds	r3, #4
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe fed2 	bl	800433c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	3318      	adds	r3, #24
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe fec9 	bl	800433c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ae:	2201      	movs	r2, #1
 80055b0:	409a      	lsls	r2, r3
 80055b2:	4b24      	ldr	r3, [pc, #144]	@ (8005644 <xTaskIncrementTick+0x160>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	4a22      	ldr	r2, [pc, #136]	@ (8005644 <xTaskIncrementTick+0x160>)
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005648 <xTaskIncrementTick+0x164>)
 80055ca:	441a      	add	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f7fe fe57 	bl	8004286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055dc:	4b1b      	ldr	r3, [pc, #108]	@ (800564c <xTaskIncrementTick+0x168>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d3b9      	bcc.n	800555a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ea:	e7b6      	b.n	800555a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055ec:	4b17      	ldr	r3, [pc, #92]	@ (800564c <xTaskIncrementTick+0x168>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f2:	4915      	ldr	r1, [pc, #84]	@ (8005648 <xTaskIncrementTick+0x164>)
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d901      	bls.n	8005608 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005608:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <xTaskIncrementTick+0x16c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e004      	b.n	8005620 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005616:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <xTaskIncrementTick+0x170>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a0d      	ldr	r2, [pc, #52]	@ (8005654 <xTaskIncrementTick+0x170>)
 800561e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005620:	697b      	ldr	r3, [r7, #20]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	200005e8 	.word	0x200005e8
 8005630:	200005c4 	.word	0x200005c4
 8005634:	20000578 	.word	0x20000578
 8005638:	2000057c 	.word	0x2000057c
 800563c:	200005d8 	.word	0x200005d8
 8005640:	200005e0 	.word	0x200005e0
 8005644:	200005c8 	.word	0x200005c8
 8005648:	200004c4 	.word	0x200004c4
 800564c:	200004c0 	.word	0x200004c0
 8005650:	200005d4 	.word	0x200005d4
 8005654:	200005d0 	.word	0x200005d0

08005658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800565e:	4b29      	ldr	r3, [pc, #164]	@ (8005704 <vTaskSwitchContext+0xac>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005666:	4b28      	ldr	r3, [pc, #160]	@ (8005708 <vTaskSwitchContext+0xb0>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800566c:	e045      	b.n	80056fa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800566e:	4b26      	ldr	r3, [pc, #152]	@ (8005708 <vTaskSwitchContext+0xb0>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005674:	4b25      	ldr	r3, [pc, #148]	@ (800570c <vTaskSwitchContext+0xb4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	fab3 f383 	clz	r3, r3
 8005680:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	f1c3 031f 	rsb	r3, r3, #31
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	4921      	ldr	r1, [pc, #132]	@ (8005710 <vTaskSwitchContext+0xb8>)
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10b      	bne.n	80056b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	e7fd      	b.n	80056b2 <vTaskSwitchContext+0x5a>
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4a13      	ldr	r2, [pc, #76]	@ (8005710 <vTaskSwitchContext+0xb8>)
 80056c2:	4413      	add	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3308      	adds	r3, #8
 80056d8:	429a      	cmp	r2, r3
 80056da:	d104      	bne.n	80056e6 <vTaskSwitchContext+0x8e>
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a09      	ldr	r2, [pc, #36]	@ (8005714 <vTaskSwitchContext+0xbc>)
 80056ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056f0:	4b08      	ldr	r3, [pc, #32]	@ (8005714 <vTaskSwitchContext+0xbc>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	334c      	adds	r3, #76	@ 0x4c
 80056f6:	4a08      	ldr	r2, [pc, #32]	@ (8005718 <vTaskSwitchContext+0xc0>)
 80056f8:	6013      	str	r3, [r2, #0]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	200005e8 	.word	0x200005e8
 8005708:	200005d4 	.word	0x200005d4
 800570c:	200005c8 	.word	0x200005c8
 8005710:	200004c4 	.word	0x200004c4
 8005714:	200004c0 	.word	0x200004c0
 8005718:	20000018 	.word	0x20000018

0800571c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	60fb      	str	r3, [r7, #12]
}
 800573e:	bf00      	nop
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005744:	4b07      	ldr	r3, [pc, #28]	@ (8005764 <vTaskPlaceOnEventList+0x48>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3318      	adds	r3, #24
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7fe fdbd 	bl	80042cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005752:	2101      	movs	r1, #1
 8005754:	6838      	ldr	r0, [r7, #0]
 8005756:	f000 fb8d 	bl	8005e74 <prvAddCurrentTaskToDelayedList>
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200004c0 	.word	0x200004c0

08005768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3318      	adds	r3, #24
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fdce 	bl	800433c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005818 <xTaskRemoveFromEventList+0xb0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d11c      	bne.n	80057e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe fdc5 	bl	800433c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	2201      	movs	r2, #1
 80057b8:	409a      	lsls	r2, r3
 80057ba:	4b18      	ldr	r3, [pc, #96]	@ (800581c <xTaskRemoveFromEventList+0xb4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4313      	orrs	r3, r2
 80057c0:	4a16      	ldr	r2, [pc, #88]	@ (800581c <xTaskRemoveFromEventList+0xb4>)
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4a13      	ldr	r2, [pc, #76]	@ (8005820 <xTaskRemoveFromEventList+0xb8>)
 80057d2:	441a      	add	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f7fe fd53 	bl	8004286 <vListInsertEnd>
 80057e0:	e005      	b.n	80057ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3318      	adds	r3, #24
 80057e6:	4619      	mov	r1, r3
 80057e8:	480e      	ldr	r0, [pc, #56]	@ (8005824 <xTaskRemoveFromEventList+0xbc>)
 80057ea:	f7fe fd4c 	bl	8004286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <xTaskRemoveFromEventList+0xc0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d905      	bls.n	8005808 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005800:	4b0a      	ldr	r3, [pc, #40]	@ (800582c <xTaskRemoveFromEventList+0xc4>)
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e001      	b.n	800580c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800580c:	697b      	ldr	r3, [r7, #20]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200005e8 	.word	0x200005e8
 800581c:	200005c8 	.word	0x200005c8
 8005820:	200004c4 	.word	0x200004c4
 8005824:	20000580 	.word	0x20000580
 8005828:	200004c0 	.word	0x200004c0
 800582c:	200005d4 	.word	0x200005d4

08005830 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005838:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <vTaskInternalSetTimeOutState+0x24>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <vTaskInternalSetTimeOutState+0x28>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	605a      	str	r2, [r3, #4]
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	200005d8 	.word	0x200005d8
 8005858:	200005c4 	.word	0x200005c4

0800585c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	613b      	str	r3, [r7, #16]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	60fb      	str	r3, [r7, #12]
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	e7fd      	b.n	800589e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80058a2:	f000 fc3b 	bl	800611c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058a6:	4b1d      	ldr	r3, [pc, #116]	@ (800591c <xTaskCheckForTimeOut+0xc0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058be:	d102      	bne.n	80058c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	e023      	b.n	800590e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b15      	ldr	r3, [pc, #84]	@ (8005920 <xTaskCheckForTimeOut+0xc4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d007      	beq.n	80058e2 <xTaskCheckForTimeOut+0x86>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	e015      	b.n	800590e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d20b      	bcs.n	8005904 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1ad2      	subs	r2, r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff ff99 	bl	8005830 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e004      	b.n	800590e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800590a:	2301      	movs	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800590e:	f000 fc35 	bl	800617c <vPortExitCritical>

	return xReturn;
 8005912:	69fb      	ldr	r3, [r7, #28]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	200005c4 	.word	0x200005c4
 8005920:	200005d8 	.word	0x200005d8

08005924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005928:	4b03      	ldr	r3, [pc, #12]	@ (8005938 <vTaskMissedYield+0x14>)
 800592a:	2201      	movs	r2, #1
 800592c:	601a      	str	r2, [r3, #0]
}
 800592e:	bf00      	nop
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	200005d4 	.word	0x200005d4

0800593c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005944:	f000 f852 	bl	80059ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005948:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <prvIdleTask+0x28>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d9f9      	bls.n	8005944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005950:	4b05      	ldr	r3, [pc, #20]	@ (8005968 <prvIdleTask+0x2c>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005960:	e7f0      	b.n	8005944 <prvIdleTask+0x8>
 8005962:	bf00      	nop
 8005964:	200004c4 	.word	0x200004c4
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005972:	2300      	movs	r3, #0
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	e00c      	b.n	8005992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4a12      	ldr	r2, [pc, #72]	@ (80059cc <prvInitialiseTaskLists+0x60>)
 8005984:	4413      	add	r3, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe fc52 	bl	8004230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3301      	adds	r3, #1
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b06      	cmp	r3, #6
 8005996:	d9ef      	bls.n	8005978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005998:	480d      	ldr	r0, [pc, #52]	@ (80059d0 <prvInitialiseTaskLists+0x64>)
 800599a:	f7fe fc49 	bl	8004230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800599e:	480d      	ldr	r0, [pc, #52]	@ (80059d4 <prvInitialiseTaskLists+0x68>)
 80059a0:	f7fe fc46 	bl	8004230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059a4:	480c      	ldr	r0, [pc, #48]	@ (80059d8 <prvInitialiseTaskLists+0x6c>)
 80059a6:	f7fe fc43 	bl	8004230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059aa:	480c      	ldr	r0, [pc, #48]	@ (80059dc <prvInitialiseTaskLists+0x70>)
 80059ac:	f7fe fc40 	bl	8004230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059b0:	480b      	ldr	r0, [pc, #44]	@ (80059e0 <prvInitialiseTaskLists+0x74>)
 80059b2:	f7fe fc3d 	bl	8004230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059b6:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <prvInitialiseTaskLists+0x78>)
 80059b8:	4a05      	ldr	r2, [pc, #20]	@ (80059d0 <prvInitialiseTaskLists+0x64>)
 80059ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <prvInitialiseTaskLists+0x7c>)
 80059be:	4a05      	ldr	r2, [pc, #20]	@ (80059d4 <prvInitialiseTaskLists+0x68>)
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200004c4 	.word	0x200004c4
 80059d0:	20000550 	.word	0x20000550
 80059d4:	20000564 	.word	0x20000564
 80059d8:	20000580 	.word	0x20000580
 80059dc:	20000594 	.word	0x20000594
 80059e0:	200005ac 	.word	0x200005ac
 80059e4:	20000578 	.word	0x20000578
 80059e8:	2000057c 	.word	0x2000057c

080059ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f2:	e019      	b.n	8005a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059f4:	f000 fb92 	bl	800611c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f8:	4b10      	ldr	r3, [pc, #64]	@ (8005a3c <prvCheckTasksWaitingTermination+0x50>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fc99 	bl	800433c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <prvCheckTasksWaitingTermination+0x54>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	4a0b      	ldr	r2, [pc, #44]	@ (8005a40 <prvCheckTasksWaitingTermination+0x54>)
 8005a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a14:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a1e:	f000 fbad 	bl	800617c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f810 	bl	8005a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a28:	4b06      	ldr	r3, [pc, #24]	@ (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e1      	bne.n	80059f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000594 	.word	0x20000594
 8005a40:	200005c0 	.word	0x200005c0
 8005a44:	200005a8 	.word	0x200005a8

08005a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	334c      	adds	r3, #76	@ 0x4c
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fe61 	bl	800671c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d108      	bne.n	8005a76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fd27 	bl	80064bc <vPortFree>
				vPortFree( pxTCB );
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fd24 	bl	80064bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a74:	e019      	b.n	8005aaa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d103      	bne.n	8005a88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fd1b 	bl	80064bc <vPortFree>
	}
 8005a86:	e010      	b.n	8005aaa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d00b      	beq.n	8005aaa <prvDeleteTCB+0x62>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <prvDeleteTCB+0x5e>
	}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aba:	4b0c      	ldr	r3, [pc, #48]	@ (8005aec <prvResetNextTaskUnblockTime+0x38>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005acc:	e008      	b.n	8005ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ace:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <prvResetNextTaskUnblockTime+0x38>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4a04      	ldr	r2, [pc, #16]	@ (8005af0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ade:	6013      	str	r3, [r2, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000578 	.word	0x20000578
 8005af0:	200005e0 	.word	0x200005e0

08005af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005afa:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <xTaskGetSchedulerState+0x34>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b02:	2301      	movs	r3, #1
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e008      	b.n	8005b1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b08:	4b08      	ldr	r3, [pc, #32]	@ (8005b2c <xTaskGetSchedulerState+0x38>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b10:	2302      	movs	r3, #2
 8005b12:	607b      	str	r3, [r7, #4]
 8005b14:	e001      	b.n	8005b1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b1a:	687b      	ldr	r3, [r7, #4]
	}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	200005cc 	.word	0x200005cc
 8005b2c:	200005e8 	.word	0x200005e8

08005b30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d05e      	beq.n	8005c04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4a:	4b31      	ldr	r3, [pc, #196]	@ (8005c10 <xTaskPriorityInherit+0xe0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d24e      	bcs.n	8005bf2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	db06      	blt.n	8005b6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c10 <xTaskPriorityInherit+0xe0>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	f1c3 0207 	rsb	r2, r3, #7
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6959      	ldr	r1, [r3, #20]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4a26      	ldr	r2, [pc, #152]	@ (8005c14 <xTaskPriorityInherit+0xe4>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	d12f      	bne.n	8005be2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fbd8 	bl	800433c <uxListRemove>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	2201      	movs	r2, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43da      	mvns	r2, r3
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <xTaskPriorityInherit+0xe8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <xTaskPriorityInherit+0xe8>)
 8005ba6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ba8:	4b19      	ldr	r3, [pc, #100]	@ (8005c10 <xTaskPriorityInherit+0xe0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	409a      	lsls	r2, r3
 8005bba:	4b17      	ldr	r3, [pc, #92]	@ (8005c18 <xTaskPriorityInherit+0xe8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	4a15      	ldr	r2, [pc, #84]	@ (8005c18 <xTaskPriorityInherit+0xe8>)
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4a10      	ldr	r2, [pc, #64]	@ (8005c14 <xTaskPriorityInherit+0xe4>)
 8005bd2:	441a      	add	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fe fb53 	bl	8004286 <vListInsertEnd>
 8005be0:	e004      	b.n	8005bec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005be2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <xTaskPriorityInherit+0xe0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e008      	b.n	8005c04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bf6:	4b06      	ldr	r3, [pc, #24]	@ (8005c10 <xTaskPriorityInherit+0xe0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d201      	bcs.n	8005c04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c04:	68fb      	ldr	r3, [r7, #12]
	}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	200004c0 	.word	0x200004c0
 8005c14:	200004c4 	.word	0x200004c4
 8005c18:	200005c8 	.word	0x200005c8

08005c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d070      	beq.n	8005d14 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c32:	4b3b      	ldr	r3, [pc, #236]	@ (8005d20 <xTaskPriorityDisinherit+0x104>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d00b      	beq.n	8005c54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60fb      	str	r3, [r7, #12]
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60bb      	str	r3, [r7, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c78:	1e5a      	subs	r2, r3, #1
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d044      	beq.n	8005d14 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d140      	bne.n	8005d14 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fb50 	bl	800433c <uxListRemove>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d115      	bne.n	8005cce <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca6:	491f      	ldr	r1, [pc, #124]	@ (8005d24 <xTaskPriorityDisinherit+0x108>)
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xTaskPriorityDisinherit+0xb2>
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <xTaskPriorityDisinherit+0x10c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <xTaskPriorityDisinherit+0x10c>)
 8005ccc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	f1c3 0207 	rsb	r2, r3, #7
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	4b0f      	ldr	r3, [pc, #60]	@ (8005d28 <xTaskPriorityDisinherit+0x10c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d28 <xTaskPriorityDisinherit+0x10c>)
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4a08      	ldr	r2, [pc, #32]	@ (8005d24 <xTaskPriorityDisinherit+0x108>)
 8005d02:	441a      	add	r2, r3
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f7fe fabb 	bl	8004286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d14:	697b      	ldr	r3, [r7, #20]
	}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200004c0 	.word	0x200004c0
 8005d24:	200004c4 	.word	0x200004c4
 8005d28:	200005c8 	.word	0x200005c8

08005d2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d079      	beq.n	8005e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60fb      	str	r3, [r7, #12]
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d902      	bls.n	8005d74 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	e002      	b.n	8005d7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d059      	beq.n	8005e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d154      	bne.n	8005e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e40 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d10b      	bne.n	8005db0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	60bb      	str	r3, [r7, #8]
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	db04      	blt.n	8005dce <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f1c3 0207 	rsb	r2, r3, #7
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	6959      	ldr	r1, [r3, #20]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4a19      	ldr	r2, [pc, #100]	@ (8005e44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005dde:	4413      	add	r3, r2
 8005de0:	4299      	cmp	r1, r3
 8005de2:	d129      	bne.n	8005e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe faa7 	bl	800433c <uxListRemove>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df8:	2201      	movs	r2, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43da      	mvns	r2, r3
 8005e00:	4b11      	ldr	r3, [pc, #68]	@ (8005e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4013      	ands	r3, r2
 8005e06:	4a10      	ldr	r2, [pc, #64]	@ (8005e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	2201      	movs	r2, #1
 8005e10:	409a      	lsls	r2, r3
 8005e12:	4b0d      	ldr	r3, [pc, #52]	@ (8005e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	4a0b      	ldr	r2, [pc, #44]	@ (8005e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4a06      	ldr	r2, [pc, #24]	@ (8005e44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e2a:	441a      	add	r2, r3
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f7fe fa27 	bl	8004286 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e38:	bf00      	nop
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	200004c0 	.word	0x200004c0
 8005e44:	200004c4 	.word	0x200004c4
 8005e48:	200005c8 	.word	0x200005c8

08005e4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e50:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e5e:	3201      	adds	r2, #1
 8005e60:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005e62:	4b03      	ldr	r3, [pc, #12]	@ (8005e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e64:	681b      	ldr	r3, [r3, #0]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	200004c0 	.word	0x200004c0

08005e74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e7e:	4b29      	ldr	r3, [pc, #164]	@ (8005f24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e84:	4b28      	ldr	r3, [pc, #160]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe fa56 	bl	800433c <uxListRemove>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e96:	4b24      	ldr	r3, [pc, #144]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43da      	mvns	r2, r3
 8005ea4:	4b21      	ldr	r3, [pc, #132]	@ (8005f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	4a20      	ldr	r2, [pc, #128]	@ (8005f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eb4:	d10a      	bne.n	8005ecc <prvAddCurrentTaskToDelayedList+0x58>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	481a      	ldr	r0, [pc, #104]	@ (8005f30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ec6:	f7fe f9de 	bl	8004286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005eca:	e026      	b.n	8005f1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ed4:	4b14      	ldr	r3, [pc, #80]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d209      	bcs.n	8005ef8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee4:	4b13      	ldr	r3, [pc, #76]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7fe f9eb 	bl	80042cc <vListInsert>
}
 8005ef6:	e010      	b.n	8005f1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7fe f9e1 	bl	80042cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d202      	bcs.n	8005f1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f14:	4a09      	ldr	r2, [pc, #36]	@ (8005f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6013      	str	r3, [r2, #0]
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	200005c4 	.word	0x200005c4
 8005f28:	200004c0 	.word	0x200004c0
 8005f2c:	200005c8 	.word	0x200005c8
 8005f30:	200005ac 	.word	0x200005ac
 8005f34:	2000057c 	.word	0x2000057c
 8005f38:	20000578 	.word	0x20000578
 8005f3c:	200005e0 	.word	0x200005e0

08005f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3b04      	subs	r3, #4
 8005f50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3b04      	subs	r3, #4
 8005f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f70:	4a08      	ldr	r2, [pc, #32]	@ (8005f94 <pxPortInitialiseStack+0x54>)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3b14      	subs	r3, #20
 8005f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b20      	subs	r3, #32
 8005f86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f88:	68fb      	ldr	r3, [r7, #12]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	08005f99 	.word	0x08005f99

08005f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fa2:	4b12      	ldr	r3, [pc, #72]	@ (8005fec <prvTaskExitError+0x54>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005faa:	d00b      	beq.n	8005fc4 <prvTaskExitError+0x2c>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <prvTaskExitError+0x28>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60bb      	str	r3, [r7, #8]
}
 8005fd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fd8:	bf00      	nop
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0fc      	beq.n	8005fda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr
 8005fec:	20000014 	.word	0x20000014

08005ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <pxCurrentTCBConst2>)
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	6808      	ldr	r0, [r1, #0]
 8005ff6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ffa:	f380 8809 	msr	PSP, r0
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8811 	msr	BASEPRI, r0
 800600a:	f04e 0e0d 	orr.w	lr, lr, #13
 800600e:	4770      	bx	lr

08006010 <pxCurrentTCBConst2>:
 8006010:	200004c0 	.word	0x200004c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006018:	4806      	ldr	r0, [pc, #24]	@ (8006034 <prvPortStartFirstTask+0x1c>)
 800601a:	6800      	ldr	r0, [r0, #0]
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f380 8808 	msr	MSP, r0
 8006022:	b662      	cpsie	i
 8006024:	b661      	cpsie	f
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	df00      	svc	0
 8006030:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006032:	bf00      	nop
 8006034:	e000ed08 	.word	0xe000ed08

08006038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800603e:	4b32      	ldr	r3, [pc, #200]	@ (8006108 <xPortStartScheduler+0xd0>)
 8006040:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22ff      	movs	r2, #255	@ 0xff
 800604e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b2a      	ldr	r3, [pc, #168]	@ (800610c <xPortStartScheduler+0xd4>)
 8006064:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006066:	4b2a      	ldr	r3, [pc, #168]	@ (8006110 <xPortStartScheduler+0xd8>)
 8006068:	2207      	movs	r2, #7
 800606a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800606c:	e009      	b.n	8006082 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800606e:	4b28      	ldr	r3, [pc, #160]	@ (8006110 <xPortStartScheduler+0xd8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3b01      	subs	r3, #1
 8006074:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <xPortStartScheduler+0xd8>)
 8006076:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608a:	2b80      	cmp	r3, #128	@ 0x80
 800608c:	d0ef      	beq.n	800606e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800608e:	4b20      	ldr	r3, [pc, #128]	@ (8006110 <xPortStartScheduler+0xd8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1c3 0307 	rsb	r3, r3, #7
 8006096:	2b04      	cmp	r3, #4
 8006098:	d00b      	beq.n	80060b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	60bb      	str	r3, [r7, #8]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060b2:	4b17      	ldr	r3, [pc, #92]	@ (8006110 <xPortStartScheduler+0xd8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	4a15      	ldr	r2, [pc, #84]	@ (8006110 <xPortStartScheduler+0xd8>)
 80060ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060bc:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <xPortStartScheduler+0xd8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060c4:	4a12      	ldr	r2, [pc, #72]	@ (8006110 <xPortStartScheduler+0xd8>)
 80060c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060d0:	4b10      	ldr	r3, [pc, #64]	@ (8006114 <xPortStartScheduler+0xdc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a0f      	ldr	r2, [pc, #60]	@ (8006114 <xPortStartScheduler+0xdc>)
 80060d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006114 <xPortStartScheduler+0xdc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006114 <xPortStartScheduler+0xdc>)
 80060e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060e8:	f000 f8b8 	bl	800625c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006118 <xPortStartScheduler+0xe0>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060f2:	f7ff ff91 	bl	8006018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060f6:	f7ff faaf 	bl	8005658 <vTaskSwitchContext>
	prvTaskExitError();
 80060fa:	f7ff ff4d 	bl	8005f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000e400 	.word	0xe000e400
 800610c:	200005ec 	.word	0x200005ec
 8006110:	200005f0 	.word	0x200005f0
 8006114:	e000ed20 	.word	0xe000ed20
 8006118:	20000014 	.word	0x20000014

0800611c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	607b      	str	r3, [r7, #4]
}
 8006134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006136:	4b0f      	ldr	r3, [pc, #60]	@ (8006174 <vPortEnterCritical+0x58>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3301      	adds	r3, #1
 800613c:	4a0d      	ldr	r2, [pc, #52]	@ (8006174 <vPortEnterCritical+0x58>)
 800613e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006140:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <vPortEnterCritical+0x58>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d110      	bne.n	800616a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <vPortEnterCritical+0x5c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <vPortEnterCritical+0x4e>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	603b      	str	r3, [r7, #0]
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	e7fd      	b.n	8006166 <vPortEnterCritical+0x4a>
	}
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	20000014 	.word	0x20000014
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006182:	4b12      	ldr	r3, [pc, #72]	@ (80061cc <vPortExitCritical+0x50>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <vPortExitCritical+0x26>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	607b      	str	r3, [r7, #4]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061a2:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <vPortExitCritical+0x50>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	4a08      	ldr	r2, [pc, #32]	@ (80061cc <vPortExitCritical+0x50>)
 80061aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061ac:	4b07      	ldr	r3, [pc, #28]	@ (80061cc <vPortExitCritical+0x50>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <vPortExitCritical+0x44>
 80061b4:	2300      	movs	r3, #0
 80061b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f383 8811 	msr	BASEPRI, r3
}
 80061be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	20000014 	.word	0x20000014

080061d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061d0:	f3ef 8009 	mrs	r0, PSP
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <pxCurrentTCBConst>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061e0:	6010      	str	r0, [r2, #0]
 80061e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80061e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061ea:	f380 8811 	msr	BASEPRI, r0
 80061ee:	f7ff fa33 	bl	8005658 <vTaskSwitchContext>
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	6808      	ldr	r0, [r1, #0]
 8006202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006206:	f380 8809 	msr	PSP, r0
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	4770      	bx	lr

08006210 <pxCurrentTCBConst>:
 8006210:	200004c0 	.word	0x200004c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	607b      	str	r3, [r7, #4]
}
 8006230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006232:	f7ff f957 	bl	80054e4 <xTaskIncrementTick>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <SysTick_Handler+0x40>)
 800623e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f383 8811 	msr	BASEPRI, r3
}
 800624e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006260:	4b0a      	ldr	r3, [pc, #40]	@ (800628c <vPortSetupTimerInterrupt+0x30>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800626c:	4b09      	ldr	r3, [pc, #36]	@ (8006294 <vPortSetupTimerInterrupt+0x38>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a09      	ldr	r2, [pc, #36]	@ (8006298 <vPortSetupTimerInterrupt+0x3c>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	099b      	lsrs	r3, r3, #6
 8006278:	4a08      	ldr	r2, [pc, #32]	@ (800629c <vPortSetupTimerInterrupt+0x40>)
 800627a:	3b01      	subs	r3, #1
 800627c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800627e:	4b03      	ldr	r3, [pc, #12]	@ (800628c <vPortSetupTimerInterrupt+0x30>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	e000e010 	.word	0xe000e010
 8006290:	e000e018 	.word	0xe000e018
 8006294:	20000008 	.word	0x20000008
 8006298:	10624dd3 	.word	0x10624dd3
 800629c:	e000e014 	.word	0xe000e014

080062a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062a6:	f3ef 8305 	mrs	r3, IPSR
 80062aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b0f      	cmp	r3, #15
 80062b0:	d915      	bls.n	80062de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062b2:	4a17      	ldr	r2, [pc, #92]	@ (8006310 <vPortValidateInterruptPriority+0x70>)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062bc:	4b15      	ldr	r3, [pc, #84]	@ (8006314 <vPortValidateInterruptPriority+0x74>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	7afa      	ldrb	r2, [r7, #11]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d20b      	bcs.n	80062de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	607b      	str	r3, [r7, #4]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062de:	4b0e      	ldr	r3, [pc, #56]	@ (8006318 <vPortValidateInterruptPriority+0x78>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <vPortValidateInterruptPriority+0x7c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d90b      	bls.n	8006306 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	603b      	str	r3, [r7, #0]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <vPortValidateInterruptPriority+0x62>
	}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	e000e3f0 	.word	0xe000e3f0
 8006314:	200005ec 	.word	0x200005ec
 8006318:	e000ed0c 	.word	0xe000ed0c
 800631c:	200005f0 	.word	0x200005f0

08006320 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	@ 0x28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800632c:	f7ff f82e 	bl	800538c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006330:	4b5c      	ldr	r3, [pc, #368]	@ (80064a4 <pvPortMalloc+0x184>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006338:	f000 f92e 	bl	8006598 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800633c:	4b5a      	ldr	r3, [pc, #360]	@ (80064a8 <pvPortMalloc+0x188>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4013      	ands	r3, r2
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 8095 	bne.w	8006474 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01e      	beq.n	800638e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006350:	2208      	movs	r2, #8
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4413      	add	r3, r2
 8006356:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	2b00      	cmp	r3, #0
 8006360:	d015      	beq.n	800638e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f023 0307 	bic.w	r3, r3, #7
 8006368:	3308      	adds	r3, #8
 800636a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <pvPortMalloc+0x6e>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	617b      	str	r3, [r7, #20]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d06f      	beq.n	8006474 <pvPortMalloc+0x154>
 8006394:	4b45      	ldr	r3, [pc, #276]	@ (80064ac <pvPortMalloc+0x18c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d86a      	bhi.n	8006474 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800639e:	4b44      	ldr	r3, [pc, #272]	@ (80064b0 <pvPortMalloc+0x190>)
 80063a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063a2:	4b43      	ldr	r3, [pc, #268]	@ (80064b0 <pvPortMalloc+0x190>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063a8:	e004      	b.n	80063b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d903      	bls.n	80063c6 <pvPortMalloc+0xa6>
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f1      	bne.n	80063aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063c6:	4b37      	ldr	r3, [pc, #220]	@ (80064a4 <pvPortMalloc+0x184>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d051      	beq.n	8006474 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2208      	movs	r2, #8
 80063d6:	4413      	add	r3, r2
 80063d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	2308      	movs	r3, #8
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d920      	bls.n	8006434 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <pvPortMalloc+0xfc>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	613b      	str	r3, [r7, #16]
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800642e:	69b8      	ldr	r0, [r7, #24]
 8006430:	f000 f914 	bl	800665c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006434:	4b1d      	ldr	r3, [pc, #116]	@ (80064ac <pvPortMalloc+0x18c>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	4a1b      	ldr	r2, [pc, #108]	@ (80064ac <pvPortMalloc+0x18c>)
 8006440:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006442:	4b1a      	ldr	r3, [pc, #104]	@ (80064ac <pvPortMalloc+0x18c>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b1b      	ldr	r3, [pc, #108]	@ (80064b4 <pvPortMalloc+0x194>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d203      	bcs.n	8006456 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800644e:	4b17      	ldr	r3, [pc, #92]	@ (80064ac <pvPortMalloc+0x18c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <pvPortMalloc+0x194>)
 8006454:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4b13      	ldr	r3, [pc, #76]	@ (80064a8 <pvPortMalloc+0x188>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	431a      	orrs	r2, r3
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800646a:	4b13      	ldr	r3, [pc, #76]	@ (80064b8 <pvPortMalloc+0x198>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	4a11      	ldr	r2, [pc, #68]	@ (80064b8 <pvPortMalloc+0x198>)
 8006472:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006474:	f7fe ff98 	bl	80053a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <pvPortMalloc+0x17a>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60fb      	str	r3, [r7, #12]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <pvPortMalloc+0x176>
	return pvReturn;
 800649a:	69fb      	ldr	r3, [r7, #28]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	@ 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	200011fc 	.word	0x200011fc
 80064a8:	20001210 	.word	0x20001210
 80064ac:	20001200 	.word	0x20001200
 80064b0:	200011f4 	.word	0x200011f4
 80064b4:	20001204 	.word	0x20001204
 80064b8:	20001208 	.word	0x20001208

080064bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d04f      	beq.n	800656e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064ce:	2308      	movs	r3, #8
 80064d0:	425b      	negs	r3, r3
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4413      	add	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	4b25      	ldr	r3, [pc, #148]	@ (8006578 <vPortFree+0xbc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <vPortFree+0x46>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	60fb      	str	r3, [r7, #12]
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	e7fd      	b.n	80064fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <vPortFree+0x66>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	60bb      	str	r3, [r7, #8]
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	e7fd      	b.n	800651e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	4b14      	ldr	r3, [pc, #80]	@ (8006578 <vPortFree+0xbc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01e      	beq.n	800656e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11a      	bne.n	800656e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <vPortFree+0xbc>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	43db      	mvns	r3, r3
 8006542:	401a      	ands	r2, r3
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006548:	f7fe ff20 	bl	800538c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <vPortFree+0xc0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4413      	add	r3, r2
 8006556:	4a09      	ldr	r2, [pc, #36]	@ (800657c <vPortFree+0xc0>)
 8006558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f000 f87e 	bl	800665c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006560:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <vPortFree+0xc4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	4a06      	ldr	r2, [pc, #24]	@ (8006580 <vPortFree+0xc4>)
 8006568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800656a:	f7fe ff1d 	bl	80053a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800656e:	bf00      	nop
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20001210 	.word	0x20001210
 800657c:	20001200 	.word	0x20001200
 8006580:	2000120c 	.word	0x2000120c

08006584 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8006588:	4b02      	ldr	r3, [pc, #8]	@ (8006594 <xPortGetFreeHeapSize+0x10>)
 800658a:	681b      	ldr	r3, [r3, #0]
}
 800658c:	4618      	mov	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	20001200 	.word	0x20001200

08006598 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800659e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80065a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065a4:	4b27      	ldr	r3, [pc, #156]	@ (8006644 <prvHeapInit+0xac>)
 80065a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3307      	adds	r3, #7
 80065b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0307 	bic.w	r3, r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006644 <prvHeapInit+0xac>)
 80065c8:	4413      	add	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <prvHeapInit+0xb0>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006648 <prvHeapInit+0xb0>)
 80065d8:	2200      	movs	r2, #0
 80065da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065e4:	2208      	movs	r2, #8
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0307 	bic.w	r3, r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a15      	ldr	r2, [pc, #84]	@ (800664c <prvHeapInit+0xb4>)
 80065f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065fa:	4b14      	ldr	r3, [pc, #80]	@ (800664c <prvHeapInit+0xb4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2200      	movs	r2, #0
 8006600:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006602:	4b12      	ldr	r3, [pc, #72]	@ (800664c <prvHeapInit+0xb4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006618:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <prvHeapInit+0xb4>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	4a0a      	ldr	r2, [pc, #40]	@ (8006650 <prvHeapInit+0xb8>)
 8006626:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4a09      	ldr	r2, [pc, #36]	@ (8006654 <prvHeapInit+0xbc>)
 800662e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006630:	4b09      	ldr	r3, [pc, #36]	@ (8006658 <prvHeapInit+0xc0>)
 8006632:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006636:	601a      	str	r2, [r3, #0]
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200005f4 	.word	0x200005f4
 8006648:	200011f4 	.word	0x200011f4
 800664c:	200011fc 	.word	0x200011fc
 8006650:	20001204 	.word	0x20001204
 8006654:	20001200 	.word	0x20001200
 8006658:	20001210 	.word	0x20001210

0800665c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006664:	4b27      	ldr	r3, [pc, #156]	@ (8006704 <prvInsertBlockIntoFreeList+0xa8>)
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e002      	b.n	8006670 <prvInsertBlockIntoFreeList+0x14>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	429a      	cmp	r2, r3
 8006678:	d8f7      	bhi.n	800666a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4413      	add	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d108      	bne.n	800669e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	441a      	add	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	441a      	add	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d118      	bne.n	80066e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b14      	ldr	r3, [pc, #80]	@ (8006708 <prvInsertBlockIntoFreeList+0xac>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d00d      	beq.n	80066da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	e008      	b.n	80066ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066da:	4b0b      	ldr	r3, [pc, #44]	@ (8006708 <prvInsertBlockIntoFreeList+0xac>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	e003      	b.n	80066ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d002      	beq.n	80066fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr
 8006704:	200011f4 	.word	0x200011f4
 8006708:	200011fc 	.word	0x200011fc

0800670c <memset>:
 800670c:	4603      	mov	r3, r0
 800670e:	4402      	add	r2, r0
 8006710:	4293      	cmp	r3, r2
 8006712:	d100      	bne.n	8006716 <memset+0xa>
 8006714:	4770      	bx	lr
 8006716:	f803 1b01 	strb.w	r1, [r3], #1
 800671a:	e7f9      	b.n	8006710 <memset+0x4>

0800671c <_reclaim_reent>:
 800671c:	4b2d      	ldr	r3, [pc, #180]	@ (80067d4 <_reclaim_reent+0xb8>)
 800671e:	b570      	push	{r4, r5, r6, lr}
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4604      	mov	r4, r0
 8006724:	4283      	cmp	r3, r0
 8006726:	d053      	beq.n	80067d0 <_reclaim_reent+0xb4>
 8006728:	69c3      	ldr	r3, [r0, #28]
 800672a:	b31b      	cbz	r3, 8006774 <_reclaim_reent+0x58>
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	b163      	cbz	r3, 800674a <_reclaim_reent+0x2e>
 8006730:	2500      	movs	r5, #0
 8006732:	69e3      	ldr	r3, [r4, #28]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	5959      	ldr	r1, [r3, r5]
 8006738:	b9b1      	cbnz	r1, 8006768 <_reclaim_reent+0x4c>
 800673a:	3504      	adds	r5, #4
 800673c:	2d80      	cmp	r5, #128	@ 0x80
 800673e:	d1f8      	bne.n	8006732 <_reclaim_reent+0x16>
 8006740:	69e3      	ldr	r3, [r4, #28]
 8006742:	4620      	mov	r0, r4
 8006744:	68d9      	ldr	r1, [r3, #12]
 8006746:	f000 f87b 	bl	8006840 <_free_r>
 800674a:	69e3      	ldr	r3, [r4, #28]
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	b111      	cbz	r1, 8006756 <_reclaim_reent+0x3a>
 8006750:	4620      	mov	r0, r4
 8006752:	f000 f875 	bl	8006840 <_free_r>
 8006756:	69e3      	ldr	r3, [r4, #28]
 8006758:	689d      	ldr	r5, [r3, #8]
 800675a:	b15d      	cbz	r5, 8006774 <_reclaim_reent+0x58>
 800675c:	4629      	mov	r1, r5
 800675e:	4620      	mov	r0, r4
 8006760:	682d      	ldr	r5, [r5, #0]
 8006762:	f000 f86d 	bl	8006840 <_free_r>
 8006766:	e7f8      	b.n	800675a <_reclaim_reent+0x3e>
 8006768:	680e      	ldr	r6, [r1, #0]
 800676a:	4620      	mov	r0, r4
 800676c:	f000 f868 	bl	8006840 <_free_r>
 8006770:	4631      	mov	r1, r6
 8006772:	e7e1      	b.n	8006738 <_reclaim_reent+0x1c>
 8006774:	6961      	ldr	r1, [r4, #20]
 8006776:	b111      	cbz	r1, 800677e <_reclaim_reent+0x62>
 8006778:	4620      	mov	r0, r4
 800677a:	f000 f861 	bl	8006840 <_free_r>
 800677e:	69e1      	ldr	r1, [r4, #28]
 8006780:	b111      	cbz	r1, 8006788 <_reclaim_reent+0x6c>
 8006782:	4620      	mov	r0, r4
 8006784:	f000 f85c 	bl	8006840 <_free_r>
 8006788:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800678a:	b111      	cbz	r1, 8006792 <_reclaim_reent+0x76>
 800678c:	4620      	mov	r0, r4
 800678e:	f000 f857 	bl	8006840 <_free_r>
 8006792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006794:	b111      	cbz	r1, 800679c <_reclaim_reent+0x80>
 8006796:	4620      	mov	r0, r4
 8006798:	f000 f852 	bl	8006840 <_free_r>
 800679c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800679e:	b111      	cbz	r1, 80067a6 <_reclaim_reent+0x8a>
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 f84d 	bl	8006840 <_free_r>
 80067a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80067a8:	b111      	cbz	r1, 80067b0 <_reclaim_reent+0x94>
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 f848 	bl	8006840 <_free_r>
 80067b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80067b2:	b111      	cbz	r1, 80067ba <_reclaim_reent+0x9e>
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 f843 	bl	8006840 <_free_r>
 80067ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80067bc:	b111      	cbz	r1, 80067c4 <_reclaim_reent+0xa8>
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 f83e 	bl	8006840 <_free_r>
 80067c4:	6a23      	ldr	r3, [r4, #32]
 80067c6:	b11b      	cbz	r3, 80067d0 <_reclaim_reent+0xb4>
 80067c8:	4620      	mov	r0, r4
 80067ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067ce:	4718      	bx	r3
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	bf00      	nop
 80067d4:	20000018 	.word	0x20000018

080067d8 <__libc_init_array>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	2600      	movs	r6, #0
 80067dc:	4d0c      	ldr	r5, [pc, #48]	@ (8006810 <__libc_init_array+0x38>)
 80067de:	4c0d      	ldr	r4, [pc, #52]	@ (8006814 <__libc_init_array+0x3c>)
 80067e0:	1b64      	subs	r4, r4, r5
 80067e2:	10a4      	asrs	r4, r4, #2
 80067e4:	42a6      	cmp	r6, r4
 80067e6:	d109      	bne.n	80067fc <__libc_init_array+0x24>
 80067e8:	f000 f87e 	bl	80068e8 <_init>
 80067ec:	2600      	movs	r6, #0
 80067ee:	4d0a      	ldr	r5, [pc, #40]	@ (8006818 <__libc_init_array+0x40>)
 80067f0:	4c0a      	ldr	r4, [pc, #40]	@ (800681c <__libc_init_array+0x44>)
 80067f2:	1b64      	subs	r4, r4, r5
 80067f4:	10a4      	asrs	r4, r4, #2
 80067f6:	42a6      	cmp	r6, r4
 80067f8:	d105      	bne.n	8006806 <__libc_init_array+0x2e>
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006800:	4798      	blx	r3
 8006802:	3601      	adds	r6, #1
 8006804:	e7ee      	b.n	80067e4 <__libc_init_array+0xc>
 8006806:	f855 3b04 	ldr.w	r3, [r5], #4
 800680a:	4798      	blx	r3
 800680c:	3601      	adds	r6, #1
 800680e:	e7f2      	b.n	80067f6 <__libc_init_array+0x1e>
 8006810:	0800696c 	.word	0x0800696c
 8006814:	0800696c 	.word	0x0800696c
 8006818:	0800696c 	.word	0x0800696c
 800681c:	08006970 	.word	0x08006970

08006820 <__retarget_lock_acquire_recursive>:
 8006820:	4770      	bx	lr

08006822 <__retarget_lock_release_recursive>:
 8006822:	4770      	bx	lr

08006824 <memcpy>:
 8006824:	440a      	add	r2, r1
 8006826:	4291      	cmp	r1, r2
 8006828:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800682c:	d100      	bne.n	8006830 <memcpy+0xc>
 800682e:	4770      	bx	lr
 8006830:	b510      	push	{r4, lr}
 8006832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006836:	4291      	cmp	r1, r2
 8006838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800683c:	d1f9      	bne.n	8006832 <memcpy+0xe>
 800683e:	bd10      	pop	{r4, pc}

08006840 <_free_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4605      	mov	r5, r0
 8006844:	2900      	cmp	r1, #0
 8006846:	d040      	beq.n	80068ca <_free_r+0x8a>
 8006848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684c:	1f0c      	subs	r4, r1, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfb8      	it	lt
 8006852:	18e4      	addlt	r4, r4, r3
 8006854:	f000 f83c 	bl	80068d0 <__malloc_lock>
 8006858:	4a1c      	ldr	r2, [pc, #112]	@ (80068cc <_free_r+0x8c>)
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	b933      	cbnz	r3, 800686c <_free_r+0x2c>
 800685e:	6063      	str	r3, [r4, #4]
 8006860:	6014      	str	r4, [r2, #0]
 8006862:	4628      	mov	r0, r5
 8006864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006868:	f000 b838 	b.w	80068dc <__malloc_unlock>
 800686c:	42a3      	cmp	r3, r4
 800686e:	d908      	bls.n	8006882 <_free_r+0x42>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	1821      	adds	r1, r4, r0
 8006874:	428b      	cmp	r3, r1
 8006876:	bf01      	itttt	eq
 8006878:	6819      	ldreq	r1, [r3, #0]
 800687a:	685b      	ldreq	r3, [r3, #4]
 800687c:	1809      	addeq	r1, r1, r0
 800687e:	6021      	streq	r1, [r4, #0]
 8006880:	e7ed      	b.n	800685e <_free_r+0x1e>
 8006882:	461a      	mov	r2, r3
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b10b      	cbz	r3, 800688c <_free_r+0x4c>
 8006888:	42a3      	cmp	r3, r4
 800688a:	d9fa      	bls.n	8006882 <_free_r+0x42>
 800688c:	6811      	ldr	r1, [r2, #0]
 800688e:	1850      	adds	r0, r2, r1
 8006890:	42a0      	cmp	r0, r4
 8006892:	d10b      	bne.n	80068ac <_free_r+0x6c>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	4401      	add	r1, r0
 8006898:	1850      	adds	r0, r2, r1
 800689a:	4283      	cmp	r3, r0
 800689c:	6011      	str	r1, [r2, #0]
 800689e:	d1e0      	bne.n	8006862 <_free_r+0x22>
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4408      	add	r0, r1
 80068a6:	6010      	str	r0, [r2, #0]
 80068a8:	6053      	str	r3, [r2, #4]
 80068aa:	e7da      	b.n	8006862 <_free_r+0x22>
 80068ac:	d902      	bls.n	80068b4 <_free_r+0x74>
 80068ae:	230c      	movs	r3, #12
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	e7d6      	b.n	8006862 <_free_r+0x22>
 80068b4:	6820      	ldr	r0, [r4, #0]
 80068b6:	1821      	adds	r1, r4, r0
 80068b8:	428b      	cmp	r3, r1
 80068ba:	bf01      	itttt	eq
 80068bc:	6819      	ldreq	r1, [r3, #0]
 80068be:	685b      	ldreq	r3, [r3, #4]
 80068c0:	1809      	addeq	r1, r1, r0
 80068c2:	6021      	streq	r1, [r4, #0]
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	6054      	str	r4, [r2, #4]
 80068c8:	e7cb      	b.n	8006862 <_free_r+0x22>
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	20001350 	.word	0x20001350

080068d0 <__malloc_lock>:
 80068d0:	4801      	ldr	r0, [pc, #4]	@ (80068d8 <__malloc_lock+0x8>)
 80068d2:	f7ff bfa5 	b.w	8006820 <__retarget_lock_acquire_recursive>
 80068d6:	bf00      	nop
 80068d8:	2000134c 	.word	0x2000134c

080068dc <__malloc_unlock>:
 80068dc:	4801      	ldr	r0, [pc, #4]	@ (80068e4 <__malloc_unlock+0x8>)
 80068de:	f7ff bfa0 	b.w	8006822 <__retarget_lock_release_recursive>
 80068e2:	bf00      	nop
 80068e4:	2000134c 	.word	0x2000134c

080068e8 <_init>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	bf00      	nop
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr

080068f4 <_fini>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr
