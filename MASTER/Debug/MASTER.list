
MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  080075e0  080075e0  000085e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008410  08008410  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008410  08008410  0000a070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008410  08008410  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008410  08008410  00009410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008414  08008414  00009414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008418  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016ec  20000070  08008488  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000175c  08008488  0000a75c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014824  00000000  00000000  0000a099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003519  00000000  00000000  0001e8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00021dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f65  00000000  00000000  000231b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac27  00000000  00000000  00024115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e3d  00000000  00000000  0003ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a657  00000000  00000000  00055b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f01d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  000f0214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f59f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080075c8 	.word	0x080075c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080075c8 	.word	0x080075c8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000008c 	.word	0x2000008c
 800017c:	2000012c 	.word	0x2000012c

08000180 <HAL_CAN_RxFifo1MsgPendingCallback>:
void Task_Display (void *argument);
void Task_ReadPotentiometer (void *argument);

int lastDataRx;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000188:	2300      	movs	r3, #0
 800018a:	60fb      	str	r3, [r7, #12]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800018c:	4b14      	ldr	r3, [pc, #80]	@ (80001e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 800018e:	4a15      	ldr	r2, [pc, #84]	@ (80001e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000190:	2101      	movs	r1, #1
 8000192:	6878      	ldr	r0, [r7, #4]
 8000194:	f001 ff18 	bl	8001fc8 <HAL_CAN_GetRxMessage>
	if(lastDataRx != RxData[7]){
 8000198:	4b11      	ldr	r3, [pc, #68]	@ (80001e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 800019a:	79db      	ldrb	r3, [r3, #7]
 800019c:	461a      	mov	r2, r3
 800019e:	4b12      	ldr	r3, [pc, #72]	@ (80001e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d017      	beq.n	80001d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		lastDataRx = RxData[7];
 80001a6:	4b0e      	ldr	r3, [pc, #56]	@ (80001e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 80001a8:	79db      	ldrb	r3, [r3, #7]
 80001aa:	461a      	mov	r2, r3
 80001ac:	4b0e      	ldr	r3, [pc, #56]	@ (80001e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80001ae:	601a      	str	r2, [r3, #0]
		xQueueSendFromISR(ControlSignalQueue, &lastDataRx, &xHigherPriorityTaskWoken);
 80001b0:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80001b2:	6818      	ldr	r0, [r3, #0]
 80001b4:	f107 020c 	add.w	r2, r7, #12
 80001b8:	2300      	movs	r3, #0
 80001ba:	490b      	ldr	r1, [pc, #44]	@ (80001e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80001bc:	f004 fd2e 	bl	8004c1c <xQueueGenericSendFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d007      	beq.n	80001d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
 80001c6:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80001c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	f3bf 8f4f 	dsb	sy
 80001d2:	f3bf 8f6f 	isb	sy
	}
//	signal_feedback = RxData[7];
}
 80001d6:	bf00      	nop
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000420 	.word	0x20000420
 80001e4:	20000404 	.word	0x20000404
 80001e8:	20000464 	.word	0x20000464
 80001ec:	20000450 	.word	0x20000450
 80001f0:	e000ed04 	.word	0xe000ed04

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 ffb1 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f8c9 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 f9c5 	bl	8000590 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000206:	f000 f921 	bl	800044c <MX_ADC1_Init>
  MX_CAN_Init();
 800020a:	f000 f95d 	bl	80004c8 <MX_CAN_Init>
  MX_I2C1_Init();
 800020e:	f000 f991 	bl	8000534 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000212:	4848      	ldr	r0, [pc, #288]	@ (8000334 <main+0x140>)
 8000214:	f001 f8ae 	bl	8001374 <HAL_ADC_Start>
  HAL_CAN_Start(&hcan);
 8000218:	4847      	ldr	r0, [pc, #284]	@ (8000338 <main+0x144>)
 800021a:	f001 fdc2 	bl	8001da2 <HAL_CAN_Start>
  TxHeader.DLC = 8;  // data length
 800021e:	4b47      	ldr	r3, [pc, #284]	@ (800033c <main+0x148>)
 8000220:	2208      	movs	r2, #8
 8000222:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000224:	4b45      	ldr	r3, [pc, #276]	@ (800033c <main+0x148>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800022a:	4b44      	ldr	r3, [pc, #272]	@ (800033c <main+0x148>)
 800022c:	2200      	movs	r2, #0
 800022e:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x6A5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 8000230:	4b42      	ldr	r3, [pc, #264]	@ (800033c <main+0x148>)
 8000232:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 8000236:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000238:	4b41      	ldr	r3, [pc, #260]	@ (8000340 <main+0x14c>)
 800023a:	2201      	movs	r2, #1
 800023c:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800023e:	4b40      	ldr	r3, [pc, #256]	@ (8000340 <main+0x14c>)
 8000240:	2201      	movs	r2, #1
 8000242:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000244:	4b3e      	ldr	r3, [pc, #248]	@ (8000340 <main+0x14c>)
 8000246:	2200      	movs	r2, #0
 8000248:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6F5<<5;
 800024a:	4b3d      	ldr	r3, [pc, #244]	@ (8000340 <main+0x14c>)
 800024c:	f64d 62a0 	movw	r2, #56992	@ 0xdea0
 8000250:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000252:	4b3b      	ldr	r3, [pc, #236]	@ (8000340 <main+0x14c>)
 8000254:	2200      	movs	r2, #0
 8000256:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000258:	4b39      	ldr	r3, [pc, #228]	@ (8000340 <main+0x14c>)
 800025a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800025e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000260:	4b37      	ldr	r3, [pc, #220]	@ (8000340 <main+0x14c>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000266:	4b36      	ldr	r3, [pc, #216]	@ (8000340 <main+0x14c>)
 8000268:	2201      	movs	r2, #1
 800026a:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800026c:	4934      	ldr	r1, [pc, #208]	@ (8000340 <main+0x14c>)
 800026e:	4832      	ldr	r0, [pc, #200]	@ (8000338 <main+0x144>)
 8000270:	f001 fcce 	bl	8001c10 <HAL_CAN_ConfigFilter>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000274:	2110      	movs	r1, #16
 8000276:	4830      	ldr	r0, [pc, #192]	@ (8000338 <main+0x144>)
 8000278:	f001 ffc7 	bl	800220a <HAL_CAN_ActivateNotification>

  // Init Oled
  SSD1306_Init();
 800027c:	f000 fa9a 	bl	80007b4 <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 8000280:	2100      	movs	r1, #0
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fbfe 	bl	8000a84 <SSD1306_GotoXY>
  SSD1306_Puts ("Current:", &Font_11x18, 1);
 8000288:	2201      	movs	r2, #1
 800028a:	492e      	ldr	r1, [pc, #184]	@ (8000344 <main+0x150>)
 800028c:	482e      	ldr	r0, [pc, #184]	@ (8000348 <main+0x154>)
 800028e:	f000 fc8d 	bl	8000bac <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 8000292:	211e      	movs	r1, #30
 8000294:	2000      	movs	r0, #0
 8000296:	f000 fbf5 	bl	8000a84 <SSD1306_GotoXY>
  SSD1306_Puts ("Desired:", &Font_11x18, 1);
 800029a:	2201      	movs	r2, #1
 800029c:	4929      	ldr	r1, [pc, #164]	@ (8000344 <main+0x150>)
 800029e:	482b      	ldr	r0, [pc, #172]	@ (800034c <main+0x158>)
 80002a0:	f000 fc84 	bl	8000bac <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80002a4:	f000 fb4a 	bl	800093c <SSD1306_UpdateScreen>

  ADCMutex = xSemaphoreCreateMutex();
 80002a8:	2001      	movs	r0, #1
 80002aa:	f004 fb9d 	bl	80049e8 <xQueueCreateMutex>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a27      	ldr	r2, [pc, #156]	@ (8000350 <main+0x15c>)
 80002b2:	6013      	str	r3, [r2, #0]
  ControlSignalQueue = xQueueCreate(5, sizeof (int));
 80002b4:	2200      	movs	r2, #0
 80002b6:	2104      	movs	r1, #4
 80002b8:	2005      	movs	r0, #5
 80002ba:	f004 fb21 	bl	8004900 <xQueueGenericCreate>
 80002be:	4603      	mov	r3, r0
 80002c0:	4a24      	ldr	r2, [pc, #144]	@ (8000354 <main+0x160>)
 80002c2:	6013      	str	r3, [r2, #0]

  xTaskCreate(Task_SendMessage, "SendMessage", 128, NULL, 3, &SendMessage_Handler);
 80002c4:	4b24      	ldr	r3, [pc, #144]	@ (8000358 <main+0x164>)
 80002c6:	9301      	str	r3, [sp, #4]
 80002c8:	2303      	movs	r3, #3
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2300      	movs	r3, #0
 80002ce:	2280      	movs	r2, #128	@ 0x80
 80002d0:	4922      	ldr	r1, [pc, #136]	@ (800035c <main+0x168>)
 80002d2:	4823      	ldr	r0, [pc, #140]	@ (8000360 <main+0x16c>)
 80002d4:	f005 f8b9 	bl	800544a <xTaskCreate>
  xTaskCreate(Task_ReadPotentiometer, "ReadPotentiometer", 128, NULL, 3, &ReadPotentiometer_Handler);
 80002d8:	4b22      	ldr	r3, [pc, #136]	@ (8000364 <main+0x170>)
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	2303      	movs	r3, #3
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2300      	movs	r3, #0
 80002e2:	2280      	movs	r2, #128	@ 0x80
 80002e4:	4920      	ldr	r1, [pc, #128]	@ (8000368 <main+0x174>)
 80002e6:	4821      	ldr	r0, [pc, #132]	@ (800036c <main+0x178>)
 80002e8:	f005 f8af 	bl	800544a <xTaskCreate>
  xTaskCreate(Task_Display, "Display", 128, NULL, 2, &Display_Handler);
 80002ec:	4b20      	ldr	r3, [pc, #128]	@ (8000370 <main+0x17c>)
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	2302      	movs	r3, #2
 80002f2:	9300      	str	r3, [sp, #0]
 80002f4:	2300      	movs	r3, #0
 80002f6:	2280      	movs	r2, #128	@ 0x80
 80002f8:	491e      	ldr	r1, [pc, #120]	@ (8000374 <main+0x180>)
 80002fa:	481f      	ldr	r0, [pc, #124]	@ (8000378 <main+0x184>)
 80002fc:	f005 f8a5 	bl	800544a <xTaskCreate>
  BaseType_t result = xTaskCreate(Task_ReceiveMessage, "ReceiveMessage", 128, NULL, 1, &ReceiveMessage_Handler);
 8000300:	4b1e      	ldr	r3, [pc, #120]	@ (800037c <main+0x188>)
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	2301      	movs	r3, #1
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2300      	movs	r3, #0
 800030a:	2280      	movs	r2, #128	@ 0x80
 800030c:	491c      	ldr	r1, [pc, #112]	@ (8000380 <main+0x18c>)
 800030e:	481d      	ldr	r0, [pc, #116]	@ (8000384 <main+0x190>)
 8000310:	f005 f89b 	bl	800544a <xTaskCreate>
 8000314:	6078      	str	r0, [r7, #4]

  if (result != pdPASS) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d002      	beq.n	8000322 <main+0x12e>
      debug = 99999; // Task failed to create
 800031c:	4b1a      	ldr	r3, [pc, #104]	@ (8000388 <main+0x194>)
 800031e:	4a1b      	ldr	r2, [pc, #108]	@ (800038c <main+0x198>)
 8000320:	601a      	str	r2, [r3, #0]
  }
  freeHeap = xPortGetFreeHeapSize();
 8000322:	f006 fb7f 	bl	8006a24 <xPortGetFreeHeapSize>
 8000326:	4603      	mov	r3, r0
 8000328:	4a19      	ldr	r2, [pc, #100]	@ (8000390 <main+0x19c>)
 800032a:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 800032c:	f005 fa12 	bl	8005754 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <main+0x13c>
 8000334:	2000032c 	.word	0x2000032c
 8000338:	2000035c 	.word	0x2000035c
 800033c:	20000428 	.word	0x20000428
 8000340:	200003dc 	.word	0x200003dc
 8000344:	20000000 	.word	0x20000000
 8000348:	080075e0 	.word	0x080075e0
 800034c:	080075ec 	.word	0x080075ec
 8000350:	2000044c 	.word	0x2000044c
 8000354:	20000450 	.word	0x20000450
 8000358:	20000454 	.word	0x20000454
 800035c:	080075f8 	.word	0x080075f8
 8000360:	08000641 	.word	0x08000641
 8000364:	20000460 	.word	0x20000460
 8000368:	08007604 	.word	0x08007604
 800036c:	080005ed 	.word	0x080005ed
 8000370:	2000045c 	.word	0x2000045c
 8000374:	08007618 	.word	0x08007618
 8000378:	080006a1 	.word	0x080006a1
 800037c:	20000458 	.word	0x20000458
 8000380:	08007620 	.word	0x08007620
 8000384:	08000751 	.word	0x08000751
 8000388:	20000444 	.word	0x20000444
 800038c:	0001869f 	.word	0x0001869f
 8000390:	20000448 	.word	0x20000448

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b094      	sub	sp, #80	@ 0x50
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800039e:	2228      	movs	r2, #40	@ 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f006 fc24 	bl	8006bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d2:	2301      	movs	r3, #1
 80003d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d6:	2302      	movs	r3, #2
 80003d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 f984 	bl	80036f8 <HAL_RCC_OscConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003f6:	f000 f9d7 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fa:	230f      	movs	r3, #15
 80003fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fe:	2302      	movs	r3, #2
 8000400:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800040a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	2102      	movs	r1, #2
 8000416:	4618      	mov	r0, r3
 8000418:	f003 fbf0 	bl	8003bfc <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000422:	f000 f9c1 	bl	80007a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000426:	2302      	movs	r3, #2
 8000428:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800042a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800042e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4618      	mov	r0, r3
 8000434:	f003 fda0 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800043e:	f000 f9b3 	bl	80007a8 <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3750      	adds	r7, #80	@ 0x50
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <MX_ADC1_Init+0x74>)
 800045e:	4a19      	ldr	r2, [pc, #100]	@ (80004c4 <MX_ADC1_Init+0x78>)
 8000460:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <MX_ADC1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <MX_ADC1_Init+0x74>)
 800046a:	2201      	movs	r2, #1
 800046c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <MX_ADC1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <MX_ADC1_Init+0x74>)
 8000476:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800047a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800047c:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_ADC1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <MX_ADC1_Init+0x74>)
 8000484:	2201      	movs	r2, #1
 8000486:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <MX_ADC1_Init+0x74>)
 800048a:	f000 fe9b 	bl	80011c4 <HAL_ADC_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000494:	f000 f988 	bl	80007a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000498:	2309      	movs	r3, #9
 800049a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800049c:	2301      	movs	r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	@ (80004c0 <MX_ADC1_Init+0x74>)
 80004aa:	f001 f923 	bl	80016f4 <HAL_ADC_ConfigChannel>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004b4:	f000 f978 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000032c 	.word	0x2000032c
 80004c4:	40012400 	.word	0x40012400

080004c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004cc:	4b17      	ldr	r3, [pc, #92]	@ (800052c <MX_CAN_Init+0x64>)
 80004ce:	4a18      	ldr	r2, [pc, #96]	@ (8000530 <MX_CAN_Init+0x68>)
 80004d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 80004d2:	4b16      	ldr	r3, [pc, #88]	@ (800052c <MX_CAN_Init+0x64>)
 80004d4:	2248      	movs	r2, #72	@ 0x48
 80004d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <MX_CAN_Init+0x64>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004de:	4b13      	ldr	r3, [pc, #76]	@ (800052c <MX_CAN_Init+0x64>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80004e4:	4b11      	ldr	r3, [pc, #68]	@ (800052c <MX_CAN_Init+0x64>)
 80004e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <MX_CAN_Init+0x64>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <MX_CAN_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <MX_CAN_Init+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <MX_CAN_Init+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000504:	4b09      	ldr	r3, [pc, #36]	@ (800052c <MX_CAN_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800050a:	4b08      	ldr	r3, [pc, #32]	@ (800052c <MX_CAN_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_CAN_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <MX_CAN_Init+0x64>)
 8000518:	f001 fa7f 	bl	8001a1a <HAL_CAN_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000522:	f000 f941 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000035c 	.word	0x2000035c
 8000530:	40006400 	.word	0x40006400

08000534 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <MX_I2C1_Init+0x50>)
 800053a:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <MX_I2C1_Init+0x54>)
 800053c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <MX_I2C1_Init+0x50>)
 8000540:	4a12      	ldr	r2, [pc, #72]	@ (800058c <MX_I2C1_Init+0x58>)
 8000542:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000544:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <MX_I2C1_Init+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <MX_I2C1_Init+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000550:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <MX_I2C1_Init+0x50>)
 8000552:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000556:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <MX_I2C1_Init+0x50>)
 800055a:	2200      	movs	r2, #0
 800055c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <MX_I2C1_Init+0x50>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000564:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <MX_I2C1_Init+0x50>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800056a:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_I2C1_Init+0x50>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000570:	4804      	ldr	r0, [pc, #16]	@ (8000584 <MX_I2C1_Init+0x50>)
 8000572:	f002 faf7 	bl	8002b64 <HAL_I2C_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800057c:	f000 f914 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000384 	.word	0x20000384
 8000588:	40005400 	.word	0x40005400
 800058c:	00061a80 	.word	0x00061a80

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_GPIO_Init+0x58>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a13      	ldr	r2, [pc, #76]	@ (80005e8 <MX_GPIO_Init+0x58>)
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0320 	and.w	r3, r3, #32
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <Task_ReadPotentiometer>:

/* USER CODE BEGIN 4 */

void Task_ReadPotentiometer(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <Task_ReadPotentiometer+0x48>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fc8d 	bl	8004f1c <xQueueSemaphoreTake>
		HAL_ADC_PollForConversion(&hadc1,1000);
 8000602:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <Task_ReadPotentiometer+0x4c>)
 8000608:	f000 ff62 	bl	80014d0 <HAL_ADC_PollForConversion>
		readValue = HAL_ADC_GetValue(&hadc1);
 800060c:	480a      	ldr	r0, [pc, #40]	@ (8000638 <Task_ReadPotentiometer+0x4c>)
 800060e:	f001 f865 	bl	80016dc <HAL_ADC_GetValue>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <Task_ReadPotentiometer+0x50>)
 8000618:	801a      	strh	r2, [r3, #0]
		xSemaphoreGive(ADCMutex);
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <Task_ReadPotentiometer+0x48>)
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	f004 f9f8 	bl	8004a18 <xQueueGenericSend>
		vTaskDelay(200);
 8000628:	20c8      	movs	r0, #200	@ 0xc8
 800062a:	f005 f85d 	bl	80056e8 <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 800062e:	bf00      	nop
 8000630:	e7e0      	b.n	80005f4 <Task_ReadPotentiometer+0x8>
 8000632:	bf00      	nop
 8000634:	2000044c 	.word	0x2000044c
 8000638:	2000032c 	.word	0x2000032c
 800063c:	200003d8 	.word	0x200003d8

08000640 <Task_SendMessage>:
	}
}

void Task_SendMessage(void *argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	while(1){
		  // readValue is between 0-4095 but we need to transmit maximum 255 (one byte)
		  // We divide readValue by 16 to get 0-255. Better way to divide is by shifting bits
		  // (readValue >> 4) is same as (readValue / 16)
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <Task_SendMessage+0x48>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000650:	4618      	mov	r0, r3
 8000652:	f004 fc63 	bl	8004f1c <xQueueSemaphoreTake>
		TxData[7] = readValue >> 4;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <Task_SendMessage+0x4c>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	091b      	lsrs	r3, r3, #4
 800065c:	b29b      	uxth	r3, r3
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <Task_SendMessage+0x50>)
 8000662:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000664:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <Task_SendMessage+0x54>)
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <Task_SendMessage+0x50>)
 8000668:	490b      	ldr	r1, [pc, #44]	@ (8000698 <Task_SendMessage+0x58>)
 800066a:	480c      	ldr	r0, [pc, #48]	@ (800069c <Task_SendMessage+0x5c>)
 800066c:	f001 fbdd 	bl	8001e2a <HAL_CAN_AddTxMessage>
		xSemaphoreGive(ADCMutex);
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <Task_SendMessage+0x48>)
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	f004 f9cd 	bl	8004a18 <xQueueGenericSend>
		vTaskDelay(200);
 800067e:	20c8      	movs	r0, #200	@ 0xc8
 8000680:	f005 f832 	bl	80056e8 <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000684:	bf00      	nop
 8000686:	e7df      	b.n	8000648 <Task_SendMessage+0x8>
 8000688:	2000044c 	.word	0x2000044c
 800068c:	200003d8 	.word	0x200003d8
 8000690:	20000008 	.word	0x20000008
 8000694:	20000440 	.word	0x20000440
 8000698:	20000428 	.word	0x20000428
 800069c:	2000035c 	.word	0x2000035c

080006a0 <Task_Display>:
		vTaskDelay(1000);
	}
}

void Task_Display(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	char snum[5];
	char snum2[5];
	int current_angle;
	int desire_angle;
	while(1){
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <Task_Display+0x9c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fc33 	bl	8004f1c <xQueueSemaphoreTake>
		desire_angle = (readValue*90)/4096;
 80006b6:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <Task_Display+0xa0>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	235a      	movs	r3, #90	@ 0x5a
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	da01      	bge.n	80006ca <Task_Display+0x2a>
 80006c6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80006ca:	131b      	asrs	r3, r3, #12
 80006cc:	61fb      	str	r3, [r7, #28]
		current_angle = signal_feedback;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <Task_Display+0xa4>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	61bb      	str	r3, [r7, #24]
		sprintf(snum, "%03d", current_angle);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	491b      	ldr	r1, [pc, #108]	@ (8000748 <Task_Display+0xa8>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 fa65 	bl	8006bac <siprintf>
		sprintf(snum2, "%03d", desire_angle);
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	69fa      	ldr	r2, [r7, #28]
 80006e8:	4917      	ldr	r1, [pc, #92]	@ (8000748 <Task_Display+0xa8>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fa5e 	bl	8006bac <siprintf>
		SSD1306_GotoXY (90,0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	205a      	movs	r0, #90	@ 0x5a
 80006f4:	f000 f9c6 	bl	8000a84 <SSD1306_GotoXY>
		SSD1306_Puts (snum, &Font_11x18, 1);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2201      	movs	r2, #1
 80006fe:	4913      	ldr	r1, [pc, #76]	@ (800074c <Task_Display+0xac>)
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fa53 	bl	8000bac <SSD1306_Puts>
		SSD1306_GotoXY (90, 30);
 8000706:	211e      	movs	r1, #30
 8000708:	205a      	movs	r0, #90	@ 0x5a
 800070a:	f000 f9bb 	bl	8000a84 <SSD1306_GotoXY>
		SSD1306_Puts (snum2, &Font_11x18, 1);
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2201      	movs	r2, #1
 8000714:	490d      	ldr	r1, [pc, #52]	@ (800074c <Task_Display+0xac>)
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fa48 	bl	8000bac <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800071c:	f000 f90e 	bl	800093c <SSD1306_UpdateScreen>
		xSemaphoreGive(ADCMutex);
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <Task_Display+0x9c>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	f004 f975 	bl	8004a18 <xQueueGenericSend>
		vTaskDelay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000732:	f004 ffd9 	bl	80056e8 <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000736:	bf00      	nop
 8000738:	e7b6      	b.n	80006a8 <Task_Display+0x8>
 800073a:	bf00      	nop
 800073c:	2000044c 	.word	0x2000044c
 8000740:	200003d8 	.word	0x200003d8
 8000744:	200003da 	.word	0x200003da
 8000748:	08007630 	.word	0x08007630
 800074c:	20000000 	.word	0x20000000

08000750 <Task_ReceiveMessage>:
	}
}

void Task_ReceiveMessage(void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	int received;
	while(1){
		if (xQueueReceive(ControlSignalQueue, &received, portMAX_DELAY) == pdTRUE){
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <Task_ReceiveMessage+0x2c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f107 010c 	add.w	r1, r7, #12
 8000760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000764:	4618      	mov	r0, r3
 8000766:	f004 faf7 	bl	8004d58 <xQueueReceive>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d1f3      	bne.n	8000758 <Task_ReceiveMessage+0x8>
			signal_feedback = received;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b02      	ldr	r3, [pc, #8]	@ (8000780 <Task_ReceiveMessage+0x30>)
 8000776:	701a      	strb	r2, [r3, #0]
		if (xQueueReceive(ControlSignalQueue, &received, portMAX_DELAY) == pdTRUE){
 8000778:	e7ee      	b.n	8000758 <Task_ReceiveMessage+0x8>
 800077a:	bf00      	nop
 800077c:	20000450 	.word	0x20000450
 8000780:	200003da 	.word	0x200003da

08000784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d101      	bne.n	800079a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000796:	f000 fcf9 	bl	800118c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <Error_Handler+0x8>

080007b4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80007ba:	f000 fa1d 	bl	8000bf8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80007be:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80007c2:	2201      	movs	r2, #1
 80007c4:	2178      	movs	r1, #120	@ 0x78
 80007c6:	485b      	ldr	r0, [pc, #364]	@ (8000934 <SSD1306_Init+0x180>)
 80007c8:	f002 fc0e 	bl	8002fe8 <HAL_I2C_IsDeviceReady>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e0a9      	b.n	800092a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80007d6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80007da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007dc:	e002      	b.n	80007e4 <SSD1306_Init+0x30>
		p--;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f9      	bne.n	80007de <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80007ea:	22ae      	movs	r2, #174	@ 0xae
 80007ec:	2100      	movs	r1, #0
 80007ee:	2078      	movs	r0, #120	@ 0x78
 80007f0:	f000 fa7c 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80007f4:	2220      	movs	r2, #32
 80007f6:	2100      	movs	r1, #0
 80007f8:	2078      	movs	r0, #120	@ 0x78
 80007fa:	f000 fa77 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80007fe:	2210      	movs	r2, #16
 8000800:	2100      	movs	r1, #0
 8000802:	2078      	movs	r0, #120	@ 0x78
 8000804:	f000 fa72 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000808:	22b0      	movs	r2, #176	@ 0xb0
 800080a:	2100      	movs	r1, #0
 800080c:	2078      	movs	r0, #120	@ 0x78
 800080e:	f000 fa6d 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000812:	22c8      	movs	r2, #200	@ 0xc8
 8000814:	2100      	movs	r1, #0
 8000816:	2078      	movs	r0, #120	@ 0x78
 8000818:	f000 fa68 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2078      	movs	r0, #120	@ 0x78
 8000822:	f000 fa63 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000826:	2210      	movs	r2, #16
 8000828:	2100      	movs	r1, #0
 800082a:	2078      	movs	r0, #120	@ 0x78
 800082c:	f000 fa5e 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000830:	2240      	movs	r2, #64	@ 0x40
 8000832:	2100      	movs	r1, #0
 8000834:	2078      	movs	r0, #120	@ 0x78
 8000836:	f000 fa59 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800083a:	2281      	movs	r2, #129	@ 0x81
 800083c:	2100      	movs	r1, #0
 800083e:	2078      	movs	r0, #120	@ 0x78
 8000840:	f000 fa54 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000844:	22ff      	movs	r2, #255	@ 0xff
 8000846:	2100      	movs	r1, #0
 8000848:	2078      	movs	r0, #120	@ 0x78
 800084a:	f000 fa4f 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800084e:	22a1      	movs	r2, #161	@ 0xa1
 8000850:	2100      	movs	r1, #0
 8000852:	2078      	movs	r0, #120	@ 0x78
 8000854:	f000 fa4a 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000858:	22a6      	movs	r2, #166	@ 0xa6
 800085a:	2100      	movs	r1, #0
 800085c:	2078      	movs	r0, #120	@ 0x78
 800085e:	f000 fa45 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000862:	22a8      	movs	r2, #168	@ 0xa8
 8000864:	2100      	movs	r1, #0
 8000866:	2078      	movs	r0, #120	@ 0x78
 8000868:	f000 fa40 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800086c:	223f      	movs	r2, #63	@ 0x3f
 800086e:	2100      	movs	r1, #0
 8000870:	2078      	movs	r0, #120	@ 0x78
 8000872:	f000 fa3b 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000876:	22a4      	movs	r2, #164	@ 0xa4
 8000878:	2100      	movs	r1, #0
 800087a:	2078      	movs	r0, #120	@ 0x78
 800087c:	f000 fa36 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000880:	22d3      	movs	r2, #211	@ 0xd3
 8000882:	2100      	movs	r1, #0
 8000884:	2078      	movs	r0, #120	@ 0x78
 8000886:	f000 fa31 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2078      	movs	r0, #120	@ 0x78
 8000890:	f000 fa2c 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000894:	22d5      	movs	r2, #213	@ 0xd5
 8000896:	2100      	movs	r1, #0
 8000898:	2078      	movs	r0, #120	@ 0x78
 800089a:	f000 fa27 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800089e:	22f0      	movs	r2, #240	@ 0xf0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2078      	movs	r0, #120	@ 0x78
 80008a4:	f000 fa22 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80008a8:	22d9      	movs	r2, #217	@ 0xd9
 80008aa:	2100      	movs	r1, #0
 80008ac:	2078      	movs	r0, #120	@ 0x78
 80008ae:	f000 fa1d 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80008b2:	2222      	movs	r2, #34	@ 0x22
 80008b4:	2100      	movs	r1, #0
 80008b6:	2078      	movs	r0, #120	@ 0x78
 80008b8:	f000 fa18 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80008bc:	22da      	movs	r2, #218	@ 0xda
 80008be:	2100      	movs	r1, #0
 80008c0:	2078      	movs	r0, #120	@ 0x78
 80008c2:	f000 fa13 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80008c6:	2212      	movs	r2, #18
 80008c8:	2100      	movs	r1, #0
 80008ca:	2078      	movs	r0, #120	@ 0x78
 80008cc:	f000 fa0e 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80008d0:	22db      	movs	r2, #219	@ 0xdb
 80008d2:	2100      	movs	r1, #0
 80008d4:	2078      	movs	r0, #120	@ 0x78
 80008d6:	f000 fa09 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	2078      	movs	r0, #120	@ 0x78
 80008e0:	f000 fa04 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80008e4:	228d      	movs	r2, #141	@ 0x8d
 80008e6:	2100      	movs	r1, #0
 80008e8:	2078      	movs	r0, #120	@ 0x78
 80008ea:	f000 f9ff 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80008ee:	2214      	movs	r2, #20
 80008f0:	2100      	movs	r1, #0
 80008f2:	2078      	movs	r0, #120	@ 0x78
 80008f4:	f000 f9fa 	bl	8000cec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80008f8:	22af      	movs	r2, #175	@ 0xaf
 80008fa:	2100      	movs	r1, #0
 80008fc:	2078      	movs	r0, #120	@ 0x78
 80008fe:	f000 f9f5 	bl	8000cec <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000902:	222e      	movs	r2, #46	@ 0x2e
 8000904:	2100      	movs	r1, #0
 8000906:	2078      	movs	r0, #120	@ 0x78
 8000908:	f000 f9f0 	bl	8000cec <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800090c:	2000      	movs	r0, #0
 800090e:	f000 f843 	bl	8000998 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000912:	f000 f813 	bl	800093c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <SSD1306_Init+0x184>)
 8000918:	2200      	movs	r2, #0
 800091a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <SSD1306_Init+0x184>)
 800091e:	2200      	movs	r2, #0
 8000920:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <SSD1306_Init+0x184>)
 8000924:	2201      	movs	r2, #1
 8000926:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000928:	2301      	movs	r3, #1
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000384 	.word	0x20000384
 8000938:	20000868 	.word	0x20000868

0800093c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e01d      	b.n	8000984 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	3b50      	subs	r3, #80	@ 0x50
 800094c:	b2db      	uxtb	r3, r3
 800094e:	461a      	mov	r2, r3
 8000950:	2100      	movs	r1, #0
 8000952:	2078      	movs	r0, #120	@ 0x78
 8000954:	f000 f9ca 	bl	8000cec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2078      	movs	r0, #120	@ 0x78
 800095e:	f000 f9c5 	bl	8000cec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000962:	2210      	movs	r2, #16
 8000964:	2100      	movs	r1, #0
 8000966:	2078      	movs	r0, #120	@ 0x78
 8000968:	f000 f9c0 	bl	8000cec <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	01db      	lsls	r3, r3, #7
 8000970:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <SSD1306_UpdateScreen+0x58>)
 8000972:	441a      	add	r2, r3
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	2140      	movs	r1, #64	@ 0x40
 8000978:	2078      	movs	r0, #120	@ 0x78
 800097a:	f000 f951 	bl	8000c20 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	3301      	adds	r3, #1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b07      	cmp	r3, #7
 8000988:	d9de      	bls.n	8000948 <SSD1306_UpdateScreen+0xc>
	}
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000468 	.word	0x20000468

08000998 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <SSD1306_Fill+0x14>
 80009a8:	2300      	movs	r3, #0
 80009aa:	e000      	b.n	80009ae <SSD1306_Fill+0x16>
 80009ac:	23ff      	movs	r3, #255	@ 0xff
 80009ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b2:	4619      	mov	r1, r3
 80009b4:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <SSD1306_Fill+0x2c>)
 80009b6:	f006 f91b 	bl	8006bf0 <memset>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000468 	.word	0x20000468

080009c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]
 80009d2:	460b      	mov	r3, r1
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	4613      	mov	r3, r2
 80009d8:	70fb      	strb	r3, [r7, #3]
	if (
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80009de:	d848      	bhi.n	8000a72 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80009e4:	d845      	bhi.n	8000a72 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80009e6:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <SSD1306_DrawPixel+0xb4>)
 80009e8:	791b      	ldrb	r3, [r3, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d006      	beq.n	80009fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80009ee:	78fb      	ldrb	r3, [r7, #3]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf0c      	ite	eq
 80009f4:	2301      	moveq	r3, #1
 80009f6:	2300      	movne	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d11a      	bne.n	8000a38 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a02:	88fa      	ldrh	r2, [r7, #6]
 8000a04:	88bb      	ldrh	r3, [r7, #4]
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	b298      	uxth	r0, r3
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	01db      	lsls	r3, r3, #7
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <SSD1306_DrawPixel+0xb8>)
 8000a12:	5cd3      	ldrb	r3, [r2, r3]
 8000a14:	b25a      	sxtb	r2, r3
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	f003 0307 	and.w	r3, r3, #7
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b259      	sxtb	r1, r3
 8000a28:	88fa      	ldrh	r2, [r7, #6]
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	01db      	lsls	r3, r3, #7
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2c9      	uxtb	r1, r1
 8000a32:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <SSD1306_DrawPixel+0xb8>)
 8000a34:	54d1      	strb	r1, [r2, r3]
 8000a36:	e01d      	b.n	8000a74 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a38:	88fa      	ldrh	r2, [r7, #6]
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	b298      	uxth	r0, r3
 8000a40:	4603      	mov	r3, r0
 8000a42:	01db      	lsls	r3, r3, #7
 8000a44:	4413      	add	r3, r2
 8000a46:	4a0e      	ldr	r2, [pc, #56]	@ (8000a80 <SSD1306_DrawPixel+0xb8>)
 8000a48:	5cd3      	ldrb	r3, [r2, r3]
 8000a4a:	b25a      	sxtb	r2, r3
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	2101      	movs	r1, #1
 8000a54:	fa01 f303 	lsl.w	r3, r1, r3
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	4013      	ands	r3, r2
 8000a60:	b259      	sxtb	r1, r3
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	4603      	mov	r3, r0
 8000a66:	01db      	lsls	r3, r3, #7
 8000a68:	4413      	add	r3, r2
 8000a6a:	b2c9      	uxtb	r1, r1
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <SSD1306_DrawPixel+0xb8>)
 8000a6e:	54d1      	strb	r1, [r2, r3]
 8000a70:	e000      	b.n	8000a74 <SSD1306_DrawPixel+0xac>
		return;
 8000a72:	bf00      	nop
	}
}
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000868 	.word	0x20000868
 8000a80:	20000468 	.word	0x20000468

08000a84 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	4613      	mov	r3, r2
 8000a92:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000a94:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <SSD1306_GotoXY+0x28>)
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <SSD1306_GotoXY+0x28>)
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	8053      	strh	r3, [r2, #2]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000868 	.word	0x20000868

08000ab0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ac0:	4b39      	ldr	r3, [pc, #228]	@ (8000ba8 <SSD1306_Putc+0xf8>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
	if (
 8000acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ace:	dc07      	bgt.n	8000ae0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ad0:	4b35      	ldr	r3, [pc, #212]	@ (8000ba8 <SSD1306_Putc+0xf8>)
 8000ad2:	885b      	ldrh	r3, [r3, #2]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000adc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ade:	dd01      	ble.n	8000ae4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e05d      	b.n	8000ba0 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e04b      	b.n	8000b82 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	3b20      	subs	r3, #32
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	7849      	ldrb	r1, [r1, #1]
 8000af6:	fb01 f303 	mul.w	r3, r1, r3
 8000afa:	4619      	mov	r1, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	440b      	add	r3, r1
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	e030      	b.n	8000b70 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d010      	beq.n	8000b40 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <SSD1306_Putc+0xf8>)
 8000b20:	881a      	ldrh	r2, [r3, #0]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	b298      	uxth	r0, r3
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <SSD1306_Putc+0xf8>)
 8000b2c:	885a      	ldrh	r2, [r3, #2]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	4413      	add	r3, r2
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	79ba      	ldrb	r2, [r7, #6]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f7ff ff45 	bl	80009c8 <SSD1306_DrawPixel>
 8000b3e:	e014      	b.n	8000b6a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <SSD1306_Putc+0xf8>)
 8000b42:	881a      	ldrh	r2, [r3, #0]
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b298      	uxth	r0, r3
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <SSD1306_Putc+0xf8>)
 8000b4e:	885a      	ldrh	r2, [r3, #2]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	b299      	uxth	r1, r3
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2301      	moveq	r3, #1
 8000b60:	2300      	movne	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	f7ff ff2f 	bl	80009c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d3c8      	bcc.n	8000b0e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	785b      	ldrb	r3, [r3, #1]
 8000b86:	461a      	mov	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d3ad      	bcc.n	8000aea <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <SSD1306_Putc+0xf8>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <SSD1306_Putc+0xf8>)
 8000b9c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000868 	.word	0x20000868

08000bac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000bba:	e012      	b.n	8000be2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff73 	bl	8000ab0 <SSD1306_Putc>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d002      	beq.n	8000bdc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	e008      	b.n	8000bee <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1e8      	bne.n	8000bbc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	781b      	ldrb	r3, [r3, #0]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <ssd1306_I2C_Init+0x24>)
 8000c00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c02:	e002      	b.n	8000c0a <ssd1306_I2C_Init+0x12>
		p--;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f9      	bne.n	8000c04 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	0003d090 	.word	0x0003d090

08000c20 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0c7      	sub	sp, #284	@ 0x11c
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	4604      	mov	r4, r0
 8000c28:	4608      	mov	r0, r1
 8000c2a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000c2e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000c32:	600a      	str	r2, [r1, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c3a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c3e:	4622      	mov	r2, r4
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c46:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c56:	460a      	mov	r2, r1
 8000c58:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000c5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c62:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c66:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c74:	e015      	b.n	8000ca2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000c76:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c7a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c7e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000c82:	6812      	ldr	r2, [r2, #0]
 8000c84:	441a      	add	r2, r3
 8000c86:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	7811      	ldrb	r1, [r2, #0]
 8000c8e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c92:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c96:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000c98:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000ca2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cac:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d8df      	bhi.n	8000c76 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000cb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cba:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b299      	uxth	r1, r3
 8000cc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	f107 020c 	add.w	r2, r7, #12
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	9000      	str	r0, [sp, #0]
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000cda:	f002 f887 	bl	8002dec <HAL_I2C_Master_Transmit>
}
 8000cde:	bf00      	nop
 8000ce0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	20000384 	.word	0x20000384

08000cec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	71bb      	strb	r3, [r7, #6]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	b299      	uxth	r1, r3
 8000d0a:	f107 020c 	add.w	r2, r7, #12
 8000d0e:	230a      	movs	r3, #10
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <ssd1306_I2C_Write+0x38>)
 8000d16:	f002 f869 	bl	8002dec <HAL_I2C_Master_Transmit>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000384 	.word	0x20000384

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <HAL_MspInit+0x68>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <HAL_MspInit+0x68>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_MspInit+0x68>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_MspInit+0x68>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <HAL_MspInit+0x68>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x68>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	210f      	movs	r1, #15
 8000d62:	f06f 0001 	mvn.w	r0, #1
 8000d66:	f001 fd4e 	bl	8002806 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_MspInit+0x6c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_MspInit+0x6c>)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000

08000d98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <HAL_ADC_MspInit+0x6c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d121      	bne.n	8000dfc <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <HAL_ADC_MspInit+0x70>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <HAL_ADC_MspInit+0x70>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_ADC_MspInit+0x70>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <HAL_ADC_MspInit+0x70>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e08 <HAL_ADC_MspInit+0x70>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <HAL_ADC_MspInit+0x70>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dec:	2303      	movs	r3, #3
 8000dee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <HAL_ADC_MspInit+0x74>)
 8000df8:	f001 fd30 	bl	800285c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40012400 	.word	0x40012400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010c00 	.word	0x40010c00

08000e10 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a29      	ldr	r2, [pc, #164]	@ (8000ed0 <HAL_CAN_MspInit+0xc0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d14b      	bne.n	8000ec8 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <HAL_CAN_MspInit+0xc4>)
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	4a27      	ldr	r2, [pc, #156]	@ (8000ed4 <HAL_CAN_MspInit+0xc4>)
 8000e36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e3a:	61d3      	str	r3, [r2, #28]
 8000e3c:	4b25      	ldr	r3, [pc, #148]	@ (8000ed4 <HAL_CAN_MspInit+0xc4>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <HAL_CAN_MspInit+0xc4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a21      	ldr	r2, [pc, #132]	@ (8000ed4 <HAL_CAN_MspInit+0xc4>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <HAL_CAN_MspInit+0xc4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4818      	ldr	r0, [pc, #96]	@ (8000ed8 <HAL_CAN_MspInit+0xc8>)
 8000e76:	f001 fcf1 	bl	800285c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <HAL_CAN_MspInit+0xc8>)
 8000e90:	f001 fce4 	bl	800285c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_CAN_MspInit+0xcc>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_CAN_MspInit+0xcc>)
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2105      	movs	r1, #5
 8000ebc:	2015      	movs	r0, #21
 8000ebe:	f001 fca2 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ec2:	2015      	movs	r0, #21
 8000ec4:	f001 fcbb 	bl	800283e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	@ 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40006400 	.word	0x40006400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40010000 	.word	0x40010000

08000ee0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a15      	ldr	r2, [pc, #84]	@ (8000f50 <HAL_I2C_MspInit+0x70>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d123      	bne.n	8000f48 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_I2C_MspInit+0x74>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a13      	ldr	r2, [pc, #76]	@ (8000f54 <HAL_I2C_MspInit+0x74>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_I2C_MspInit+0x74>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f18:	23c0      	movs	r3, #192	@ 0xc0
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <HAL_I2C_MspInit+0x78>)
 8000f2c:	f001 fc96 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_I2C_MspInit+0x74>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_I2C_MspInit+0x74>)
 8000f36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f3a:	61d3      	str	r3, [r2, #28]
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_I2C_MspInit+0x74>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40005400 	.word	0x40005400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f72:	4b2e      	ldr	r3, [pc, #184]	@ (800102c <HAL_InitTick+0xd0>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a2d      	ldr	r2, [pc, #180]	@ (800102c <HAL_InitTick+0xd0>)
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800102c <HAL_InitTick+0xd0>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 ffa1 	bl	8003edc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f9a:	f002 ff8b 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8000f9e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa2:	4a23      	ldr	r2, [pc, #140]	@ (8001030 <HAL_InitTick+0xd4>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	0c9b      	lsrs	r3, r3, #18
 8000faa:	3b01      	subs	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <HAL_InitTick+0xd8>)
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <HAL_InitTick+0xdc>)
 8000fb2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <HAL_InitTick+0xd8>)
 8000fb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001034 <HAL_InitTick+0xd8>)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <HAL_InitTick+0xd8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_InitTick+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <HAL_InitTick+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fd4:	4817      	ldr	r0, [pc, #92]	@ (8001034 <HAL_InitTick+0xd8>)
 8000fd6:	f003 f93b 	bl	8004250 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d11b      	bne.n	8001020 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fe8:	4812      	ldr	r0, [pc, #72]	@ (8001034 <HAL_InitTick+0xd8>)
 8000fea:	f003 f989 	bl	8004300 <HAL_TIM_Base_Start_IT>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d111      	bne.n	8001020 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ffc:	2019      	movs	r0, #25
 8000ffe:	f001 fc1e 	bl	800283e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d808      	bhi.n	800101a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	2019      	movs	r0, #25
 800100e:	f001 fbfa 	bl	8002806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_InitTick+0xe0>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e002      	b.n	8001020 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001024:	4618      	mov	r0, r3
 8001026:	3730      	adds	r7, #48	@ 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	431bde83 	.word	0x431bde83
 8001034:	20000870 	.word	0x20000870
 8001038:	40012c00 	.word	0x40012c00
 800103c:	20000014 	.word	0x20000014

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <NMI_Handler+0x4>

08001048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <MemManage_Handler+0x4>

08001058 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <UsageFault_Handler+0x4>

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <CAN1_RX1_IRQHandler+0x10>)
 800107a:	f001 f8eb 	bl	8002254 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000035c 	.word	0x2000035c

08001088 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <TIM1_UP_IRQHandler+0x10>)
 800108e:	f003 f989 	bl	80043a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000870 	.word	0x20000870

0800109c <_sbrk>:
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
 80010cc:	f005 fdf6 	bl	8006cbc <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20005000 	.word	0x20005000
 80010fc:	00000400 	.word	0x00000400
 8001100:	200008b8 	.word	0x200008b8
 8001104:	20001760 	.word	0x20001760

08001108 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <Reset_Handler>:
 8001114:	f7ff fff8 	bl	8001108 <SystemInit>
 8001118:	480b      	ldr	r0, [pc, #44]	@ (8001148 <LoopFillZerobss+0xe>)
 800111a:	490c      	ldr	r1, [pc, #48]	@ (800114c <LoopFillZerobss+0x12>)
 800111c:	4a0c      	ldr	r2, [pc, #48]	@ (8001150 <LoopFillZerobss+0x16>)
 800111e:	2300      	movs	r3, #0
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:
 8001122:	58d4      	ldr	r4, [r2, r3]
 8001124:	50c4      	str	r4, [r0, r3]
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:
 8001128:	18c4      	adds	r4, r0, r3
 800112a:	428c      	cmp	r4, r1
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
 800112e:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <LoopFillZerobss+0x1a>)
 8001130:	4c09      	ldr	r4, [pc, #36]	@ (8001158 <LoopFillZerobss+0x1e>)
 8001132:	2300      	movs	r3, #0
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:
 800113a:	42a2      	cmp	r2, r4
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>
 800113e:	f005 fdc3 	bl	8006cc8 <__libc_init_array>
 8001142:	f7ff f857 	bl	80001f4 <main>
 8001146:	4770      	bx	lr
 8001148:	20000000 	.word	0x20000000
 800114c:	20000070 	.word	0x20000070
 8001150:	08008418 	.word	0x08008418
 8001154:	20000070 	.word	0x20000070
 8001158:	2000175c 	.word	0x2000175c

0800115c <ADC1_2_IRQHandler>:
 800115c:	e7fe      	b.n	800115c <ADC1_2_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_Init+0x28>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_Init+0x28>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f001 fb3d 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	200f      	movs	r0, #15
 8001178:	f7ff fef0 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fdd4 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_IncTick+0x1c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_IncTick+0x20>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a03      	ldr	r2, [pc, #12]	@ (80011ac <HAL_IncTick+0x20>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000018 	.word	0x20000018
 80011ac:	200008bc 	.word	0x200008bc

080011b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b02      	ldr	r3, [pc, #8]	@ (80011c0 <HAL_GetTick+0x10>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	200008bc 	.word	0x200008bc

080011c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0be      	b.n	8001364 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d109      	bne.n	8001208 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fdc8 	bl	8000d98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fbc5 	bl	8001998 <ADC_ConversionStop_Disable>
 800120e:	4603      	mov	r3, r0
 8001210:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 8099 	bne.w	8001352 <HAL_ADC_Init+0x18e>
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 8095 	bne.w	8001352 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001230:	f023 0302 	bic.w	r3, r3, #2
 8001234:	f043 0202 	orr.w	r2, r3, #2
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001244:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7b1b      	ldrb	r3, [r3, #12]
 800124a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800124c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	4313      	orrs	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800125c:	d003      	beq.n	8001266 <HAL_ADC_Init+0xa2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <HAL_ADC_Init+0xa8>
 8001266:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126a:	e000      	b.n	800126e <HAL_ADC_Init+0xaa>
 800126c:	2300      	movs	r3, #0
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7d1b      	ldrb	r3, [r3, #20]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d119      	bne.n	80012b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7b1b      	ldrb	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	3b01      	subs	r3, #1
 800128a:	035a      	lsls	r2, r3, #13
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	e00b      	b.n	80012b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <HAL_ADC_Init+0x1a8>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012e0:	d003      	beq.n	80012ea <HAL_ADC_Init+0x126>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d104      	bne.n	80012f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	051b      	lsls	r3, r3, #20
 80012f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	430a      	orrs	r2, r1
 8001306:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_ADC_Init+0x1ac>)
 8001310:	4013      	ands	r3, r2
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	429a      	cmp	r2, r3
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001322:	f023 0303 	bic.w	r3, r3, #3
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800132e:	e018      	b.n	8001362 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	f023 0312 	bic.w	r3, r3, #18
 8001338:	f043 0210 	orr.w	r2, r3, #16
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001350:	e007      	b.n	8001362 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	ffe1f7fd 	.word	0xffe1f7fd
 8001370:	ff1f0efe 	.word	0xff1f0efe

08001374 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_ADC_Start+0x1a>
 800138a:	2302      	movs	r3, #2
 800138c:	e098      	b.n	80014c0 <HAL_ADC_Start+0x14c>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 faa4 	bl	80018e4 <ADC_Enable>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 8087 	bne.w	80014b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a41      	ldr	r2, [pc, #260]	@ (80014c8 <HAL_ADC_Start+0x154>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d105      	bne.n	80013d2 <HAL_ADC_Start+0x5e>
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <HAL_ADC_Start+0x158>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d115      	bne.n	80013fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d026      	beq.n	800143a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013fc:	e01d      	b.n	800143a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001402:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2f      	ldr	r2, [pc, #188]	@ (80014cc <HAL_ADC_Start+0x158>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d004      	beq.n	800141e <HAL_ADC_Start+0xaa>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2b      	ldr	r2, [pc, #172]	@ (80014c8 <HAL_ADC_Start+0x154>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10d      	bne.n	800143a <HAL_ADC_Start+0xc6>
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <HAL_ADC_Start+0x158>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001432:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	f023 0206 	bic.w	r2, r3, #6
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001452:	e002      	b.n	800145a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f06f 0202 	mvn.w	r2, #2
 800146a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001476:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800147a:	d113      	bne.n	80014a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001480:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <HAL_ADC_Start+0x154>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d105      	bne.n	8001492 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_ADC_Start+0x158>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800148e:	2b00      	cmp	r3, #0
 8001490:	d108      	bne.n	80014a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	e00c      	b.n	80014be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	e003      	b.n	80014be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40012800 	.word	0x40012800
 80014cc:	40012400 	.word	0x40012400

080014d0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014e6:	f7ff fe63 	bl	80011b0 <HAL_GetTick>
 80014ea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fe:	f043 0220 	orr.w	r2, r3, #32
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0d3      	b.n	80016ba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d131      	bne.n	8001584 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001526:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d12a      	bne.n	8001584 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800152e:	e021      	b.n	8001574 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001536:	d01d      	beq.n	8001574 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_ADC_PollForConversion+0x7e>
 800153e:	f7ff fe37 	bl	80011b0 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d212      	bcs.n	8001574 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10b      	bne.n	8001574 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	f043 0204 	orr.w	r2, r3, #4
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e0a2      	b.n	80016ba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0d6      	beq.n	8001530 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001582:	e070      	b.n	8001666 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001584:	4b4f      	ldr	r3, [pc, #316]	@ (80016c4 <HAL_ADC_PollForConversion+0x1f4>)
 8001586:	681c      	ldr	r4, [r3, #0]
 8001588:	2002      	movs	r0, #2
 800158a:	f002 fdab 	bl	80040e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800158e:	4603      	mov	r3, r0
 8001590:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6919      	ldr	r1, [r3, #16]
 800159a:	4b4b      	ldr	r3, [pc, #300]	@ (80016c8 <HAL_ADC_PollForConversion+0x1f8>)
 800159c:	400b      	ands	r3, r1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d118      	bne.n	80015d4 <HAL_ADC_PollForConversion+0x104>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68d9      	ldr	r1, [r3, #12]
 80015a8:	4b48      	ldr	r3, [pc, #288]	@ (80016cc <HAL_ADC_PollForConversion+0x1fc>)
 80015aa:	400b      	ands	r3, r1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d111      	bne.n	80015d4 <HAL_ADC_PollForConversion+0x104>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6919      	ldr	r1, [r3, #16]
 80015b6:	4b46      	ldr	r3, [pc, #280]	@ (80016d0 <HAL_ADC_PollForConversion+0x200>)
 80015b8:	400b      	ands	r3, r1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d108      	bne.n	80015d0 <HAL_ADC_PollForConversion+0x100>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68d9      	ldr	r1, [r3, #12]
 80015c4:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <HAL_ADC_PollForConversion+0x204>)
 80015c6:	400b      	ands	r3, r1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_PollForConversion+0x100>
 80015cc:	2314      	movs	r3, #20
 80015ce:	e020      	b.n	8001612 <HAL_ADC_PollForConversion+0x142>
 80015d0:	2329      	movs	r3, #41	@ 0x29
 80015d2:	e01e      	b.n	8001612 <HAL_ADC_PollForConversion+0x142>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6919      	ldr	r1, [r3, #16]
 80015da:	4b3d      	ldr	r3, [pc, #244]	@ (80016d0 <HAL_ADC_PollForConversion+0x200>)
 80015dc:	400b      	ands	r3, r1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <HAL_ADC_PollForConversion+0x120>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68d9      	ldr	r1, [r3, #12]
 80015e8:	4b3a      	ldr	r3, [pc, #232]	@ (80016d4 <HAL_ADC_PollForConversion+0x204>)
 80015ea:	400b      	ands	r3, r1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00d      	beq.n	800160c <HAL_ADC_PollForConversion+0x13c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6919      	ldr	r1, [r3, #16]
 80015f6:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <HAL_ADC_PollForConversion+0x208>)
 80015f8:	400b      	ands	r3, r1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <HAL_ADC_PollForConversion+0x140>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68d9      	ldr	r1, [r3, #12]
 8001604:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <HAL_ADC_PollForConversion+0x208>)
 8001606:	400b      	ands	r3, r1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_ADC_PollForConversion+0x140>
 800160c:	2354      	movs	r3, #84	@ 0x54
 800160e:	e000      	b.n	8001612 <HAL_ADC_PollForConversion+0x142>
 8001610:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001618:	e021      	b.n	800165e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001620:	d01a      	beq.n	8001658 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d007      	beq.n	8001638 <HAL_ADC_PollForConversion+0x168>
 8001628:	f7ff fdc2 	bl	80011b0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d20f      	bcs.n	8001658 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d90b      	bls.n	8001658 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001644:	f043 0204 	orr.w	r2, r3, #4
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e030      	b.n	80016ba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	429a      	cmp	r2, r3
 8001664:	d8d9      	bhi.n	800161a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f06f 0212 	mvn.w	r2, #18
 800166e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001686:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800168a:	d115      	bne.n	80016b8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001690:	2b00      	cmp	r3, #0
 8001692:	d111      	bne.n	80016b8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	f043 0201 	orr.w	r2, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000010 	.word	0x20000010
 80016c8:	24924924 	.word	0x24924924
 80016cc:	00924924 	.word	0x00924924
 80016d0:	12492492 	.word	0x12492492
 80016d4:	00492492 	.word	0x00492492
 80016d8:	00249249 	.word	0x00249249

080016dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x20>
 8001710:	2302      	movs	r3, #2
 8001712:	e0dc      	b.n	80018ce <HAL_ADC_ConfigChannel+0x1da>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b06      	cmp	r3, #6
 8001722:	d81c      	bhi.n	800175e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b05      	subs	r3, #5
 8001736:	221f      	movs	r2, #31
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b05      	subs	r3, #5
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	635a      	str	r2, [r3, #52]	@ 0x34
 800175c:	e03c      	b.n	80017d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d81c      	bhi.n	80017a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b23      	subs	r3, #35	@ 0x23
 8001778:	221f      	movs	r2, #31
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	4019      	ands	r1, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	3b23      	subs	r3, #35	@ 0x23
 8001792:	fa00 f203 	lsl.w	r2, r0, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	631a      	str	r2, [r3, #48]	@ 0x30
 800179e:	e01b      	b.n	80017d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b41      	subs	r3, #65	@ 0x41
 80017b2:	221f      	movs	r2, #31
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4019      	ands	r1, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b41      	subs	r3, #65	@ 0x41
 80017cc:	fa00 f203 	lsl.w	r2, r0, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d91c      	bls.n	800181a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68d9      	ldr	r1, [r3, #12]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	3b1e      	subs	r3, #30
 80017f2:	2207      	movs	r2, #7
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6898      	ldr	r0, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	3b1e      	subs	r3, #30
 800180c:	fa00 f203 	lsl.w	r2, r0, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	e019      	b.n	800184e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6919      	ldr	r1, [r3, #16]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	2207      	movs	r2, #7
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6898      	ldr	r0, [r3, #8]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	fa00 f203 	lsl.w	r2, r0, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d003      	beq.n	800185e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800185a:	2b11      	cmp	r3, #17
 800185c:	d132      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d125      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d126      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001884:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d11a      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a13      	ldr	r2, [pc, #76]	@ (80018e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	0c9a      	lsrs	r2, r3, #18
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a4:	e002      	b.n	80018ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x1b2>
 80018b2:	e007      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	f043 0220 	orr.w	r2, r3, #32
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40012400 	.word	0x40012400
 80018dc:	20000010 	.word	0x20000010
 80018e0:	431bde83 	.word	0x431bde83

080018e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d040      	beq.n	8001984 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001912:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <ADC_Enable+0xac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <ADC_Enable+0xb0>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001920:	e002      	b.n	8001928 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3b01      	subs	r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f9      	bne.n	8001922 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800192e:	f7ff fc3f 	bl	80011b0 <HAL_GetTick>
 8001932:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001934:	e01f      	b.n	8001976 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001936:	f7ff fc3b 	bl	80011b0 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d918      	bls.n	8001976 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b01      	cmp	r3, #1
 8001950:	d011      	beq.n	8001976 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e007      	b.n	8001986 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d1d8      	bne.n	8001936 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000010 	.word	0x20000010
 8001994:	431bde83 	.word	0x431bde83

08001998 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d12e      	bne.n	8001a10 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0201 	bic.w	r2, r2, #1
 80019c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019c2:	f7ff fbf5 	bl	80011b0 <HAL_GetTick>
 80019c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019c8:	e01b      	b.n	8001a02 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019ca:	f7ff fbf1 	bl	80011b0 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d914      	bls.n	8001a02 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d10d      	bne.n	8001a02 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e007      	b.n	8001a12 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d0dc      	beq.n	80019ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0ed      	b.n	8001c08 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff f9e9 	bl	8000e10 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4e:	f7ff fbaf 	bl	80011b0 <HAL_GetTick>
 8001a52:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a54:	e012      	b.n	8001a7c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a56:	f7ff fbab 	bl	80011b0 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b0a      	cmp	r3, #10
 8001a62:	d90b      	bls.n	8001a7c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2205      	movs	r2, #5
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0c5      	b.n	8001c08 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0e5      	beq.n	8001a56 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0202 	bic.w	r2, r2, #2
 8001a98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9a:	f7ff fb89 	bl	80011b0 <HAL_GetTick>
 8001a9e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa0:	e012      	b.n	8001ac8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa2:	f7ff fb85 	bl	80011b0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d90b      	bls.n	8001ac8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2205      	movs	r2, #5
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e09f      	b.n	8001c08 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1e5      	bne.n	8001aa2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7e1b      	ldrb	r3, [r3, #24]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d108      	bne.n	8001af0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7e5b      	ldrb	r3, [r3, #25]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d108      	bne.n	8001b1a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e9b      	ldrb	r3, [r3, #26]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0220 	orr.w	r2, r2, #32
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e007      	b.n	8001b54 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0220 	bic.w	r2, r2, #32
 8001b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7edb      	ldrb	r3, [r3, #27]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d108      	bne.n	8001b6e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0210 	bic.w	r2, r2, #16
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e007      	b.n	8001b7e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0210 	orr.w	r2, r2, #16
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7f1b      	ldrb	r3, [r3, #28]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0208 	orr.w	r2, r2, #8
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e007      	b.n	8001ba8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0208 	bic.w	r2, r2, #8
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7f5b      	ldrb	r3, [r3, #29]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d108      	bne.n	8001bc2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0204 	orr.w	r2, r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e007      	b.n	8001bd2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0204 	bic.w	r2, r2, #4
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	ea42 0103 	orr.w	r1, r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	1e5a      	subs	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d003      	beq.n	8001c36 <HAL_CAN_ConfigFilter+0x26>
 8001c2e:	7cfb      	ldrb	r3, [r7, #19]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	f040 80aa 	bne.w	8001d8a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2201      	movs	r2, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	401a      	ands	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d123      	bne.n	8001cb8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3248      	adds	r2, #72	@ 0x48
 8001c98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cae:	6979      	ldr	r1, [r7, #20]
 8001cb0:	3348      	adds	r3, #72	@ 0x48
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d122      	bne.n	8001d06 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ce0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3248      	adds	r2, #72	@ 0x48
 8001ce6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cfa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cfc:	6979      	ldr	r1, [r7, #20]
 8001cfe:	3348      	adds	r3, #72	@ 0x48
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	401a      	ands	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d20:	e007      	b.n	8001d32 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	401a      	ands	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d4c:	e007      	b.n	8001d5e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d107      	bne.n	8001d76 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d7c:	f023 0201 	bic.w	r2, r3, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e006      	b.n	8001d98 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
  }
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12e      	bne.n	8001e14 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dce:	f7ff f9ef 	bl	80011b0 <HAL_GetTick>
 8001dd2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dd4:	e012      	b.n	8001dfc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dd6:	f7ff f9eb 	bl	80011b0 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b0a      	cmp	r3, #10
 8001de2:	d90b      	bls.n	8001dfc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2205      	movs	r2, #5
 8001df4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e012      	b.n	8001e22 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1e5      	bne.n	8001dd6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e006      	b.n	8001e22 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
  }
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b089      	sub	sp, #36	@ 0x24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e48:	7ffb      	ldrb	r3, [r7, #31]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d003      	beq.n	8001e56 <HAL_CAN_AddTxMessage+0x2c>
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	f040 80ad 	bne.w	8001fb0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8095 	beq.w	8001fa0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	0e1b      	lsrs	r3, r3, #24
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e80:	2201      	movs	r2, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	409a      	lsls	r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10d      	bne.n	8001eae <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e9c:	68f9      	ldr	r1, [r7, #12]
 8001e9e:	6809      	ldr	r1, [r1, #0]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3318      	adds	r3, #24
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	440b      	add	r3, r1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e00f      	b.n	8001ece <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eb8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ec2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3318      	adds	r3, #24
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	440b      	add	r3, r1
 8001ecc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3318      	adds	r3, #24
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	440b      	add	r3, r1
 8001ede:	3304      	adds	r3, #4
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	7d1b      	ldrb	r3, [r3, #20]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d111      	bne.n	8001f0e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3318      	adds	r3, #24
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	6811      	ldr	r1, [r2, #0]
 8001efe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3318      	adds	r3, #24
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	440b      	add	r3, r1
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3307      	adds	r3, #7
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	061a      	lsls	r2, r3, #24
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3306      	adds	r3, #6
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3305      	adds	r3, #5
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	3204      	adds	r2, #4
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	4610      	mov	r0, r2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	6811      	ldr	r1, [r2, #0]
 8001f36:	ea43 0200 	orr.w	r2, r3, r0
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3303      	adds	r3, #3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	061a      	lsls	r2, r3, #24
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3302      	adds	r3, #2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	4313      	orrs	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	4610      	mov	r0, r2
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	6811      	ldr	r1, [r2, #0]
 8001f6c:	ea43 0200 	orr.w	r2, r3, r0
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	440b      	add	r3, r1
 8001f76:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001f7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3318      	adds	r3, #24
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6811      	ldr	r1, [r2, #0]
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3318      	adds	r3, #24
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	440b      	add	r3, r1
 8001f9a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e00e      	b.n	8001fbe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e006      	b.n	8001fbe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	@ 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fdc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d003      	beq.n	8001fec <HAL_CAN_GetRxMessage+0x24>
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	f040 8103 	bne.w	80021f2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10e      	bne.n	8002010 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d116      	bne.n	800202e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0f7      	b.n	8002200 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0e8      	b.n	8002200 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	331b      	adds	r3, #27
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0204 	and.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10c      	bne.n	8002066 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	331b      	adds	r3, #27
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	4413      	add	r3, r2
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0d5b      	lsrs	r3, r3, #21
 800205c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e00b      	b.n	800207e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	331b      	adds	r3, #27
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	4413      	add	r3, r2
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	331b      	adds	r3, #27
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	4413      	add	r3, r2
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0202 	and.w	r2, r3, #2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	331b      	adds	r3, #27
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2208      	movs	r2, #8
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	e00b      	b.n	80020cc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	331b      	adds	r3, #27
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 020f 	and.w	r2, r3, #15
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	331b      	adds	r3, #27
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	4413      	add	r3, r2
 80020d8:	3304      	adds	r3, #4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	331b      	adds	r3, #27
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0c1b      	lsrs	r3, r3, #16
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	4413      	add	r3, r2
 8002106:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0a1a      	lsrs	r2, r3, #8
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	4413      	add	r3, r2
 8002136:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0c1a      	lsrs	r2, r3, #16
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3302      	adds	r3, #2
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	4413      	add	r3, r2
 8002150:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0e1a      	lsrs	r2, r3, #24
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	3303      	adds	r3, #3
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4413      	add	r3, r2
 800216a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	3304      	adds	r3, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4413      	add	r3, r2
 8002182:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0a1a      	lsrs	r2, r3, #8
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3305      	adds	r3, #5
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4413      	add	r3, r2
 800219c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0c1a      	lsrs	r2, r3, #16
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	3306      	adds	r3, #6
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e1a      	lsrs	r2, r3, #24
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3307      	adds	r3, #7
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0220 	orr.w	r2, r2, #32
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	e007      	b.n	80021ee <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0220 	orr.w	r2, r2, #32
 80021ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e006      	b.n	8002200 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
  }
}
 8002200:	4618      	mov	r0, r3
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d002      	beq.n	8002228 <HAL_CAN_ActivateNotification+0x1e>
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d109      	bne.n	800223c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6959      	ldr	r1, [r3, #20]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	e006      	b.n	800224a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d07c      	beq.n	8002394 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d023      	beq.n	80022ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2201      	movs	r2, #1
 80022aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f983 	bl	80025c2 <HAL_CAN_TxMailbox0CompleteCallback>
 80022bc:	e016      	b.n	80022ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d0:	e00c      	b.n	80022ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e4:	e002      	b.n	80022ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f986 	bl	80025f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f962 	bl	80025d4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002310:	e016      	b.n	8002340 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
 8002324:	e00c      	b.n	8002340 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
 8002338:	e002      	b.n	8002340 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f965 	bl	800260a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d024      	beq.n	8002394 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002352:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f941 	bl	80025e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002364:	e016      	b.n	8002394 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
 8002378:	e00c      	b.n	8002394 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
 800238c:	e002      	b.n	8002394 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f944 	bl	800261c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2210      	movs	r2, #16
 80023b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2208      	movs	r2, #8
 80023d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f933 	bl	8002640 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f91b 	bl	800262e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2210      	movs	r2, #16
 800241a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2208      	movs	r2, #8
 8002436:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f90a 	bl	8002652 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fd fe92 	bl	8000180 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2210      	movs	r2, #16
 8002476:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8f3 	bl	8002664 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2208      	movs	r2, #8
 8002498:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8eb 	bl	8002676 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d07b      	beq.n	80025a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d072      	beq.n	800259a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250e:	2b00      	cmp	r3, #0
 8002510:	d043      	beq.n	800259a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03e      	beq.n	800259a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002522:	2b60      	cmp	r3, #96	@ 0x60
 8002524:	d02b      	beq.n	800257e <HAL_CAN_IRQHandler+0x32a>
 8002526:	2b60      	cmp	r3, #96	@ 0x60
 8002528:	d82e      	bhi.n	8002588 <HAL_CAN_IRQHandler+0x334>
 800252a:	2b50      	cmp	r3, #80	@ 0x50
 800252c:	d022      	beq.n	8002574 <HAL_CAN_IRQHandler+0x320>
 800252e:	2b50      	cmp	r3, #80	@ 0x50
 8002530:	d82a      	bhi.n	8002588 <HAL_CAN_IRQHandler+0x334>
 8002532:	2b40      	cmp	r3, #64	@ 0x40
 8002534:	d019      	beq.n	800256a <HAL_CAN_IRQHandler+0x316>
 8002536:	2b40      	cmp	r3, #64	@ 0x40
 8002538:	d826      	bhi.n	8002588 <HAL_CAN_IRQHandler+0x334>
 800253a:	2b30      	cmp	r3, #48	@ 0x30
 800253c:	d010      	beq.n	8002560 <HAL_CAN_IRQHandler+0x30c>
 800253e:	2b30      	cmp	r3, #48	@ 0x30
 8002540:	d822      	bhi.n	8002588 <HAL_CAN_IRQHandler+0x334>
 8002542:	2b10      	cmp	r3, #16
 8002544:	d002      	beq.n	800254c <HAL_CAN_IRQHandler+0x2f8>
 8002546:	2b20      	cmp	r3, #32
 8002548:	d005      	beq.n	8002556 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800254a:	e01d      	b.n	8002588 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	f043 0308 	orr.w	r3, r3, #8
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002554:	e019      	b.n	800258a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	f043 0310 	orr.w	r3, r3, #16
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800255e:	e014      	b.n	800258a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	f043 0320 	orr.w	r3, r3, #32
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002568:	e00f      	b.n	800258a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002572:	e00a      	b.n	800258a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800257c:	e005      	b.n	800258a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002586:	e000      	b.n	800258a <HAL_CAN_IRQHandler+0x336>
            break;
 8002588:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002598:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2204      	movs	r2, #4
 80025a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f867 	bl	8002688 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025ba:	bf00      	nop
 80025bc:	3728      	adds	r7, #40	@ 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
	...

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4906      	ldr	r1, [pc, #24]	@ (8002734 <__NVIC_EnableIRQ+0x34>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100

08002738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	6039      	str	r1, [r7, #0]
 8002742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	2b00      	cmp	r3, #0
 800274a:	db0a      	blt.n	8002762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	b2da      	uxtb	r2, r3
 8002750:	490c      	ldr	r1, [pc, #48]	@ (8002784 <__NVIC_SetPriority+0x4c>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	0112      	lsls	r2, r2, #4
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	440b      	add	r3, r1
 800275c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002760:	e00a      	b.n	8002778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4908      	ldr	r1, [pc, #32]	@ (8002788 <__NVIC_SetPriority+0x50>)
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	3b04      	subs	r3, #4
 8002770:	0112      	lsls	r2, r2, #4
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	440b      	add	r3, r1
 8002776:	761a      	strb	r2, [r3, #24]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000e100 	.word	0xe000e100
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	@ 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f1c3 0307 	rsb	r3, r3, #7
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	bf28      	it	cs
 80027aa:	2304      	movcs	r3, #4
 80027ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3304      	adds	r3, #4
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d902      	bls.n	80027bc <NVIC_EncodePriority+0x30>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3b03      	subs	r3, #3
 80027ba:	e000      	b.n	80027be <NVIC_EncodePriority+0x32>
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43da      	mvns	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	401a      	ands	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	43d9      	mvns	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	4313      	orrs	r3, r2
         );
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3724      	adds	r7, #36	@ 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff4f 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff64 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ffb2 	bl	800278c <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff81 	bl	8002738 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff57 	bl	8002700 <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b08b      	sub	sp, #44	@ 0x2c
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286e:	e169      	b.n	8002b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002870:	2201      	movs	r2, #1
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	429a      	cmp	r2, r3
 800288a:	f040 8158 	bne.w	8002b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a9a      	ldr	r2, [pc, #616]	@ (8002afc <HAL_GPIO_Init+0x2a0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d05e      	beq.n	8002956 <HAL_GPIO_Init+0xfa>
 8002898:	4a98      	ldr	r2, [pc, #608]	@ (8002afc <HAL_GPIO_Init+0x2a0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d875      	bhi.n	800298a <HAL_GPIO_Init+0x12e>
 800289e:	4a98      	ldr	r2, [pc, #608]	@ (8002b00 <HAL_GPIO_Init+0x2a4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d058      	beq.n	8002956 <HAL_GPIO_Init+0xfa>
 80028a4:	4a96      	ldr	r2, [pc, #600]	@ (8002b00 <HAL_GPIO_Init+0x2a4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d86f      	bhi.n	800298a <HAL_GPIO_Init+0x12e>
 80028aa:	4a96      	ldr	r2, [pc, #600]	@ (8002b04 <HAL_GPIO_Init+0x2a8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d052      	beq.n	8002956 <HAL_GPIO_Init+0xfa>
 80028b0:	4a94      	ldr	r2, [pc, #592]	@ (8002b04 <HAL_GPIO_Init+0x2a8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d869      	bhi.n	800298a <HAL_GPIO_Init+0x12e>
 80028b6:	4a94      	ldr	r2, [pc, #592]	@ (8002b08 <HAL_GPIO_Init+0x2ac>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d04c      	beq.n	8002956 <HAL_GPIO_Init+0xfa>
 80028bc:	4a92      	ldr	r2, [pc, #584]	@ (8002b08 <HAL_GPIO_Init+0x2ac>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d863      	bhi.n	800298a <HAL_GPIO_Init+0x12e>
 80028c2:	4a92      	ldr	r2, [pc, #584]	@ (8002b0c <HAL_GPIO_Init+0x2b0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d046      	beq.n	8002956 <HAL_GPIO_Init+0xfa>
 80028c8:	4a90      	ldr	r2, [pc, #576]	@ (8002b0c <HAL_GPIO_Init+0x2b0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d85d      	bhi.n	800298a <HAL_GPIO_Init+0x12e>
 80028ce:	2b12      	cmp	r3, #18
 80028d0:	d82a      	bhi.n	8002928 <HAL_GPIO_Init+0xcc>
 80028d2:	2b12      	cmp	r3, #18
 80028d4:	d859      	bhi.n	800298a <HAL_GPIO_Init+0x12e>
 80028d6:	a201      	add	r2, pc, #4	@ (adr r2, 80028dc <HAL_GPIO_Init+0x80>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002957 	.word	0x08002957
 80028e0:	08002931 	.word	0x08002931
 80028e4:	08002943 	.word	0x08002943
 80028e8:	08002985 	.word	0x08002985
 80028ec:	0800298b 	.word	0x0800298b
 80028f0:	0800298b 	.word	0x0800298b
 80028f4:	0800298b 	.word	0x0800298b
 80028f8:	0800298b 	.word	0x0800298b
 80028fc:	0800298b 	.word	0x0800298b
 8002900:	0800298b 	.word	0x0800298b
 8002904:	0800298b 	.word	0x0800298b
 8002908:	0800298b 	.word	0x0800298b
 800290c:	0800298b 	.word	0x0800298b
 8002910:	0800298b 	.word	0x0800298b
 8002914:	0800298b 	.word	0x0800298b
 8002918:	0800298b 	.word	0x0800298b
 800291c:	0800298b 	.word	0x0800298b
 8002920:	08002939 	.word	0x08002939
 8002924:	0800294d 	.word	0x0800294d
 8002928:	4a79      	ldr	r2, [pc, #484]	@ (8002b10 <HAL_GPIO_Init+0x2b4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800292e:	e02c      	b.n	800298a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	623b      	str	r3, [r7, #32]
          break;
 8002936:	e029      	b.n	800298c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	3304      	adds	r3, #4
 800293e:	623b      	str	r3, [r7, #32]
          break;
 8002940:	e024      	b.n	800298c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	3308      	adds	r3, #8
 8002948:	623b      	str	r3, [r7, #32]
          break;
 800294a:	e01f      	b.n	800298c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	330c      	adds	r3, #12
 8002952:	623b      	str	r3, [r7, #32]
          break;
 8002954:	e01a      	b.n	800298c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800295e:	2304      	movs	r3, #4
 8002960:	623b      	str	r3, [r7, #32]
          break;
 8002962:	e013      	b.n	800298c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800296c:	2308      	movs	r3, #8
 800296e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	611a      	str	r2, [r3, #16]
          break;
 8002976:	e009      	b.n	800298c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002978:	2308      	movs	r3, #8
 800297a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	615a      	str	r2, [r3, #20]
          break;
 8002982:	e003      	b.n	800298c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
          break;
 8002988:	e000      	b.n	800298c <HAL_GPIO_Init+0x130>
          break;
 800298a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2bff      	cmp	r3, #255	@ 0xff
 8002990:	d801      	bhi.n	8002996 <HAL_GPIO_Init+0x13a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	e001      	b.n	800299a <HAL_GPIO_Init+0x13e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2bff      	cmp	r3, #255	@ 0xff
 80029a0:	d802      	bhi.n	80029a8 <HAL_GPIO_Init+0x14c>
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	e002      	b.n	80029ae <HAL_GPIO_Init+0x152>
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	3b08      	subs	r3, #8
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	210f      	movs	r1, #15
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	431a      	orrs	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80b1 	beq.w	8002b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <HAL_GPIO_Init+0x2b8>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002b14 <HAL_GPIO_Init+0x2b8>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <HAL_GPIO_Init+0x2b8>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029f4:	4a48      	ldr	r2, [pc, #288]	@ (8002b18 <HAL_GPIO_Init+0x2bc>)
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a40      	ldr	r2, [pc, #256]	@ (8002b1c <HAL_GPIO_Init+0x2c0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_GPIO_Init+0x1ec>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a3f      	ldr	r2, [pc, #252]	@ (8002b20 <HAL_GPIO_Init+0x2c4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00d      	beq.n	8002a44 <HAL_GPIO_Init+0x1e8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b24 <HAL_GPIO_Init+0x2c8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d007      	beq.n	8002a40 <HAL_GPIO_Init+0x1e4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a3d      	ldr	r2, [pc, #244]	@ (8002b28 <HAL_GPIO_Init+0x2cc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <HAL_GPIO_Init+0x1e0>
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e006      	b.n	8002a4a <HAL_GPIO_Init+0x1ee>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e004      	b.n	8002a4a <HAL_GPIO_Init+0x1ee>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x1ee>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_GPIO_Init+0x1ee>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4c:	f002 0203 	and.w	r2, r2, #3
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4093      	lsls	r3, r2
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a5a:	492f      	ldr	r1, [pc, #188]	@ (8002b18 <HAL_GPIO_Init+0x2bc>)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a74:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	492c      	ldr	r1, [pc, #176]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a82:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	4928      	ldr	r1, [pc, #160]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a9c:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	4922      	ldr	r1, [pc, #136]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	491e      	ldr	r1, [pc, #120]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4918      	ldr	r1, [pc, #96]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
 8002ad0:	e006      	b.n	8002ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ad2:	4b16      	ldr	r3, [pc, #88]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4914      	ldr	r1, [pc, #80]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d021      	beq.n	8002b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002aec:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	490e      	ldr	r1, [pc, #56]	@ (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e021      	b.n	8002b3e <HAL_GPIO_Init+0x2e2>
 8002afa:	bf00      	nop
 8002afc:	10320000 	.word	0x10320000
 8002b00:	10310000 	.word	0x10310000
 8002b04:	10220000 	.word	0x10220000
 8002b08:	10210000 	.word	0x10210000
 8002b0c:	10120000 	.word	0x10120000
 8002b10:	10110000 	.word	0x10110000
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	40010800 	.word	0x40010800
 8002b20:	40010c00 	.word	0x40010c00
 8002b24:	40011000 	.word	0x40011000
 8002b28:	40011400 	.word	0x40011400
 8002b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	4909      	ldr	r1, [pc, #36]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	3301      	adds	r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f47f ae8e 	bne.w	8002870 <HAL_GPIO_Init+0x14>
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	372c      	adds	r7, #44	@ 0x2c
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40010400 	.word	0x40010400

08002b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e12b      	b.n	8002dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe f9a8 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	@ 0x24
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f001 f960 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8002bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a81      	ldr	r2, [pc, #516]	@ (8002dd8 <HAL_I2C_Init+0x274>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d807      	bhi.n	8002be8 <HAL_I2C_Init+0x84>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a80      	ldr	r2, [pc, #512]	@ (8002ddc <HAL_I2C_Init+0x278>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	bf94      	ite	ls
 8002be0:	2301      	movls	r3, #1
 8002be2:	2300      	movhi	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e006      	b.n	8002bf6 <HAL_I2C_Init+0x92>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a7d      	ldr	r2, [pc, #500]	@ (8002de0 <HAL_I2C_Init+0x27c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0e7      	b.n	8002dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a78      	ldr	r2, [pc, #480]	@ (8002de4 <HAL_I2C_Init+0x280>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0c9b      	lsrs	r3, r3, #18
 8002c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd8 <HAL_I2C_Init+0x274>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d802      	bhi.n	8002c38 <HAL_I2C_Init+0xd4>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3301      	adds	r3, #1
 8002c36:	e009      	b.n	8002c4c <HAL_I2C_Init+0xe8>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	4a69      	ldr	r2, [pc, #420]	@ (8002de8 <HAL_I2C_Init+0x284>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	495c      	ldr	r1, [pc, #368]	@ (8002dd8 <HAL_I2C_Init+0x274>)
 8002c68:	428b      	cmp	r3, r1
 8002c6a:	d819      	bhi.n	8002ca0 <HAL_I2C_Init+0x13c>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e59      	subs	r1, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c80:	400b      	ands	r3, r1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_I2C_Init+0x138>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e59      	subs	r1, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	e051      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e04f      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_I2C_Init+0x168>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e012      	b.n	8002cf2 <HAL_I2C_Init+0x18e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	0099      	lsls	r1, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Init+0x196>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e022      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10e      	bne.n	8002d20 <HAL_I2C_Init+0x1bc>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1e58      	subs	r0, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	440b      	add	r3, r1
 8002d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d1e:	e00f      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	6809      	ldr	r1, [r1, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6911      	ldr	r1, [r2, #16]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68d2      	ldr	r2, [r2, #12]
 8002d7a:	4311      	orrs	r1, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	000186a0 	.word	0x000186a0
 8002ddc:	001e847f 	.word	0x001e847f
 8002de0:	003d08ff 	.word	0x003d08ff
 8002de4:	431bde83 	.word	0x431bde83
 8002de8:	10624dd3 	.word	0x10624dd3

08002dec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	461a      	mov	r2, r3
 8002df8:	460b      	mov	r3, r1
 8002dfa:	817b      	strh	r3, [r7, #10]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7fe f9d6 	bl	80011b0 <HAL_GetTick>
 8002e04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	f040 80e0 	bne.w	8002fd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2319      	movs	r3, #25
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4970      	ldr	r1, [pc, #448]	@ (8002fe0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fa92 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0d3      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_I2C_Master_Transmit+0x50>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e0cc      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d007      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2221      	movs	r2, #33	@ 0x21
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	893a      	ldrh	r2, [r7, #8]
 8002e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a50      	ldr	r2, [pc, #320]	@ (8002fe4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ea4:	8979      	ldrh	r1, [r7, #10]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f9ca 	bl	8003244 <I2C_MasterRequestWrite>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e08d      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ed0:	e066      	b.n	8002fa0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	6a39      	ldr	r1, [r7, #32]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fb50 	bl	800357c <I2C_WaitOnTXEFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d107      	bne.n	8002efa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d11b      	bne.n	8002f74 <HAL_I2C_Master_Transmit+0x188>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	6a39      	ldr	r1, [r7, #32]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fb47 	bl	800360c <I2C_WaitOnBTFFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d107      	bne.n	8002f9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e01a      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d194      	bne.n	8002ed2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	00100002 	.word	0x00100002
 8002fe4:	ffff0000 	.word	0xffff0000

08002fe8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	@ 0x28
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	f7fe f8da 	bl	80011b0 <HAL_GetTick>
 8002ffc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	f040 8111 	bne.w	8003232 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	4988      	ldr	r1, [pc, #544]	@ (800323c <HAL_I2C_IsDeviceReady+0x254>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f994 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
 8003028:	e104      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_I2C_IsDeviceReady+0x50>
 8003034:	2302      	movs	r3, #2
 8003036:	e0fd      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d007      	beq.n	800305e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800306c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2224      	movs	r2, #36	@ 0x24
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a70      	ldr	r2, [pc, #448]	@ (8003240 <HAL_I2C_IsDeviceReady+0x258>)
 8003080:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003090:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2200      	movs	r2, #0
 800309a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f952 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b8:	d103      	bne.n	80030c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0b6      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe f86b 	bl	80011b0 <HAL_GetTick>
 80030da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800310a:	e025      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fe f850 	bl	80011b0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <HAL_I2C_IsDeviceReady+0x13a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	22a0      	movs	r2, #160	@ 0xa0
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b02      	cmp	r3, #2
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2ba0      	cmp	r3, #160	@ 0xa0
 8003162:	d005      	beq.n	8003170 <HAL_I2C_IsDeviceReady+0x188>
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_I2C_IsDeviceReady+0x188>
 800316a:	7dbb      	ldrb	r3, [r7, #22]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0cd      	beq.n	800310c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d129      	bne.n	80031da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003194:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2319      	movs	r3, #25
 80031b2:	2201      	movs	r2, #1
 80031b4:	4921      	ldr	r1, [pc, #132]	@ (800323c <HAL_I2C_IsDeviceReady+0x254>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8c6 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e036      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e02c      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2319      	movs	r3, #25
 80031fa:	2201      	movs	r2, #1
 80031fc:	490f      	ldr	r1, [pc, #60]	@ (800323c <HAL_I2C_IsDeviceReady+0x254>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f8a2 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e012      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3301      	adds	r3, #1
 8003212:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	f4ff af32 	bcc.w	8003082 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	00100002 	.word	0x00100002
 8003240:	ffff0000 	.word	0xffff0000

08003244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d006      	beq.n	800326e <I2C_MasterRequestWrite+0x2a>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d003      	beq.n	800326e <I2C_MasterRequestWrite+0x2a>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800326c:	d108      	bne.n	8003280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e00b      	b.n	8003298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003284:	2b12      	cmp	r3, #18
 8003286:	d107      	bne.n	8003298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f84f 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032be:	d103      	bne.n	80032c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e035      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032d4:	d108      	bne.n	80032e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032e4:	611a      	str	r2, [r3, #16]
 80032e6:	e01b      	b.n	8003320 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032e8:	897b      	ldrh	r3, [r7, #10]
 80032ea:	11db      	asrs	r3, r3, #7
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0306 	and.w	r3, r3, #6
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f063 030f 	orn	r3, r3, #15
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	490e      	ldr	r1, [pc, #56]	@ (8003340 <I2C_MasterRequestWrite+0xfc>)
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f898 	bl	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e010      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003316:	897b      	ldrh	r3, [r7, #10]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4907      	ldr	r1, [pc, #28]	@ (8003344 <I2C_MasterRequestWrite+0x100>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f888 	bl	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00010008 	.word	0x00010008
 8003344:	00010002 	.word	0x00010002

08003348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003358:	e048      	b.n	80033ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003360:	d044      	beq.n	80033ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003362:	f7fd ff25 	bl	80011b0 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d302      	bcc.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d139      	bne.n	80033ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	0c1b      	lsrs	r3, r3, #16
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	d10d      	bne.n	800339e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	43da      	mvns	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4013      	ands	r3, r2
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	e00c      	b.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	43da      	mvns	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4013      	ands	r3, r2
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d116      	bne.n	80033ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e023      	b.n	8003434 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10d      	bne.n	8003412 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	e00c      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	429a      	cmp	r2, r3
 8003430:	d093      	beq.n	800335a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344a:	e071      	b.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345a:	d123      	bne.n	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800346a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	f043 0204 	orr.w	r2, r3, #4
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e067      	b.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034aa:	d041      	beq.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fd fe80 	bl	80011b0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d136      	bne.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10c      	bne.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e00b      	b.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e021      	b.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d10c      	bne.n	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	43da      	mvns	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4013      	ands	r3, r2
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e00b      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4013      	ands	r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	f47f af6d 	bne.w	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003588:	e034      	b.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f886 	bl	800369c <I2C_IsAcknowledgeFailed>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e034      	b.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a0:	d028      	beq.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fd fe05 	bl	80011b0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d11d      	bne.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c2:	2b80      	cmp	r3, #128	@ 0x80
 80035c4:	d016      	beq.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e007      	b.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b80      	cmp	r3, #128	@ 0x80
 8003600:	d1c3      	bne.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003618:	e034      	b.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f83e 	bl	800369c <I2C_IsAcknowledgeFailed>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e034      	b.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003630:	d028      	beq.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fd fdbd 	bl	80011b0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d11d      	bne.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b04      	cmp	r3, #4
 8003654:	d016      	beq.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e007      	b.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d1c3      	bne.n	800361a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d11b      	bne.n	80036ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	f043 0204 	orr.w	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e272      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8087 	beq.w	8003826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003718:	4b92      	ldr	r3, [pc, #584]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b04      	cmp	r3, #4
 8003722:	d00c      	beq.n	800373e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003724:	4b8f      	ldr	r3, [pc, #572]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d112      	bne.n	8003756 <HAL_RCC_OscConfig+0x5e>
 8003730:	4b8c      	ldr	r3, [pc, #560]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800373c:	d10b      	bne.n	8003756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373e:	4b89      	ldr	r3, [pc, #548]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d06c      	beq.n	8003824 <HAL_RCC_OscConfig+0x12c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d168      	bne.n	8003824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e24c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x76>
 8003760:	4b80      	ldr	r3, [pc, #512]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7f      	ldr	r2, [pc, #508]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e02e      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x98>
 8003776:	4b7b      	ldr	r3, [pc, #492]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7a      	ldr	r2, [pc, #488]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b78      	ldr	r3, [pc, #480]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a77      	ldr	r2, [pc, #476]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e01d      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0xbc>
 800379a:	4b72      	ldr	r3, [pc, #456]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a71      	ldr	r2, [pc, #452]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 80037b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b68      	ldr	r3, [pc, #416]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a67      	ldr	r2, [pc, #412]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd fcec 	bl	80011b0 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fd fce8 	bl	80011b0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e200      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0xe4>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fd fcd8 	bl	80011b0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fd fcd4 	bl	80011b0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e1ec      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003816:	4b53      	ldr	r3, [pc, #332]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x10c>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d063      	beq.n	80038fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003832:	4b4c      	ldr	r3, [pc, #304]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800383e:	4b49      	ldr	r3, [pc, #292]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b08      	cmp	r3, #8
 8003848:	d11c      	bne.n	8003884 <HAL_RCC_OscConfig+0x18c>
 800384a:	4b46      	ldr	r3, [pc, #280]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d116      	bne.n	8003884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	4b43      	ldr	r3, [pc, #268]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x176>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d001      	beq.n	800386e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1c0      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4b3d      	ldr	r3, [pc, #244]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4939      	ldr	r1, [pc, #228]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	e03a      	b.n	80038fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800388c:	4b36      	ldr	r3, [pc, #216]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fd fc8d 	bl	80011b0 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389a:	f7fd fc89 	bl	80011b0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1a1      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4927      	ldr	r1, [pc, #156]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]
 80038cc:	e015      	b.n	80038fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ce:	4b26      	ldr	r3, [pc, #152]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fd fc6c 	bl	80011b0 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fd fc68 	bl	80011b0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e180      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d03a      	beq.n	800397c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d019      	beq.n	8003942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390e:	4b17      	ldr	r3, [pc, #92]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003914:	f7fd fc4c 	bl	80011b0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7fd fc48 	bl	80011b0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e160      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800393a:	2001      	movs	r0, #1
 800393c:	f000 fafe 	bl	8003f3c <RCC_Delay>
 8003940:	e01c      	b.n	800397c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003948:	f7fd fc32 	bl	80011b0 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394e:	e00f      	b.n	8003970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003950:	f7fd fc2e 	bl	80011b0 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d908      	bls.n	8003970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e146      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	42420000 	.word	0x42420000
 800396c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003970:	4b92      	ldr	r3, [pc, #584]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e9      	bne.n	8003950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80a6 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	4b88      	ldr	r3, [pc, #544]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4a87      	ldr	r2, [pc, #540]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a4:	61d3      	str	r3, [r2, #28]
 80039a6:	4b85      	ldr	r3, [pc, #532]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b82      	ldr	r3, [pc, #520]	@ (8003bc0 <HAL_RCC_OscConfig+0x4c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d118      	bne.n	80039f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc0 <HAL_RCC_OscConfig+0x4c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7e      	ldr	r2, [pc, #504]	@ (8003bc0 <HAL_RCC_OscConfig+0x4c8>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fbef 	bl	80011b0 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d6:	f7fd fbeb 	bl	80011b0 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	@ 0x64
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e103      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b75      	ldr	r3, [pc, #468]	@ (8003bc0 <HAL_RCC_OscConfig+0x4c8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x312>
 80039fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6213      	str	r3, [r2, #32]
 8003a08:	e02d      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x334>
 8003a12:	4b6a      	ldr	r3, [pc, #424]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a69      	ldr	r2, [pc, #420]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	4b67      	ldr	r3, [pc, #412]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a66      	ldr	r2, [pc, #408]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	6213      	str	r3, [r2, #32]
 8003a2a:	e01c      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCC_OscConfig+0x356>
 8003a34:	4b61      	ldr	r3, [pc, #388]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a60      	ldr	r2, [pc, #384]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	4b5e      	ldr	r3, [pc, #376]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a5d      	ldr	r2, [pc, #372]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	e00b      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a5a      	ldr	r2, [pc, #360]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6213      	str	r3, [r2, #32]
 8003a5a:	4b58      	ldr	r3, [pc, #352]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a57      	ldr	r2, [pc, #348]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d015      	beq.n	8003a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fb9f 	bl	80011b0 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd fb9b 	bl	80011b0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e0b1      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ee      	beq.n	8003a76 <HAL_RCC_OscConfig+0x37e>
 8003a98:	e014      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fd fb89 	bl	80011b0 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd fb85 	bl	80011b0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e09b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab8:	4b40      	ldr	r3, [pc, #256]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ee      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aca:	4b3c      	ldr	r3, [pc, #240]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4a3b      	ldr	r2, [pc, #236]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8087 	beq.w	8003bee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae0:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d061      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d146      	bne.n	8003b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b33      	ldr	r3, [pc, #204]	@ (8003bc4 <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fd fb59 	bl	80011b0 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fd fb55 	bl	80011b0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e06d      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b14:	4b29      	ldr	r3, [pc, #164]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b2a:	4b24      	ldr	r3, [pc, #144]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4921      	ldr	r1, [pc, #132]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a19      	ldr	r1, [r3, #32]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	491b      	ldr	r1, [pc, #108]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fb29 	bl	80011b0 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd fb25 	bl	80011b0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e03d      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b74:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x46a>
 8003b80:	e035      	b.n	8003bee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fd fb12 	bl	80011b0 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd fb0e 	bl	80011b0 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e026      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba2:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x498>
 8003bae:	e01e      	b.n	8003bee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e019      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_OscConfig+0x500>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000

08003bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0d0      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b6a      	ldr	r3, [pc, #424]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d910      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b67      	ldr	r3, [pc, #412]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 0207 	bic.w	r2, r3, #7
 8003c26:	4965      	ldr	r1, [pc, #404]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b63      	ldr	r3, [pc, #396]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0b8      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c58:	4b59      	ldr	r3, [pc, #356]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a58      	ldr	r2, [pc, #352]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c70:	4b53      	ldr	r3, [pc, #332]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a52      	ldr	r2, [pc, #328]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b50      	ldr	r3, [pc, #320]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	494d      	ldr	r1, [pc, #308]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d040      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b47      	ldr	r3, [pc, #284]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d115      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e07f      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	4b41      	ldr	r3, [pc, #260]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e073      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cca:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e06b      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b39      	ldr	r3, [pc, #228]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4936      	ldr	r1, [pc, #216]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cec:	f7fd fa60 	bl	80011b0 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7fd fa5c 	bl	80011b0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e053      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d210      	bcs.n	8003d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b24      	ldr	r3, [pc, #144]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 0207 	bic.w	r2, r3, #7
 8003d32:	4922      	ldr	r1, [pc, #136]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b20      	ldr	r3, [pc, #128]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e032      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d58:	4b19      	ldr	r3, [pc, #100]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4916      	ldr	r1, [pc, #88]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d76:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	490e      	ldr	r1, [pc, #56]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d8a:	f000 f821 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	490a      	ldr	r1, [pc, #40]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9c:	5ccb      	ldrb	r3, [r1, r3]
 8003d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003da2:	4a09      	ldr	r2, [pc, #36]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8003da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003da6:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <HAL_RCC_ClockConfig+0x1d0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd f8d6 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40022000 	.word	0x40022000
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	0800839c 	.word	0x0800839c
 8003dc8:	20000010 	.word	0x20000010
 8003dcc:	20000014 	.word	0x20000014

08003dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dea:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d002      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x30>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x36>
 8003dfe:	e027      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e00:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e02:	613b      	str	r3, [r7, #16]
      break;
 8003e04:	e027      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	4a17      	ldr	r2, [pc, #92]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e10:	5cd3      	ldrb	r3, [r2, r3]
 8003e12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d010      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	0c5b      	lsrs	r3, r3, #17
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	4a11      	ldr	r2, [pc, #68]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a0d      	ldr	r2, [pc, #52]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e32:	fb03 f202 	mul.w	r2, r3, r2
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e004      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a0c      	ldr	r2, [pc, #48]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e44:	fb02 f303 	mul.w	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	613b      	str	r3, [r7, #16]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e52:	613b      	str	r3, [r7, #16]
      break;
 8003e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e56:	693b      	ldr	r3, [r7, #16]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	007a1200 	.word	0x007a1200
 8003e6c:	080083b4 	.word	0x080083b4
 8003e70:	080083c4 	.word	0x080083c4
 8003e74:	003d0900 	.word	0x003d0900

08003e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b02      	ldr	r3, [pc, #8]	@ (8003e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	20000010 	.word	0x20000010

08003e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e90:	f7ff fff2 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4903      	ldr	r1, [pc, #12]	@ (8003eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	080083ac 	.word	0x080083ac

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eb8:	f7ff ffde 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	0adb      	lsrs	r3, r3, #11
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	@ (8003ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	080083ac 	.word	0x080083ac

08003edc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	220f      	movs	r2, #15
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <HAL_RCC_GetClockConfig+0x58>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0203 	and.w	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <HAL_RCC_GetClockConfig+0x58>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_RCC_GetClockConfig+0x58>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <HAL_RCC_GetClockConfig+0x58>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	08db      	lsrs	r3, r3, #3
 8003f16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0207 	and.w	r2, r3, #7
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40022000 	.word	0x40022000

08003f3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f44:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <RCC_Delay+0x34>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0a      	ldr	r2, [pc, #40]	@ (8003f74 <RCC_Delay+0x38>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	0a5b      	lsrs	r3, r3, #9
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f58:	bf00      	nop
  }
  while (Delay --);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1e5a      	subs	r2, r3, #1
 8003f5e:	60fa      	str	r2, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f9      	bne.n	8003f58 <RCC_Delay+0x1c>
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	20000010 	.word	0x20000010
 8003f74:	10624dd3 	.word	0x10624dd3

08003f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d07d      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f98:	4b4f      	ldr	r3, [pc, #316]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	61d3      	str	r3, [r2, #28]
 8003fb0:	4b49      	ldr	r3, [pc, #292]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	4b46      	ldr	r3, [pc, #280]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d118      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fcc:	4b43      	ldr	r3, [pc, #268]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a42      	ldr	r2, [pc, #264]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd8:	f7fd f8ea 	bl	80011b0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	e008      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe0:	f7fd f8e6 	bl	80011b0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	@ 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e06d      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ffe:	4b36      	ldr	r3, [pc, #216]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004006:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d02e      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	429a      	cmp	r2, r3
 800401a:	d027      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800401c:	4b2e      	ldr	r3, [pc, #184]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004024:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004026:	4b2e      	ldr	r3, [pc, #184]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402c:	4b2c      	ldr	r3, [pc, #176]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004032:	4a29      	ldr	r2, [pc, #164]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d014      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd f8b5 	bl	80011b0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fd f8b1 	bl	80011b0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e036      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	4b1d      	ldr	r3, [pc, #116]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ee      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406c:	4b1a      	ldr	r3, [pc, #104]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4917      	ldr	r1, [pc, #92]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	4313      	orrs	r3, r2
 800407c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	4b14      	ldr	r3, [pc, #80]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4a13      	ldr	r2, [pc, #76]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800408e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800409c:	4b0e      	ldr	r3, [pc, #56]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	490b      	ldr	r1, [pc, #44]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ba:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	4904      	ldr	r1, [pc, #16]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
 80040e0:	42420440 	.word	0x42420440

080040e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b10      	cmp	r3, #16
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b10      	cmp	r3, #16
 800410a:	f200 808a 	bhi.w	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d045      	beq.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d075      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800411a:	e082      	b.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800411c:	4b46      	ldr	r3, [pc, #280]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004122:	4b45      	ldr	r3, [pc, #276]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d07b      	beq.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	4a41      	ldr	r2, [pc, #260]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004138:	5cd3      	ldrb	r3, [r2, r3]
 800413a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d015      	beq.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004146:	4b3c      	ldr	r3, [pc, #240]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	0c5b      	lsrs	r3, r3, #17
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	4a3b      	ldr	r2, [pc, #236]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004152:	5cd3      	ldrb	r3, [r2, r3]
 8004154:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004160:	4a38      	ldr	r2, [pc, #224]	@ (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	fbb2 f2f3 	udiv	r2, r2, r3
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	e004      	b.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4a34      	ldr	r2, [pc, #208]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800417c:	4b2e      	ldr	r3, [pc, #184]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004188:	d102      	bne.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	61bb      	str	r3, [r7, #24]
      break;
 800418e:	e04a      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4a2d      	ldr	r2, [pc, #180]	@ (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	61bb      	str	r3, [r7, #24]
      break;
 800419e:	e042      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80041a0:	4b25      	ldr	r3, [pc, #148]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b0:	d108      	bne.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80041bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	e01f      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ce:	d109      	bne.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80041d0:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80041dc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	e00f      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ee:	d11c      	bne.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d016      	beq.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80041fc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004200:	61bb      	str	r3, [r7, #24]
      break;
 8004202:	e012      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004204:	e011      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004206:	f7ff fe55 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 800420a:	4602      	mov	r2, r0
 800420c:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	0b9b      	lsrs	r3, r3, #14
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	3301      	adds	r3, #1
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	61bb      	str	r3, [r7, #24]
      break;
 8004220:	e004      	b.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800422a:	bf00      	nop
    }
  }
  return (frequency);
 800422c:	69bb      	ldr	r3, [r7, #24]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	080083c8 	.word	0x080083c8
 8004240:	080083d8 	.word	0x080083d8
 8004244:	007a1200 	.word	0x007a1200
 8004248:	003d0900 	.word	0x003d0900
 800424c:	aaaaaaab 	.word	0xaaaaaaab

08004250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e041      	b.n	80042e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f839 	bl	80042ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f000 f99c 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e03a      	b.n	800438e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a18      	ldr	r2, [pc, #96]	@ (8004398 <HAL_TIM_Base_Start_IT+0x98>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00e      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x58>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004342:	d009      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x58>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a14      	ldr	r2, [pc, #80]	@ (800439c <HAL_TIM_Base_Start_IT+0x9c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x58>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a13      	ldr	r2, [pc, #76]	@ (80043a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d111      	bne.n	800437c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b06      	cmp	r3, #6
 8004368:	d010      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	e007      	b.n	800438c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800

080043a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d020      	beq.n	8004408 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0202 	mvn.w	r2, #2
 80043d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8d1 	bl	8004596 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8c4 	bl	8004584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8d3 	bl	80045a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d020      	beq.n	8004454 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01b      	beq.n	8004454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0204 	mvn.w	r2, #4
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8ab 	bl	8004596 <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f89e 	bl	8004584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8ad 	bl	80045a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0208 	mvn.w	r2, #8
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2204      	movs	r2, #4
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f885 	bl	8004596 <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f878 	bl	8004584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f887 	bl	80045a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d020      	beq.n	80044ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0210 	mvn.w	r2, #16
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2208      	movs	r2, #8
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f85f 	bl	8004596 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f852 	bl	8004584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f861 	bl	80045a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0201 	mvn.w	r2, #1
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc f93a 	bl	8000784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800452c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f8c3 	bl	80046ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00c      	beq.n	8004558 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f831 	bl	80045ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0220 	mvn.w	r2, #32
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f896 	bl	80046a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a2f      	ldr	r2, [pc, #188]	@ (800469c <TIM_Base_SetConfig+0xd0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00b      	beq.n	80045fc <TIM_Base_SetConfig+0x30>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ea:	d007      	beq.n	80045fc <TIM_Base_SetConfig+0x30>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a2c      	ldr	r2, [pc, #176]	@ (80046a0 <TIM_Base_SetConfig+0xd4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_Base_SetConfig+0x30>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a2b      	ldr	r2, [pc, #172]	@ (80046a4 <TIM_Base_SetConfig+0xd8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d108      	bne.n	800460e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a22      	ldr	r2, [pc, #136]	@ (800469c <TIM_Base_SetConfig+0xd0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00b      	beq.n	800462e <TIM_Base_SetConfig+0x62>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461c:	d007      	beq.n	800462e <TIM_Base_SetConfig+0x62>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1f      	ldr	r2, [pc, #124]	@ (80046a0 <TIM_Base_SetConfig+0xd4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_Base_SetConfig+0x62>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1e      	ldr	r2, [pc, #120]	@ (80046a4 <TIM_Base_SetConfig+0xd8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d108      	bne.n	8004640 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0d      	ldr	r2, [pc, #52]	@ (800469c <TIM_Base_SetConfig+0xd0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]
  }
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800

080046a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr

080046ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f103 0208 	add.w	r2, r3, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f103 0208 	add.w	r2, r3, #8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f103 0208 	add.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800477e:	d103      	bne.n	8004788 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e00c      	b.n	80047a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3308      	adds	r3, #8
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e002      	b.n	8004796 <vListInsert+0x2e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d2f6      	bcs.n	8004790 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6892      	ldr	r2, [r2, #8]
 80047ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6852      	ldr	r2, [r2, #4]
 80047f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	d103      	bne.n	800480c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1e5a      	subs	r2, r3, #1
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
	...

0800482c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004858:	f001 feb0 	bl	80065bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	3b01      	subs	r3, #1
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	441a      	add	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	22ff      	movs	r2, #255	@ 0xff
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	22ff      	movs	r2, #255	@ 0xff
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d114      	bne.n	80048d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01a      	beq.n	80048ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3310      	adds	r3, #16
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 f9a2 	bl	8005c04 <xTaskRemoveFromEventList>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d012      	beq.n	80048ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <xQueueGenericReset+0xd0>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	e009      	b.n	80048ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3310      	adds	r3, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fef5 	bl	80046cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3324      	adds	r3, #36	@ 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fef0 	bl	80046cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048ec:	f001 fe96 	bl	800661c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048f0:	2301      	movs	r3, #1
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <xQueueGenericCreate+0x2c>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	613b      	str	r3, [r7, #16]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3348      	adds	r3, #72	@ 0x48
 800493a:	4618      	mov	r0, r3
 800493c:	f001 ff40 	bl	80067c0 <pvPortMalloc>
 8004940:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d011      	beq.n	800496c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	3348      	adds	r3, #72	@ 0x48
 8004950:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800495a:	79fa      	ldrb	r2, [r7, #7]
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f805 	bl	8004976 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800496c:	69bb      	ldr	r3, [r7, #24]
	}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e002      	b.n	8004998 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049a4:	2101      	movs	r1, #1
 80049a6:	69b8      	ldr	r0, [r7, #24]
 80049a8:	f7ff ff40 	bl	800482c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00e      	beq.n	80049e0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80049d4:	2300      	movs	r3, #0
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f81c 	bl	8004a18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80049f2:	2301      	movs	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6939      	ldr	r1, [r7, #16]
 8004a00:	6978      	ldr	r0, [r7, #20]
 8004a02:	f7ff ff7d 	bl	8004900 <xQueueGenericCreate>
 8004a06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff ffd3 	bl	80049b4 <prvInitialiseMutex>

		return xNewQueue;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
	}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	@ 0x38
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a26:	2300      	movs	r3, #0
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <xQueueGenericSend+0x34>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	e7fd      	b.n	8004a48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <xQueueGenericSend+0x42>
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <xQueueGenericSend+0x46>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <xQueueGenericSend+0x48>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <xQueueGenericSend+0x64>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d103      	bne.n	8004a8a <xQueueGenericSend+0x72>
 8004a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <xQueueGenericSend+0x76>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <xQueueGenericSend+0x78>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <xQueueGenericSend+0x94>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	623b      	str	r3, [r7, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	e7fd      	b.n	8004aa8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aac:	f001 fa70 	bl	8005f90 <xTaskGetSchedulerState>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <xQueueGenericSend+0xa4>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <xQueueGenericSend+0xa8>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <xQueueGenericSend+0xaa>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <xQueueGenericSend+0xc6>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	61fb      	str	r3, [r7, #28]
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	e7fd      	b.n	8004ada <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ade:	f001 fd6d 	bl	80065bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <xQueueGenericSend+0xdc>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d129      	bne.n	8004b48 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004afa:	f000 fb36 	bl	800516a <prvCopyDataToQueue>
 8004afe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d010      	beq.n	8004b2a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	3324      	adds	r3, #36	@ 0x24
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 f879 	bl	8005c04 <xTaskRemoveFromEventList>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d013      	beq.n	8004b40 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b18:	4b3f      	ldr	r3, [pc, #252]	@ (8004c18 <xQueueGenericSend+0x200>)
 8004b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	e00a      	b.n	8004b40 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b30:	4b39      	ldr	r3, [pc, #228]	@ (8004c18 <xQueueGenericSend+0x200>)
 8004b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b40:	f001 fd6c 	bl	800661c <vPortExitCritical>
				return pdPASS;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e063      	b.n	8004c10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d103      	bne.n	8004b56 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b4e:	f001 fd65 	bl	800661c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e05c      	b.n	8004c10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b5c:	f107 0314 	add.w	r3, r7, #20
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 f8b3 	bl	8005ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b66:	2301      	movs	r3, #1
 8004b68:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b6a:	f001 fd57 	bl	800661c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b6e:	f000 fe5b 	bl	8005828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b72:	f001 fd23 	bl	80065bc <vPortEnterCritical>
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b82:	d103      	bne.n	8004b8c <xQueueGenericSend+0x174>
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b92:	b25b      	sxtb	r3, r3
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b98:	d103      	bne.n	8004ba2 <xQueueGenericSend+0x18a>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ba2:	f001 fd3b 	bl	800661c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ba6:	1d3a      	adds	r2, r7, #4
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 f8a2 	bl	8005cf8 <xTaskCheckForTimeOut>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d124      	bne.n	8004c04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bbc:	f000 fbcd 	bl	800535a <prvIsQueueFull>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d018      	beq.n	8004bf8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc8:	3310      	adds	r3, #16
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fff2 	bl	8005bb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bd6:	f000 fb58 	bl	800528a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bda:	f000 fe33 	bl	8005844 <xTaskResumeAll>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f47f af7c 	bne.w	8004ade <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004be6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <xQueueGenericSend+0x200>)
 8004be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	e772      	b.n	8004ade <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bfa:	f000 fb46 	bl	800528a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bfe:	f000 fe21 	bl	8005844 <xTaskResumeAll>
 8004c02:	e76c      	b.n	8004ade <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c06:	f000 fb40 	bl	800528a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c0a:	f000 fe1b 	bl	8005844 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3738      	adds	r7, #56	@ 0x38
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b090      	sub	sp, #64	@ 0x40
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <xQueueGenericSendFromISR+0x3e>
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <xQueueGenericSendFromISR+0x42>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <xQueueGenericSendFromISR+0x44>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	e7fd      	b.n	8004c78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d103      	bne.n	8004c8a <xQueueGenericSendFromISR+0x6e>
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <xQueueGenericSendFromISR+0x72>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <xQueueGenericSendFromISR+0x74>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	623b      	str	r3, [r7, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cac:	f001 fd48 	bl	8006740 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cb0:	f3ef 8211 	mrs	r2, BASEPRI
 8004cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	61fa      	str	r2, [r7, #28]
 8004cc6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <xQueueGenericSendFromISR+0xc2>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d12f      	bne.n	8004d3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cf4:	f000 fa39 	bl	800516a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cf8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d00:	d112      	bne.n	8004d28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d016      	beq.n	8004d38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0c:	3324      	adds	r3, #36	@ 0x24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 ff78 	bl	8005c04 <xTaskRemoveFromEventList>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e007      	b.n	8004d38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	b25a      	sxtb	r2, r3
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d3c:	e001      	b.n	8004d42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3740      	adds	r7, #64	@ 0x40
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08c      	sub	sp, #48	@ 0x30
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10b      	bne.n	8004d8a <xQueueReceive+0x32>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	623b      	str	r3, [r7, #32]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <xQueueReceive+0x40>
 8004d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <xQueueReceive+0x44>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <xQueueReceive+0x46>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <xQueueReceive+0x62>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	61fb      	str	r3, [r7, #28]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dba:	f001 f8e9 	bl	8005f90 <xTaskGetSchedulerState>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <xQueueReceive+0x72>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <xQueueReceive+0x76>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <xQueueReceive+0x78>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <xQueueReceive+0x94>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	61bb      	str	r3, [r7, #24]
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dec:	f001 fbe6 	bl	80065bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01f      	beq.n	8004e3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e00:	f000 fa1d 	bl	800523e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	1e5a      	subs	r2, r3, #1
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00f      	beq.n	8004e34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e16:	3310      	adds	r3, #16
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fef3 	bl	8005c04 <xTaskRemoveFromEventList>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e24:	4b3c      	ldr	r3, [pc, #240]	@ (8004f18 <xQueueReceive+0x1c0>)
 8004e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e34:	f001 fbf2 	bl	800661c <vPortExitCritical>
				return pdPASS;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e069      	b.n	8004f10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e42:	f001 fbeb 	bl	800661c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e062      	b.n	8004f10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e50:	f107 0310 	add.w	r3, r7, #16
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 ff39 	bl	8005ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e5e:	f001 fbdd 	bl	800661c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e62:	f000 fce1 	bl	8005828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e66:	f001 fba9 	bl	80065bc <vPortEnterCritical>
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e70:	b25b      	sxtb	r3, r3
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e76:	d103      	bne.n	8004e80 <xQueueReceive+0x128>
 8004e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e86:	b25b      	sxtb	r3, r3
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e8c:	d103      	bne.n	8004e96 <xQueueReceive+0x13e>
 8004e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e96:	f001 fbc1 	bl	800661c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e9a:	1d3a      	adds	r2, r7, #4
 8004e9c:	f107 0310 	add.w	r3, r7, #16
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 ff28 	bl	8005cf8 <xTaskCheckForTimeOut>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d123      	bne.n	8004ef6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eb0:	f000 fa3d 	bl	800532e <prvIsQueueEmpty>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d017      	beq.n	8004eea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	3324      	adds	r3, #36	@ 0x24
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fe78 	bl	8005bb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eca:	f000 f9de 	bl	800528a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ece:	f000 fcb9 	bl	8005844 <xTaskResumeAll>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d189      	bne.n	8004dec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f18 <xQueueReceive+0x1c0>)
 8004eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	e780      	b.n	8004dec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eec:	f000 f9cd 	bl	800528a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ef0:	f000 fca8 	bl	8005844 <xTaskResumeAll>
 8004ef4:	e77a      	b.n	8004dec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ef8:	f000 f9c7 	bl	800528a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004efc:	f000 fca2 	bl	8005844 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f02:	f000 fa14 	bl	800532e <prvIsQueueEmpty>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f43f af6f 	beq.w	8004dec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	@ 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08e      	sub	sp, #56	@ 0x38
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	623b      	str	r3, [r7, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	61fb      	str	r3, [r7, #28]
}
 8004f6a:	bf00      	nop
 8004f6c:	bf00      	nop
 8004f6e:	e7fd      	b.n	8004f6c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f70:	f001 f80e 	bl	8005f90 <xTaskGetSchedulerState>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <xQueueSemaphoreTake+0x64>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <xQueueSemaphoreTake+0x68>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <xQueueSemaphoreTake+0x6a>
 8004f84:	2300      	movs	r3, #0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	61bb      	str	r3, [r7, #24]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fa2:	f001 fb0b 	bl	80065bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004faa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d024      	beq.n	8004ffc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004fc2:	f001 f991 	bl	80062e8 <pvTaskIncrementMutexHeldCount>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00f      	beq.n	8004ff4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fe13 	bl	8005c04 <xTaskRemoveFromEventList>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b54      	ldr	r3, [pc, #336]	@ (8005138 <xQueueSemaphoreTake+0x21c>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ff4:	f001 fb12 	bl	800661c <vPortExitCritical>
				return pdPASS;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e098      	b.n	800512e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d112      	bne.n	8005028 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	617b      	str	r3, [r7, #20]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005020:	f001 fafc 	bl	800661c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005024:	2300      	movs	r3, #0
 8005026:	e082      	b.n	800512e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800502e:	f107 030c 	add.w	r3, r7, #12
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fe4a 	bl	8005ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800503c:	f001 faee 	bl	800661c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005040:	f000 fbf2 	bl	8005828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005044:	f001 faba 	bl	80065bc <vPortEnterCritical>
 8005048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800504e:	b25b      	sxtb	r3, r3
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005054:	d103      	bne.n	800505e <xQueueSemaphoreTake+0x142>
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800505e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005060:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005064:	b25b      	sxtb	r3, r3
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800506a:	d103      	bne.n	8005074 <xQueueSemaphoreTake+0x158>
 800506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005074:	f001 fad2 	bl	800661c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005078:	463a      	mov	r2, r7
 800507a:	f107 030c 	add.w	r3, r7, #12
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fe39 	bl	8005cf8 <xTaskCheckForTimeOut>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d132      	bne.n	80050f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800508c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800508e:	f000 f94e 	bl	800532e <prvIsQueueEmpty>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d026      	beq.n	80050e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d109      	bne.n	80050b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80050a0:	f001 fa8c 	bl	80065bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 ff8f 	bl	8005fcc <xTaskPriorityInherit>
 80050ae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80050b0:	f001 fab4 	bl	800661c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	3324      	adds	r3, #36	@ 0x24
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fd7b 	bl	8005bb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050c4:	f000 f8e1 	bl	800528a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050c8:	f000 fbbc 	bl	8005844 <xTaskResumeAll>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f47f af67 	bne.w	8004fa2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80050d4:	4b18      	ldr	r3, [pc, #96]	@ (8005138 <xQueueSemaphoreTake+0x21c>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	e75d      	b.n	8004fa2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80050e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050e8:	f000 f8cf 	bl	800528a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ec:	f000 fbaa 	bl	8005844 <xTaskResumeAll>
 80050f0:	e757      	b.n	8004fa2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80050f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050f4:	f000 f8c9 	bl	800528a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050f8:	f000 fba4 	bl	8005844 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050fe:	f000 f916 	bl	800532e <prvIsQueueEmpty>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	f43f af4c 	beq.w	8004fa2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00d      	beq.n	800512c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005110:	f001 fa54 	bl	80065bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005114:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005116:	f000 f811 	bl	800513c <prvGetDisinheritPriorityAfterTimeout>
 800511a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005122:	4618      	mov	r0, r3
 8005124:	f001 f850 	bl	80061c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005128:	f001 fa78 	bl	800661c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800512c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800512e:	4618      	mov	r0, r3
 8005130:	3738      	adds	r7, #56	@ 0x38
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d006      	beq.n	800515a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1c3 0307 	rsb	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e001      	b.n	800515e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800515e:	68fb      	ldr	r3, [r7, #12]
	}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10d      	bne.n	80051a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d14d      	bne.n	800522c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 ff8f 	bl	80060b8 <xTaskPriorityDisinherit>
 800519a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	e043      	b.n	800522c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d119      	bne.n	80051de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6858      	ldr	r0, [r3, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	461a      	mov	r2, r3
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	f001 fdad 	bl	8006d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	441a      	add	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d32b      	bcc.n	800522c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	e026      	b.n	800522c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68d8      	ldr	r0, [r3, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	461a      	mov	r2, r3
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	f001 fd93 	bl	8006d14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	425b      	negs	r3, r3
 80051f8:	441a      	add	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d207      	bcs.n	800521a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	425b      	negs	r3, r3
 8005214:	441a      	add	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d105      	bne.n	800522c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	3b01      	subs	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005234:	697b      	ldr	r3, [r7, #20]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d018      	beq.n	8005282 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	441a      	add	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	429a      	cmp	r2, r3
 8005268:	d303      	bcc.n	8005272 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68d9      	ldr	r1, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	461a      	mov	r2, r3
 800527c:	6838      	ldr	r0, [r7, #0]
 800527e:	f001 fd49 	bl	8006d14 <memcpy>
	}
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005292:	f001 f993 	bl	80065bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800529c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800529e:	e011      	b.n	80052c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d012      	beq.n	80052ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3324      	adds	r3, #36	@ 0x24
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fca9 	bl	8005c04 <xTaskRemoveFromEventList>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052b8:	f000 fd82 	bl	8005dc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	3b01      	subs	r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dce9      	bgt.n	80052a0 <prvUnlockQueue+0x16>
 80052cc:	e000      	b.n	80052d0 <prvUnlockQueue+0x46>
					break;
 80052ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	22ff      	movs	r2, #255	@ 0xff
 80052d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80052d8:	f001 f9a0 	bl	800661c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052dc:	f001 f96e 	bl	80065bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e8:	e011      	b.n	800530e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d012      	beq.n	8005318 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3310      	adds	r3, #16
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fc84 	bl	8005c04 <xTaskRemoveFromEventList>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005302:	f000 fd5d 	bl	8005dc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	3b01      	subs	r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800530e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005312:	2b00      	cmp	r3, #0
 8005314:	dce9      	bgt.n	80052ea <prvUnlockQueue+0x60>
 8005316:	e000      	b.n	800531a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005318:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	22ff      	movs	r2, #255	@ 0xff
 800531e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005322:	f001 f97b 	bl	800661c <vPortExitCritical>
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005336:	f001 f941 	bl	80065bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005342:	2301      	movs	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e001      	b.n	800534c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800534c:	f001 f966 	bl	800661c <vPortExitCritical>

	return xReturn;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005362:	f001 f92b 	bl	80065bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536e:	429a      	cmp	r2, r3
 8005370:	d102      	bne.n	8005378 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e001      	b.n	800537c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800537c:	f001 f94e 	bl	800661c <vPortExitCritical>

	return xReturn;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800538a:	b580      	push	{r7, lr}
 800538c:	b08e      	sub	sp, #56	@ 0x38
 800538e:	af04      	add	r7, sp, #16
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10b      	bne.n	80053b6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	623b      	str	r3, [r7, #32]
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	e7fd      	b.n	80053b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	61fb      	str	r3, [r7, #28]
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053d4:	23a0      	movs	r3, #160	@ 0xa0
 80053d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2ba0      	cmp	r3, #160	@ 0xa0
 80053dc:	d00b      	beq.n	80053f6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	61bb      	str	r3, [r7, #24]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01e      	beq.n	800543c <xTaskCreateStatic+0xb2>
 80053fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01b      	beq.n	800543c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800540c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	2202      	movs	r2, #2
 8005412:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005416:	2300      	movs	r3, #0
 8005418:	9303      	str	r3, [sp, #12]
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	9302      	str	r3, [sp, #8]
 800541e:	f107 0314 	add.w	r3, r7, #20
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f850 	bl	80054d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005434:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005436:	f000 f8ed 	bl	8005614 <prvAddNewTaskToReadyList>
 800543a:	e001      	b.n	8005440 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005440:	697b      	ldr	r3, [r7, #20]
	}
 8005442:	4618      	mov	r0, r3
 8005444:	3728      	adds	r7, #40	@ 0x28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08c      	sub	sp, #48	@ 0x30
 800544e:	af04      	add	r7, sp, #16
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4618      	mov	r0, r3
 8005460:	f001 f9ae 	bl	80067c0 <pvPortMalloc>
 8005464:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800546c:	20a0      	movs	r0, #160	@ 0xa0
 800546e:	f001 f9a7 	bl	80067c0 <pvPortMalloc>
 8005472:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005480:	e005      	b.n	800548e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005482:	6978      	ldr	r0, [r7, #20]
 8005484:	f001 fa6a 	bl	800695c <vPortFree>
 8005488:	e001      	b.n	800548e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d017      	beq.n	80054c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800549c:	88fa      	ldrh	r2, [r7, #6]
 800549e:	2300      	movs	r3, #0
 80054a0:	9303      	str	r3, [sp, #12]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	9302      	str	r3, [sp, #8]
 80054a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f80e 	bl	80054d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054b8:	69f8      	ldr	r0, [r7, #28]
 80054ba:	f000 f8ab 	bl	8005614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054be:	2301      	movs	r3, #1
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	e002      	b.n	80054ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054ca:	69bb      	ldr	r3, [r7, #24]
	}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054ec:	3b01      	subs	r3, #1
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	617b      	str	r3, [r7, #20]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01f      	beq.n	8005564 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e012      	b.n	8005550 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	7819      	ldrb	r1, [r3, #0]
 8005532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	3334      	adds	r3, #52	@ 0x34
 800553a:	460a      	mov	r2, r1
 800553c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d006      	beq.n	8005558 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3301      	adds	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d9e9      	bls.n	800552a <prvInitialiseNewTask+0x56>
 8005556:	e000      	b.n	800555a <prvInitialiseNewTask+0x86>
			{
				break;
 8005558:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005562:	e003      	b.n	800556c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	2b06      	cmp	r3, #6
 8005570:	d901      	bls.n	8005576 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005572:	2306      	movs	r3, #6
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800557a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005580:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	2200      	movs	r2, #0
 8005586:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	3304      	adds	r3, #4
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff f8bc 	bl	800470a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	3318      	adds	r3, #24
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff f8b7 	bl	800470a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a4:	f1c3 0207 	rsb	r2, r3, #7
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	334c      	adds	r3, #76	@ 0x4c
 80055c6:	224c      	movs	r2, #76	@ 0x4c
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fb10 	bl	8006bf0 <memset>
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005608 <prvInitialiseNewTask+0x134>)
 80055d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	4a0c      	ldr	r2, [pc, #48]	@ (800560c <prvInitialiseNewTask+0x138>)
 80055da:	655a      	str	r2, [r3, #84]	@ 0x54
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	4a0c      	ldr	r2, [pc, #48]	@ (8005610 <prvInitialiseNewTask+0x13c>)
 80055e0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	68f9      	ldr	r1, [r7, #12]
 80055e6:	69b8      	ldr	r0, [r7, #24]
 80055e8:	f000 fef8 	bl	80063dc <pxPortInitialiseStack>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055fe:	bf00      	nop
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20001614 	.word	0x20001614
 800560c:	2000167c 	.word	0x2000167c
 8005610:	200016e4 	.word	0x200016e4

08005614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800561c:	f000 ffce 	bl	80065bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005620:	4b2a      	ldr	r3, [pc, #168]	@ (80056cc <prvAddNewTaskToReadyList+0xb8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a29      	ldr	r2, [pc, #164]	@ (80056cc <prvAddNewTaskToReadyList+0xb8>)
 8005628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800562a:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005632:	4a27      	ldr	r2, [pc, #156]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005638:	4b24      	ldr	r3, [pc, #144]	@ (80056cc <prvAddNewTaskToReadyList+0xb8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d110      	bne.n	8005662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005640:	f000 fbe2 	bl	8005e08 <prvInitialiseTaskLists>
 8005644:	e00d      	b.n	8005662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005646:	4b23      	ldr	r3, [pc, #140]	@ (80056d4 <prvAddNewTaskToReadyList+0xc0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800564e:	4b20      	ldr	r3, [pc, #128]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	429a      	cmp	r2, r3
 800565a:	d802      	bhi.n	8005662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800565c:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005662:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <prvAddNewTaskToReadyList+0xc4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	4a1b      	ldr	r2, [pc, #108]	@ (80056d8 <prvAddNewTaskToReadyList+0xc4>)
 800566a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	4b19      	ldr	r3, [pc, #100]	@ (80056dc <prvAddNewTaskToReadyList+0xc8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4313      	orrs	r3, r2
 800567a:	4a18      	ldr	r2, [pc, #96]	@ (80056dc <prvAddNewTaskToReadyList+0xc8>)
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4a15      	ldr	r2, [pc, #84]	@ (80056e0 <prvAddNewTaskToReadyList+0xcc>)
 800568c:	441a      	add	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f7ff f844 	bl	8004722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800569a:	f000 ffbf 	bl	800661c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800569e:	4b0d      	ldr	r3, [pc, #52]	@ (80056d4 <prvAddNewTaskToReadyList+0xc0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00e      	beq.n	80056c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056a6:	4b0a      	ldr	r3, [pc, #40]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d207      	bcs.n	80056c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056b4:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <prvAddNewTaskToReadyList+0xd0>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	200009c0 	.word	0x200009c0
 80056d0:	200008c0 	.word	0x200008c0
 80056d4:	200009cc 	.word	0x200009cc
 80056d8:	200009dc 	.word	0x200009dc
 80056dc:	200009c8 	.word	0x200009c8
 80056e0:	200008c4 	.word	0x200008c4
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056fa:	4b14      	ldr	r3, [pc, #80]	@ (800574c <vTaskDelay+0x64>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <vTaskDelay+0x32>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	e7fd      	b.n	8005716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800571a:	f000 f885 	bl	8005828 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800571e:	2100      	movs	r1, #0
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fdf5 	bl	8006310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005726:	f000 f88d 	bl	8005844 <xTaskResumeAll>
 800572a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d107      	bne.n	8005742 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005732:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <vTaskDelay+0x68>)
 8005734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200009e8 	.word	0x200009e8
 8005750:	e000ed04 	.word	0xe000ed04

08005754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	@ 0x28
 8005758:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005762:	463a      	mov	r2, r7
 8005764:	1d39      	adds	r1, r7, #4
 8005766:	f107 0308 	add.w	r3, r7, #8
 800576a:	4618      	mov	r0, r3
 800576c:	f7fa fcf0 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	9202      	str	r2, [sp, #8]
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	2300      	movs	r3, #0
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	2300      	movs	r3, #0
 8005780:	460a      	mov	r2, r1
 8005782:	4921      	ldr	r1, [pc, #132]	@ (8005808 <vTaskStartScheduler+0xb4>)
 8005784:	4821      	ldr	r0, [pc, #132]	@ (800580c <vTaskStartScheduler+0xb8>)
 8005786:	f7ff fe00 	bl	800538a <xTaskCreateStatic>
 800578a:	4603      	mov	r3, r0
 800578c:	4a20      	ldr	r2, [pc, #128]	@ (8005810 <vTaskStartScheduler+0xbc>)
 800578e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005790:	4b1f      	ldr	r3, [pc, #124]	@ (8005810 <vTaskStartScheduler+0xbc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e001      	b.n	80057a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d11b      	bne.n	80057e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	613b      	str	r3, [r7, #16]
}
 80057ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057bc:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <vTaskStartScheduler+0xc0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	334c      	adds	r3, #76	@ 0x4c
 80057c2:	4a15      	ldr	r2, [pc, #84]	@ (8005818 <vTaskStartScheduler+0xc4>)
 80057c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057c6:	4b15      	ldr	r3, [pc, #84]	@ (800581c <vTaskStartScheduler+0xc8>)
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ce:	4b14      	ldr	r3, [pc, #80]	@ (8005820 <vTaskStartScheduler+0xcc>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057d4:	4b13      	ldr	r3, [pc, #76]	@ (8005824 <vTaskStartScheduler+0xd0>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057da:	f000 fe7d 	bl	80064d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057de:	e00f      	b.n	8005800 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057e6:	d10b      	bne.n	8005800 <vTaskStartScheduler+0xac>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	60fb      	str	r3, [r7, #12]
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	e7fd      	b.n	80057fc <vTaskStartScheduler+0xa8>
}
 8005800:	bf00      	nop
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	08007638 	.word	0x08007638
 800580c:	08005dd9 	.word	0x08005dd9
 8005810:	200009e4 	.word	0x200009e4
 8005814:	200008c0 	.word	0x200008c0
 8005818:	20000020 	.word	0x20000020
 800581c:	200009e0 	.word	0x200009e0
 8005820:	200009cc 	.word	0x200009cc
 8005824:	200009c4 	.word	0x200009c4

08005828 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800582c:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <vTaskSuspendAll+0x18>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	4a03      	ldr	r2, [pc, #12]	@ (8005840 <vTaskSuspendAll+0x18>)
 8005834:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	200009e8 	.word	0x200009e8

08005844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005852:	4b42      	ldr	r3, [pc, #264]	@ (800595c <xTaskResumeAll+0x118>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <xTaskResumeAll+0x2e>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	603b      	str	r3, [r7, #0]
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	e7fd      	b.n	800586e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005872:	f000 fea3 	bl	80065bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005876:	4b39      	ldr	r3, [pc, #228]	@ (800595c <xTaskResumeAll+0x118>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3b01      	subs	r3, #1
 800587c:	4a37      	ldr	r2, [pc, #220]	@ (800595c <xTaskResumeAll+0x118>)
 800587e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005880:	4b36      	ldr	r3, [pc, #216]	@ (800595c <xTaskResumeAll+0x118>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d161      	bne.n	800594c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005888:	4b35      	ldr	r3, [pc, #212]	@ (8005960 <xTaskResumeAll+0x11c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d05d      	beq.n	800594c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005890:	e02e      	b.n	80058f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005892:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <xTaskResumeAll+0x120>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3318      	adds	r3, #24
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe ff9a 	bl	80047d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe ff95 	bl	80047d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	2201      	movs	r2, #1
 80058b4:	409a      	lsls	r2, r3
 80058b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005968 <xTaskResumeAll+0x124>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005968 <xTaskResumeAll+0x124>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4a27      	ldr	r2, [pc, #156]	@ (800596c <xTaskResumeAll+0x128>)
 80058ce:	441a      	add	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7fe ff23 	bl	8004722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e0:	4b23      	ldr	r3, [pc, #140]	@ (8005970 <xTaskResumeAll+0x12c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d302      	bcc.n	80058f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058ea:	4b22      	ldr	r3, [pc, #136]	@ (8005974 <xTaskResumeAll+0x130>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005964 <xTaskResumeAll+0x120>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1cc      	bne.n	8005892 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058fe:	f000 fb27 	bl	8005f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005902:	4b1d      	ldr	r3, [pc, #116]	@ (8005978 <xTaskResumeAll+0x134>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d010      	beq.n	8005930 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800590e:	f000 f837 	bl	8005980 <xTaskIncrementTick>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005918:	4b16      	ldr	r3, [pc, #88]	@ (8005974 <xTaskResumeAll+0x130>)
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3b01      	subs	r3, #1
 8005922:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f1      	bne.n	800590e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800592a:	4b13      	ldr	r3, [pc, #76]	@ (8005978 <xTaskResumeAll+0x134>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005930:	4b10      	ldr	r3, [pc, #64]	@ (8005974 <xTaskResumeAll+0x130>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800593c:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <xTaskResumeAll+0x138>)
 800593e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800594c:	f000 fe66 	bl	800661c <vPortExitCritical>

	return xAlreadyYielded;
 8005950:	68bb      	ldr	r3, [r7, #8]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	200009e8 	.word	0x200009e8
 8005960:	200009c0 	.word	0x200009c0
 8005964:	20000980 	.word	0x20000980
 8005968:	200009c8 	.word	0x200009c8
 800596c:	200008c4 	.word	0x200008c4
 8005970:	200008c0 	.word	0x200008c0
 8005974:	200009d4 	.word	0x200009d4
 8005978:	200009d0 	.word	0x200009d0
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ac8 <xTaskIncrementTick+0x148>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f040 808f 	bne.w	8005ab2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005994:	4b4d      	ldr	r3, [pc, #308]	@ (8005acc <xTaskIncrementTick+0x14c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800599c:	4a4b      	ldr	r2, [pc, #300]	@ (8005acc <xTaskIncrementTick+0x14c>)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d121      	bne.n	80059ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059a8:	4b49      	ldr	r3, [pc, #292]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	603b      	str	r3, [r7, #0]
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	e7fd      	b.n	80059c6 <xTaskIncrementTick+0x46>
 80059ca:	4b41      	ldr	r3, [pc, #260]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	4b40      	ldr	r3, [pc, #256]	@ (8005ad4 <xTaskIncrementTick+0x154>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad4 <xTaskIncrementTick+0x154>)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad8 <xTaskIncrementTick+0x158>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ad8 <xTaskIncrementTick+0x158>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	f000 fab2 	bl	8005f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059ec:	4b3b      	ldr	r3, [pc, #236]	@ (8005adc <xTaskIncrementTick+0x15c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d348      	bcc.n	8005a88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f6:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	4b36      	ldr	r3, [pc, #216]	@ (8005adc <xTaskIncrementTick+0x15c>)
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a06:	601a      	str	r2, [r3, #0]
					break;
 8005a08:	e03e      	b.n	8005a88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d203      	bcs.n	8005a2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a22:	4a2e      	ldr	r2, [pc, #184]	@ (8005adc <xTaskIncrementTick+0x15c>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a28:	e02e      	b.n	8005a88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fed2 	bl	80047d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	3318      	adds	r3, #24
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe fec9 	bl	80047d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	4b24      	ldr	r3, [pc, #144]	@ (8005ae0 <xTaskIncrementTick+0x160>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	4a22      	ldr	r2, [pc, #136]	@ (8005ae0 <xTaskIncrementTick+0x160>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae4 <xTaskIncrementTick+0x164>)
 8005a66:	441a      	add	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fe fe57 	bl	8004722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae8 <xTaskIncrementTick+0x168>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d3b9      	bcc.n	80059f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a86:	e7b6      	b.n	80059f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a88:	4b17      	ldr	r3, [pc, #92]	@ (8005ae8 <xTaskIncrementTick+0x168>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8e:	4915      	ldr	r1, [pc, #84]	@ (8005ae4 <xTaskIncrementTick+0x164>)
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d901      	bls.n	8005aa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005aa4:	4b11      	ldr	r3, [pc, #68]	@ (8005aec <xTaskIncrementTick+0x16c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e004      	b.n	8005abc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8005af0 <xTaskIncrementTick+0x170>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8005af0 <xTaskIncrementTick+0x170>)
 8005aba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005abc:	697b      	ldr	r3, [r7, #20]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200009e8 	.word	0x200009e8
 8005acc:	200009c4 	.word	0x200009c4
 8005ad0:	20000978 	.word	0x20000978
 8005ad4:	2000097c 	.word	0x2000097c
 8005ad8:	200009d8 	.word	0x200009d8
 8005adc:	200009e0 	.word	0x200009e0
 8005ae0:	200009c8 	.word	0x200009c8
 8005ae4:	200008c4 	.word	0x200008c4
 8005ae8:	200008c0 	.word	0x200008c0
 8005aec:	200009d4 	.word	0x200009d4
 8005af0:	200009d0 	.word	0x200009d0

08005af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005afa:	4b29      	ldr	r3, [pc, #164]	@ (8005ba0 <vTaskSwitchContext+0xac>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b02:	4b28      	ldr	r3, [pc, #160]	@ (8005ba4 <vTaskSwitchContext+0xb0>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b08:	e045      	b.n	8005b96 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005b0a:	4b26      	ldr	r3, [pc, #152]	@ (8005ba4 <vTaskSwitchContext+0xb0>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b10:	4b25      	ldr	r3, [pc, #148]	@ (8005ba8 <vTaskSwitchContext+0xb4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	fab3 f383 	clz	r3, r3
 8005b1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	f1c3 031f 	rsb	r3, r3, #31
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	4921      	ldr	r1, [pc, #132]	@ (8005bac <vTaskSwitchContext+0xb8>)
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	607b      	str	r3, [r7, #4]
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	e7fd      	b.n	8005b4e <vTaskSwitchContext+0x5a>
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4a13      	ldr	r2, [pc, #76]	@ (8005bac <vTaskSwitchContext+0xb8>)
 8005b5e:	4413      	add	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	605a      	str	r2, [r3, #4]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	3308      	adds	r3, #8
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d104      	bne.n	8005b82 <vTaskSwitchContext+0x8e>
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a09      	ldr	r2, [pc, #36]	@ (8005bb0 <vTaskSwitchContext+0xbc>)
 8005b8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b8c:	4b08      	ldr	r3, [pc, #32]	@ (8005bb0 <vTaskSwitchContext+0xbc>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	334c      	adds	r3, #76	@ 0x4c
 8005b92:	4a08      	ldr	r2, [pc, #32]	@ (8005bb4 <vTaskSwitchContext+0xc0>)
 8005b94:	6013      	str	r3, [r2, #0]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	200009e8 	.word	0x200009e8
 8005ba4:	200009d4 	.word	0x200009d4
 8005ba8:	200009c8 	.word	0x200009c8
 8005bac:	200008c4 	.word	0x200008c4
 8005bb0:	200008c0 	.word	0x200008c0
 8005bb4:	20000020 	.word	0x20000020

08005bb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10b      	bne.n	8005be0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	60fb      	str	r3, [r7, #12]
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	e7fd      	b.n	8005bdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005be0:	4b07      	ldr	r3, [pc, #28]	@ (8005c00 <vTaskPlaceOnEventList+0x48>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3318      	adds	r3, #24
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fe fdbd 	bl	8004768 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bee:	2101      	movs	r1, #1
 8005bf0:	6838      	ldr	r0, [r7, #0]
 8005bf2:	f000 fb8d 	bl	8006310 <prvAddCurrentTaskToDelayedList>
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	200008c0 	.word	0x200008c0

08005c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10b      	bne.n	8005c32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60fb      	str	r3, [r7, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	3318      	adds	r3, #24
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe fdce 	bl	80047d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb4 <xTaskRemoveFromEventList+0xb0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11c      	bne.n	8005c7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fdc5 	bl	80047d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c52:	2201      	movs	r2, #1
 8005c54:	409a      	lsls	r2, r3
 8005c56:	4b18      	ldr	r3, [pc, #96]	@ (8005cb8 <xTaskRemoveFromEventList+0xb4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	4a16      	ldr	r2, [pc, #88]	@ (8005cb8 <xTaskRemoveFromEventList+0xb4>)
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4a13      	ldr	r2, [pc, #76]	@ (8005cbc <xTaskRemoveFromEventList+0xb8>)
 8005c6e:	441a      	add	r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f7fe fd53 	bl	8004722 <vListInsertEnd>
 8005c7c:	e005      	b.n	8005c8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	3318      	adds	r3, #24
 8005c82:	4619      	mov	r1, r3
 8005c84:	480e      	ldr	r0, [pc, #56]	@ (8005cc0 <xTaskRemoveFromEventList+0xbc>)
 8005c86:	f7fe fd4c 	bl	8004722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <xTaskRemoveFromEventList+0xc0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d905      	bls.n	8005ca4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <xTaskRemoveFromEventList+0xc4>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e001      	b.n	8005ca8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ca8:	697b      	ldr	r3, [r7, #20]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200009e8 	.word	0x200009e8
 8005cb8:	200009c8 	.word	0x200009c8
 8005cbc:	200008c4 	.word	0x200008c4
 8005cc0:	20000980 	.word	0x20000980
 8005cc4:	200008c0 	.word	0x200008c0
 8005cc8:	200009d4 	.word	0x200009d4

08005ccc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cd4:	4b06      	ldr	r3, [pc, #24]	@ (8005cf0 <vTaskInternalSetTimeOutState+0x24>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cdc:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <vTaskInternalSetTimeOutState+0x28>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	605a      	str	r2, [r3, #4]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	200009d8 	.word	0x200009d8
 8005cf4:	200009c4 	.word	0x200009c4

08005cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	613b      	str	r3, [r7, #16]
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	e7fd      	b.n	8005d1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	60fb      	str	r3, [r7, #12]
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	e7fd      	b.n	8005d3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d3e:	f000 fc3d 	bl	80065bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d42:	4b1d      	ldr	r3, [pc, #116]	@ (8005db8 <xTaskCheckForTimeOut+0xc0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d5a:	d102      	bne.n	8005d62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	e023      	b.n	8005daa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b15      	ldr	r3, [pc, #84]	@ (8005dbc <xTaskCheckForTimeOut+0xc4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d007      	beq.n	8005d7e <xTaskCheckForTimeOut+0x86>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d302      	bcc.n	8005d7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e015      	b.n	8005daa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d20b      	bcs.n	8005da0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff ff99 	bl	8005ccc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	e004      	b.n	8005daa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005daa:	f000 fc37 	bl	800661c <vPortExitCritical>

	return xReturn;
 8005dae:	69fb      	ldr	r3, [r7, #28]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	200009c4 	.word	0x200009c4
 8005dbc:	200009d8 	.word	0x200009d8

08005dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	@ (8005dd4 <vTaskMissedYield+0x14>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	200009d4 	.word	0x200009d4

08005dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005de0:	f000 f852 	bl	8005e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005de4:	4b06      	ldr	r3, [pc, #24]	@ (8005e00 <prvIdleTask+0x28>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d9f9      	bls.n	8005de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <prvIdleTask+0x2c>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dfc:	e7f0      	b.n	8005de0 <prvIdleTask+0x8>
 8005dfe:	bf00      	nop
 8005e00:	200008c4 	.word	0x200008c4
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	e00c      	b.n	8005e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a12      	ldr	r2, [pc, #72]	@ (8005e68 <prvInitialiseTaskLists+0x60>)
 8005e20:	4413      	add	r3, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe fc52 	bl	80046cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	607b      	str	r3, [r7, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b06      	cmp	r3, #6
 8005e32:	d9ef      	bls.n	8005e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e34:	480d      	ldr	r0, [pc, #52]	@ (8005e6c <prvInitialiseTaskLists+0x64>)
 8005e36:	f7fe fc49 	bl	80046cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e3a:	480d      	ldr	r0, [pc, #52]	@ (8005e70 <prvInitialiseTaskLists+0x68>)
 8005e3c:	f7fe fc46 	bl	80046cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e40:	480c      	ldr	r0, [pc, #48]	@ (8005e74 <prvInitialiseTaskLists+0x6c>)
 8005e42:	f7fe fc43 	bl	80046cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e46:	480c      	ldr	r0, [pc, #48]	@ (8005e78 <prvInitialiseTaskLists+0x70>)
 8005e48:	f7fe fc40 	bl	80046cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e4c:	480b      	ldr	r0, [pc, #44]	@ (8005e7c <prvInitialiseTaskLists+0x74>)
 8005e4e:	f7fe fc3d 	bl	80046cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e52:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <prvInitialiseTaskLists+0x78>)
 8005e54:	4a05      	ldr	r2, [pc, #20]	@ (8005e6c <prvInitialiseTaskLists+0x64>)
 8005e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	@ (8005e84 <prvInitialiseTaskLists+0x7c>)
 8005e5a:	4a05      	ldr	r2, [pc, #20]	@ (8005e70 <prvInitialiseTaskLists+0x68>)
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200008c4 	.word	0x200008c4
 8005e6c:	20000950 	.word	0x20000950
 8005e70:	20000964 	.word	0x20000964
 8005e74:	20000980 	.word	0x20000980
 8005e78:	20000994 	.word	0x20000994
 8005e7c:	200009ac 	.word	0x200009ac
 8005e80:	20000978 	.word	0x20000978
 8005e84:	2000097c 	.word	0x2000097c

08005e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e8e:	e019      	b.n	8005ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e90:	f000 fb94 	bl	80065bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e94:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <prvCheckTasksWaitingTermination+0x50>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fc99 	bl	80047d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8005edc <prvCheckTasksWaitingTermination+0x54>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	4a0b      	ldr	r2, [pc, #44]	@ (8005edc <prvCheckTasksWaitingTermination+0x54>)
 8005eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <prvCheckTasksWaitingTermination+0x58>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee0 <prvCheckTasksWaitingTermination+0x58>)
 8005eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eba:	f000 fbaf 	bl	800661c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f810 	bl	8005ee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec4:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <prvCheckTasksWaitingTermination+0x58>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e1      	bne.n	8005e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000994 	.word	0x20000994
 8005edc:	200009c0 	.word	0x200009c0
 8005ee0:	200009a8 	.word	0x200009a8

08005ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	334c      	adds	r3, #76	@ 0x4c
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fe85 	bl	8006c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d108      	bne.n	8005f12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fd29 	bl	800695c <vPortFree>
				vPortFree( pxTCB );
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fd26 	bl	800695c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f10:	e019      	b.n	8005f46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d103      	bne.n	8005f24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fd1d 	bl	800695c <vPortFree>
	}
 8005f22:	e010      	b.n	8005f46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d00b      	beq.n	8005f46 <prvDeleteTCB+0x62>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60fb      	str	r3, [r7, #12]
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <prvDeleteTCB+0x5e>
	}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f56:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <prvResetNextTaskUnblockTime+0x38>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f60:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <prvResetNextTaskUnblockTime+0x3c>)
 8005f62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f68:	e008      	b.n	8005f7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	4b07      	ldr	r3, [pc, #28]	@ (8005f88 <prvResetNextTaskUnblockTime+0x38>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a04      	ldr	r2, [pc, #16]	@ (8005f8c <prvResetNextTaskUnblockTime+0x3c>)
 8005f7a:	6013      	str	r3, [r2, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000978 	.word	0x20000978
 8005f8c:	200009e0 	.word	0x200009e0

08005f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f96:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <xTaskGetSchedulerState+0x34>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	e008      	b.n	8005fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa4:	4b08      	ldr	r3, [pc, #32]	@ (8005fc8 <xTaskGetSchedulerState+0x38>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fac:	2302      	movs	r3, #2
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	e001      	b.n	8005fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fb6:	687b      	ldr	r3, [r7, #4]
	}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	200009cc 	.word	0x200009cc
 8005fc8:	200009e8 	.word	0x200009e8

08005fcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d05e      	beq.n	80060a0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe6:	4b31      	ldr	r3, [pc, #196]	@ (80060ac <xTaskPriorityInherit+0xe0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d24e      	bcs.n	800608e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	db06      	blt.n	8006006 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80060ac <xTaskPriorityInherit+0xe0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	f1c3 0207 	rsb	r2, r3, #7
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6959      	ldr	r1, [r3, #20]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4a26      	ldr	r2, [pc, #152]	@ (80060b0 <xTaskPriorityInherit+0xe4>)
 8006018:	4413      	add	r3, r2
 800601a:	4299      	cmp	r1, r3
 800601c:	d12f      	bne.n	800607e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	3304      	adds	r3, #4
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fbd8 	bl	80047d8 <uxListRemove>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006032:	2201      	movs	r2, #1
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	43da      	mvns	r2, r3
 800603a:	4b1e      	ldr	r3, [pc, #120]	@ (80060b4 <xTaskPriorityInherit+0xe8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4013      	ands	r3, r2
 8006040:	4a1c      	ldr	r2, [pc, #112]	@ (80060b4 <xTaskPriorityInherit+0xe8>)
 8006042:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006044:	4b19      	ldr	r3, [pc, #100]	@ (80060ac <xTaskPriorityInherit+0xe0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	2201      	movs	r2, #1
 8006054:	409a      	lsls	r2, r3
 8006056:	4b17      	ldr	r3, [pc, #92]	@ (80060b4 <xTaskPriorityInherit+0xe8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4313      	orrs	r3, r2
 800605c:	4a15      	ldr	r2, [pc, #84]	@ (80060b4 <xTaskPriorityInherit+0xe8>)
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4a10      	ldr	r2, [pc, #64]	@ (80060b0 <xTaskPriorityInherit+0xe4>)
 800606e:	441a      	add	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f7fe fb53 	bl	8004722 <vListInsertEnd>
 800607c:	e004      	b.n	8006088 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800607e:	4b0b      	ldr	r3, [pc, #44]	@ (80060ac <xTaskPriorityInherit+0xe0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	e008      	b.n	80060a0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006092:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <xTaskPriorityInherit+0xe0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	429a      	cmp	r2, r3
 800609a:	d201      	bcs.n	80060a0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060a0:	68fb      	ldr	r3, [r7, #12]
	}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	200008c0 	.word	0x200008c0
 80060b0:	200008c4 	.word	0x200008c4
 80060b4:	200009c8 	.word	0x200009c8

080060b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d070      	beq.n	80061b0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060ce:	4b3b      	ldr	r3, [pc, #236]	@ (80061bc <xTaskPriorityDisinherit+0x104>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d00b      	beq.n	80060f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	60fb      	str	r3, [r7, #12]
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	e7fd      	b.n	80060ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	60bb      	str	r3, [r7, #8]
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006114:	1e5a      	subs	r2, r3, #1
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006122:	429a      	cmp	r2, r3
 8006124:	d044      	beq.n	80061b0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800612a:	2b00      	cmp	r3, #0
 800612c:	d140      	bne.n	80061b0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	3304      	adds	r3, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe fb50 	bl	80047d8 <uxListRemove>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d115      	bne.n	800616a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006142:	491f      	ldr	r1, [pc, #124]	@ (80061c0 <xTaskPriorityDisinherit+0x108>)
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <xTaskPriorityDisinherit+0xb2>
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	2201      	movs	r2, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43da      	mvns	r2, r3
 8006160:	4b18      	ldr	r3, [pc, #96]	@ (80061c4 <xTaskPriorityDisinherit+0x10c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4013      	ands	r3, r2
 8006166:	4a17      	ldr	r2, [pc, #92]	@ (80061c4 <xTaskPriorityDisinherit+0x10c>)
 8006168:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	f1c3 0207 	rsb	r2, r3, #7
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006182:	2201      	movs	r2, #1
 8006184:	409a      	lsls	r2, r3
 8006186:	4b0f      	ldr	r3, [pc, #60]	@ (80061c4 <xTaskPriorityDisinherit+0x10c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4313      	orrs	r3, r2
 800618c:	4a0d      	ldr	r2, [pc, #52]	@ (80061c4 <xTaskPriorityDisinherit+0x10c>)
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4a08      	ldr	r2, [pc, #32]	@ (80061c0 <xTaskPriorityDisinherit+0x108>)
 800619e:	441a      	add	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fe fabb 	bl	8004722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061ac:	2301      	movs	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061b0:	697b      	ldr	r3, [r7, #20]
	}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	200008c0 	.word	0x200008c0
 80061c0:	200008c4 	.word	0x200008c4
 80061c4:	200009c8 	.word	0x200009c8

080061c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061d6:	2301      	movs	r3, #1
 80061d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d079      	beq.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	60fb      	str	r3, [r7, #12]
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d902      	bls.n	8006210 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	e002      	b.n	8006216 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006214:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	429a      	cmp	r2, r3
 800621e:	d059      	beq.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	429a      	cmp	r2, r3
 8006228:	d154      	bne.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800622a:	4b2c      	ldr	r3, [pc, #176]	@ (80062dc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	429a      	cmp	r2, r3
 8006232:	d10b      	bne.n	800624c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	60bb      	str	r3, [r7, #8]
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	db04      	blt.n	800626a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f1c3 0207 	rsb	r2, r3, #7
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	6959      	ldr	r1, [r3, #20]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4a19      	ldr	r2, [pc, #100]	@ (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800627a:	4413      	add	r3, r2
 800627c:	4299      	cmp	r1, r3
 800627e:	d129      	bne.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	3304      	adds	r3, #4
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe faa7 	bl	80047d8 <uxListRemove>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006294:	2201      	movs	r2, #1
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43da      	mvns	r2, r3
 800629c:	4b11      	ldr	r3, [pc, #68]	@ (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4013      	ands	r3, r2
 80062a2:	4a10      	ldr	r2, [pc, #64]	@ (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80062a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	2201      	movs	r2, #1
 80062ac:	409a      	lsls	r2, r3
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	4a0b      	ldr	r2, [pc, #44]	@ (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4a06      	ldr	r2, [pc, #24]	@ (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80062c6:	441a      	add	r2, r3
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7fe fa27 	bl	8004722 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d4:	bf00      	nop
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	200008c0 	.word	0x200008c0
 80062e0:	200008c4 	.word	0x200008c4
 80062e4:	200009c8 	.word	0x200009c8

080062e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062ec:	4b07      	ldr	r3, [pc, #28]	@ (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80062f4:	4b05      	ldr	r3, [pc, #20]	@ (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062fa:	3201      	adds	r2, #1
 80062fc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80062fe:	4b03      	ldr	r3, [pc, #12]	@ (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 8006300:	681b      	ldr	r3, [r3, #0]
	}
 8006302:	4618      	mov	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	200008c0 	.word	0x200008c0

08006310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800631a:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006320:	4b28      	ldr	r3, [pc, #160]	@ (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fa56 	bl	80047d8 <uxListRemove>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006332:	4b24      	ldr	r3, [pc, #144]	@ (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	2201      	movs	r2, #1
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43da      	mvns	r2, r3
 8006340:	4b21      	ldr	r3, [pc, #132]	@ (80063c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4013      	ands	r3, r2
 8006346:	4a20      	ldr	r2, [pc, #128]	@ (80063c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006348:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006350:	d10a      	bne.n	8006368 <prvAddCurrentTaskToDelayedList+0x58>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d007      	beq.n	8006368 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006358:	4b1a      	ldr	r3, [pc, #104]	@ (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3304      	adds	r3, #4
 800635e:	4619      	mov	r1, r3
 8006360:	481a      	ldr	r0, [pc, #104]	@ (80063cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006362:	f7fe f9de 	bl	8004722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006366:	e026      	b.n	80063b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006370:	4b14      	ldr	r3, [pc, #80]	@ (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d209      	bcs.n	8006394 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006380:	4b13      	ldr	r3, [pc, #76]	@ (80063d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f7fe f9eb 	bl	8004768 <vListInsert>
}
 8006392:	e010      	b.n	80063b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006394:	4b0f      	ldr	r3, [pc, #60]	@ (80063d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7fe f9e1 	bl	8004768 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063a6:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d202      	bcs.n	80063b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063b0:	4a09      	ldr	r2, [pc, #36]	@ (80063d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6013      	str	r3, [r2, #0]
}
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200009c4 	.word	0x200009c4
 80063c4:	200008c0 	.word	0x200008c0
 80063c8:	200009c8 	.word	0x200009c8
 80063cc:	200009ac 	.word	0x200009ac
 80063d0:	2000097c 	.word	0x2000097c
 80063d4:	20000978 	.word	0x20000978
 80063d8:	200009e0 	.word	0x200009e0

080063dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3b04      	subs	r3, #4
 80063ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3b04      	subs	r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f023 0201 	bic.w	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3b04      	subs	r3, #4
 800640a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800640c:	4a08      	ldr	r2, [pc, #32]	@ (8006430 <pxPortInitialiseStack+0x54>)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b14      	subs	r3, #20
 8006416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3b20      	subs	r3, #32
 8006422:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006424:	68fb      	ldr	r3, [r7, #12]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr
 8006430:	08006435 	.word	0x08006435

08006434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800643e:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <prvTaskExitError+0x54>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006446:	d00b      	beq.n	8006460 <prvTaskExitError+0x2c>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60fb      	str	r3, [r7, #12]
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	e7fd      	b.n	800645c <prvTaskExitError+0x28>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60bb      	str	r3, [r7, #8]
}
 8006472:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006474:	bf00      	nop
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0fc      	beq.n	8006476 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	2000001c 	.word	0x2000001c
 800648c:	00000000 	.word	0x00000000

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80064ae:	4770      	bx	lr

080064b0 <pxCurrentTCBConst2>:
 80064b0:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80064b8:	4806      	ldr	r0, [pc, #24]	@ (80064d4 <prvPortStartFirstTask+0x1c>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	b662      	cpsie	i
 80064c4:	b661      	cpsie	f
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	df00      	svc	0
 80064d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064d2:	bf00      	nop
 80064d4:	e000ed08 	.word	0xe000ed08

080064d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064de:	4b32      	ldr	r3, [pc, #200]	@ (80065a8 <xPortStartScheduler+0xd0>)
 80064e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22ff      	movs	r2, #255	@ 0xff
 80064ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006500:	b2da      	uxtb	r2, r3
 8006502:	4b2a      	ldr	r3, [pc, #168]	@ (80065ac <xPortStartScheduler+0xd4>)
 8006504:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006506:	4b2a      	ldr	r3, [pc, #168]	@ (80065b0 <xPortStartScheduler+0xd8>)
 8006508:	2207      	movs	r2, #7
 800650a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800650c:	e009      	b.n	8006522 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800650e:	4b28      	ldr	r3, [pc, #160]	@ (80065b0 <xPortStartScheduler+0xd8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3b01      	subs	r3, #1
 8006514:	4a26      	ldr	r2, [pc, #152]	@ (80065b0 <xPortStartScheduler+0xd8>)
 8006516:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800652a:	2b80      	cmp	r3, #128	@ 0x80
 800652c:	d0ef      	beq.n	800650e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800652e:	4b20      	ldr	r3, [pc, #128]	@ (80065b0 <xPortStartScheduler+0xd8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1c3 0307 	rsb	r3, r3, #7
 8006536:	2b04      	cmp	r3, #4
 8006538:	d00b      	beq.n	8006552 <xPortStartScheduler+0x7a>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60bb      	str	r3, [r7, #8]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006552:	4b17      	ldr	r3, [pc, #92]	@ (80065b0 <xPortStartScheduler+0xd8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	4a15      	ldr	r2, [pc, #84]	@ (80065b0 <xPortStartScheduler+0xd8>)
 800655a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800655c:	4b14      	ldr	r3, [pc, #80]	@ (80065b0 <xPortStartScheduler+0xd8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006564:	4a12      	ldr	r2, [pc, #72]	@ (80065b0 <xPortStartScheduler+0xd8>)
 8006566:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	b2da      	uxtb	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006570:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <xPortStartScheduler+0xdc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a0f      	ldr	r2, [pc, #60]	@ (80065b4 <xPortStartScheduler+0xdc>)
 8006576:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800657a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800657c:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <xPortStartScheduler+0xdc>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0c      	ldr	r2, [pc, #48]	@ (80065b4 <xPortStartScheduler+0xdc>)
 8006582:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006586:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006588:	f000 f8b8 	bl	80066fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <xPortStartScheduler+0xe0>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006592:	f7ff ff91 	bl	80064b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006596:	f7ff faad 	bl	8005af4 <vTaskSwitchContext>
	prvTaskExitError();
 800659a:	f7ff ff4b 	bl	8006434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000e400 	.word	0xe000e400
 80065ac:	200009ec 	.word	0x200009ec
 80065b0:	200009f0 	.word	0x200009f0
 80065b4:	e000ed20 	.word	0xe000ed20
 80065b8:	2000001c 	.word	0x2000001c

080065bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
}
 80065d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006614 <vPortEnterCritical+0x58>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006614 <vPortEnterCritical+0x58>)
 80065de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <vPortEnterCritical+0x58>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d110      	bne.n	800660a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006618 <vPortEnterCritical+0x5c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00b      	beq.n	800660a <vPortEnterCritical+0x4e>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	603b      	str	r3, [r7, #0]
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	e7fd      	b.n	8006606 <vPortEnterCritical+0x4a>
	}
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr
 8006614:	2000001c 	.word	0x2000001c
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006622:	4b12      	ldr	r3, [pc, #72]	@ (800666c <vPortExitCritical+0x50>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <vPortExitCritical+0x26>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006642:	4b0a      	ldr	r3, [pc, #40]	@ (800666c <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3b01      	subs	r3, #1
 8006648:	4a08      	ldr	r2, [pc, #32]	@ (800666c <vPortExitCritical+0x50>)
 800664a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800664c:	4b07      	ldr	r3, [pc, #28]	@ (800666c <vPortExitCritical+0x50>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <vPortExitCritical+0x44>
 8006654:	2300      	movs	r3, #0
 8006656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f383 8811 	msr	BASEPRI, r3
}
 800665e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	2000001c 	.word	0x2000001c

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006680:	6010      	str	r0, [r2, #0]
 8006682:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006686:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800668a:	f380 8811 	msr	BASEPRI, r0
 800668e:	f7ff fa31 	bl	8005af4 <vTaskSwitchContext>
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800669e:	6819      	ldr	r1, [r3, #0]
 80066a0:	6808      	ldr	r0, [r1, #0]
 80066a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066a6:	f380 8809 	msr	PSP, r0
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	4770      	bx	lr

080066b0 <pxCurrentTCBConst>:
 80066b0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066d2:	f7ff f955 	bl	8005980 <xTaskIncrementTick>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066dc:	4b06      	ldr	r3, [pc, #24]	@ (80066f8 <SysTick_Handler+0x40>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f383 8811 	msr	BASEPRI, r3
}
 80066ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006700:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <vPortSetupTimerInterrupt+0x30>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006706:	4b0a      	ldr	r3, [pc, #40]	@ (8006730 <vPortSetupTimerInterrupt+0x34>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800670c:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <vPortSetupTimerInterrupt+0x38>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a09      	ldr	r2, [pc, #36]	@ (8006738 <vPortSetupTimerInterrupt+0x3c>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	4a08      	ldr	r2, [pc, #32]	@ (800673c <vPortSetupTimerInterrupt+0x40>)
 800671a:	3b01      	subs	r3, #1
 800671c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800671e:	4b03      	ldr	r3, [pc, #12]	@ (800672c <vPortSetupTimerInterrupt+0x30>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	e000e010 	.word	0xe000e010
 8006730:	e000e018 	.word	0xe000e018
 8006734:	20000010 	.word	0x20000010
 8006738:	10624dd3 	.word	0x10624dd3
 800673c:	e000e014 	.word	0xe000e014

08006740 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006746:	f3ef 8305 	mrs	r3, IPSR
 800674a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b0f      	cmp	r3, #15
 8006750:	d915      	bls.n	800677e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006752:	4a17      	ldr	r2, [pc, #92]	@ (80067b0 <vPortValidateInterruptPriority+0x70>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800675c:	4b15      	ldr	r3, [pc, #84]	@ (80067b4 <vPortValidateInterruptPriority+0x74>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	7afa      	ldrb	r2, [r7, #11]
 8006762:	429a      	cmp	r2, r3
 8006764:	d20b      	bcs.n	800677e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	607b      	str	r3, [r7, #4]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800677e:	4b0e      	ldr	r3, [pc, #56]	@ (80067b8 <vPortValidateInterruptPriority+0x78>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006786:	4b0d      	ldr	r3, [pc, #52]	@ (80067bc <vPortValidateInterruptPriority+0x7c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d90b      	bls.n	80067a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	603b      	str	r3, [r7, #0]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <vPortValidateInterruptPriority+0x62>
	}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr
 80067b0:	e000e3f0 	.word	0xe000e3f0
 80067b4:	200009ec 	.word	0x200009ec
 80067b8:	e000ed0c 	.word	0xe000ed0c
 80067bc:	200009f0 	.word	0x200009f0

080067c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08a      	sub	sp, #40	@ 0x28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067cc:	f7ff f82c 	bl	8005828 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067d0:	4b5c      	ldr	r3, [pc, #368]	@ (8006944 <pvPortMalloc+0x184>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067d8:	f000 f92e 	bl	8006a38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067dc:	4b5a      	ldr	r3, [pc, #360]	@ (8006948 <pvPortMalloc+0x188>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 8095 	bne.w	8006914 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01e      	beq.n	800682e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80067f0:	2208      	movs	r2, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d015      	beq.n	800682e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f023 0307 	bic.w	r3, r3, #7
 8006808:	3308      	adds	r3, #8
 800680a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <pvPortMalloc+0x6e>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	617b      	str	r3, [r7, #20]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d06f      	beq.n	8006914 <pvPortMalloc+0x154>
 8006834:	4b45      	ldr	r3, [pc, #276]	@ (800694c <pvPortMalloc+0x18c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d86a      	bhi.n	8006914 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800683e:	4b44      	ldr	r3, [pc, #272]	@ (8006950 <pvPortMalloc+0x190>)
 8006840:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006842:	4b43      	ldr	r3, [pc, #268]	@ (8006950 <pvPortMalloc+0x190>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006848:	e004      	b.n	8006854 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	429a      	cmp	r2, r3
 800685c:	d903      	bls.n	8006866 <pvPortMalloc+0xa6>
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f1      	bne.n	800684a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006866:	4b37      	ldr	r3, [pc, #220]	@ (8006944 <pvPortMalloc+0x184>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800686c:	429a      	cmp	r2, r3
 800686e:	d051      	beq.n	8006914 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2208      	movs	r2, #8
 8006876:	4413      	add	r3, r2
 8006878:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	1ad2      	subs	r2, r2, r3
 800688a:	2308      	movs	r3, #8
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	429a      	cmp	r2, r3
 8006890:	d920      	bls.n	80068d4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4413      	add	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <pvPortMalloc+0xfc>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	613b      	str	r3, [r7, #16]
}
 80068b6:	bf00      	nop
 80068b8:	bf00      	nop
 80068ba:	e7fd      	b.n	80068b8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068ce:	69b8      	ldr	r0, [r7, #24]
 80068d0:	f000 f914 	bl	8006afc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068d4:	4b1d      	ldr	r3, [pc, #116]	@ (800694c <pvPortMalloc+0x18c>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	4a1b      	ldr	r2, [pc, #108]	@ (800694c <pvPortMalloc+0x18c>)
 80068e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068e2:	4b1a      	ldr	r3, [pc, #104]	@ (800694c <pvPortMalloc+0x18c>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006954 <pvPortMalloc+0x194>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d203      	bcs.n	80068f6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068ee:	4b17      	ldr	r3, [pc, #92]	@ (800694c <pvPortMalloc+0x18c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a18      	ldr	r2, [pc, #96]	@ (8006954 <pvPortMalloc+0x194>)
 80068f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	4b13      	ldr	r3, [pc, #76]	@ (8006948 <pvPortMalloc+0x188>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	431a      	orrs	r2, r3
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800690a:	4b13      	ldr	r3, [pc, #76]	@ (8006958 <pvPortMalloc+0x198>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3301      	adds	r3, #1
 8006910:	4a11      	ldr	r2, [pc, #68]	@ (8006958 <pvPortMalloc+0x198>)
 8006912:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006914:	f7fe ff96 	bl	8005844 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <pvPortMalloc+0x17a>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	60fb      	str	r3, [r7, #12]
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	e7fd      	b.n	8006936 <pvPortMalloc+0x176>
	return pvReturn;
 800693a:	69fb      	ldr	r3, [r7, #28]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3728      	adds	r7, #40	@ 0x28
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	200015fc 	.word	0x200015fc
 8006948:	20001610 	.word	0x20001610
 800694c:	20001600 	.word	0x20001600
 8006950:	200015f4 	.word	0x200015f4
 8006954:	20001604 	.word	0x20001604
 8006958:	20001608 	.word	0x20001608

0800695c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04f      	beq.n	8006a0e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800696e:	2308      	movs	r3, #8
 8006970:	425b      	negs	r3, r3
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	4b25      	ldr	r3, [pc, #148]	@ (8006a18 <vPortFree+0xbc>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10b      	bne.n	80069a2 <vPortFree+0x46>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60fb      	str	r3, [r7, #12]
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	e7fd      	b.n	800699e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <vPortFree+0x66>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	60bb      	str	r3, [r7, #8]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	4b14      	ldr	r3, [pc, #80]	@ (8006a18 <vPortFree+0xbc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01e      	beq.n	8006a0e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11a      	bne.n	8006a0e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006a18 <vPortFree+0xbc>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069e8:	f7fe ff1e 	bl	8005828 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <vPortFree+0xc0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	4a09      	ldr	r2, [pc, #36]	@ (8006a1c <vPortFree+0xc0>)
 80069f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069fa:	6938      	ldr	r0, [r7, #16]
 80069fc:	f000 f87e 	bl	8006afc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <vPortFree+0xc4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3301      	adds	r3, #1
 8006a06:	4a06      	ldr	r2, [pc, #24]	@ (8006a20 <vPortFree+0xc4>)
 8006a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a0a:	f7fe ff1b 	bl	8005844 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20001610 	.word	0x20001610
 8006a1c:	20001600 	.word	0x20001600
 8006a20:	2000160c 	.word	0x2000160c

08006a24 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8006a28:	4b02      	ldr	r3, [pc, #8]	@ (8006a34 <xPortGetFreeHeapSize+0x10>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr
 8006a34:	20001600 	.word	0x20001600

08006a38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006a42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a44:	4b27      	ldr	r3, [pc, #156]	@ (8006ae4 <prvHeapInit+0xac>)
 8006a46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3307      	adds	r3, #7
 8006a56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae4 <prvHeapInit+0xac>)
 8006a68:	4413      	add	r3, r2
 8006a6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae8 <prvHeapInit+0xb0>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a76:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae8 <prvHeapInit+0xb0>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a84:	2208      	movs	r2, #8
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0307 	bic.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a15      	ldr	r2, [pc, #84]	@ (8006aec <prvHeapInit+0xb4>)
 8006a98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a9a:	4b14      	ldr	r3, [pc, #80]	@ (8006aec <prvHeapInit+0xb4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aa2:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <prvHeapInit+0xb4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <prvHeapInit+0xb4>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8006af0 <prvHeapInit+0xb8>)
 8006ac6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	4a09      	ldr	r2, [pc, #36]	@ (8006af4 <prvHeapInit+0xbc>)
 8006ace:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ad0:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <prvHeapInit+0xc0>)
 8006ad2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ad6:	601a      	str	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	200009f4 	.word	0x200009f4
 8006ae8:	200015f4 	.word	0x200015f4
 8006aec:	200015fc 	.word	0x200015fc
 8006af0:	20001604 	.word	0x20001604
 8006af4:	20001600 	.word	0x20001600
 8006af8:	20001610 	.word	0x20001610

08006afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b04:	4b27      	ldr	r3, [pc, #156]	@ (8006ba4 <prvInsertBlockIntoFreeList+0xa8>)
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e002      	b.n	8006b10 <prvInsertBlockIntoFreeList+0x14>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d8f7      	bhi.n	8006b0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	4413      	add	r3, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d108      	bne.n	8006b3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	441a      	add	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	441a      	add	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d118      	bne.n	8006b84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b14      	ldr	r3, [pc, #80]	@ (8006ba8 <prvInsertBlockIntoFreeList+0xac>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d00d      	beq.n	8006b7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	441a      	add	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e008      	b.n	8006b8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <prvInsertBlockIntoFreeList+0xac>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e003      	b.n	8006b8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d002      	beq.n	8006b9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr
 8006ba4:	200015f4 	.word	0x200015f4
 8006ba8:	200015fc 	.word	0x200015fc

08006bac <siprintf>:
 8006bac:	b40e      	push	{r1, r2, r3}
 8006bae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	2400      	movs	r4, #0
 8006bb6:	b09d      	sub	sp, #116	@ 0x74
 8006bb8:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006bba:	9002      	str	r0, [sp, #8]
 8006bbc:	9006      	str	r0, [sp, #24]
 8006bbe:	9107      	str	r1, [sp, #28]
 8006bc0:	9104      	str	r1, [sp, #16]
 8006bc2:	4809      	ldr	r0, [pc, #36]	@ (8006be8 <siprintf+0x3c>)
 8006bc4:	4909      	ldr	r1, [pc, #36]	@ (8006bec <siprintf+0x40>)
 8006bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bca:	9105      	str	r1, [sp, #20]
 8006bcc:	6800      	ldr	r0, [r0, #0]
 8006bce:	a902      	add	r1, sp, #8
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006bd4:	f000 f9fe 	bl	8006fd4 <_svfiprintf_r>
 8006bd8:	9b02      	ldr	r3, [sp, #8]
 8006bda:	701c      	strb	r4, [r3, #0]
 8006bdc:	b01d      	add	sp, #116	@ 0x74
 8006bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be2:	b003      	add	sp, #12
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	20000020 	.word	0x20000020
 8006bec:	ffff0208 	.word	0xffff0208

08006bf0 <memset>:
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4402      	add	r2, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d100      	bne.n	8006bfa <memset+0xa>
 8006bf8:	4770      	bx	lr
 8006bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfe:	e7f9      	b.n	8006bf4 <memset+0x4>

08006c00 <_reclaim_reent>:
 8006c00:	4b2d      	ldr	r3, [pc, #180]	@ (8006cb8 <_reclaim_reent+0xb8>)
 8006c02:	b570      	push	{r4, r5, r6, lr}
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4604      	mov	r4, r0
 8006c08:	4283      	cmp	r3, r0
 8006c0a:	d053      	beq.n	8006cb4 <_reclaim_reent+0xb4>
 8006c0c:	69c3      	ldr	r3, [r0, #28]
 8006c0e:	b31b      	cbz	r3, 8006c58 <_reclaim_reent+0x58>
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	b163      	cbz	r3, 8006c2e <_reclaim_reent+0x2e>
 8006c14:	2500      	movs	r5, #0
 8006c16:	69e3      	ldr	r3, [r4, #28]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	5959      	ldr	r1, [r3, r5]
 8006c1c:	b9b1      	cbnz	r1, 8006c4c <_reclaim_reent+0x4c>
 8006c1e:	3504      	adds	r5, #4
 8006c20:	2d80      	cmp	r5, #128	@ 0x80
 8006c22:	d1f8      	bne.n	8006c16 <_reclaim_reent+0x16>
 8006c24:	69e3      	ldr	r3, [r4, #28]
 8006c26:	4620      	mov	r0, r4
 8006c28:	68d9      	ldr	r1, [r3, #12]
 8006c2a:	f000 f881 	bl	8006d30 <_free_r>
 8006c2e:	69e3      	ldr	r3, [r4, #28]
 8006c30:	6819      	ldr	r1, [r3, #0]
 8006c32:	b111      	cbz	r1, 8006c3a <_reclaim_reent+0x3a>
 8006c34:	4620      	mov	r0, r4
 8006c36:	f000 f87b 	bl	8006d30 <_free_r>
 8006c3a:	69e3      	ldr	r3, [r4, #28]
 8006c3c:	689d      	ldr	r5, [r3, #8]
 8006c3e:	b15d      	cbz	r5, 8006c58 <_reclaim_reent+0x58>
 8006c40:	4629      	mov	r1, r5
 8006c42:	4620      	mov	r0, r4
 8006c44:	682d      	ldr	r5, [r5, #0]
 8006c46:	f000 f873 	bl	8006d30 <_free_r>
 8006c4a:	e7f8      	b.n	8006c3e <_reclaim_reent+0x3e>
 8006c4c:	680e      	ldr	r6, [r1, #0]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 f86e 	bl	8006d30 <_free_r>
 8006c54:	4631      	mov	r1, r6
 8006c56:	e7e1      	b.n	8006c1c <_reclaim_reent+0x1c>
 8006c58:	6961      	ldr	r1, [r4, #20]
 8006c5a:	b111      	cbz	r1, 8006c62 <_reclaim_reent+0x62>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 f867 	bl	8006d30 <_free_r>
 8006c62:	69e1      	ldr	r1, [r4, #28]
 8006c64:	b111      	cbz	r1, 8006c6c <_reclaim_reent+0x6c>
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 f862 	bl	8006d30 <_free_r>
 8006c6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c6e:	b111      	cbz	r1, 8006c76 <_reclaim_reent+0x76>
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 f85d 	bl	8006d30 <_free_r>
 8006c76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c78:	b111      	cbz	r1, 8006c80 <_reclaim_reent+0x80>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f858 	bl	8006d30 <_free_r>
 8006c80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006c82:	b111      	cbz	r1, 8006c8a <_reclaim_reent+0x8a>
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 f853 	bl	8006d30 <_free_r>
 8006c8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006c8c:	b111      	cbz	r1, 8006c94 <_reclaim_reent+0x94>
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 f84e 	bl	8006d30 <_free_r>
 8006c94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006c96:	b111      	cbz	r1, 8006c9e <_reclaim_reent+0x9e>
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f849 	bl	8006d30 <_free_r>
 8006c9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006ca0:	b111      	cbz	r1, 8006ca8 <_reclaim_reent+0xa8>
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f844 	bl	8006d30 <_free_r>
 8006ca8:	6a23      	ldr	r3, [r4, #32]
 8006caa:	b11b      	cbz	r3, 8006cb4 <_reclaim_reent+0xb4>
 8006cac:	4620      	mov	r0, r4
 8006cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cb2:	4718      	bx	r3
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000020 	.word	0x20000020

08006cbc <__errno>:
 8006cbc:	4b01      	ldr	r3, [pc, #4]	@ (8006cc4 <__errno+0x8>)
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20000020 	.word	0x20000020

08006cc8 <__libc_init_array>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	2600      	movs	r6, #0
 8006ccc:	4d0c      	ldr	r5, [pc, #48]	@ (8006d00 <__libc_init_array+0x38>)
 8006cce:	4c0d      	ldr	r4, [pc, #52]	@ (8006d04 <__libc_init_array+0x3c>)
 8006cd0:	1b64      	subs	r4, r4, r5
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	42a6      	cmp	r6, r4
 8006cd6:	d109      	bne.n	8006cec <__libc_init_array+0x24>
 8006cd8:	f000 fc76 	bl	80075c8 <_init>
 8006cdc:	2600      	movs	r6, #0
 8006cde:	4d0a      	ldr	r5, [pc, #40]	@ (8006d08 <__libc_init_array+0x40>)
 8006ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8006d0c <__libc_init_array+0x44>)
 8006ce2:	1b64      	subs	r4, r4, r5
 8006ce4:	10a4      	asrs	r4, r4, #2
 8006ce6:	42a6      	cmp	r6, r4
 8006ce8:	d105      	bne.n	8006cf6 <__libc_init_array+0x2e>
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf0:	4798      	blx	r3
 8006cf2:	3601      	adds	r6, #1
 8006cf4:	e7ee      	b.n	8006cd4 <__libc_init_array+0xc>
 8006cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfa:	4798      	blx	r3
 8006cfc:	3601      	adds	r6, #1
 8006cfe:	e7f2      	b.n	8006ce6 <__libc_init_array+0x1e>
 8006d00:	08008410 	.word	0x08008410
 8006d04:	08008410 	.word	0x08008410
 8006d08:	08008410 	.word	0x08008410
 8006d0c:	08008414 	.word	0x08008414

08006d10 <__retarget_lock_acquire_recursive>:
 8006d10:	4770      	bx	lr

08006d12 <__retarget_lock_release_recursive>:
 8006d12:	4770      	bx	lr

08006d14 <memcpy>:
 8006d14:	440a      	add	r2, r1
 8006d16:	4291      	cmp	r1, r2
 8006d18:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d1c:	d100      	bne.n	8006d20 <memcpy+0xc>
 8006d1e:	4770      	bx	lr
 8006d20:	b510      	push	{r4, lr}
 8006d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d2c:	d1f9      	bne.n	8006d22 <memcpy+0xe>
 8006d2e:	bd10      	pop	{r4, pc}

08006d30 <_free_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4605      	mov	r5, r0
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d040      	beq.n	8006dba <_free_r+0x8a>
 8006d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3c:	1f0c      	subs	r4, r1, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bfb8      	it	lt
 8006d42:	18e4      	addlt	r4, r4, r3
 8006d44:	f000 f8de 	bl	8006f04 <__malloc_lock>
 8006d48:	4a1c      	ldr	r2, [pc, #112]	@ (8006dbc <_free_r+0x8c>)
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	b933      	cbnz	r3, 8006d5c <_free_r+0x2c>
 8006d4e:	6063      	str	r3, [r4, #4]
 8006d50:	6014      	str	r4, [r2, #0]
 8006d52:	4628      	mov	r0, r5
 8006d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d58:	f000 b8da 	b.w	8006f10 <__malloc_unlock>
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d908      	bls.n	8006d72 <_free_r+0x42>
 8006d60:	6820      	ldr	r0, [r4, #0]
 8006d62:	1821      	adds	r1, r4, r0
 8006d64:	428b      	cmp	r3, r1
 8006d66:	bf01      	itttt	eq
 8006d68:	6819      	ldreq	r1, [r3, #0]
 8006d6a:	685b      	ldreq	r3, [r3, #4]
 8006d6c:	1809      	addeq	r1, r1, r0
 8006d6e:	6021      	streq	r1, [r4, #0]
 8006d70:	e7ed      	b.n	8006d4e <_free_r+0x1e>
 8006d72:	461a      	mov	r2, r3
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	b10b      	cbz	r3, 8006d7c <_free_r+0x4c>
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	d9fa      	bls.n	8006d72 <_free_r+0x42>
 8006d7c:	6811      	ldr	r1, [r2, #0]
 8006d7e:	1850      	adds	r0, r2, r1
 8006d80:	42a0      	cmp	r0, r4
 8006d82:	d10b      	bne.n	8006d9c <_free_r+0x6c>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	4401      	add	r1, r0
 8006d88:	1850      	adds	r0, r2, r1
 8006d8a:	4283      	cmp	r3, r0
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	d1e0      	bne.n	8006d52 <_free_r+0x22>
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4408      	add	r0, r1
 8006d96:	6010      	str	r0, [r2, #0]
 8006d98:	6053      	str	r3, [r2, #4]
 8006d9a:	e7da      	b.n	8006d52 <_free_r+0x22>
 8006d9c:	d902      	bls.n	8006da4 <_free_r+0x74>
 8006d9e:	230c      	movs	r3, #12
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	e7d6      	b.n	8006d52 <_free_r+0x22>
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	1821      	adds	r1, r4, r0
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf01      	itttt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	1809      	addeq	r1, r1, r0
 8006db2:	6021      	streq	r1, [r4, #0]
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	6054      	str	r4, [r2, #4]
 8006db8:	e7cb      	b.n	8006d52 <_free_r+0x22>
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20001758 	.word	0x20001758

08006dc0 <sbrk_aligned>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8006e00 <sbrk_aligned+0x40>)
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	6831      	ldr	r1, [r6, #0]
 8006dc8:	4605      	mov	r5, r0
 8006dca:	b911      	cbnz	r1, 8006dd2 <sbrk_aligned+0x12>
 8006dcc:	f000 fba8 	bl	8007520 <_sbrk_r>
 8006dd0:	6030      	str	r0, [r6, #0]
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	f000 fba3 	bl	8007520 <_sbrk_r>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d103      	bne.n	8006de6 <sbrk_aligned+0x26>
 8006dde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006de2:	4620      	mov	r0, r4
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	1cc4      	adds	r4, r0, #3
 8006de8:	f024 0403 	bic.w	r4, r4, #3
 8006dec:	42a0      	cmp	r0, r4
 8006dee:	d0f8      	beq.n	8006de2 <sbrk_aligned+0x22>
 8006df0:	1a21      	subs	r1, r4, r0
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 fb94 	bl	8007520 <_sbrk_r>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d1f2      	bne.n	8006de2 <sbrk_aligned+0x22>
 8006dfc:	e7ef      	b.n	8006dde <sbrk_aligned+0x1e>
 8006dfe:	bf00      	nop
 8006e00:	20001754 	.word	0x20001754

08006e04 <_malloc_r>:
 8006e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e08:	1ccd      	adds	r5, r1, #3
 8006e0a:	f025 0503 	bic.w	r5, r5, #3
 8006e0e:	3508      	adds	r5, #8
 8006e10:	2d0c      	cmp	r5, #12
 8006e12:	bf38      	it	cc
 8006e14:	250c      	movcc	r5, #12
 8006e16:	2d00      	cmp	r5, #0
 8006e18:	4606      	mov	r6, r0
 8006e1a:	db01      	blt.n	8006e20 <_malloc_r+0x1c>
 8006e1c:	42a9      	cmp	r1, r5
 8006e1e:	d904      	bls.n	8006e2a <_malloc_r+0x26>
 8006e20:	230c      	movs	r3, #12
 8006e22:	6033      	str	r3, [r6, #0]
 8006e24:	2000      	movs	r0, #0
 8006e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f00 <_malloc_r+0xfc>
 8006e2e:	f000 f869 	bl	8006f04 <__malloc_lock>
 8006e32:	f8d8 3000 	ldr.w	r3, [r8]
 8006e36:	461c      	mov	r4, r3
 8006e38:	bb44      	cbnz	r4, 8006e8c <_malloc_r+0x88>
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7ff ffbf 	bl	8006dc0 <sbrk_aligned>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	4604      	mov	r4, r0
 8006e46:	d158      	bne.n	8006efa <_malloc_r+0xf6>
 8006e48:	f8d8 4000 	ldr.w	r4, [r8]
 8006e4c:	4627      	mov	r7, r4
 8006e4e:	2f00      	cmp	r7, #0
 8006e50:	d143      	bne.n	8006eda <_malloc_r+0xd6>
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	d04b      	beq.n	8006eee <_malloc_r+0xea>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	eb04 0903 	add.w	r9, r4, r3
 8006e60:	f000 fb5e 	bl	8007520 <_sbrk_r>
 8006e64:	4581      	cmp	r9, r0
 8006e66:	d142      	bne.n	8006eee <_malloc_r+0xea>
 8006e68:	6821      	ldr	r1, [r4, #0]
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	1a6d      	subs	r5, r5, r1
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7ff ffa6 	bl	8006dc0 <sbrk_aligned>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d03a      	beq.n	8006eee <_malloc_r+0xea>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	442b      	add	r3, r5
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	bb62      	cbnz	r2, 8006ee0 <_malloc_r+0xdc>
 8006e86:	f8c8 7000 	str.w	r7, [r8]
 8006e8a:	e00f      	b.n	8006eac <_malloc_r+0xa8>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	1b52      	subs	r2, r2, r5
 8006e90:	d420      	bmi.n	8006ed4 <_malloc_r+0xd0>
 8006e92:	2a0b      	cmp	r2, #11
 8006e94:	d917      	bls.n	8006ec6 <_malloc_r+0xc2>
 8006e96:	1961      	adds	r1, r4, r5
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	6025      	str	r5, [r4, #0]
 8006e9c:	bf18      	it	ne
 8006e9e:	6059      	strne	r1, [r3, #4]
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	bf08      	it	eq
 8006ea4:	f8c8 1000 	streq.w	r1, [r8]
 8006ea8:	5162      	str	r2, [r4, r5]
 8006eaa:	604b      	str	r3, [r1, #4]
 8006eac:	4630      	mov	r0, r6
 8006eae:	f000 f82f 	bl	8006f10 <__malloc_unlock>
 8006eb2:	f104 000b 	add.w	r0, r4, #11
 8006eb6:	1d23      	adds	r3, r4, #4
 8006eb8:	f020 0007 	bic.w	r0, r0, #7
 8006ebc:	1ac2      	subs	r2, r0, r3
 8006ebe:	bf1c      	itt	ne
 8006ec0:	1a1b      	subne	r3, r3, r0
 8006ec2:	50a3      	strne	r3, [r4, r2]
 8006ec4:	e7af      	b.n	8006e26 <_malloc_r+0x22>
 8006ec6:	6862      	ldr	r2, [r4, #4]
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	bf0c      	ite	eq
 8006ecc:	f8c8 2000 	streq.w	r2, [r8]
 8006ed0:	605a      	strne	r2, [r3, #4]
 8006ed2:	e7eb      	b.n	8006eac <_malloc_r+0xa8>
 8006ed4:	4623      	mov	r3, r4
 8006ed6:	6864      	ldr	r4, [r4, #4]
 8006ed8:	e7ae      	b.n	8006e38 <_malloc_r+0x34>
 8006eda:	463c      	mov	r4, r7
 8006edc:	687f      	ldr	r7, [r7, #4]
 8006ede:	e7b6      	b.n	8006e4e <_malloc_r+0x4a>
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d1fb      	bne.n	8006ee0 <_malloc_r+0xdc>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	6053      	str	r3, [r2, #4]
 8006eec:	e7de      	b.n	8006eac <_malloc_r+0xa8>
 8006eee:	230c      	movs	r3, #12
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	6033      	str	r3, [r6, #0]
 8006ef4:	f000 f80c 	bl	8006f10 <__malloc_unlock>
 8006ef8:	e794      	b.n	8006e24 <_malloc_r+0x20>
 8006efa:	6005      	str	r5, [r0, #0]
 8006efc:	e7d6      	b.n	8006eac <_malloc_r+0xa8>
 8006efe:	bf00      	nop
 8006f00:	20001758 	.word	0x20001758

08006f04 <__malloc_lock>:
 8006f04:	4801      	ldr	r0, [pc, #4]	@ (8006f0c <__malloc_lock+0x8>)
 8006f06:	f7ff bf03 	b.w	8006d10 <__retarget_lock_acquire_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	20001750 	.word	0x20001750

08006f10 <__malloc_unlock>:
 8006f10:	4801      	ldr	r0, [pc, #4]	@ (8006f18 <__malloc_unlock+0x8>)
 8006f12:	f7ff befe 	b.w	8006d12 <__retarget_lock_release_recursive>
 8006f16:	bf00      	nop
 8006f18:	20001750 	.word	0x20001750

08006f1c <__ssputs_r>:
 8006f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f20:	461f      	mov	r7, r3
 8006f22:	688e      	ldr	r6, [r1, #8]
 8006f24:	4682      	mov	sl, r0
 8006f26:	42be      	cmp	r6, r7
 8006f28:	460c      	mov	r4, r1
 8006f2a:	4690      	mov	r8, r2
 8006f2c:	680b      	ldr	r3, [r1, #0]
 8006f2e:	d82d      	bhi.n	8006f8c <__ssputs_r+0x70>
 8006f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f38:	d026      	beq.n	8006f88 <__ssputs_r+0x6c>
 8006f3a:	6965      	ldr	r5, [r4, #20]
 8006f3c:	6909      	ldr	r1, [r1, #16]
 8006f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f42:	eba3 0901 	sub.w	r9, r3, r1
 8006f46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f4a:	1c7b      	adds	r3, r7, #1
 8006f4c:	444b      	add	r3, r9
 8006f4e:	106d      	asrs	r5, r5, #1
 8006f50:	429d      	cmp	r5, r3
 8006f52:	bf38      	it	cc
 8006f54:	461d      	movcc	r5, r3
 8006f56:	0553      	lsls	r3, r2, #21
 8006f58:	d527      	bpl.n	8006faa <__ssputs_r+0x8e>
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	f7ff ff52 	bl	8006e04 <_malloc_r>
 8006f60:	4606      	mov	r6, r0
 8006f62:	b360      	cbz	r0, 8006fbe <__ssputs_r+0xa2>
 8006f64:	464a      	mov	r2, r9
 8006f66:	6921      	ldr	r1, [r4, #16]
 8006f68:	f7ff fed4 	bl	8006d14 <memcpy>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	6126      	str	r6, [r4, #16]
 8006f7a:	444e      	add	r6, r9
 8006f7c:	6026      	str	r6, [r4, #0]
 8006f7e:	463e      	mov	r6, r7
 8006f80:	6165      	str	r5, [r4, #20]
 8006f82:	eba5 0509 	sub.w	r5, r5, r9
 8006f86:	60a5      	str	r5, [r4, #8]
 8006f88:	42be      	cmp	r6, r7
 8006f8a:	d900      	bls.n	8006f8e <__ssputs_r+0x72>
 8006f8c:	463e      	mov	r6, r7
 8006f8e:	4632      	mov	r2, r6
 8006f90:	4641      	mov	r1, r8
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	f000 faaa 	bl	80074ec <memmove>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	68a3      	ldr	r3, [r4, #8]
 8006f9c:	1b9b      	subs	r3, r3, r6
 8006f9e:	60a3      	str	r3, [r4, #8]
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	4433      	add	r3, r6
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006faa:	462a      	mov	r2, r5
 8006fac:	f000 fad6 	bl	800755c <_realloc_r>
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d1e0      	bne.n	8006f78 <__ssputs_r+0x5c>
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	6921      	ldr	r1, [r4, #16]
 8006fba:	f7ff feb9 	bl	8006d30 <_free_r>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	f8ca 3000 	str.w	r3, [sl]
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fce:	81a3      	strh	r3, [r4, #12]
 8006fd0:	e7e9      	b.n	8006fa6 <__ssputs_r+0x8a>
	...

08006fd4 <_svfiprintf_r>:
 8006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	4698      	mov	r8, r3
 8006fda:	898b      	ldrh	r3, [r1, #12]
 8006fdc:	4607      	mov	r7, r0
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	4614      	mov	r4, r2
 8006fe4:	b09d      	sub	sp, #116	@ 0x74
 8006fe6:	d510      	bpl.n	800700a <_svfiprintf_r+0x36>
 8006fe8:	690b      	ldr	r3, [r1, #16]
 8006fea:	b973      	cbnz	r3, 800700a <_svfiprintf_r+0x36>
 8006fec:	2140      	movs	r1, #64	@ 0x40
 8006fee:	f7ff ff09 	bl	8006e04 <_malloc_r>
 8006ff2:	6028      	str	r0, [r5, #0]
 8006ff4:	6128      	str	r0, [r5, #16]
 8006ff6:	b930      	cbnz	r0, 8007006 <_svfiprintf_r+0x32>
 8006ff8:	230c      	movs	r3, #12
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007000:	b01d      	add	sp, #116	@ 0x74
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	2340      	movs	r3, #64	@ 0x40
 8007008:	616b      	str	r3, [r5, #20]
 800700a:	2300      	movs	r3, #0
 800700c:	9309      	str	r3, [sp, #36]	@ 0x24
 800700e:	2320      	movs	r3, #32
 8007010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007014:	2330      	movs	r3, #48	@ 0x30
 8007016:	f04f 0901 	mov.w	r9, #1
 800701a:	f8cd 800c 	str.w	r8, [sp, #12]
 800701e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80071b8 <_svfiprintf_r+0x1e4>
 8007022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007026:	4623      	mov	r3, r4
 8007028:	469a      	mov	sl, r3
 800702a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800702e:	b10a      	cbz	r2, 8007034 <_svfiprintf_r+0x60>
 8007030:	2a25      	cmp	r2, #37	@ 0x25
 8007032:	d1f9      	bne.n	8007028 <_svfiprintf_r+0x54>
 8007034:	ebba 0b04 	subs.w	fp, sl, r4
 8007038:	d00b      	beq.n	8007052 <_svfiprintf_r+0x7e>
 800703a:	465b      	mov	r3, fp
 800703c:	4622      	mov	r2, r4
 800703e:	4629      	mov	r1, r5
 8007040:	4638      	mov	r0, r7
 8007042:	f7ff ff6b 	bl	8006f1c <__ssputs_r>
 8007046:	3001      	adds	r0, #1
 8007048:	f000 80a7 	beq.w	800719a <_svfiprintf_r+0x1c6>
 800704c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800704e:	445a      	add	r2, fp
 8007050:	9209      	str	r2, [sp, #36]	@ 0x24
 8007052:	f89a 3000 	ldrb.w	r3, [sl]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 809f 	beq.w	800719a <_svfiprintf_r+0x1c6>
 800705c:	2300      	movs	r3, #0
 800705e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007066:	f10a 0a01 	add.w	sl, sl, #1
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	9307      	str	r3, [sp, #28]
 800706e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007072:	931a      	str	r3, [sp, #104]	@ 0x68
 8007074:	4654      	mov	r4, sl
 8007076:	2205      	movs	r2, #5
 8007078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707c:	484e      	ldr	r0, [pc, #312]	@ (80071b8 <_svfiprintf_r+0x1e4>)
 800707e:	f000 fa5f 	bl	8007540 <memchr>
 8007082:	9a04      	ldr	r2, [sp, #16]
 8007084:	b9d8      	cbnz	r0, 80070be <_svfiprintf_r+0xea>
 8007086:	06d0      	lsls	r0, r2, #27
 8007088:	bf44      	itt	mi
 800708a:	2320      	movmi	r3, #32
 800708c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007090:	0711      	lsls	r1, r2, #28
 8007092:	bf44      	itt	mi
 8007094:	232b      	movmi	r3, #43	@ 0x2b
 8007096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800709a:	f89a 3000 	ldrb.w	r3, [sl]
 800709e:	2b2a      	cmp	r3, #42	@ 0x2a
 80070a0:	d015      	beq.n	80070ce <_svfiprintf_r+0xfa>
 80070a2:	4654      	mov	r4, sl
 80070a4:	2000      	movs	r0, #0
 80070a6:	f04f 0c0a 	mov.w	ip, #10
 80070aa:	9a07      	ldr	r2, [sp, #28]
 80070ac:	4621      	mov	r1, r4
 80070ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b2:	3b30      	subs	r3, #48	@ 0x30
 80070b4:	2b09      	cmp	r3, #9
 80070b6:	d94b      	bls.n	8007150 <_svfiprintf_r+0x17c>
 80070b8:	b1b0      	cbz	r0, 80070e8 <_svfiprintf_r+0x114>
 80070ba:	9207      	str	r2, [sp, #28]
 80070bc:	e014      	b.n	80070e8 <_svfiprintf_r+0x114>
 80070be:	eba0 0308 	sub.w	r3, r0, r8
 80070c2:	fa09 f303 	lsl.w	r3, r9, r3
 80070c6:	4313      	orrs	r3, r2
 80070c8:	46a2      	mov	sl, r4
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	e7d2      	b.n	8007074 <_svfiprintf_r+0xa0>
 80070ce:	9b03      	ldr	r3, [sp, #12]
 80070d0:	1d19      	adds	r1, r3, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	9103      	str	r1, [sp, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bfbb      	ittet	lt
 80070da:	425b      	neglt	r3, r3
 80070dc:	f042 0202 	orrlt.w	r2, r2, #2
 80070e0:	9307      	strge	r3, [sp, #28]
 80070e2:	9307      	strlt	r3, [sp, #28]
 80070e4:	bfb8      	it	lt
 80070e6:	9204      	strlt	r2, [sp, #16]
 80070e8:	7823      	ldrb	r3, [r4, #0]
 80070ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80070ec:	d10a      	bne.n	8007104 <_svfiprintf_r+0x130>
 80070ee:	7863      	ldrb	r3, [r4, #1]
 80070f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f2:	d132      	bne.n	800715a <_svfiprintf_r+0x186>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	3402      	adds	r4, #2
 80070f8:	1d1a      	adds	r2, r3, #4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	9203      	str	r2, [sp, #12]
 80070fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007102:	9305      	str	r3, [sp, #20]
 8007104:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80071bc <_svfiprintf_r+0x1e8>
 8007108:	2203      	movs	r2, #3
 800710a:	4650      	mov	r0, sl
 800710c:	7821      	ldrb	r1, [r4, #0]
 800710e:	f000 fa17 	bl	8007540 <memchr>
 8007112:	b138      	cbz	r0, 8007124 <_svfiprintf_r+0x150>
 8007114:	2240      	movs	r2, #64	@ 0x40
 8007116:	9b04      	ldr	r3, [sp, #16]
 8007118:	eba0 000a 	sub.w	r0, r0, sl
 800711c:	4082      	lsls	r2, r0
 800711e:	4313      	orrs	r3, r2
 8007120:	3401      	adds	r4, #1
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007128:	2206      	movs	r2, #6
 800712a:	4825      	ldr	r0, [pc, #148]	@ (80071c0 <_svfiprintf_r+0x1ec>)
 800712c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007130:	f000 fa06 	bl	8007540 <memchr>
 8007134:	2800      	cmp	r0, #0
 8007136:	d036      	beq.n	80071a6 <_svfiprintf_r+0x1d2>
 8007138:	4b22      	ldr	r3, [pc, #136]	@ (80071c4 <_svfiprintf_r+0x1f0>)
 800713a:	bb1b      	cbnz	r3, 8007184 <_svfiprintf_r+0x1b0>
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	3307      	adds	r3, #7
 8007140:	f023 0307 	bic.w	r3, r3, #7
 8007144:	3308      	adds	r3, #8
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714a:	4433      	add	r3, r6
 800714c:	9309      	str	r3, [sp, #36]	@ 0x24
 800714e:	e76a      	b.n	8007026 <_svfiprintf_r+0x52>
 8007150:	460c      	mov	r4, r1
 8007152:	2001      	movs	r0, #1
 8007154:	fb0c 3202 	mla	r2, ip, r2, r3
 8007158:	e7a8      	b.n	80070ac <_svfiprintf_r+0xd8>
 800715a:	2300      	movs	r3, #0
 800715c:	f04f 0c0a 	mov.w	ip, #10
 8007160:	4619      	mov	r1, r3
 8007162:	3401      	adds	r4, #1
 8007164:	9305      	str	r3, [sp, #20]
 8007166:	4620      	mov	r0, r4
 8007168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800716c:	3a30      	subs	r2, #48	@ 0x30
 800716e:	2a09      	cmp	r2, #9
 8007170:	d903      	bls.n	800717a <_svfiprintf_r+0x1a6>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0c6      	beq.n	8007104 <_svfiprintf_r+0x130>
 8007176:	9105      	str	r1, [sp, #20]
 8007178:	e7c4      	b.n	8007104 <_svfiprintf_r+0x130>
 800717a:	4604      	mov	r4, r0
 800717c:	2301      	movs	r3, #1
 800717e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007182:	e7f0      	b.n	8007166 <_svfiprintf_r+0x192>
 8007184:	ab03      	add	r3, sp, #12
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462a      	mov	r2, r5
 800718a:	4638      	mov	r0, r7
 800718c:	4b0e      	ldr	r3, [pc, #56]	@ (80071c8 <_svfiprintf_r+0x1f4>)
 800718e:	a904      	add	r1, sp, #16
 8007190:	f3af 8000 	nop.w
 8007194:	1c42      	adds	r2, r0, #1
 8007196:	4606      	mov	r6, r0
 8007198:	d1d6      	bne.n	8007148 <_svfiprintf_r+0x174>
 800719a:	89ab      	ldrh	r3, [r5, #12]
 800719c:	065b      	lsls	r3, r3, #25
 800719e:	f53f af2d 	bmi.w	8006ffc <_svfiprintf_r+0x28>
 80071a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071a4:	e72c      	b.n	8007000 <_svfiprintf_r+0x2c>
 80071a6:	ab03      	add	r3, sp, #12
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	462a      	mov	r2, r5
 80071ac:	4638      	mov	r0, r7
 80071ae:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <_svfiprintf_r+0x1f4>)
 80071b0:	a904      	add	r1, sp, #16
 80071b2:	f000 f87d 	bl	80072b0 <_printf_i>
 80071b6:	e7ed      	b.n	8007194 <_svfiprintf_r+0x1c0>
 80071b8:	080083da 	.word	0x080083da
 80071bc:	080083e0 	.word	0x080083e0
 80071c0:	080083e4 	.word	0x080083e4
 80071c4:	00000000 	.word	0x00000000
 80071c8:	08006f1d 	.word	0x08006f1d

080071cc <_printf_common>:
 80071cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	4616      	mov	r6, r2
 80071d2:	4698      	mov	r8, r3
 80071d4:	688a      	ldr	r2, [r1, #8]
 80071d6:	690b      	ldr	r3, [r1, #16]
 80071d8:	4607      	mov	r7, r0
 80071da:	4293      	cmp	r3, r2
 80071dc:	bfb8      	it	lt
 80071de:	4613      	movlt	r3, r2
 80071e0:	6033      	str	r3, [r6, #0]
 80071e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071e6:	460c      	mov	r4, r1
 80071e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071ec:	b10a      	cbz	r2, 80071f2 <_printf_common+0x26>
 80071ee:	3301      	adds	r3, #1
 80071f0:	6033      	str	r3, [r6, #0]
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	0699      	lsls	r1, r3, #26
 80071f6:	bf42      	ittt	mi
 80071f8:	6833      	ldrmi	r3, [r6, #0]
 80071fa:	3302      	addmi	r3, #2
 80071fc:	6033      	strmi	r3, [r6, #0]
 80071fe:	6825      	ldr	r5, [r4, #0]
 8007200:	f015 0506 	ands.w	r5, r5, #6
 8007204:	d106      	bne.n	8007214 <_printf_common+0x48>
 8007206:	f104 0a19 	add.w	sl, r4, #25
 800720a:	68e3      	ldr	r3, [r4, #12]
 800720c:	6832      	ldr	r2, [r6, #0]
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	42ab      	cmp	r3, r5
 8007212:	dc2b      	bgt.n	800726c <_printf_common+0xa0>
 8007214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007218:	6822      	ldr	r2, [r4, #0]
 800721a:	3b00      	subs	r3, #0
 800721c:	bf18      	it	ne
 800721e:	2301      	movne	r3, #1
 8007220:	0692      	lsls	r2, r2, #26
 8007222:	d430      	bmi.n	8007286 <_printf_common+0xba>
 8007224:	4641      	mov	r1, r8
 8007226:	4638      	mov	r0, r7
 8007228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800722c:	47c8      	blx	r9
 800722e:	3001      	adds	r0, #1
 8007230:	d023      	beq.n	800727a <_printf_common+0xae>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	6922      	ldr	r2, [r4, #16]
 8007236:	f003 0306 	and.w	r3, r3, #6
 800723a:	2b04      	cmp	r3, #4
 800723c:	bf14      	ite	ne
 800723e:	2500      	movne	r5, #0
 8007240:	6833      	ldreq	r3, [r6, #0]
 8007242:	f04f 0600 	mov.w	r6, #0
 8007246:	bf08      	it	eq
 8007248:	68e5      	ldreq	r5, [r4, #12]
 800724a:	f104 041a 	add.w	r4, r4, #26
 800724e:	bf08      	it	eq
 8007250:	1aed      	subeq	r5, r5, r3
 8007252:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007256:	bf08      	it	eq
 8007258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800725c:	4293      	cmp	r3, r2
 800725e:	bfc4      	itt	gt
 8007260:	1a9b      	subgt	r3, r3, r2
 8007262:	18ed      	addgt	r5, r5, r3
 8007264:	42b5      	cmp	r5, r6
 8007266:	d11a      	bne.n	800729e <_printf_common+0xd2>
 8007268:	2000      	movs	r0, #0
 800726a:	e008      	b.n	800727e <_printf_common+0xb2>
 800726c:	2301      	movs	r3, #1
 800726e:	4652      	mov	r2, sl
 8007270:	4641      	mov	r1, r8
 8007272:	4638      	mov	r0, r7
 8007274:	47c8      	blx	r9
 8007276:	3001      	adds	r0, #1
 8007278:	d103      	bne.n	8007282 <_printf_common+0xb6>
 800727a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007282:	3501      	adds	r5, #1
 8007284:	e7c1      	b.n	800720a <_printf_common+0x3e>
 8007286:	2030      	movs	r0, #48	@ 0x30
 8007288:	18e1      	adds	r1, r4, r3
 800728a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007294:	4422      	add	r2, r4
 8007296:	3302      	adds	r3, #2
 8007298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800729c:	e7c2      	b.n	8007224 <_printf_common+0x58>
 800729e:	2301      	movs	r3, #1
 80072a0:	4622      	mov	r2, r4
 80072a2:	4641      	mov	r1, r8
 80072a4:	4638      	mov	r0, r7
 80072a6:	47c8      	blx	r9
 80072a8:	3001      	adds	r0, #1
 80072aa:	d0e6      	beq.n	800727a <_printf_common+0xae>
 80072ac:	3601      	adds	r6, #1
 80072ae:	e7d9      	b.n	8007264 <_printf_common+0x98>

080072b0 <_printf_i>:
 80072b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	7e0f      	ldrb	r7, [r1, #24]
 80072b6:	4691      	mov	r9, r2
 80072b8:	2f78      	cmp	r7, #120	@ 0x78
 80072ba:	4680      	mov	r8, r0
 80072bc:	460c      	mov	r4, r1
 80072be:	469a      	mov	sl, r3
 80072c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072c6:	d807      	bhi.n	80072d8 <_printf_i+0x28>
 80072c8:	2f62      	cmp	r7, #98	@ 0x62
 80072ca:	d80a      	bhi.n	80072e2 <_printf_i+0x32>
 80072cc:	2f00      	cmp	r7, #0
 80072ce:	f000 80d1 	beq.w	8007474 <_printf_i+0x1c4>
 80072d2:	2f58      	cmp	r7, #88	@ 0x58
 80072d4:	f000 80b8 	beq.w	8007448 <_printf_i+0x198>
 80072d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072e0:	e03a      	b.n	8007358 <_printf_i+0xa8>
 80072e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072e6:	2b15      	cmp	r3, #21
 80072e8:	d8f6      	bhi.n	80072d8 <_printf_i+0x28>
 80072ea:	a101      	add	r1, pc, #4	@ (adr r1, 80072f0 <_printf_i+0x40>)
 80072ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072f0:	08007349 	.word	0x08007349
 80072f4:	0800735d 	.word	0x0800735d
 80072f8:	080072d9 	.word	0x080072d9
 80072fc:	080072d9 	.word	0x080072d9
 8007300:	080072d9 	.word	0x080072d9
 8007304:	080072d9 	.word	0x080072d9
 8007308:	0800735d 	.word	0x0800735d
 800730c:	080072d9 	.word	0x080072d9
 8007310:	080072d9 	.word	0x080072d9
 8007314:	080072d9 	.word	0x080072d9
 8007318:	080072d9 	.word	0x080072d9
 800731c:	0800745b 	.word	0x0800745b
 8007320:	08007387 	.word	0x08007387
 8007324:	08007415 	.word	0x08007415
 8007328:	080072d9 	.word	0x080072d9
 800732c:	080072d9 	.word	0x080072d9
 8007330:	0800747d 	.word	0x0800747d
 8007334:	080072d9 	.word	0x080072d9
 8007338:	08007387 	.word	0x08007387
 800733c:	080072d9 	.word	0x080072d9
 8007340:	080072d9 	.word	0x080072d9
 8007344:	0800741d 	.word	0x0800741d
 8007348:	6833      	ldr	r3, [r6, #0]
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6032      	str	r2, [r6, #0]
 8007350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007358:	2301      	movs	r3, #1
 800735a:	e09c      	b.n	8007496 <_printf_i+0x1e6>
 800735c:	6833      	ldr	r3, [r6, #0]
 800735e:	6820      	ldr	r0, [r4, #0]
 8007360:	1d19      	adds	r1, r3, #4
 8007362:	6031      	str	r1, [r6, #0]
 8007364:	0606      	lsls	r6, r0, #24
 8007366:	d501      	bpl.n	800736c <_printf_i+0xbc>
 8007368:	681d      	ldr	r5, [r3, #0]
 800736a:	e003      	b.n	8007374 <_printf_i+0xc4>
 800736c:	0645      	lsls	r5, r0, #25
 800736e:	d5fb      	bpl.n	8007368 <_printf_i+0xb8>
 8007370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007374:	2d00      	cmp	r5, #0
 8007376:	da03      	bge.n	8007380 <_printf_i+0xd0>
 8007378:	232d      	movs	r3, #45	@ 0x2d
 800737a:	426d      	negs	r5, r5
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007380:	230a      	movs	r3, #10
 8007382:	4858      	ldr	r0, [pc, #352]	@ (80074e4 <_printf_i+0x234>)
 8007384:	e011      	b.n	80073aa <_printf_i+0xfa>
 8007386:	6821      	ldr	r1, [r4, #0]
 8007388:	6833      	ldr	r3, [r6, #0]
 800738a:	0608      	lsls	r0, r1, #24
 800738c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007390:	d402      	bmi.n	8007398 <_printf_i+0xe8>
 8007392:	0649      	lsls	r1, r1, #25
 8007394:	bf48      	it	mi
 8007396:	b2ad      	uxthmi	r5, r5
 8007398:	2f6f      	cmp	r7, #111	@ 0x6f
 800739a:	6033      	str	r3, [r6, #0]
 800739c:	bf14      	ite	ne
 800739e:	230a      	movne	r3, #10
 80073a0:	2308      	moveq	r3, #8
 80073a2:	4850      	ldr	r0, [pc, #320]	@ (80074e4 <_printf_i+0x234>)
 80073a4:	2100      	movs	r1, #0
 80073a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073aa:	6866      	ldr	r6, [r4, #4]
 80073ac:	2e00      	cmp	r6, #0
 80073ae:	60a6      	str	r6, [r4, #8]
 80073b0:	db05      	blt.n	80073be <_printf_i+0x10e>
 80073b2:	6821      	ldr	r1, [r4, #0]
 80073b4:	432e      	orrs	r6, r5
 80073b6:	f021 0104 	bic.w	r1, r1, #4
 80073ba:	6021      	str	r1, [r4, #0]
 80073bc:	d04b      	beq.n	8007456 <_printf_i+0x1a6>
 80073be:	4616      	mov	r6, r2
 80073c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80073c4:	fb03 5711 	mls	r7, r3, r1, r5
 80073c8:	5dc7      	ldrb	r7, [r0, r7]
 80073ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073ce:	462f      	mov	r7, r5
 80073d0:	42bb      	cmp	r3, r7
 80073d2:	460d      	mov	r5, r1
 80073d4:	d9f4      	bls.n	80073c0 <_printf_i+0x110>
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d10b      	bne.n	80073f2 <_printf_i+0x142>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	07df      	lsls	r7, r3, #31
 80073de:	d508      	bpl.n	80073f2 <_printf_i+0x142>
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	6861      	ldr	r1, [r4, #4]
 80073e4:	4299      	cmp	r1, r3
 80073e6:	bfde      	ittt	le
 80073e8:	2330      	movle	r3, #48	@ 0x30
 80073ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80073f2:	1b92      	subs	r2, r2, r6
 80073f4:	6122      	str	r2, [r4, #16]
 80073f6:	464b      	mov	r3, r9
 80073f8:	4621      	mov	r1, r4
 80073fa:	4640      	mov	r0, r8
 80073fc:	f8cd a000 	str.w	sl, [sp]
 8007400:	aa03      	add	r2, sp, #12
 8007402:	f7ff fee3 	bl	80071cc <_printf_common>
 8007406:	3001      	adds	r0, #1
 8007408:	d14a      	bne.n	80074a0 <_printf_i+0x1f0>
 800740a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800740e:	b004      	add	sp, #16
 8007410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	f043 0320 	orr.w	r3, r3, #32
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	2778      	movs	r7, #120	@ 0x78
 800741e:	4832      	ldr	r0, [pc, #200]	@ (80074e8 <_printf_i+0x238>)
 8007420:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	6831      	ldr	r1, [r6, #0]
 8007428:	061f      	lsls	r7, r3, #24
 800742a:	f851 5b04 	ldr.w	r5, [r1], #4
 800742e:	d402      	bmi.n	8007436 <_printf_i+0x186>
 8007430:	065f      	lsls	r7, r3, #25
 8007432:	bf48      	it	mi
 8007434:	b2ad      	uxthmi	r5, r5
 8007436:	6031      	str	r1, [r6, #0]
 8007438:	07d9      	lsls	r1, r3, #31
 800743a:	bf44      	itt	mi
 800743c:	f043 0320 	orrmi.w	r3, r3, #32
 8007440:	6023      	strmi	r3, [r4, #0]
 8007442:	b11d      	cbz	r5, 800744c <_printf_i+0x19c>
 8007444:	2310      	movs	r3, #16
 8007446:	e7ad      	b.n	80073a4 <_printf_i+0xf4>
 8007448:	4826      	ldr	r0, [pc, #152]	@ (80074e4 <_printf_i+0x234>)
 800744a:	e7e9      	b.n	8007420 <_printf_i+0x170>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	f023 0320 	bic.w	r3, r3, #32
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	e7f6      	b.n	8007444 <_printf_i+0x194>
 8007456:	4616      	mov	r6, r2
 8007458:	e7bd      	b.n	80073d6 <_printf_i+0x126>
 800745a:	6833      	ldr	r3, [r6, #0]
 800745c:	6825      	ldr	r5, [r4, #0]
 800745e:	1d18      	adds	r0, r3, #4
 8007460:	6961      	ldr	r1, [r4, #20]
 8007462:	6030      	str	r0, [r6, #0]
 8007464:	062e      	lsls	r6, r5, #24
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	d501      	bpl.n	800746e <_printf_i+0x1be>
 800746a:	6019      	str	r1, [r3, #0]
 800746c:	e002      	b.n	8007474 <_printf_i+0x1c4>
 800746e:	0668      	lsls	r0, r5, #25
 8007470:	d5fb      	bpl.n	800746a <_printf_i+0x1ba>
 8007472:	8019      	strh	r1, [r3, #0]
 8007474:	2300      	movs	r3, #0
 8007476:	4616      	mov	r6, r2
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	e7bc      	b.n	80073f6 <_printf_i+0x146>
 800747c:	6833      	ldr	r3, [r6, #0]
 800747e:	2100      	movs	r1, #0
 8007480:	1d1a      	adds	r2, r3, #4
 8007482:	6032      	str	r2, [r6, #0]
 8007484:	681e      	ldr	r6, [r3, #0]
 8007486:	6862      	ldr	r2, [r4, #4]
 8007488:	4630      	mov	r0, r6
 800748a:	f000 f859 	bl	8007540 <memchr>
 800748e:	b108      	cbz	r0, 8007494 <_printf_i+0x1e4>
 8007490:	1b80      	subs	r0, r0, r6
 8007492:	6060      	str	r0, [r4, #4]
 8007494:	6863      	ldr	r3, [r4, #4]
 8007496:	6123      	str	r3, [r4, #16]
 8007498:	2300      	movs	r3, #0
 800749a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800749e:	e7aa      	b.n	80073f6 <_printf_i+0x146>
 80074a0:	4632      	mov	r2, r6
 80074a2:	4649      	mov	r1, r9
 80074a4:	4640      	mov	r0, r8
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	47d0      	blx	sl
 80074aa:	3001      	adds	r0, #1
 80074ac:	d0ad      	beq.n	800740a <_printf_i+0x15a>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	079b      	lsls	r3, r3, #30
 80074b2:	d413      	bmi.n	80074dc <_printf_i+0x22c>
 80074b4:	68e0      	ldr	r0, [r4, #12]
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	4298      	cmp	r0, r3
 80074ba:	bfb8      	it	lt
 80074bc:	4618      	movlt	r0, r3
 80074be:	e7a6      	b.n	800740e <_printf_i+0x15e>
 80074c0:	2301      	movs	r3, #1
 80074c2:	4632      	mov	r2, r6
 80074c4:	4649      	mov	r1, r9
 80074c6:	4640      	mov	r0, r8
 80074c8:	47d0      	blx	sl
 80074ca:	3001      	adds	r0, #1
 80074cc:	d09d      	beq.n	800740a <_printf_i+0x15a>
 80074ce:	3501      	adds	r5, #1
 80074d0:	68e3      	ldr	r3, [r4, #12]
 80074d2:	9903      	ldr	r1, [sp, #12]
 80074d4:	1a5b      	subs	r3, r3, r1
 80074d6:	42ab      	cmp	r3, r5
 80074d8:	dcf2      	bgt.n	80074c0 <_printf_i+0x210>
 80074da:	e7eb      	b.n	80074b4 <_printf_i+0x204>
 80074dc:	2500      	movs	r5, #0
 80074de:	f104 0619 	add.w	r6, r4, #25
 80074e2:	e7f5      	b.n	80074d0 <_printf_i+0x220>
 80074e4:	080083eb 	.word	0x080083eb
 80074e8:	080083fc 	.word	0x080083fc

080074ec <memmove>:
 80074ec:	4288      	cmp	r0, r1
 80074ee:	b510      	push	{r4, lr}
 80074f0:	eb01 0402 	add.w	r4, r1, r2
 80074f4:	d902      	bls.n	80074fc <memmove+0x10>
 80074f6:	4284      	cmp	r4, r0
 80074f8:	4623      	mov	r3, r4
 80074fa:	d807      	bhi.n	800750c <memmove+0x20>
 80074fc:	1e43      	subs	r3, r0, #1
 80074fe:	42a1      	cmp	r1, r4
 8007500:	d008      	beq.n	8007514 <memmove+0x28>
 8007502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800750a:	e7f8      	b.n	80074fe <memmove+0x12>
 800750c:	4601      	mov	r1, r0
 800750e:	4402      	add	r2, r0
 8007510:	428a      	cmp	r2, r1
 8007512:	d100      	bne.n	8007516 <memmove+0x2a>
 8007514:	bd10      	pop	{r4, pc}
 8007516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800751a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800751e:	e7f7      	b.n	8007510 <memmove+0x24>

08007520 <_sbrk_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	2300      	movs	r3, #0
 8007524:	4d05      	ldr	r5, [pc, #20]	@ (800753c <_sbrk_r+0x1c>)
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	602b      	str	r3, [r5, #0]
 800752c:	f7f9 fdb6 	bl	800109c <_sbrk>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_sbrk_r+0x1a>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b103      	cbz	r3, 800753a <_sbrk_r+0x1a>
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	2000174c 	.word	0x2000174c

08007540 <memchr>:
 8007540:	4603      	mov	r3, r0
 8007542:	b510      	push	{r4, lr}
 8007544:	b2c9      	uxtb	r1, r1
 8007546:	4402      	add	r2, r0
 8007548:	4293      	cmp	r3, r2
 800754a:	4618      	mov	r0, r3
 800754c:	d101      	bne.n	8007552 <memchr+0x12>
 800754e:	2000      	movs	r0, #0
 8007550:	e003      	b.n	800755a <memchr+0x1a>
 8007552:	7804      	ldrb	r4, [r0, #0]
 8007554:	3301      	adds	r3, #1
 8007556:	428c      	cmp	r4, r1
 8007558:	d1f6      	bne.n	8007548 <memchr+0x8>
 800755a:	bd10      	pop	{r4, pc}

0800755c <_realloc_r>:
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007560:	4607      	mov	r7, r0
 8007562:	4614      	mov	r4, r2
 8007564:	460d      	mov	r5, r1
 8007566:	b921      	cbnz	r1, 8007572 <_realloc_r+0x16>
 8007568:	4611      	mov	r1, r2
 800756a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800756e:	f7ff bc49 	b.w	8006e04 <_malloc_r>
 8007572:	b92a      	cbnz	r2, 8007580 <_realloc_r+0x24>
 8007574:	f7ff fbdc 	bl	8006d30 <_free_r>
 8007578:	4625      	mov	r5, r4
 800757a:	4628      	mov	r0, r5
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007580:	f000 f81a 	bl	80075b8 <_malloc_usable_size_r>
 8007584:	4284      	cmp	r4, r0
 8007586:	4606      	mov	r6, r0
 8007588:	d802      	bhi.n	8007590 <_realloc_r+0x34>
 800758a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800758e:	d8f4      	bhi.n	800757a <_realloc_r+0x1e>
 8007590:	4621      	mov	r1, r4
 8007592:	4638      	mov	r0, r7
 8007594:	f7ff fc36 	bl	8006e04 <_malloc_r>
 8007598:	4680      	mov	r8, r0
 800759a:	b908      	cbnz	r0, 80075a0 <_realloc_r+0x44>
 800759c:	4645      	mov	r5, r8
 800759e:	e7ec      	b.n	800757a <_realloc_r+0x1e>
 80075a0:	42b4      	cmp	r4, r6
 80075a2:	4622      	mov	r2, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	bf28      	it	cs
 80075a8:	4632      	movcs	r2, r6
 80075aa:	f7ff fbb3 	bl	8006d14 <memcpy>
 80075ae:	4629      	mov	r1, r5
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff fbbd 	bl	8006d30 <_free_r>
 80075b6:	e7f1      	b.n	800759c <_realloc_r+0x40>

080075b8 <_malloc_usable_size_r>:
 80075b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075bc:	1f18      	subs	r0, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bfbc      	itt	lt
 80075c2:	580b      	ldrlt	r3, [r1, r0]
 80075c4:	18c0      	addlt	r0, r0, r3
 80075c6:	4770      	bx	lr

080075c8 <_init>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	bf00      	nop
 80075cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ce:	bc08      	pop	{r3}
 80075d0:	469e      	mov	lr, r3
 80075d2:	4770      	bx	lr

080075d4 <_fini>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	bf00      	nop
 80075d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075da:	bc08      	pop	{r3}
 80075dc:	469e      	mov	lr, r3
 80075de:	4770      	bx	lr
