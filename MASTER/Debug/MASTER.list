
MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  08006df0  08006df0  00007df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c0c  08007c0c  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007c0c  08007c0c  00009070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007c0c  08007c0c  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c0c  08007c0c  00008c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c10  08007c10  00008c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007c14  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001704  20000070  08007c84  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  08007c84  00009774  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136b9  00000000  00000000  00009099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317c  00000000  00000000  0001c752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0001f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e83  00000000  00000000  00020b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a123  00000000  00000000  00021a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015309  00000000  00000000  0003bb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009566c  00000000  00000000  00050e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e649b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  000e64e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eb814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dd8 	.word	0x08006dd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006dd8 	.word	0x08006dd8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000008c 	.word	0x2000008c
 800017c:	2000012c 	.word	0x2000012c

08000180 <HAL_CAN_RxFifo1MsgPendingCallback>:
void Task_Display (void *argument);
void Task_ReadPotentiometer (void *argument);

int lastDataRx;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000188:	2300      	movs	r3, #0
 800018a:	60fb      	str	r3, [r7, #12]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800018c:	4b14      	ldr	r3, [pc, #80]	@ (80001e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 800018e:	4a15      	ldr	r2, [pc, #84]	@ (80001e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000190:	2101      	movs	r1, #1
 8000192:	6878      	ldr	r0, [r7, #4]
 8000194:	f001 fadd 	bl	8001752 <HAL_CAN_GetRxMessage>
	if(lastDataRx != RxData[7]){
 8000198:	4b11      	ldr	r3, [pc, #68]	@ (80001e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 800019a:	79db      	ldrb	r3, [r3, #7]
 800019c:	461a      	mov	r2, r3
 800019e:	4b12      	ldr	r3, [pc, #72]	@ (80001e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d017      	beq.n	80001d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		lastDataRx = RxData[7];
 80001a6:	4b0e      	ldr	r3, [pc, #56]	@ (80001e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 80001a8:	79db      	ldrb	r3, [r3, #7]
 80001aa:	461a      	mov	r2, r3
 80001ac:	4b0e      	ldr	r3, [pc, #56]	@ (80001e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80001ae:	601a      	str	r2, [r3, #0]
		xQueueSendFromISR(ControlSignalQueue, &lastDataRx, &xHigherPriorityTaskWoken);
 80001b0:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80001b2:	6818      	ldr	r0, [r3, #0]
 80001b4:	f107 020c 	add.w	r2, r7, #12
 80001b8:	2300      	movs	r3, #0
 80001ba:	490b      	ldr	r1, [pc, #44]	@ (80001e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80001bc:	f004 f938 	bl	8004430 <xQueueGenericSendFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d007      	beq.n	80001d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
 80001c6:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80001c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	f3bf 8f4f 	dsb	sy
 80001d2:	f3bf 8f6f 	isb	sy
	}
//	signal_feedback = RxData[7];
}
 80001d6:	bf00      	nop
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000438 	.word	0x20000438
 80001e4:	2000041c 	.word	0x2000041c
 80001e8:	2000047c 	.word	0x2000047c
 80001ec:	20000468 	.word	0x20000468
 80001f0:	e000ed04 	.word	0xe000ed04

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 ffa1 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f8cb 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 f9c5 	bl	8000590 <MX_GPIO_Init>
  MX_CAN_Init();
 8000206:	f000 f90d 	bl	8000424 <MX_CAN_Init>
  MX_I2C1_Init();
 800020a:	f000 f941 	bl	8000490 <MX_I2C1_Init>
  MX_TIM2_Init();
 800020e:	f000 f96d 	bl	80004ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Potentiometer | encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000212:	213c      	movs	r1, #60	@ 0x3c
 8000214:	4848      	ldr	r0, [pc, #288]	@ (8000338 <main+0x144>)
 8000216:	f003 fbbf 	bl	8003998 <HAL_TIM_Encoder_Start>

  // CAN
  HAL_CAN_Start(&hcan);
 800021a:	4848      	ldr	r0, [pc, #288]	@ (800033c <main+0x148>)
 800021c:	f001 f986 	bl	800152c <HAL_CAN_Start>
  TxHeader.DLC = 8;  // data length
 8000220:	4b47      	ldr	r3, [pc, #284]	@ (8000340 <main+0x14c>)
 8000222:	2208      	movs	r2, #8
 8000224:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000226:	4b46      	ldr	r3, [pc, #280]	@ (8000340 <main+0x14c>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800022c:	4b44      	ldr	r3, [pc, #272]	@ (8000340 <main+0x14c>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x6A5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 8000232:	4b43      	ldr	r3, [pc, #268]	@ (8000340 <main+0x14c>)
 8000234:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 8000238:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800023a:	4b42      	ldr	r3, [pc, #264]	@ (8000344 <main+0x150>)
 800023c:	2201      	movs	r2, #1
 800023e:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000240:	4b40      	ldr	r3, [pc, #256]	@ (8000344 <main+0x150>)
 8000242:	2201      	movs	r2, #1
 8000244:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000246:	4b3f      	ldr	r3, [pc, #252]	@ (8000344 <main+0x150>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6F5<<5;
 800024c:	4b3d      	ldr	r3, [pc, #244]	@ (8000344 <main+0x150>)
 800024e:	f64d 62a0 	movw	r2, #56992	@ 0xdea0
 8000252:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000254:	4b3b      	ldr	r3, [pc, #236]	@ (8000344 <main+0x150>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 800025a:	4b3a      	ldr	r3, [pc, #232]	@ (8000344 <main+0x150>)
 800025c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000260:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000262:	4b38      	ldr	r3, [pc, #224]	@ (8000344 <main+0x150>)
 8000264:	2200      	movs	r2, #0
 8000266:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000268:	4b36      	ldr	r3, [pc, #216]	@ (8000344 <main+0x150>)
 800026a:	2201      	movs	r2, #1
 800026c:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800026e:	4935      	ldr	r1, [pc, #212]	@ (8000344 <main+0x150>)
 8000270:	4832      	ldr	r0, [pc, #200]	@ (800033c <main+0x148>)
 8000272:	f001 f892 	bl	800139a <HAL_CAN_ConfigFilter>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000276:	2110      	movs	r1, #16
 8000278:	4830      	ldr	r0, [pc, #192]	@ (800033c <main+0x148>)
 800027a:	f001 fb8b 	bl	8001994 <HAL_CAN_ActivateNotification>

  // Init Oled
  SSD1306_Init();
 800027e:	f000 fa89 	bl	8000794 <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 8000282:	2100      	movs	r1, #0
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fbed 	bl	8000a64 <SSD1306_GotoXY>
  SSD1306_Puts ("Current:", &Font_11x18, 1);
 800028a:	2201      	movs	r2, #1
 800028c:	492e      	ldr	r1, [pc, #184]	@ (8000348 <main+0x154>)
 800028e:	482f      	ldr	r0, [pc, #188]	@ (800034c <main+0x158>)
 8000290:	f000 fc7c 	bl	8000b8c <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 8000294:	211e      	movs	r1, #30
 8000296:	2000      	movs	r0, #0
 8000298:	f000 fbe4 	bl	8000a64 <SSD1306_GotoXY>
  SSD1306_Puts ("Desired:", &Font_11x18, 1);
 800029c:	2201      	movs	r2, #1
 800029e:	492a      	ldr	r1, [pc, #168]	@ (8000348 <main+0x154>)
 80002a0:	482b      	ldr	r0, [pc, #172]	@ (8000350 <main+0x15c>)
 80002a2:	f000 fc73 	bl	8000b8c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80002a6:	f000 fb39 	bl	800091c <SSD1306_UpdateScreen>

  ADCMutex = xSemaphoreCreateMutex();
 80002aa:	2001      	movs	r0, #1
 80002ac:	f003 ffa6 	bl	80041fc <xQueueCreateMutex>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4a28      	ldr	r2, [pc, #160]	@ (8000354 <main+0x160>)
 80002b4:	6013      	str	r3, [r2, #0]
  ControlSignalQueue = xQueueCreate(5, sizeof (int));
 80002b6:	2200      	movs	r2, #0
 80002b8:	2104      	movs	r1, #4
 80002ba:	2005      	movs	r0, #5
 80002bc:	f003 ff2a 	bl	8004114 <xQueueGenericCreate>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <main+0x164>)
 80002c4:	6013      	str	r3, [r2, #0]

  xTaskCreate(Task_SendMessage, "SendMessage", 128, NULL, 3, &SendMessage_Handler);
 80002c6:	4b25      	ldr	r3, [pc, #148]	@ (800035c <main+0x168>)
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2303      	movs	r3, #3
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2300      	movs	r3, #0
 80002d0:	2280      	movs	r2, #128	@ 0x80
 80002d2:	4923      	ldr	r1, [pc, #140]	@ (8000360 <main+0x16c>)
 80002d4:	4823      	ldr	r0, [pc, #140]	@ (8000364 <main+0x170>)
 80002d6:	f004 fcc2 	bl	8004c5e <xTaskCreate>
  xTaskCreate(Task_ReadPotentiometer, "ReadPotentiometer", 128, NULL, 3, &ReadPotentiometer_Handler);
 80002da:	4b23      	ldr	r3, [pc, #140]	@ (8000368 <main+0x174>)
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2303      	movs	r3, #3
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	2300      	movs	r3, #0
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	4921      	ldr	r1, [pc, #132]	@ (800036c <main+0x178>)
 80002e8:	4821      	ldr	r0, [pc, #132]	@ (8000370 <main+0x17c>)
 80002ea:	f004 fcb8 	bl	8004c5e <xTaskCreate>
  xTaskCreate(Task_Display, "Display", 128, NULL, 2, &Display_Handler);
 80002ee:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <main+0x180>)
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2302      	movs	r3, #2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	2300      	movs	r3, #0
 80002f8:	2280      	movs	r2, #128	@ 0x80
 80002fa:	491f      	ldr	r1, [pc, #124]	@ (8000378 <main+0x184>)
 80002fc:	481f      	ldr	r0, [pc, #124]	@ (800037c <main+0x188>)
 80002fe:	f004 fcae 	bl	8004c5e <xTaskCreate>
  BaseType_t result = xTaskCreate(Task_ReceiveMessage, "ReceiveMessage", 128, NULL, 1, &ReceiveMessage_Handler);
 8000302:	4b1f      	ldr	r3, [pc, #124]	@ (8000380 <main+0x18c>)
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2301      	movs	r3, #1
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2300      	movs	r3, #0
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	491d      	ldr	r1, [pc, #116]	@ (8000384 <main+0x190>)
 8000310:	481d      	ldr	r0, [pc, #116]	@ (8000388 <main+0x194>)
 8000312:	f004 fca4 	bl	8004c5e <xTaskCreate>
 8000316:	6078      	str	r0, [r7, #4]

  if (result != pdPASS) {
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d002      	beq.n	8000324 <main+0x130>
      debug = 99999; // Task failed to create
 800031e:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <main+0x198>)
 8000320:	4a1b      	ldr	r2, [pc, #108]	@ (8000390 <main+0x19c>)
 8000322:	601a      	str	r2, [r3, #0]
  }
  freeHeap = xPortGetFreeHeapSize();
 8000324:	f005 ff86 	bl	8006234 <xPortGetFreeHeapSize>
 8000328:	4603      	mov	r3, r0
 800032a:	4a1a      	ldr	r2, [pc, #104]	@ (8000394 <main+0x1a0>)
 800032c:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 800032e:	f004 fe1b 	bl	8004f68 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000332:	bf00      	nop
 8000334:	e7fd      	b.n	8000332 <main+0x13e>
 8000336:	bf00      	nop
 8000338:	200003a8 	.word	0x200003a8
 800033c:	2000032c 	.word	0x2000032c
 8000340:	20000440 	.word	0x20000440
 8000344:	200003f4 	.word	0x200003f4
 8000348:	20000000 	.word	0x20000000
 800034c:	08006df0 	.word	0x08006df0
 8000350:	08006dfc 	.word	0x08006dfc
 8000354:	20000464 	.word	0x20000464
 8000358:	20000468 	.word	0x20000468
 800035c:	2000046c 	.word	0x2000046c
 8000360:	08006e08 	.word	0x08006e08
 8000364:	08000635 	.word	0x08000635
 8000368:	20000478 	.word	0x20000478
 800036c:	08006e14 	.word	0x08006e14
 8000370:	080005ed 	.word	0x080005ed
 8000374:	20000474 	.word	0x20000474
 8000378:	08006e28 	.word	0x08006e28
 800037c:	08000691 	.word	0x08000691
 8000380:	20000470 	.word	0x20000470
 8000384:	08006e30 	.word	0x08006e30
 8000388:	08000731 	.word	0x08000731
 800038c:	2000045c 	.word	0x2000045c
 8000390:	0001869f 	.word	0x0001869f
 8000394:	20000460 	.word	0x20000460

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b090      	sub	sp, #64	@ 0x40
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2228      	movs	r2, #40	@ 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f006 f82a 	bl	8006400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ba:	2301      	movs	r3, #1
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	2301      	movs	r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	2302      	movs	r3, #2
 80003ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fd4d 	bl	8002e80 <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003ec:	f000 f9cc 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f4:	2302      	movs	r3, #2
 80003f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2102      	movs	r1, #2
 800040a:	4618      	mov	r0, r3
 800040c:	f002 ffba 	bl	8003384 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000416:	f000 f9b7 	bl	8000788 <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3740      	adds	r7, #64	@ 0x40
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000428:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_CAN_Init+0x64>)
 800042a:	4a18      	ldr	r2, [pc, #96]	@ (800048c <MX_CAN_Init+0x68>)
 800042c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 800042e:	4b16      	ldr	r3, [pc, #88]	@ (8000488 <MX_CAN_Init+0x64>)
 8000430:	2248      	movs	r2, #72	@ 0x48
 8000432:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000434:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <MX_CAN_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800043a:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <MX_CAN_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000440:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <MX_CAN_Init+0x64>)
 8000442:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000446:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000448:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <MX_CAN_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <MX_CAN_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <MX_CAN_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800045a:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <MX_CAN_Init+0x64>)
 800045c:	2200      	movs	r2, #0
 800045e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000460:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <MX_CAN_Init+0x64>)
 8000462:	2200      	movs	r2, #0
 8000464:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000466:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <MX_CAN_Init+0x64>)
 8000468:	2200      	movs	r2, #0
 800046a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_CAN_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_CAN_Init+0x64>)
 8000474:	f000 fe96 	bl	80011a4 <HAL_CAN_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800047e:	f000 f983 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	2000032c 	.word	0x2000032c
 800048c:	40006400 	.word	0x40006400

08000490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000494:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <MX_I2C1_Init+0x50>)
 8000496:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <MX_I2C1_Init+0x54>)
 8000498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800049a:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <MX_I2C1_Init+0x50>)
 800049c:	4a12      	ldr	r2, [pc, #72]	@ (80004e8 <MX_I2C1_Init+0x58>)
 800049e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_I2C1_Init+0x50>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <MX_I2C1_Init+0x50>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_I2C1_Init+0x50>)
 80004ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <MX_I2C1_Init+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004ba:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_I2C1_Init+0x50>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c0:	4b07      	ldr	r3, [pc, #28]	@ (80004e0 <MX_I2C1_Init+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_I2C1_Init+0x50>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004cc:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <MX_I2C1_Init+0x50>)
 80004ce:	f001 ff0d 	bl	80022ec <HAL_I2C_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004d8:	f000 f956 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000354 	.word	0x20000354
 80004e4:	40005400 	.word	0x40005400
 80004e8:	00061a80 	.word	0x00061a80

080004ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08c      	sub	sp, #48	@ 0x30
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	2224      	movs	r2, #36	@ 0x24
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f005 ff80 	bl	8006400 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000508:	4b20      	ldr	r3, [pc, #128]	@ (800058c <MX_TIM2_Init+0xa0>)
 800050a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800050e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000510:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <MX_TIM2_Init+0xa0>)
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <MX_TIM2_Init+0xa0>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 180;
 800051c:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <MX_TIM2_Init+0xa0>)
 800051e:	22b4      	movs	r2, #180	@ 0xb4
 8000520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_TIM2_Init+0xa0>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000528:	4b18      	ldr	r3, [pc, #96]	@ (800058c <MX_TIM2_Init+0xa0>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800052e:	2303      	movs	r3, #3
 8000530:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000542:	2300      	movs	r3, #0
 8000544:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000546:	2301      	movs	r3, #1
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	4619      	mov	r1, r3
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <MX_TIM2_Init+0xa0>)
 800055a:	f003 f97b 	bl	8003854 <HAL_TIM_Encoder_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000564:	f000 f910 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_TIM2_Init+0xa0>)
 8000576:	f003 fc43 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000580:	f000 f902 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	3730      	adds	r7, #48	@ 0x30
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200003a8 	.word	0x200003a8

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_GPIO_Init+0x58>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a13      	ldr	r2, [pc, #76]	@ (80005e8 <MX_GPIO_Init+0x58>)
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0320 	and.w	r3, r3, #32
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <MX_GPIO_Init+0x58>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <Task_ReadPotentiometer>:

/* USER CODE BEGIN 4 */

void Task_ReadPotentiometer(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Task_ReadPotentiometer+0x3c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f897 	bl	8004730 <xQueueSemaphoreTake>
		readValue = __HAL_TIM_GET_COUNTER(&htim2);
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <Task_ReadPotentiometer+0x40>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <Task_ReadPotentiometer+0x44>)
 800060c:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(ADCMutex);
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <Task_ReadPotentiometer+0x3c>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	f003 fe08 	bl	800422c <xQueueGenericSend>
		vTaskDelay(200);
 800061c:	20c8      	movs	r0, #200	@ 0xc8
 800061e:	f004 fc6d 	bl	8004efc <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000622:	bf00      	nop
 8000624:	e7e6      	b.n	80005f4 <Task_ReadPotentiometer+0x8>
 8000626:	bf00      	nop
 8000628:	20000464 	.word	0x20000464
 800062c:	200003a8 	.word	0x200003a8
 8000630:	200003f0 	.word	0x200003f0

08000634 <Task_SendMessage>:
	}
}

void Task_SendMessage(void *argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 800063c:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <Task_SendMessage+0x44>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000644:	4618      	mov	r0, r3
 8000646:	f004 f873 	bl	8004730 <xQueueSemaphoreTake>
		TxData[7] = readValue;
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <Task_SendMessage+0x48>)
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <Task_SendMessage+0x4c>)
 8000650:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <Task_SendMessage+0x50>)
 8000654:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <Task_SendMessage+0x4c>)
 8000656:	490c      	ldr	r1, [pc, #48]	@ (8000688 <Task_SendMessage+0x54>)
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <Task_SendMessage+0x58>)
 800065a:	f000 ffab 	bl	80015b4 <HAL_CAN_AddTxMessage>
		xSemaphoreGive(ADCMutex);
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <Task_SendMessage+0x44>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	f003 fde0 	bl	800422c <xQueueGenericSend>
		vTaskDelay(200);
 800066c:	20c8      	movs	r0, #200	@ 0xc8
 800066e:	f004 fc45 	bl	8004efc <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000672:	bf00      	nop
 8000674:	e7e2      	b.n	800063c <Task_SendMessage+0x8>
 8000676:	bf00      	nop
 8000678:	20000464 	.word	0x20000464
 800067c:	200003f0 	.word	0x200003f0
 8000680:	20000008 	.word	0x20000008
 8000684:	20000458 	.word	0x20000458
 8000688:	20000440 	.word	0x20000440
 800068c:	2000032c 	.word	0x2000032c

08000690 <Task_Display>:
	}
}


void Task_Display(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	char snum[5];
	char snum2[5];
	int current_angle;
	int desire_angle;
	while(1){
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <Task_Display+0x8c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 f845 	bl	8004730 <xQueueSemaphoreTake>
		desire_angle = readValue/2;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <Task_Display+0x90>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	61fb      	str	r3, [r7, #28]
		current_angle = signal_feedback;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <Task_Display+0x94>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	61bb      	str	r3, [r7, #24]
		sprintf(snum, "%03d", current_angle);
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	69ba      	ldr	r2, [r7, #24]
 80006bc:	491a      	ldr	r1, [pc, #104]	@ (8000728 <Task_Display+0x98>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fe7c 	bl	80063bc <siprintf>
		sprintf(snum2, "%03d", desire_angle);
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	69fa      	ldr	r2, [r7, #28]
 80006ca:	4917      	ldr	r1, [pc, #92]	@ (8000728 <Task_Display+0x98>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fe75 	bl	80063bc <siprintf>
		SSD1306_GotoXY (90,0);
 80006d2:	2100      	movs	r1, #0
 80006d4:	205a      	movs	r0, #90	@ 0x5a
 80006d6:	f000 f9c5 	bl	8000a64 <SSD1306_GotoXY>
		SSD1306_Puts (snum, &Font_11x18, 1);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	2201      	movs	r2, #1
 80006e0:	4912      	ldr	r1, [pc, #72]	@ (800072c <Task_Display+0x9c>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa52 	bl	8000b8c <SSD1306_Puts>
		SSD1306_GotoXY (90, 30);
 80006e8:	211e      	movs	r1, #30
 80006ea:	205a      	movs	r0, #90	@ 0x5a
 80006ec:	f000 f9ba 	bl	8000a64 <SSD1306_GotoXY>
		SSD1306_Puts (snum2, &Font_11x18, 1);
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2201      	movs	r2, #1
 80006f6:	490d      	ldr	r1, [pc, #52]	@ (800072c <Task_Display+0x9c>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fa47 	bl	8000b8c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80006fe:	f000 f90d 	bl	800091c <SSD1306_UpdateScreen>
		xSemaphoreGive(ADCMutex);
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <Task_Display+0x8c>)
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	f003 fd8e 	bl	800422c <xQueueGenericSend>
		vTaskDelay(500);
 8000710:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000714:	f004 fbf2 	bl	8004efc <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000718:	bf00      	nop
 800071a:	e7bd      	b.n	8000698 <Task_Display+0x8>
 800071c:	20000464 	.word	0x20000464
 8000720:	200003f0 	.word	0x200003f0
 8000724:	200003f1 	.word	0x200003f1
 8000728:	08006e40 	.word	0x08006e40
 800072c:	20000000 	.word	0x20000000

08000730 <Task_ReceiveMessage>:
	}
}

void Task_ReceiveMessage(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	int received;
	while(1){
		if (xQueueReceive(ControlSignalQueue, &received, portMAX_DELAY) == pdTRUE){
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <Task_ReceiveMessage+0x2c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f107 010c 	add.w	r1, r7, #12
 8000740:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000744:	4618      	mov	r0, r3
 8000746:	f003 ff11 	bl	800456c <xQueueReceive>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d1f3      	bne.n	8000738 <Task_ReceiveMessage+0x8>
			signal_feedback = received;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b02      	ldr	r3, [pc, #8]	@ (8000760 <Task_ReceiveMessage+0x30>)
 8000756:	701a      	strb	r2, [r3, #0]
		if (xQueueReceive(ControlSignalQueue, &received, portMAX_DELAY) == pdTRUE){
 8000758:	e7ee      	b.n	8000738 <Task_ReceiveMessage+0x8>
 800075a:	bf00      	nop
 800075c:	20000468 	.word	0x20000468
 8000760:	200003f1 	.word	0x200003f1

08000764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d101      	bne.n	800077a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000776:	f000 fcf9 	bl	800116c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40012c00 	.word	0x40012c00

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800079a:	f000 fa1d 	bl	8000bd8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800079e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80007a2:	2201      	movs	r2, #1
 80007a4:	2178      	movs	r1, #120	@ 0x78
 80007a6:	485b      	ldr	r0, [pc, #364]	@ (8000914 <SSD1306_Init+0x180>)
 80007a8:	f001 ffe2 	bl	8002770 <HAL_I2C_IsDeviceReady>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e0a9      	b.n	800090a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80007b6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80007ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007bc:	e002      	b.n	80007c4 <SSD1306_Init+0x30>
		p--;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f9      	bne.n	80007be <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80007ca:	22ae      	movs	r2, #174	@ 0xae
 80007cc:	2100      	movs	r1, #0
 80007ce:	2078      	movs	r0, #120	@ 0x78
 80007d0:	f000 fa7c 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80007d4:	2220      	movs	r2, #32
 80007d6:	2100      	movs	r1, #0
 80007d8:	2078      	movs	r0, #120	@ 0x78
 80007da:	f000 fa77 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80007de:	2210      	movs	r2, #16
 80007e0:	2100      	movs	r1, #0
 80007e2:	2078      	movs	r0, #120	@ 0x78
 80007e4:	f000 fa72 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007e8:	22b0      	movs	r2, #176	@ 0xb0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2078      	movs	r0, #120	@ 0x78
 80007ee:	f000 fa6d 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80007f2:	22c8      	movs	r2, #200	@ 0xc8
 80007f4:	2100      	movs	r1, #0
 80007f6:	2078      	movs	r0, #120	@ 0x78
 80007f8:	f000 fa68 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2078      	movs	r0, #120	@ 0x78
 8000802:	f000 fa63 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000806:	2210      	movs	r2, #16
 8000808:	2100      	movs	r1, #0
 800080a:	2078      	movs	r0, #120	@ 0x78
 800080c:	f000 fa5e 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000810:	2240      	movs	r2, #64	@ 0x40
 8000812:	2100      	movs	r1, #0
 8000814:	2078      	movs	r0, #120	@ 0x78
 8000816:	f000 fa59 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800081a:	2281      	movs	r2, #129	@ 0x81
 800081c:	2100      	movs	r1, #0
 800081e:	2078      	movs	r0, #120	@ 0x78
 8000820:	f000 fa54 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000824:	22ff      	movs	r2, #255	@ 0xff
 8000826:	2100      	movs	r1, #0
 8000828:	2078      	movs	r0, #120	@ 0x78
 800082a:	f000 fa4f 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800082e:	22a1      	movs	r2, #161	@ 0xa1
 8000830:	2100      	movs	r1, #0
 8000832:	2078      	movs	r0, #120	@ 0x78
 8000834:	f000 fa4a 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000838:	22a6      	movs	r2, #166	@ 0xa6
 800083a:	2100      	movs	r1, #0
 800083c:	2078      	movs	r0, #120	@ 0x78
 800083e:	f000 fa45 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000842:	22a8      	movs	r2, #168	@ 0xa8
 8000844:	2100      	movs	r1, #0
 8000846:	2078      	movs	r0, #120	@ 0x78
 8000848:	f000 fa40 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800084c:	223f      	movs	r2, #63	@ 0x3f
 800084e:	2100      	movs	r1, #0
 8000850:	2078      	movs	r0, #120	@ 0x78
 8000852:	f000 fa3b 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000856:	22a4      	movs	r2, #164	@ 0xa4
 8000858:	2100      	movs	r1, #0
 800085a:	2078      	movs	r0, #120	@ 0x78
 800085c:	f000 fa36 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000860:	22d3      	movs	r2, #211	@ 0xd3
 8000862:	2100      	movs	r1, #0
 8000864:	2078      	movs	r0, #120	@ 0x78
 8000866:	f000 fa31 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2078      	movs	r0, #120	@ 0x78
 8000870:	f000 fa2c 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000874:	22d5      	movs	r2, #213	@ 0xd5
 8000876:	2100      	movs	r1, #0
 8000878:	2078      	movs	r0, #120	@ 0x78
 800087a:	f000 fa27 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800087e:	22f0      	movs	r2, #240	@ 0xf0
 8000880:	2100      	movs	r1, #0
 8000882:	2078      	movs	r0, #120	@ 0x78
 8000884:	f000 fa22 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000888:	22d9      	movs	r2, #217	@ 0xd9
 800088a:	2100      	movs	r1, #0
 800088c:	2078      	movs	r0, #120	@ 0x78
 800088e:	f000 fa1d 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000892:	2222      	movs	r2, #34	@ 0x22
 8000894:	2100      	movs	r1, #0
 8000896:	2078      	movs	r0, #120	@ 0x78
 8000898:	f000 fa18 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800089c:	22da      	movs	r2, #218	@ 0xda
 800089e:	2100      	movs	r1, #0
 80008a0:	2078      	movs	r0, #120	@ 0x78
 80008a2:	f000 fa13 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80008a6:	2212      	movs	r2, #18
 80008a8:	2100      	movs	r1, #0
 80008aa:	2078      	movs	r0, #120	@ 0x78
 80008ac:	f000 fa0e 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80008b0:	22db      	movs	r2, #219	@ 0xdb
 80008b2:	2100      	movs	r1, #0
 80008b4:	2078      	movs	r0, #120	@ 0x78
 80008b6:	f000 fa09 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	2078      	movs	r0, #120	@ 0x78
 80008c0:	f000 fa04 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80008c4:	228d      	movs	r2, #141	@ 0x8d
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	@ 0x78
 80008ca:	f000 f9ff 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80008ce:	2214      	movs	r2, #20
 80008d0:	2100      	movs	r1, #0
 80008d2:	2078      	movs	r0, #120	@ 0x78
 80008d4:	f000 f9fa 	bl	8000ccc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80008d8:	22af      	movs	r2, #175	@ 0xaf
 80008da:	2100      	movs	r1, #0
 80008dc:	2078      	movs	r0, #120	@ 0x78
 80008de:	f000 f9f5 	bl	8000ccc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80008e2:	222e      	movs	r2, #46	@ 0x2e
 80008e4:	2100      	movs	r1, #0
 80008e6:	2078      	movs	r0, #120	@ 0x78
 80008e8:	f000 f9f0 	bl	8000ccc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 f843 	bl	8000978 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80008f2:	f000 f813 	bl	800091c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <SSD1306_Init+0x184>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <SSD1306_Init+0x184>)
 80008fe:	2200      	movs	r2, #0
 8000900:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <SSD1306_Init+0x184>)
 8000904:	2201      	movs	r2, #1
 8000906:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000354 	.word	0x20000354
 8000918:	20000880 	.word	0x20000880

0800091c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000922:	2300      	movs	r3, #0
 8000924:	71fb      	strb	r3, [r7, #7]
 8000926:	e01d      	b.n	8000964 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	3b50      	subs	r3, #80	@ 0x50
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	2078      	movs	r0, #120	@ 0x78
 8000934:	f000 f9ca 	bl	8000ccc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2078      	movs	r0, #120	@ 0x78
 800093e:	f000 f9c5 	bl	8000ccc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000942:	2210      	movs	r2, #16
 8000944:	2100      	movs	r1, #0
 8000946:	2078      	movs	r0, #120	@ 0x78
 8000948:	f000 f9c0 	bl	8000ccc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	01db      	lsls	r3, r3, #7
 8000950:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <SSD1306_UpdateScreen+0x58>)
 8000952:	441a      	add	r2, r3
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	2140      	movs	r1, #64	@ 0x40
 8000958:	2078      	movs	r0, #120	@ 0x78
 800095a:	f000 f951 	bl	8000c00 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3301      	adds	r3, #1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b07      	cmp	r3, #7
 8000968:	d9de      	bls.n	8000928 <SSD1306_UpdateScreen+0xc>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000480 	.word	0x20000480

08000978 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <SSD1306_Fill+0x14>
 8000988:	2300      	movs	r3, #0
 800098a:	e000      	b.n	800098e <SSD1306_Fill+0x16>
 800098c:	23ff      	movs	r3, #255	@ 0xff
 800098e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000992:	4619      	mov	r1, r3
 8000994:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <SSD1306_Fill+0x2c>)
 8000996:	f005 fd33 	bl	8006400 <memset>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000480 	.word	0x20000480

080009a8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	460b      	mov	r3, r1
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	70fb      	strb	r3, [r7, #3]
	if (
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80009be:	d848      	bhi.n	8000a52 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80009c4:	d845      	bhi.n	8000a52 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80009c6:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <SSD1306_DrawPixel+0xb4>)
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d006      	beq.n	80009dc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf0c      	ite	eq
 80009d4:	2301      	moveq	r3, #1
 80009d6:	2300      	movne	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d11a      	bne.n	8000a18 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009e2:	88fa      	ldrh	r2, [r7, #6]
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	b298      	uxth	r0, r3
 80009ea:	4603      	mov	r3, r0
 80009ec:	01db      	lsls	r3, r3, #7
 80009ee:	4413      	add	r3, r2
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <SSD1306_DrawPixel+0xb8>)
 80009f2:	5cd3      	ldrb	r3, [r2, r3]
 80009f4:	b25a      	sxtb	r2, r3
 80009f6:	88bb      	ldrh	r3, [r7, #4]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	2101      	movs	r1, #1
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b259      	sxtb	r1, r3
 8000a08:	88fa      	ldrh	r2, [r7, #6]
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	01db      	lsls	r3, r3, #7
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2c9      	uxtb	r1, r1
 8000a12:	4a13      	ldr	r2, [pc, #76]	@ (8000a60 <SSD1306_DrawPixel+0xb8>)
 8000a14:	54d1      	strb	r1, [r2, r3]
 8000a16:	e01d      	b.n	8000a54 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a18:	88fa      	ldrh	r2, [r7, #6]
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	b298      	uxth	r0, r3
 8000a20:	4603      	mov	r3, r0
 8000a22:	01db      	lsls	r3, r3, #7
 8000a24:	4413      	add	r3, r2
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <SSD1306_DrawPixel+0xb8>)
 8000a28:	5cd3      	ldrb	r3, [r2, r3]
 8000a2a:	b25a      	sxtb	r2, r3
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	2101      	movs	r1, #1
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	4013      	ands	r3, r2
 8000a40:	b259      	sxtb	r1, r3
 8000a42:	88fa      	ldrh	r2, [r7, #6]
 8000a44:	4603      	mov	r3, r0
 8000a46:	01db      	lsls	r3, r3, #7
 8000a48:	4413      	add	r3, r2
 8000a4a:	b2c9      	uxtb	r1, r1
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <SSD1306_DrawPixel+0xb8>)
 8000a4e:	54d1      	strb	r1, [r2, r3]
 8000a50:	e000      	b.n	8000a54 <SSD1306_DrawPixel+0xac>
		return;
 8000a52:	bf00      	nop
	}
}
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000880 	.word	0x20000880
 8000a60:	20000480 	.word	0x20000480

08000a64 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	80fb      	strh	r3, [r7, #6]
 8000a70:	4613      	mov	r3, r2
 8000a72:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000a74:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <SSD1306_GotoXY+0x28>)
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <SSD1306_GotoXY+0x28>)
 8000a7c:	88bb      	ldrh	r3, [r7, #4]
 8000a7e:	8053      	strh	r3, [r2, #2]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000880 	.word	0x20000880

08000a90 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000aa0:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <SSD1306_Putc+0xf8>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
	if (
 8000aac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aae:	dc07      	bgt.n	8000ac0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ab0:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <SSD1306_Putc+0xf8>)
 8000ab2:	885b      	ldrh	r3, [r3, #2]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	785b      	ldrb	r3, [r3, #1]
 8000aba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000abc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000abe:	dd01      	ble.n	8000ac4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e05d      	b.n	8000b80 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e04b      	b.n	8000b62 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3b20      	subs	r3, #32
 8000ad2:	6839      	ldr	r1, [r7, #0]
 8000ad4:	7849      	ldrb	r1, [r1, #1]
 8000ad6:	fb01 f303 	mul.w	r3, r1, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	440b      	add	r3, r1
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	e030      	b.n	8000b50 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d010      	beq.n	8000b20 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000afe:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <SSD1306_Putc+0xf8>)
 8000b00:	881a      	ldrh	r2, [r3, #0]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4413      	add	r3, r2
 8000b08:	b298      	uxth	r0, r3
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <SSD1306_Putc+0xf8>)
 8000b0c:	885a      	ldrh	r2, [r3, #2]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	79ba      	ldrb	r2, [r7, #6]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f7ff ff45 	bl	80009a8 <SSD1306_DrawPixel>
 8000b1e:	e014      	b.n	8000b4a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b20:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <SSD1306_Putc+0xf8>)
 8000b22:	881a      	ldrh	r2, [r3, #0]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	b298      	uxth	r0, r3
 8000b2c:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <SSD1306_Putc+0xf8>)
 8000b2e:	885a      	ldrh	r2, [r3, #2]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4413      	add	r3, r2
 8000b36:	b299      	uxth	r1, r3
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	f7ff ff2f 	bl	80009a8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d3c8      	bcc.n	8000aee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	461a      	mov	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d3ad      	bcc.n	8000aca <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SSD1306_Putc+0xf8>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <SSD1306_Putc+0xf8>)
 8000b7c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000880 	.word	0x20000880

08000b8c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	4613      	mov	r3, r2
 8000b98:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000b9a:	e012      	b.n	8000bc2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff73 	bl	8000a90 <SSD1306_Putc>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d002      	beq.n	8000bbc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	e008      	b.n	8000bce <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1e8      	bne.n	8000b9c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <ssd1306_I2C_Init+0x24>)
 8000be0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000be2:	e002      	b.n	8000bea <ssd1306_I2C_Init+0x12>
		p--;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f9      	bne.n	8000be4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	0003d090 	.word	0x0003d090

08000c00 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b0c7      	sub	sp, #284	@ 0x11c
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	4604      	mov	r4, r0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000c0e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000c12:	600a      	str	r2, [r1, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c1a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c1e:	4622      	mov	r2, r4
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c26:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c36:	460a      	mov	r2, r1
 8000c38:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000c3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c46:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c54:	e015      	b.n	8000c82 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000c56:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c5a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c5e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000c62:	6812      	ldr	r2, [r2, #0]
 8000c64:	441a      	add	r2, r3
 8000c66:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	7811      	ldrb	r1, [r2, #0]
 8000c6e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c72:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c76:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000c78:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c8c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c90:	8812      	ldrh	r2, [r2, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d8df      	bhi.n	8000c56 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000c96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c9a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ca6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	f107 020c 	add.w	r2, r7, #12
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	9000      	str	r0, [sp, #0]
 8000cb8:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000cba:	f001 fc5b 	bl	8002574 <HAL_I2C_Master_Transmit>
}
 8000cbe:	bf00      	nop
 8000cc0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	20000354 	.word	0x20000354

08000ccc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	71bb      	strb	r3, [r7, #6]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ce2:	797b      	ldrb	r3, [r7, #5]
 8000ce4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	b299      	uxth	r1, r3
 8000cea:	f107 020c 	add.w	r2, r7, #12
 8000cee:	230a      	movs	r3, #10
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <ssd1306_I2C_Write+0x38>)
 8000cf6:	f001 fc3d 	bl	8002574 <HAL_I2C_Master_Transmit>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000354 	.word	0x20000354

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_MspInit+0x68>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <HAL_MspInit+0x68>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_MspInit+0x68>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_MspInit+0x68>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a11      	ldr	r2, [pc, #68]	@ (8000d70 <HAL_MspInit+0x68>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_MspInit+0x68>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	210f      	movs	r1, #15
 8000d42:	f06f 0001 	mvn.w	r0, #1
 8000d46:	f001 f922 	bl	8001f8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_MspInit+0x6c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_MspInit+0x6c>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000

08000d78 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a29      	ldr	r2, [pc, #164]	@ (8000e38 <HAL_CAN_MspInit+0xc0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d14b      	bne.n	8000e30 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d98:	4b28      	ldr	r3, [pc, #160]	@ (8000e3c <HAL_CAN_MspInit+0xc4>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	4a27      	ldr	r2, [pc, #156]	@ (8000e3c <HAL_CAN_MspInit+0xc4>)
 8000d9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000da2:	61d3      	str	r3, [r2, #28]
 8000da4:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <HAL_CAN_MspInit+0xc4>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <HAL_CAN_MspInit+0xc4>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a21      	ldr	r2, [pc, #132]	@ (8000e3c <HAL_CAN_MspInit+0xc4>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <HAL_CAN_MspInit+0xc4>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4818      	ldr	r0, [pc, #96]	@ (8000e40 <HAL_CAN_MspInit+0xc8>)
 8000dde:	f001 f901 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4812      	ldr	r0, [pc, #72]	@ (8000e40 <HAL_CAN_MspInit+0xc8>)
 8000df8:	f001 f8f4 	bl	8001fe4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <HAL_CAN_MspInit+0xcc>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <HAL_CAN_MspInit+0xcc>)
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2105      	movs	r1, #5
 8000e24:	2015      	movs	r0, #21
 8000e26:	f001 f8b2 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e2a:	2015      	movs	r0, #21
 8000e2c:	f001 f8cb 	bl	8001fc6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	@ 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40006400 	.word	0x40006400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	40010000 	.word	0x40010000

08000e48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a15      	ldr	r2, [pc, #84]	@ (8000eb8 <HAL_I2C_MspInit+0x70>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d123      	bne.n	8000eb0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e80:	23c0      	movs	r3, #192	@ 0xc0
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	480b      	ldr	r0, [pc, #44]	@ (8000ec0 <HAL_I2C_MspInit+0x78>)
 8000e94:	f001 f8a6 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea2:	61d3      	str	r3, [r2, #28]
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_I2C_MspInit+0x74>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010c00 	.word	0x40010c00

08000ec4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee2:	d123      	bne.n	8000f2c <HAL_TIM_Encoder_MspInit+0x68>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <HAL_TIM_Encoder_MspInit+0x70>)
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <HAL_TIM_Encoder_MspInit+0x70>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	61d3      	str	r3, [r2, #28]
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_TIM_Encoder_MspInit+0x70>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_TIM_Encoder_MspInit+0x70>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_TIM_Encoder_MspInit+0x70>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_TIM_Encoder_MspInit+0x70>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f14:	2303      	movs	r3, #3
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <HAL_TIM_Encoder_MspInit+0x74>)
 8000f28:	f001 f85c 	bl	8001fe4 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800

08000f3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	@ 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f52:	4b2e      	ldr	r3, [pc, #184]	@ (800100c <HAL_InitTick+0xd0>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a2d      	ldr	r2, [pc, #180]	@ (800100c <HAL_InitTick+0xd0>)
 8000f58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <HAL_InitTick+0xd0>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f6a:	f107 020c 	add.w	r2, r7, #12
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fb75 	bl	8003664 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f7a:	f002 fb5f 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8000f7e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f82:	4a23      	ldr	r2, [pc, #140]	@ (8001010 <HAL_InitTick+0xd4>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	0c9b      	lsrs	r3, r3, #18
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <HAL_InitTick+0xd8>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <HAL_InitTick+0xdc>)
 8000f92:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <HAL_InitTick+0xd8>)
 8000f96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f9a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <HAL_InitTick+0xd8>)
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <HAL_InitTick+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_InitTick+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_InitTick+0xd8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fb4:	4817      	ldr	r0, [pc, #92]	@ (8001014 <HAL_InitTick+0xd8>)
 8000fb6:	f002 fba3 	bl	8003700 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d11b      	bne.n	8001000 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fc8:	4812      	ldr	r0, [pc, #72]	@ (8001014 <HAL_InitTick+0xd8>)
 8000fca:	f002 fbf1 	bl	80037b0 <HAL_TIM_Base_Start_IT>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d111      	bne.n	8001000 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fdc:	2019      	movs	r0, #25
 8000fde:	f000 fff2 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d808      	bhi.n	8000ffa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	2019      	movs	r0, #25
 8000fee:	f000 ffce 	bl	8001f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <HAL_InitTick+0xe0>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e002      	b.n	8001000 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001004:	4618      	mov	r0, r3
 8001006:	3730      	adds	r7, #48	@ 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	431bde83 	.word	0x431bde83
 8001014:	20000888 	.word	0x20000888
 8001018:	40012c00 	.word	0x40012c00
 800101c:	20000014 	.word	0x20000014

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <NMI_Handler+0x4>

08001028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <MemManage_Handler+0x4>

08001038 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <UsageFault_Handler+0x4>

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <CAN1_RX1_IRQHandler+0x10>)
 800105a:	f000 fcc0 	bl	80019de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000032c 	.word	0x2000032c

08001068 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <TIM1_UP_IRQHandler+0x10>)
 800106e:	f002 fd21 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000888 	.word	0x20000888

0800107c <_sbrk>:
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
 80010ac:	f005 fa0e 	bl	80064cc <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20005000 	.word	0x20005000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	200008d0 	.word	0x200008d0
 80010e4:	20001778 	.word	0x20001778

080010e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <Reset_Handler>:
 80010f4:	f7ff fff8 	bl	80010e8 <SystemInit>
 80010f8:	480b      	ldr	r0, [pc, #44]	@ (8001128 <LoopFillZerobss+0xe>)
 80010fa:	490c      	ldr	r1, [pc, #48]	@ (800112c <LoopFillZerobss+0x12>)
 80010fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <LoopFillZerobss+0x16>)
 80010fe:	2300      	movs	r3, #0
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:
 8001102:	58d4      	ldr	r4, [r2, r3]
 8001104:	50c4      	str	r4, [r0, r3]
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:
 8001108:	18c4      	adds	r4, r0, r3
 800110a:	428c      	cmp	r4, r1
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
 800110e:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <LoopFillZerobss+0x1a>)
 8001110:	4c09      	ldr	r4, [pc, #36]	@ (8001138 <LoopFillZerobss+0x1e>)
 8001112:	2300      	movs	r3, #0
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:
 800111a:	42a2      	cmp	r2, r4
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>
 800111e:	f005 f9db 	bl	80064d8 <__libc_init_array>
 8001122:	f7ff f867 	bl	80001f4 <main>
 8001126:	4770      	bx	lr
 8001128:	20000000 	.word	0x20000000
 800112c:	20000070 	.word	0x20000070
 8001130:	08007c14 	.word	0x08007c14
 8001134:	20000070 	.word	0x20000070
 8001138:	20001774 	.word	0x20001774

0800113c <ADC1_2_IRQHandler>:
 800113c:	e7fe      	b.n	800113c <ADC1_2_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_Init+0x28>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <HAL_Init+0x28>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 ff11 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	200f      	movs	r0, #15
 8001158:	f7ff fef0 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fdd4 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40022000 	.word	0x40022000

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_IncTick+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_IncTick+0x20>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_IncTick+0x20>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000018 	.word	0x20000018
 800118c:	200008d4 	.word	0x200008d4

08001190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <HAL_GetTick+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	200008d4 	.word	0x200008d4

080011a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0ed      	b.n	8001392 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fdd8 	bl	8000d78 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011d8:	f7ff ffda 	bl	8001190 <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011de:	e012      	b.n	8001206 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011e0:	f7ff ffd6 	bl	8001190 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b0a      	cmp	r3, #10
 80011ec:	d90b      	bls.n	8001206 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2205      	movs	r2, #5
 80011fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0c5      	b.n	8001392 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0e5      	beq.n	80011e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0202 	bic.w	r2, r2, #2
 8001222:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001224:	f7ff ffb4 	bl	8001190 <HAL_GetTick>
 8001228:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800122a:	e012      	b.n	8001252 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800122c:	f7ff ffb0 	bl	8001190 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b0a      	cmp	r3, #10
 8001238:	d90b      	bls.n	8001252 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2205      	movs	r2, #5
 800124a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e09f      	b.n	8001392 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e5      	bne.n	800122c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7e1b      	ldrb	r3, [r3, #24]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d108      	bne.n	800127a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e007      	b.n	800128a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7e5b      	ldrb	r3, [r3, #25]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d108      	bne.n	80012a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e007      	b.n	80012b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7e9b      	ldrb	r3, [r3, #26]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d108      	bne.n	80012ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0220 	orr.w	r2, r2, #32
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e007      	b.n	80012de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0220 	bic.w	r2, r2, #32
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7edb      	ldrb	r3, [r3, #27]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d108      	bne.n	80012f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0210 	bic.w	r2, r2, #16
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e007      	b.n	8001308 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0210 	orr.w	r2, r2, #16
 8001306:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7f1b      	ldrb	r3, [r3, #28]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0208 	orr.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e007      	b.n	8001332 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0208 	bic.w	r2, r2, #8
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7f5b      	ldrb	r3, [r3, #29]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d108      	bne.n	800134c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0204 	orr.w	r2, r2, #4
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e007      	b.n	800135c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0204 	bic.w	r2, r2, #4
 800135a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	ea42 0103 	orr.w	r1, r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800139a:	b480      	push	{r7}
 800139c:	b087      	sub	sp, #28
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013b2:	7cfb      	ldrb	r3, [r7, #19]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d003      	beq.n	80013c0 <HAL_CAN_ConfigFilter+0x26>
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	f040 80aa 	bne.w	8001514 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	2201      	movs	r2, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d123      	bne.n	8001442 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	401a      	ands	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800141c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3248      	adds	r2, #72	@ 0x48
 8001422:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001436:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001438:	6979      	ldr	r1, [r7, #20]
 800143a:	3348      	adds	r3, #72	@ 0x48
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d122      	bne.n	8001490 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	431a      	orrs	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800146a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3248      	adds	r2, #72	@ 0x48
 8001470:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001484:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001486:	6979      	ldr	r1, [r7, #20]
 8001488:	3348      	adds	r3, #72	@ 0x48
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80014aa:	e007      	b.n	80014bc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80014d6:	e007      	b.n	80014e8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d107      	bne.n	8001500 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001506:	f023 0201 	bic.w	r2, r3, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	e006      	b.n	8001522 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
  }
}
 8001522:	4618      	mov	r0, r3
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d12e      	bne.n	800159e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001558:	f7ff fe1a 	bl	8001190 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800155e:	e012      	b.n	8001586 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001560:	f7ff fe16 	bl	8001190 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d90b      	bls.n	8001586 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2205      	movs	r2, #5
 800157e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e012      	b.n	80015ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1e5      	bne.n	8001560 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e006      	b.n	80015ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
  }
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	@ 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015d2:	7ffb      	ldrb	r3, [r7, #31]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d003      	beq.n	80015e0 <HAL_CAN_AddTxMessage+0x2c>
 80015d8:	7ffb      	ldrb	r3, [r7, #31]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	f040 80ad 	bne.w	800173a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10a      	bne.n	8001600 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8095 	beq.w	800172a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	0e1b      	lsrs	r3, r3, #24
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800160a:	2201      	movs	r2, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10d      	bne.n	8001638 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001626:	68f9      	ldr	r1, [r7, #12]
 8001628:	6809      	ldr	r1, [r1, #0]
 800162a:	431a      	orrs	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3318      	adds	r3, #24
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	440b      	add	r3, r1
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e00f      	b.n	8001658 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001642:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800164c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3318      	adds	r3, #24
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	440b      	add	r3, r1
 8001656:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3318      	adds	r3, #24
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	440b      	add	r3, r1
 8001668:	3304      	adds	r3, #4
 800166a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	7d1b      	ldrb	r3, [r3, #20]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d111      	bne.n	8001698 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3318      	adds	r3, #24
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4413      	add	r3, r2
 8001680:	3304      	adds	r3, #4
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	6811      	ldr	r1, [r2, #0]
 8001688:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3318      	adds	r3, #24
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	440b      	add	r3, r1
 8001694:	3304      	adds	r3, #4
 8001696:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3307      	adds	r3, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	061a      	lsls	r2, r3, #24
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3306      	adds	r3, #6
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	041b      	lsls	r3, r3, #16
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3305      	adds	r3, #5
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	4313      	orrs	r3, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	3204      	adds	r2, #4
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	4610      	mov	r0, r2
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	6811      	ldr	r1, [r2, #0]
 80016c0:	ea43 0200 	orr.w	r2, r3, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3303      	adds	r3, #3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	061a      	lsls	r2, r3, #24
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3302      	adds	r3, #2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3301      	adds	r3, #1
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	4313      	orrs	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	7812      	ldrb	r2, [r2, #0]
 80016f0:	4610      	mov	r0, r2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6811      	ldr	r1, [r2, #0]
 80016f6:	ea43 0200 	orr.w	r2, r3, r0
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	440b      	add	r3, r1
 8001700:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001704:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3318      	adds	r3, #24
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	6811      	ldr	r1, [r2, #0]
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3318      	adds	r3, #24
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	440b      	add	r3, r1
 8001724:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e00e      	b.n	8001748 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e006      	b.n	8001748 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
  }
}
 8001748:	4618      	mov	r0, r3
 800174a:	3724      	adds	r7, #36	@ 0x24
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001752:	b480      	push	{r7}
 8001754:	b087      	sub	sp, #28
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001766:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d003      	beq.n	8001776 <HAL_CAN_GetRxMessage+0x24>
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b02      	cmp	r3, #2
 8001772:	f040 8103 	bne.w	800197c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10e      	bne.n	800179a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0f7      	b.n	800198a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d107      	bne.n	80017b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0e8      	b.n	800198a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	331b      	adds	r3, #27
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0204 	and.w	r2, r3, #4
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10c      	bne.n	80017f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	331b      	adds	r3, #27
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0d5b      	lsrs	r3, r3, #21
 80017e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	331b      	adds	r3, #27
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	331b      	adds	r3, #27
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0202 	and.w	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	331b      	adds	r3, #27
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	3304      	adds	r3, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2208      	movs	r2, #8
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	e00b      	b.n	8001856 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	331b      	adds	r3, #27
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	4413      	add	r3, r2
 800184a:	3304      	adds	r3, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 020f 	and.w	r2, r3, #15
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	331b      	adds	r3, #27
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	b2da      	uxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	331b      	adds	r3, #27
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0a1a      	lsrs	r2, r3, #8
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0c1a      	lsrs	r2, r3, #16
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3302      	adds	r3, #2
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0e1a      	lsrs	r2, r3, #24
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3303      	adds	r3, #3
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3304      	adds	r3, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0a1a      	lsrs	r2, r3, #8
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3305      	adds	r3, #5
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4413      	add	r3, r2
 8001926:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0c1a      	lsrs	r2, r3, #16
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	3306      	adds	r3, #6
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4413      	add	r3, r2
 8001940:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0e1a      	lsrs	r2, r3, #24
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	3307      	adds	r3, #7
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	e007      	b.n	8001978 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0220 	orr.w	r2, r2, #32
 8001976:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e006      	b.n	800198a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d002      	beq.n	80019b2 <HAL_CAN_ActivateNotification+0x1e>
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d109      	bne.n	80019c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6959      	ldr	r1, [r3, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e006      	b.n	80019d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
  }
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b08a      	sub	sp, #40	@ 0x28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d07c      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d023      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2201      	movs	r2, #1
 8001a34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f983 	bl	8001d4c <HAL_CAN_TxMailbox0CompleteCallback>
 8001a46:	e016      	b.n	8001a76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5a:	e00c      	b.n	8001a76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6e:	e002      	b.n	8001a76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f986 	bl	8001d82 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d024      	beq.n	8001aca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f962 	bl	8001d5e <HAL_CAN_TxMailbox1CompleteCallback>
 8001a9a:	e016      	b.n	8001aca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aae:	e00c      	b.n	8001aca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac2:	e002      	b.n	8001aca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f965 	bl	8001d94 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d024      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001adc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f941 	bl	8001d70 <HAL_CAN_TxMailbox2CompleteCallback>
 8001aee:	e016      	b.n	8001b1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b02:	e00c      	b.n	8001b1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b16:	e002      	b.n	8001b1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f944 	bl	8001da6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00c      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2210      	movs	r2, #16
 8001b40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f933 	bl	8001dca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f91b 	bl	8001db8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f90a 	bl	8001ddc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe facd 	bl	8000180 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00b      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2210      	movs	r2, #16
 8001c00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8f3 	bl	8001dee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2208      	movs	r2, #8
 8001c22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f8eb 	bl	8001e00 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d07b      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d072      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d043      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03e      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cac:	2b60      	cmp	r3, #96	@ 0x60
 8001cae:	d02b      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x32a>
 8001cb0:	2b60      	cmp	r3, #96	@ 0x60
 8001cb2:	d82e      	bhi.n	8001d12 <HAL_CAN_IRQHandler+0x334>
 8001cb4:	2b50      	cmp	r3, #80	@ 0x50
 8001cb6:	d022      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x320>
 8001cb8:	2b50      	cmp	r3, #80	@ 0x50
 8001cba:	d82a      	bhi.n	8001d12 <HAL_CAN_IRQHandler+0x334>
 8001cbc:	2b40      	cmp	r3, #64	@ 0x40
 8001cbe:	d019      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x316>
 8001cc0:	2b40      	cmp	r3, #64	@ 0x40
 8001cc2:	d826      	bhi.n	8001d12 <HAL_CAN_IRQHandler+0x334>
 8001cc4:	2b30      	cmp	r3, #48	@ 0x30
 8001cc6:	d010      	beq.n	8001cea <HAL_CAN_IRQHandler+0x30c>
 8001cc8:	2b30      	cmp	r3, #48	@ 0x30
 8001cca:	d822      	bhi.n	8001d12 <HAL_CAN_IRQHandler+0x334>
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d002      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x2f8>
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d005      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cd4:	e01d      	b.n	8001d12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cde:	e019      	b.n	8001d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ce8:	e014      	b.n	8001d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cf2:	e00f      	b.n	8001d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cfc:	e00a      	b.n	8001d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d06:	e005      	b.n	8001d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d10:	e000      	b.n	8001d14 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2204      	movs	r2, #4
 8001d2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d008      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f867 	bl	8001e12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d44:	bf00      	nop
 8001d46:	3728      	adds	r7, #40	@ 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4906      	ldr	r1, [pc, #24]	@ (8001ebc <__NVIC_EnableIRQ+0x34>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff4f 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff64 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ffb2 	bl	8001f14 <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff81 	bl	8001ec0 <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff57 	bl	8001e88 <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b08b      	sub	sp, #44	@ 0x2c
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	e169      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 8158 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a9a      	ldr	r2, [pc, #616]	@ (8002284 <HAL_GPIO_Init+0x2a0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d05e      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002020:	4a98      	ldr	r2, [pc, #608]	@ (8002284 <HAL_GPIO_Init+0x2a0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d875      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002026:	4a98      	ldr	r2, [pc, #608]	@ (8002288 <HAL_GPIO_Init+0x2a4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d058      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 800202c:	4a96      	ldr	r2, [pc, #600]	@ (8002288 <HAL_GPIO_Init+0x2a4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d86f      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002032:	4a96      	ldr	r2, [pc, #600]	@ (800228c <HAL_GPIO_Init+0x2a8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d052      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002038:	4a94      	ldr	r2, [pc, #592]	@ (800228c <HAL_GPIO_Init+0x2a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d869      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800203e:	4a94      	ldr	r2, [pc, #592]	@ (8002290 <HAL_GPIO_Init+0x2ac>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d04c      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002044:	4a92      	ldr	r2, [pc, #584]	@ (8002290 <HAL_GPIO_Init+0x2ac>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d863      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800204a:	4a92      	ldr	r2, [pc, #584]	@ (8002294 <HAL_GPIO_Init+0x2b0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d046      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002050:	4a90      	ldr	r2, [pc, #576]	@ (8002294 <HAL_GPIO_Init+0x2b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d85d      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002056:	2b12      	cmp	r3, #18
 8002058:	d82a      	bhi.n	80020b0 <HAL_GPIO_Init+0xcc>
 800205a:	2b12      	cmp	r3, #18
 800205c:	d859      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800205e:	a201      	add	r2, pc, #4	@ (adr r2, 8002064 <HAL_GPIO_Init+0x80>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	080020df 	.word	0x080020df
 8002068:	080020b9 	.word	0x080020b9
 800206c:	080020cb 	.word	0x080020cb
 8002070:	0800210d 	.word	0x0800210d
 8002074:	08002113 	.word	0x08002113
 8002078:	08002113 	.word	0x08002113
 800207c:	08002113 	.word	0x08002113
 8002080:	08002113 	.word	0x08002113
 8002084:	08002113 	.word	0x08002113
 8002088:	08002113 	.word	0x08002113
 800208c:	08002113 	.word	0x08002113
 8002090:	08002113 	.word	0x08002113
 8002094:	08002113 	.word	0x08002113
 8002098:	08002113 	.word	0x08002113
 800209c:	08002113 	.word	0x08002113
 80020a0:	08002113 	.word	0x08002113
 80020a4:	08002113 	.word	0x08002113
 80020a8:	080020c1 	.word	0x080020c1
 80020ac:	080020d5 	.word	0x080020d5
 80020b0:	4a79      	ldr	r2, [pc, #484]	@ (8002298 <HAL_GPIO_Init+0x2b4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020b6:	e02c      	b.n	8002112 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e029      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	3304      	adds	r3, #4
 80020c6:	623b      	str	r3, [r7, #32]
          break;
 80020c8:	e024      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	3308      	adds	r3, #8
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e01f      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	330c      	adds	r3, #12
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e01a      	b.n	8002114 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020e6:	2304      	movs	r3, #4
 80020e8:	623b      	str	r3, [r7, #32]
          break;
 80020ea:	e013      	b.n	8002114 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f4:	2308      	movs	r3, #8
 80020f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	611a      	str	r2, [r3, #16]
          break;
 80020fe:	e009      	b.n	8002114 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002100:	2308      	movs	r3, #8
 8002102:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	615a      	str	r2, [r3, #20]
          break;
 800210a:	e003      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x130>
          break;
 8002112:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2bff      	cmp	r3, #255	@ 0xff
 8002118:	d801      	bhi.n	800211e <HAL_GPIO_Init+0x13a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_Init+0x13e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2bff      	cmp	r3, #255	@ 0xff
 8002128:	d802      	bhi.n	8002130 <HAL_GPIO_Init+0x14c>
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x152>
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	3b08      	subs	r3, #8
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	210f      	movs	r1, #15
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	431a      	orrs	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80b1 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002164:	4b4d      	ldr	r3, [pc, #308]	@ (800229c <HAL_GPIO_Init+0x2b8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a4c      	ldr	r2, [pc, #304]	@ (800229c <HAL_GPIO_Init+0x2b8>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b4a      	ldr	r3, [pc, #296]	@ (800229c <HAL_GPIO_Init+0x2b8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800217c:	4a48      	ldr	r2, [pc, #288]	@ (80022a0 <HAL_GPIO_Init+0x2bc>)
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a40      	ldr	r2, [pc, #256]	@ (80022a4 <HAL_GPIO_Init+0x2c0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <HAL_GPIO_Init+0x1ec>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3f      	ldr	r2, [pc, #252]	@ (80022a8 <HAL_GPIO_Init+0x2c4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00d      	beq.n	80021cc <HAL_GPIO_Init+0x1e8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3e      	ldr	r2, [pc, #248]	@ (80022ac <HAL_GPIO_Init+0x2c8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <HAL_GPIO_Init+0x1e4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3d      	ldr	r2, [pc, #244]	@ (80022b0 <HAL_GPIO_Init+0x2cc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_GPIO_Init+0x1e0>
 80021c0:	2303      	movs	r3, #3
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e004      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e002      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021d0:	2300      	movs	r3, #0
 80021d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4093      	lsls	r3, r2
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021e2:	492f      	ldr	r1, [pc, #188]	@ (80022a0 <HAL_GPIO_Init+0x2bc>)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021fc:	4b2d      	ldr	r3, [pc, #180]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	492c      	ldr	r1, [pc, #176]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800220a:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	43db      	mvns	r3, r3
 8002212:	4928      	ldr	r1, [pc, #160]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002214:	4013      	ands	r3, r2
 8002216:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002224:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4922      	ldr	r1, [pc, #136]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002232:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	43db      	mvns	r3, r3
 800223a:	491e      	ldr	r1, [pc, #120]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 800223c:	4013      	ands	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800224c:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4918      	ldr	r1, [pc, #96]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4914      	ldr	r1, [pc, #80]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002264:	4013      	ands	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d021      	beq.n	80022b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002274:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	490e      	ldr	r1, [pc, #56]	@ (80022b4 <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e021      	b.n	80022c6 <HAL_GPIO_Init+0x2e2>
 8002282:	bf00      	nop
 8002284:	10320000 	.word	0x10320000
 8002288:	10310000 	.word	0x10310000
 800228c:	10220000 	.word	0x10220000
 8002290:	10210000 	.word	0x10210000
 8002294:	10120000 	.word	0x10120000
 8002298:	10110000 	.word	0x10110000
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010800 	.word	0x40010800
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40011400 	.word	0x40011400
 80022b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	43db      	mvns	r3, r3
 80022c0:	4909      	ldr	r1, [pc, #36]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	3301      	adds	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f ae8e 	bne.w	8001ff8 <HAL_GPIO_Init+0x14>
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	372c      	adds	r7, #44	@ 0x2c
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e12b      	b.n	8002556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fd98 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	@ 0x24
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800233e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800234e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002350:	f001 f960 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8002354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a81      	ldr	r2, [pc, #516]	@ (8002560 <HAL_I2C_Init+0x274>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d807      	bhi.n	8002370 <HAL_I2C_Init+0x84>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a80      	ldr	r2, [pc, #512]	@ (8002564 <HAL_I2C_Init+0x278>)
 8002364:	4293      	cmp	r3, r2
 8002366:	bf94      	ite	ls
 8002368:	2301      	movls	r3, #1
 800236a:	2300      	movhi	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e006      	b.n	800237e <HAL_I2C_Init+0x92>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a7d      	ldr	r2, [pc, #500]	@ (8002568 <HAL_I2C_Init+0x27c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	bf94      	ite	ls
 8002378:	2301      	movls	r3, #1
 800237a:	2300      	movhi	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0e7      	b.n	8002556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a78      	ldr	r2, [pc, #480]	@ (800256c <HAL_I2C_Init+0x280>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9b      	lsrs	r3, r3, #18
 8002390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002560 <HAL_I2C_Init+0x274>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d802      	bhi.n	80023c0 <HAL_I2C_Init+0xd4>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	3301      	adds	r3, #1
 80023be:	e009      	b.n	80023d4 <HAL_I2C_Init+0xe8>
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	4a69      	ldr	r2, [pc, #420]	@ (8002570 <HAL_I2C_Init+0x284>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	3301      	adds	r3, #1
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	495c      	ldr	r1, [pc, #368]	@ (8002560 <HAL_I2C_Init+0x274>)
 80023f0:	428b      	cmp	r3, r1
 80023f2:	d819      	bhi.n	8002428 <HAL_I2C_Init+0x13c>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e59      	subs	r1, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002408:	400b      	ands	r3, r1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_I2C_Init+0x138>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e59      	subs	r1, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fbb1 f3f3 	udiv	r3, r1, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	e051      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002424:	2304      	movs	r3, #4
 8002426:	e04f      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d111      	bne.n	8002454 <HAL_I2C_Init+0x168>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e58      	subs	r0, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e012      	b.n	800247a <HAL_I2C_Init+0x18e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Init+0x196>
 800247e:	2301      	movs	r3, #1
 8002480:	e022      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10e      	bne.n	80024a8 <HAL_I2C_Init+0x1bc>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1e58      	subs	r0, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	440b      	add	r3, r1
 8002498:	fbb0 f3f3 	udiv	r3, r0, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024a6:	e00f      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1e58      	subs	r0, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	0099      	lsls	r1, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	6809      	ldr	r1, [r1, #0]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6911      	ldr	r1, [r2, #16]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68d2      	ldr	r2, [r2, #12]
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	000186a0 	.word	0x000186a0
 8002564:	001e847f 	.word	0x001e847f
 8002568:	003d08ff 	.word	0x003d08ff
 800256c:	431bde83 	.word	0x431bde83
 8002570:	10624dd3 	.word	0x10624dd3

08002574 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	460b      	mov	r3, r1
 8002582:	817b      	strh	r3, [r7, #10]
 8002584:	4613      	mov	r3, r2
 8002586:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7fe fe02 	bl	8001190 <HAL_GetTick>
 800258c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	f040 80e0 	bne.w	800275c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2319      	movs	r3, #25
 80025a2:	2201      	movs	r2, #1
 80025a4:	4970      	ldr	r1, [pc, #448]	@ (8002768 <HAL_I2C_Master_Transmit+0x1f4>)
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa92 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
 80025b4:	e0d3      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_I2C_Master_Transmit+0x50>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0cc      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d007      	beq.n	80025ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2221      	movs	r2, #33	@ 0x21
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2210      	movs	r2, #16
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	893a      	ldrh	r2, [r7, #8]
 800261a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a50      	ldr	r2, [pc, #320]	@ (800276c <HAL_I2C_Master_Transmit+0x1f8>)
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f9ca 	bl	80029cc <I2C_MasterRequestWrite>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e08d      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002658:	e066      	b.n	8002728 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fb50 	bl	8002d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	2b04      	cmp	r3, #4
 8002670:	d107      	bne.n	8002682 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002680:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06b      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d11b      	bne.n	80026fc <HAL_I2C_Master_Transmit+0x188>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d017      	beq.n	80026fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	6a39      	ldr	r1, [r7, #32]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fb47 	bl	8002d94 <I2C_WaitOnBTFFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	2b04      	cmp	r3, #4
 8002712:	d107      	bne.n	8002724 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002722:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e01a      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d194      	bne.n	800265a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e000      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
  }
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	00100002 	.word	0x00100002
 800276c:	ffff0000 	.word	0xffff0000

08002770 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	@ 0x28
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7fe fd06 	bl	8001190 <HAL_GetTick>
 8002784:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	f040 8111 	bne.w	80029ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2319      	movs	r3, #25
 800279e:	2201      	movs	r2, #1
 80027a0:	4988      	ldr	r1, [pc, #544]	@ (80029c4 <HAL_I2C_IsDeviceReady+0x254>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f994 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	e104      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2C_IsDeviceReady+0x50>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0fd      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d007      	beq.n	80027e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2224      	movs	r2, #36	@ 0x24
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a70      	ldr	r2, [pc, #448]	@ (80029c8 <HAL_I2C_IsDeviceReady+0x258>)
 8002808:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002818:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f952 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002840:	d103      	bne.n	800284a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0b6      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800285c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800285e:	f7fe fc97 	bl	8001190 <HAL_GetTick>
 8002862:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002892:	e025      	b.n	80028e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7fe fc7c 	bl	8001190 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <HAL_I2C_IsDeviceReady+0x13a>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	22a0      	movs	r2, #160	@ 0xa0
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b02      	cmp	r3, #2
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80028ea:	d005      	beq.n	80028f8 <HAL_I2C_IsDeviceReady+0x188>
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <HAL_I2C_IsDeviceReady+0x188>
 80028f2:	7dbb      	ldrb	r3, [r7, #22]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0cd      	beq.n	8002894 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d129      	bne.n	8002962 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2319      	movs	r3, #25
 800293a:	2201      	movs	r2, #1
 800293c:	4921      	ldr	r1, [pc, #132]	@ (80029c4 <HAL_I2C_IsDeviceReady+0x254>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f8c6 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e036      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e02c      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002970:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800297a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2319      	movs	r3, #25
 8002982:	2201      	movs	r2, #1
 8002984:	490f      	ldr	r1, [pc, #60]	@ (80029c4 <HAL_I2C_IsDeviceReady+0x254>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f8a2 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e012      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3301      	adds	r3, #1
 800299a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f4ff af32 	bcc.w	800280a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	00100002 	.word	0x00100002
 80029c8:	ffff0000 	.word	0xffff0000

080029cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d006      	beq.n	80029f6 <I2C_MasterRequestWrite+0x2a>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d003      	beq.n	80029f6 <I2C_MasterRequestWrite+0x2a>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029f4:	d108      	bne.n	8002a08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e00b      	b.n	8002a20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	2b12      	cmp	r3, #18
 8002a0e:	d107      	bne.n	8002a20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f84f 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00d      	beq.n	8002a54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a46:	d103      	bne.n	8002a50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e035      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a5c:	d108      	bne.n	8002a70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	e01b      	b.n	8002aa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a70:	897b      	ldrh	r3, [r7, #10]
 8002a72:	11db      	asrs	r3, r3, #7
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0306 	and.w	r3, r3, #6
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f063 030f 	orn	r3, r3, #15
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	490e      	ldr	r1, [pc, #56]	@ (8002ac8 <I2C_MasterRequestWrite+0xfc>)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f898 	bl	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e010      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <I2C_MasterRequestWrite+0x100>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f888 	bl	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	00010008 	.word	0x00010008
 8002acc:	00010002 	.word	0x00010002

08002ad0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae0:	e048      	b.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ae8:	d044      	beq.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7fe fb51 	bl	8001190 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d139      	bne.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d10d      	bne.n	8002b26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	43da      	mvns	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4013      	ands	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	e00c      	b.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d116      	bne.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e023      	b.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d10d      	bne.n	8002b9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	43da      	mvns	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	e00c      	b.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d093      	beq.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bd2:	e071      	b.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be2:	d123      	bne.n	8002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e067      	b.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c32:	d041      	beq.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c34:	f7fe faac 	bl	8001190 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d136      	bne.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10c      	bne.n	8002c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf14      	ite	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	2300      	moveq	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	e00b      	b.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	43da      	mvns	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e021      	b.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10c      	bne.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e00b      	b.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f af6d 	bne.w	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d10:	e034      	b.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f886 	bl	8002e24 <I2C_IsAcknowledgeFailed>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e034      	b.n	8002d8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d28:	d028      	beq.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7fe fa31 	bl	8001190 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11d      	bne.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4a:	2b80      	cmp	r3, #128	@ 0x80
 8002d4c:	d016      	beq.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e007      	b.n	8002d8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	2b80      	cmp	r3, #128	@ 0x80
 8002d88:	d1c3      	bne.n	8002d12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da0:	e034      	b.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f83e 	bl	8002e24 <I2C_IsAcknowledgeFailed>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e034      	b.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002db8:	d028      	beq.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dba:	f7fe f9e9 	bl	8001190 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11d      	bne.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d016      	beq.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e007      	b.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d1c3      	bne.n	8002da2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e3a:	d11b      	bne.n	8002e74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f043 0204 	orr.w	r2, r3, #4
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e272      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8087 	beq.w	8002fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea0:	4b92      	ldr	r3, [pc, #584]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eac:	4b8f      	ldr	r3, [pc, #572]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d112      	bne.n	8002ede <HAL_RCC_OscConfig+0x5e>
 8002eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ec4:	d10b      	bne.n	8002ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec6:	4b89      	ldr	r3, [pc, #548]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d06c      	beq.n	8002fac <HAL_RCC_OscConfig+0x12c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d168      	bne.n	8002fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e24c      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x76>
 8002ee8:	4b80      	ldr	r3, [pc, #512]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7f      	ldr	r2, [pc, #508]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e02e      	b.n	8002f54 <HAL_RCC_OscConfig+0xd4>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4b7b      	ldr	r3, [pc, #492]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7a      	ldr	r2, [pc, #488]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b78      	ldr	r3, [pc, #480]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a77      	ldr	r2, [pc, #476]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e01d      	b.n	8002f54 <HAL_RCC_OscConfig+0xd4>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0xbc>
 8002f22:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a71      	ldr	r2, [pc, #452]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6e      	ldr	r2, [pc, #440]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0xd4>
 8002f3c:	4b6b      	ldr	r3, [pc, #428]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a6a      	ldr	r2, [pc, #424]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b68      	ldr	r3, [pc, #416]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a67      	ldr	r2, [pc, #412]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f918 	bl	8001190 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe f914 	bl	8001190 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e200      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b5d      	ldr	r3, [pc, #372]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0xe4>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe f904 	bl	8001190 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe f900 	bl	8001190 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1ec      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	4b53      	ldr	r3, [pc, #332]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x10c>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d063      	beq.n	8003082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fba:	4b4c      	ldr	r3, [pc, #304]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fc6:	4b49      	ldr	r3, [pc, #292]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d11c      	bne.n	800300c <HAL_RCC_OscConfig+0x18c>
 8002fd2:	4b46      	ldr	r3, [pc, #280]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d116      	bne.n	800300c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	4b43      	ldr	r3, [pc, #268]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x176>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e1c0      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4939      	ldr	r1, [pc, #228]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	e03a      	b.n	8003082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003014:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <HAL_RCC_OscConfig+0x270>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe f8b9 	bl	8001190 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003022:	f7fe f8b5 	bl	8001190 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1a1      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003040:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4927      	ldr	r1, [pc, #156]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]
 8003054:	e015      	b.n	8003082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003056:	4b26      	ldr	r3, [pc, #152]	@ (80030f0 <HAL_RCC_OscConfig+0x270>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe f898 	bl	8001190 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003064:	f7fe f894 	bl	8001190 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e180      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03a      	beq.n	8003104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003096:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309c:	f7fe f878 	bl	8001190 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fe f874 	bl	8001190 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e160      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <HAL_RCC_OscConfig+0x26c>)
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f000 fafe 	bl	80036c4 <RCC_Delay>
 80030c8:	e01c      	b.n	8003104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ca:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <HAL_RCC_OscConfig+0x274>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7fe f85e 	bl	8001190 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d6:	e00f      	b.n	80030f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe f85a 	bl	8001190 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d908      	bls.n	80030f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e146      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	42420000 	.word	0x42420000
 80030f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	4b92      	ldr	r3, [pc, #584]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e9      	bne.n	80030d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80a6 	beq.w	800325e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b8b      	ldr	r3, [pc, #556]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b88      	ldr	r3, [pc, #544]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4a87      	ldr	r2, [pc, #540]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312c:	61d3      	str	r3, [r2, #28]
 800312e:	4b85      	ldr	r3, [pc, #532]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b82      	ldr	r3, [pc, #520]	@ (8003348 <HAL_RCC_OscConfig+0x4c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314a:	4b7f      	ldr	r3, [pc, #508]	@ (8003348 <HAL_RCC_OscConfig+0x4c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7e      	ldr	r2, [pc, #504]	@ (8003348 <HAL_RCC_OscConfig+0x4c8>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003156:	f7fe f81b 	bl	8001190 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315e:	f7fe f817 	bl	8001190 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b64      	cmp	r3, #100	@ 0x64
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e103      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	4b75      	ldr	r3, [pc, #468]	@ (8003348 <HAL_RCC_OscConfig+0x4c8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x312>
 8003184:	4b6f      	ldr	r3, [pc, #444]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a6e      	ldr	r2, [pc, #440]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6213      	str	r3, [r2, #32]
 8003190:	e02d      	b.n	80031ee <HAL_RCC_OscConfig+0x36e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x334>
 800319a:	4b6a      	ldr	r3, [pc, #424]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4a69      	ldr	r2, [pc, #420]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6213      	str	r3, [r2, #32]
 80031a6:	4b67      	ldr	r3, [pc, #412]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a66      	ldr	r2, [pc, #408]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	e01c      	b.n	80031ee <HAL_RCC_OscConfig+0x36e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_OscConfig+0x356>
 80031bc:	4b61      	ldr	r3, [pc, #388]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4a60      	ldr	r2, [pc, #384]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	6213      	str	r3, [r2, #32]
 80031c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	e00b      	b.n	80031ee <HAL_RCC_OscConfig+0x36e>
 80031d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	6213      	str	r3, [r2, #32]
 80031e2:	4b58      	ldr	r3, [pc, #352]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	4a57      	ldr	r2, [pc, #348]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	f023 0304 	bic.w	r3, r3, #4
 80031ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d015      	beq.n	8003222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f6:	f7fd ffcb 	bl	8001190 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fd ffc7 	bl	8001190 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0b1      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003214:	4b4b      	ldr	r3, [pc, #300]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ee      	beq.n	80031fe <HAL_RCC_OscConfig+0x37e>
 8003220:	e014      	b.n	800324c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003222:	f7fd ffb5 	bl	8001190 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fd ffb1 	bl	8001190 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e09b      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003240:	4b40      	ldr	r3, [pc, #256]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ee      	bne.n	800322a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003252:	4b3c      	ldr	r3, [pc, #240]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4a3b      	ldr	r2, [pc, #236]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8087 	beq.w	8003376 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003268:	4b36      	ldr	r3, [pc, #216]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d061      	beq.n	8003338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d146      	bne.n	800330a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327c:	4b33      	ldr	r3, [pc, #204]	@ (800334c <HAL_RCC_OscConfig+0x4cc>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7fd ff85 	bl	8001190 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fd ff81 	bl	8001190 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e06d      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329c:	4b29      	ldr	r3, [pc, #164]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b0:	d108      	bne.n	80032c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032b2:	4b24      	ldr	r3, [pc, #144]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	4921      	ldr	r1, [pc, #132]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a19      	ldr	r1, [r3, #32]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	430b      	orrs	r3, r1
 80032d6:	491b      	ldr	r1, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <HAL_RCC_OscConfig+0x4cc>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e2:	f7fd ff55 	bl	8001190 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fd ff51 	bl	8001190 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e03d      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x46a>
 8003308:	e035      	b.n	8003376 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330a:	4b10      	ldr	r3, [pc, #64]	@ (800334c <HAL_RCC_OscConfig+0x4cc>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fd ff3e 	bl	8001190 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003318:	f7fd ff3a 	bl	8001190 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e026      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x498>
 8003336:	e01e      	b.n	8003376 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d107      	bne.n	8003350 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e019      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
 8003344:	40021000 	.word	0x40021000
 8003348:	40007000 	.word	0x40007000
 800334c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <HAL_RCC_OscConfig+0x500>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	429a      	cmp	r2, r3
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0d0      	b.n	800353a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b6a      	ldr	r3, [pc, #424]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d910      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b67      	ldr	r3, [pc, #412]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 0207 	bic.w	r2, r3, #7
 80033ae:	4965      	ldr	r1, [pc, #404]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b63      	ldr	r3, [pc, #396]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0b8      	b.n	800353a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e0:	4b59      	ldr	r3, [pc, #356]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a58      	ldr	r2, [pc, #352]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f8:	4b53      	ldr	r3, [pc, #332]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a52      	ldr	r2, [pc, #328]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003402:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003404:	4b50      	ldr	r3, [pc, #320]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	494d      	ldr	r1, [pc, #308]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d040      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b47      	ldr	r3, [pc, #284]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d115      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e07f      	b.n	800353a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b41      	ldr	r3, [pc, #260]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e073      	b.n	800353a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	4b3d      	ldr	r3, [pc, #244]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e06b      	b.n	800353a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4b39      	ldr	r3, [pc, #228]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4936      	ldr	r1, [pc, #216]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7fd fe8c 	bl	8001190 <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fd fe88 	bl	8001190 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e053      	b.n	800353a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b2d      	ldr	r3, [pc, #180]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 020c 	and.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1eb      	bne.n	800347c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b27      	ldr	r3, [pc, #156]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d210      	bcs.n	80034d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 0207 	bic.w	r2, r3, #7
 80034ba:	4922      	ldr	r1, [pc, #136]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b20      	ldr	r3, [pc, #128]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e032      	b.n	800353a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e0:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4916      	ldr	r1, [pc, #88]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034fe:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	490e      	ldr	r1, [pc, #56]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003512:	f000 f821 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8003516:	4602      	mov	r2, r0
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	490a      	ldr	r1, [pc, #40]	@ (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003524:	5ccb      	ldrb	r3, [r1, r3]
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	4a09      	ldr	r2, [pc, #36]	@ (8003550 <HAL_RCC_ClockConfig+0x1cc>)
 800352c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800352e:	4b09      	ldr	r3, [pc, #36]	@ (8003554 <HAL_RCC_ClockConfig+0x1d0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fd02 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40022000 	.word	0x40022000
 8003548:	40021000 	.word	0x40021000
 800354c:	08007bac 	.word	0x08007bac
 8003550:	20000010 	.word	0x20000010
 8003554:	20000014 	.word	0x20000014

08003558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003572:	4b1e      	ldr	r3, [pc, #120]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b04      	cmp	r3, #4
 8003580:	d002      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x30>
 8003582:	2b08      	cmp	r3, #8
 8003584:	d003      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x36>
 8003586:	e027      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003588:	4b19      	ldr	r3, [pc, #100]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800358a:	613b      	str	r3, [r7, #16]
      break;
 800358c:	e027      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	0c9b      	lsrs	r3, r3, #18
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003598:	5cd3      	ldrb	r3, [r2, r3]
 800359a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d010      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035a6:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x94>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0c5b      	lsrs	r3, r3, #17
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	4a11      	ldr	r2, [pc, #68]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a0d      	ldr	r2, [pc, #52]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ba:	fb03 f202 	mul.w	r2, r3, r2
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e004      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a0c      	ldr	r2, [pc, #48]	@ (80035fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	613b      	str	r3, [r7, #16]
      break;
 80035d6:	e002      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035d8:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035da:	613b      	str	r3, [r7, #16]
      break;
 80035dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035de:	693b      	ldr	r3, [r7, #16]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	007a1200 	.word	0x007a1200
 80035f4:	08007bc4 	.word	0x08007bc4
 80035f8:	08007bd4 	.word	0x08007bd4
 80035fc:	003d0900 	.word	0x003d0900

08003600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b02      	ldr	r3, [pc, #8]	@ (8003610 <HAL_RCC_GetHCLKFreq+0x10>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	20000010 	.word	0x20000010

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003618:	f7ff fff2 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	@ (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	08007bbc 	.word	0x08007bbc

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003640:	f7ff ffde 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	@ (800365c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	0adb      	lsrs	r3, r3, #11
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	@ (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	08007bbc 	.word	0x08007bbc

08003664 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	220f      	movs	r2, #15
 8003672:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003674:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <HAL_RCC_GetClockConfig+0x58>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003680:	4b0e      	ldr	r3, [pc, #56]	@ (80036bc <HAL_RCC_GetClockConfig+0x58>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800368c:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <HAL_RCC_GetClockConfig+0x58>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003698:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <HAL_RCC_GetClockConfig+0x58>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	08db      	lsrs	r3, r3, #3
 800369e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_RCC_GetClockConfig+0x5c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0207 	and.w	r2, r3, #7
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40022000 	.word	0x40022000

080036c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036cc:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <RCC_Delay+0x34>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <RCC_Delay+0x38>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0a5b      	lsrs	r3, r3, #9
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036e0:	bf00      	nop
  }
  while (Delay --);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	60fa      	str	r2, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f9      	bne.n	80036e0 <RCC_Delay+0x1c>
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	20000010 	.word	0x20000010
 80036fc:	10624dd3 	.word	0x10624dd3

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f839 	bl	800379e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 facc 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d001      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e03a      	b.n	800383e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <HAL_TIM_Base_Start_IT+0x98>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f2:	d009      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a14      	ldr	r2, [pc, #80]	@ (800384c <HAL_TIM_Base_Start_IT+0x9c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a13      	ldr	r2, [pc, #76]	@ (8003850 <HAL_TIM_Base_Start_IT+0xa0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b06      	cmp	r3, #6
 8003818:	d010      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382a:	e007      	b.n	800383c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e093      	b.n	8003990 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fd fb21 	bl	8000ec4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003898:	f023 0307 	bic.w	r3, r3, #7
 800389c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f000 fa17 	bl	8003cdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	4313      	orrs	r3, r2
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80038f4:	f023 030c 	bic.w	r3, r3, #12
 80038f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	4313      	orrs	r3, r2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	011a      	lsls	r2, r3, #4
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	031b      	lsls	r3, r3, #12
 8003924:	4313      	orrs	r3, r2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003932:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	4313      	orrs	r3, r2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80039c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d110      	bne.n	80039ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039ce:	7b7b      	ldrb	r3, [r7, #13]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d001      	beq.n	80039d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e069      	b.n	8003aac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e8:	e031      	b.n	8003a4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d110      	bne.n	8003a12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d102      	bne.n	80039fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039f6:	7b3b      	ldrb	r3, [r7, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d001      	beq.n	8003a00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e055      	b.n	8003aac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a10:	e01d      	b.n	8003a4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d108      	bne.n	8003a2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a18:	7bbb      	ldrb	r3, [r7, #14]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a1e:	7b7b      	ldrb	r3, [r7, #13]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a24:	7b3b      	ldrb	r3, [r7, #12]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e03e      	b.n	8003aac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_TIM_Encoder_Start+0xc4>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d008      	beq.n	8003a6c <HAL_TIM_Encoder_Start+0xd4>
 8003a5a:	e00f      	b.n	8003a7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f9a7 	bl	8003db8 <TIM_CCxChannelCmd>
      break;
 8003a6a:	e016      	b.n	8003a9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	2104      	movs	r1, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f99f 	bl	8003db8 <TIM_CCxChannelCmd>
      break;
 8003a7a:	e00e      	b.n	8003a9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f997 	bl	8003db8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	2104      	movs	r1, #4
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f990 	bl	8003db8 <TIM_CCxChannelCmd>
      break;
 8003a98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0202 	mvn.w	r2, #2
 8003ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8d1 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8c4 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8d3 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0204 	mvn.w	r2, #4
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8ab 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f89e 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f8ad 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f885 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f878 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f887 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f85f 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f852 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f861 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0201 	mvn.w	r2, #1
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fc fda2 	bl	8000764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f945 	bl	8003ece <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f831 	bl	8003cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f918 	bl	8003ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a2f      	ldr	r2, [pc, #188]	@ (8003dac <TIM_Base_SetConfig+0xd0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00b      	beq.n	8003d0c <TIM_Base_SetConfig+0x30>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfa:	d007      	beq.n	8003d0c <TIM_Base_SetConfig+0x30>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8003db0 <TIM_Base_SetConfig+0xd4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_Base_SetConfig+0x30>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a2b      	ldr	r2, [pc, #172]	@ (8003db4 <TIM_Base_SetConfig+0xd8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a22      	ldr	r2, [pc, #136]	@ (8003dac <TIM_Base_SetConfig+0xd0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0x62>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0x62>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1f      	ldr	r2, [pc, #124]	@ (8003db0 <TIM_Base_SetConfig+0xd4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0x62>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1e      	ldr	r2, [pc, #120]	@ (8003db4 <TIM_Base_SetConfig+0xd8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <TIM_Base_SetConfig+0xd0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d103      	bne.n	8003d84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	611a      	str	r2, [r3, #16]
  }
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800

08003db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2201      	movs	r2, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1a      	ldr	r2, [r3, #32]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	401a      	ands	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e046      	b.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a16      	ldr	r2, [pc, #88]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e64:	d009      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a12      	ldr	r2, [pc, #72]	@ (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a10      	ldr	r2, [pc, #64]	@ (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10c      	bne.n	8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800

08003ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f103 0208 	add.w	r2, r3, #8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ef8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f103 0208 	add.w	r2, r3, #8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0208 	add.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f92:	d103      	bne.n	8003f9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e00c      	b.n	8003fb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e002      	b.n	8003faa <vListInsert+0x2e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d2f6      	bcs.n	8003fa4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6852      	ldr	r2, [r2, #4]
 800400c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d103      	bne.n	8004020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	1e5a      	subs	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
	...

08004040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800406c:	f001 feae 	bl	8005dcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	441a      	add	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409c:	3b01      	subs	r3, #1
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	441a      	add	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	22ff      	movs	r2, #255	@ 0xff
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	22ff      	movs	r2, #255	@ 0xff
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d114      	bne.n	80040ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01a      	beq.n	8004100 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3310      	adds	r3, #16
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f9a2 	bl	8005418 <xTaskRemoveFromEventList>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d012      	beq.n	8004100 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040da:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <xQueueGenericReset+0xd0>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	e009      	b.n	8004100 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3310      	adds	r3, #16
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fef5 	bl	8003ee0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3324      	adds	r3, #36	@ 0x24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fef0 	bl	8003ee0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004100:	f001 fe94 	bl	8005e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004104:	2301      	movs	r3, #1
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	@ 0x28
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	613b      	str	r3, [r7, #16]
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3348      	adds	r3, #72	@ 0x48
 800414e:	4618      	mov	r0, r3
 8004150:	f001 ff3e 	bl	8005fd0 <pvPortMalloc>
 8004154:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d011      	beq.n	8004180 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3348      	adds	r3, #72	@ 0x48
 8004164:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800416e:	79fa      	ldrb	r2, [r7, #7]
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f805 	bl	800418a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004180:	69bb      	ldr	r3, [r7, #24]
	}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e002      	b.n	80041ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041b8:	2101      	movs	r1, #1
 80041ba:	69b8      	ldr	r0, [r7, #24]
 80041bc:	f7ff ff40 	bl	8004040 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00e      	beq.n	80041f4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80041e8:	2300      	movs	r3, #0
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f81c 	bl	800422c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004206:	2301      	movs	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	461a      	mov	r2, r3
 8004212:	6939      	ldr	r1, [r7, #16]
 8004214:	6978      	ldr	r0, [r7, #20]
 8004216:	f7ff ff7d 	bl	8004114 <xQueueGenericCreate>
 800421a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ffd3 	bl	80041c8 <prvInitialiseMutex>

		return xNewQueue;
 8004222:	68fb      	ldr	r3, [r7, #12]
	}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08e      	sub	sp, #56	@ 0x38
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800423a:	2300      	movs	r3, #0
 800423c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <xQueueGenericSend+0x34>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <xQueueGenericSend+0x42>
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <xQueueGenericSend+0x46>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <xQueueGenericSend+0x48>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <xQueueGenericSend+0x64>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d103      	bne.n	800429e <xQueueGenericSend+0x72>
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <xQueueGenericSend+0x76>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <xQueueGenericSend+0x78>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <xQueueGenericSend+0x94>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	623b      	str	r3, [r7, #32]
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042c0:	f001 fa70 	bl	80057a4 <xTaskGetSchedulerState>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <xQueueGenericSend+0xa4>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <xQueueGenericSend+0xa8>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <xQueueGenericSend+0xaa>
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	61fb      	str	r3, [r7, #28]
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	e7fd      	b.n	80042ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042f2:	f001 fd6b 	bl	8005dcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <xQueueGenericSend+0xdc>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d129      	bne.n	800435c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800430e:	f000 fb36 	bl	800497e <prvCopyDataToQueue>
 8004312:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	d010      	beq.n	800433e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	3324      	adds	r3, #36	@ 0x24
 8004320:	4618      	mov	r0, r3
 8004322:	f001 f879 	bl	8005418 <xTaskRemoveFromEventList>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800432c:	4b3f      	ldr	r3, [pc, #252]	@ (800442c <xQueueGenericSend+0x200>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	e00a      	b.n	8004354 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004344:	4b39      	ldr	r3, [pc, #228]	@ (800442c <xQueueGenericSend+0x200>)
 8004346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004354:	f001 fd6a 	bl	8005e2c <vPortExitCritical>
				return pdPASS;
 8004358:	2301      	movs	r3, #1
 800435a:	e063      	b.n	8004424 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004362:	f001 fd63 	bl	8005e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004366:	2300      	movs	r3, #0
 8004368:	e05c      	b.n	8004424 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	4618      	mov	r0, r3
 8004376:	f001 f8b3 	bl	80054e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800437a:	2301      	movs	r3, #1
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800437e:	f001 fd55 	bl	8005e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004382:	f000 fe5b 	bl	800503c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004386:	f001 fd21 	bl	8005dcc <vPortEnterCritical>
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004390:	b25b      	sxtb	r3, r3
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004396:	d103      	bne.n	80043a0 <xQueueGenericSend+0x174>
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043a6:	b25b      	sxtb	r3, r3
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ac:	d103      	bne.n	80043b6 <xQueueGenericSend+0x18a>
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043b6:	f001 fd39 	bl	8005e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ba:	1d3a      	adds	r2, r7, #4
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f8a2 	bl	800550c <xTaskCheckForTimeOut>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d124      	bne.n	8004418 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043d0:	f000 fbcd 	bl	8004b6e <prvIsQueueFull>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d018      	beq.n	800440c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	3310      	adds	r3, #16
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fff2 	bl	80053cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043ea:	f000 fb58 	bl	8004a9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043ee:	f000 fe33 	bl	8005058 <xTaskResumeAll>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f af7c 	bne.w	80042f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80043fa:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <xQueueGenericSend+0x200>)
 80043fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	e772      	b.n	80042f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800440c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800440e:	f000 fb46 	bl	8004a9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004412:	f000 fe21 	bl	8005058 <xTaskResumeAll>
 8004416:	e76c      	b.n	80042f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800441a:	f000 fb40 	bl	8004a9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800441e:	f000 fe1b 	bl	8005058 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004422:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004424:	4618      	mov	r0, r3
 8004426:	3738      	adds	r7, #56	@ 0x38
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b090      	sub	sp, #64	@ 0x40
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <xQueueGenericSendFromISR+0x3e>
 8004466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <xQueueGenericSendFromISR+0x42>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <xQueueGenericSendFromISR+0x44>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d103      	bne.n	800449e <xQueueGenericSendFromISR+0x6e>
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <xQueueGenericSendFromISR+0x72>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <xQueueGenericSendFromISR+0x74>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	623b      	str	r3, [r7, #32]
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	e7fd      	b.n	80044bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044c0:	f001 fd46 	bl	8005f50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044c4:	f3ef 8211 	mrs	r2, BASEPRI
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	61fa      	str	r2, [r7, #28]
 80044da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <xQueueGenericSendFromISR+0xc2>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d12f      	bne.n	8004552 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004508:	f000 fa39 	bl	800497e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800450c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004514:	d112      	bne.n	800453c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	3324      	adds	r3, #36	@ 0x24
 8004522:	4618      	mov	r0, r3
 8004524:	f000 ff78 	bl	8005418 <xTaskRemoveFromEventList>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00e      	beq.n	800454c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e007      	b.n	800454c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800453c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004540:	3301      	adds	r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	b25a      	sxtb	r2, r3
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800454c:	2301      	movs	r3, #1
 800454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004550:	e001      	b.n	8004556 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004552:	2300      	movs	r3, #0
 8004554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004558:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004560:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004564:	4618      	mov	r0, r3
 8004566:	3740      	adds	r7, #64	@ 0x40
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	@ 0x30
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004578:	2300      	movs	r3, #0
 800457a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <xQueueReceive+0x32>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	623b      	str	r3, [r7, #32]
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	e7fd      	b.n	800459a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <xQueueReceive+0x40>
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <xQueueReceive+0x44>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <xQueueReceive+0x46>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <xQueueReceive+0x62>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61fb      	str	r3, [r7, #28]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ce:	f001 f8e9 	bl	80057a4 <xTaskGetSchedulerState>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <xQueueReceive+0x72>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <xQueueReceive+0x76>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <xQueueReceive+0x78>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <xQueueReceive+0x94>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	61bb      	str	r3, [r7, #24]
}
 80045fa:	bf00      	nop
 80045fc:	bf00      	nop
 80045fe:	e7fd      	b.n	80045fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004600:	f001 fbe4 	bl	8005dcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01f      	beq.n	8004650 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004614:	f000 fa1d 	bl	8004a52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	1e5a      	subs	r2, r3, #1
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00f      	beq.n	8004648 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	3310      	adds	r3, #16
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fef3 	bl	8005418 <xTaskRemoveFromEventList>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004638:	4b3c      	ldr	r3, [pc, #240]	@ (800472c <xQueueReceive+0x1c0>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004648:	f001 fbf0 	bl	8005e2c <vPortExitCritical>
				return pdPASS;
 800464c:	2301      	movs	r3, #1
 800464e:	e069      	b.n	8004724 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004656:	f001 fbe9 	bl	8005e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800465a:	2300      	movs	r3, #0
 800465c:	e062      	b.n	8004724 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d106      	bne.n	8004672 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004664:	f107 0310 	add.w	r3, r7, #16
 8004668:	4618      	mov	r0, r3
 800466a:	f000 ff39 	bl	80054e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800466e:	2301      	movs	r3, #1
 8004670:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004672:	f001 fbdb 	bl	8005e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004676:	f000 fce1 	bl	800503c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800467a:	f001 fba7 	bl	8005dcc <vPortEnterCritical>
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004684:	b25b      	sxtb	r3, r3
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800468a:	d103      	bne.n	8004694 <xQueueReceive+0x128>
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800469a:	b25b      	sxtb	r3, r3
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a0:	d103      	bne.n	80046aa <xQueueReceive+0x13e>
 80046a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046aa:	f001 fbbf 	bl	8005e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ae:	1d3a      	adds	r2, r7, #4
 80046b0:	f107 0310 	add.w	r3, r7, #16
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 ff28 	bl	800550c <xTaskCheckForTimeOut>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d123      	bne.n	800470a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046c4:	f000 fa3d 	bl	8004b42 <prvIsQueueEmpty>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d017      	beq.n	80046fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d0:	3324      	adds	r3, #36	@ 0x24
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fe78 	bl	80053cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046de:	f000 f9de 	bl	8004a9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046e2:	f000 fcb9 	bl	8005058 <xTaskResumeAll>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d189      	bne.n	8004600 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80046ec:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <xQueueReceive+0x1c0>)
 80046ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	e780      	b.n	8004600 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004700:	f000 f9cd 	bl	8004a9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004704:	f000 fca8 	bl	8005058 <xTaskResumeAll>
 8004708:	e77a      	b.n	8004600 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800470a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800470c:	f000 f9c7 	bl	8004a9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004710:	f000 fca2 	bl	8005058 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004716:	f000 fa14 	bl	8004b42 <prvIsQueueEmpty>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f43f af6f 	beq.w	8004600 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004722:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004724:	4618      	mov	r0, r3
 8004726:	3730      	adds	r7, #48	@ 0x30
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08e      	sub	sp, #56	@ 0x38
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	623b      	str	r3, [r7, #32]
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61fb      	str	r3, [r7, #28]
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004784:	f001 f80e 	bl	80057a4 <xTaskGetSchedulerState>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <xQueueSemaphoreTake+0x64>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <xQueueSemaphoreTake+0x68>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <xQueueSemaphoreTake+0x6a>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	61bb      	str	r3, [r7, #24]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047b6:	f001 fb09 	bl	8005dcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80047ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d024      	beq.n	8004810 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	1e5a      	subs	r2, r3, #1
 80047ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80047d6:	f001 f991 	bl	8005afc <pvTaskIncrementMutexHeldCount>
 80047da:	4602      	mov	r2, r0
 80047dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00f      	beq.n	8004808 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	3310      	adds	r3, #16
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fe13 	bl	8005418 <xTaskRemoveFromEventList>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047f8:	4b54      	ldr	r3, [pc, #336]	@ (800494c <xQueueSemaphoreTake+0x21c>)
 80047fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004808:	f001 fb10 	bl	8005e2c <vPortExitCritical>
				return pdPASS;
 800480c:	2301      	movs	r3, #1
 800480e:	e098      	b.n	8004942 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d112      	bne.n	800483c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	617b      	str	r3, [r7, #20]
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	e7fd      	b.n	8004830 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004834:	f001 fafa 	bl	8005e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004838:	2300      	movs	r3, #0
 800483a:	e082      	b.n	8004942 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800483c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fe4a 	bl	80054e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004850:	f001 faec 	bl	8005e2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004854:	f000 fbf2 	bl	800503c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004858:	f001 fab8 	bl	8005dcc <vPortEnterCritical>
 800485c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004862:	b25b      	sxtb	r3, r3
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004868:	d103      	bne.n	8004872 <xQueueSemaphoreTake+0x142>
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004878:	b25b      	sxtb	r3, r3
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800487e:	d103      	bne.n	8004888 <xQueueSemaphoreTake+0x158>
 8004880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004888:	f001 fad0 	bl	8005e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800488c:	463a      	mov	r2, r7
 800488e:	f107 030c 	add.w	r3, r7, #12
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fe39 	bl	800550c <xTaskCheckForTimeOut>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d132      	bne.n	8004906 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048a2:	f000 f94e 	bl	8004b42 <prvIsQueueEmpty>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d026      	beq.n	80048fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80048b4:	f001 fa8a 	bl	8005dcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 ff8f 	bl	80057e0 <xTaskPriorityInherit>
 80048c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80048c4:	f001 fab2 	bl	8005e2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ca:	3324      	adds	r3, #36	@ 0x24
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	4611      	mov	r1, r2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fd7b 	bl	80053cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048d8:	f000 f8e1 	bl	8004a9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048dc:	f000 fbbc 	bl	8005058 <xTaskResumeAll>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f47f af67 	bne.w	80047b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80048e8:	4b18      	ldr	r3, [pc, #96]	@ (800494c <xQueueSemaphoreTake+0x21c>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	e75d      	b.n	80047b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80048fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048fc:	f000 f8cf 	bl	8004a9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004900:	f000 fbaa 	bl	8005058 <xTaskResumeAll>
 8004904:	e757      	b.n	80047b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004906:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004908:	f000 f8c9 	bl	8004a9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800490c:	f000 fba4 	bl	8005058 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004910:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004912:	f000 f916 	bl	8004b42 <prvIsQueueEmpty>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	f43f af4c 	beq.w	80047b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00d      	beq.n	8004940 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004924:	f001 fa52 	bl	8005dcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004928:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800492a:	f000 f811 	bl	8004950 <prvGetDisinheritPriorityAfterTimeout>
 800492e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004936:	4618      	mov	r0, r3
 8004938:	f001 f850 	bl	80059dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800493c:	f001 fa76 	bl	8005e2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004940:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004942:	4618      	mov	r0, r3
 8004944:	3738      	adds	r7, #56	@ 0x38
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	e000ed04 	.word	0xe000ed04

08004950 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1c3 0307 	rsb	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e001      	b.n	8004972 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004972:	68fb      	ldr	r3, [r7, #12]
	}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr

0800497e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b086      	sub	sp, #24
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004992:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10d      	bne.n	80049b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d14d      	bne.n	8004a40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 ff8f 	bl	80058cc <xTaskPriorityDisinherit>
 80049ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
 80049b6:	e043      	b.n	8004a40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d119      	bne.n	80049f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6858      	ldr	r0, [r3, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	461a      	mov	r2, r3
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	f001 fdab 	bl	8006524 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	441a      	add	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d32b      	bcc.n	8004a40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	605a      	str	r2, [r3, #4]
 80049f0:	e026      	b.n	8004a40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68d8      	ldr	r0, [r3, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	461a      	mov	r2, r3
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	f001 fd91 	bl	8006524 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	425b      	negs	r3, r3
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d207      	bcs.n	8004a2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	425b      	negs	r3, r3
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d105      	bne.n	8004a40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a48:	697b      	ldr	r3, [r7, #20]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d018      	beq.n	8004a96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	441a      	add	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d303      	bcc.n	8004a86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68d9      	ldr	r1, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6838      	ldr	r0, [r7, #0]
 8004a92:	f001 fd47 	bl	8006524 <memcpy>
	}
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004aa6:	f001 f991 	bl	8005dcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ab0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ab2:	e011      	b.n	8004ad8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d012      	beq.n	8004ae2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3324      	adds	r3, #36	@ 0x24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fca9 	bl	8005418 <xTaskRemoveFromEventList>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004acc:	f000 fd82 	bl	80055d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	dce9      	bgt.n	8004ab4 <prvUnlockQueue+0x16>
 8004ae0:	e000      	b.n	8004ae4 <prvUnlockQueue+0x46>
					break;
 8004ae2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	22ff      	movs	r2, #255	@ 0xff
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004aec:	f001 f99e 	bl	8005e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004af0:	f001 f96c 	bl	8005dcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004afa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004afc:	e011      	b.n	8004b22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d012      	beq.n	8004b2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3310      	adds	r3, #16
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fc84 	bl	8005418 <xTaskRemoveFromEventList>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b16:	f000 fd5d 	bl	80055d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b1a:	7bbb      	ldrb	r3, [r7, #14]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dce9      	bgt.n	8004afe <prvUnlockQueue+0x60>
 8004b2a:	e000      	b.n	8004b2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	22ff      	movs	r2, #255	@ 0xff
 8004b32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b36:	f001 f979 	bl	8005e2c <vPortExitCritical>
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b4a:	f001 f93f 	bl	8005dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b56:	2301      	movs	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	e001      	b.n	8004b60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b60:	f001 f964 	bl	8005e2c <vPortExitCritical>

	return xReturn;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b76:	f001 f929 	bl	8005dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d102      	bne.n	8004b8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	e001      	b.n	8004b90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b90:	f001 f94c 	bl	8005e2c <vPortExitCritical>

	return xReturn;
 8004b94:	68fb      	ldr	r3, [r7, #12]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b08e      	sub	sp, #56	@ 0x38
 8004ba2:	af04      	add	r7, sp, #16
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <xTaskCreateStatic+0x2c>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	623b      	str	r3, [r7, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10b      	bne.n	8004be8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	61fb      	str	r3, [r7, #28]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004be8:	23a0      	movs	r3, #160	@ 0xa0
 8004bea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2ba0      	cmp	r3, #160	@ 0xa0
 8004bf0:	d00b      	beq.n	8004c0a <xTaskCreateStatic+0x6c>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	61bb      	str	r3, [r7, #24]
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01e      	beq.n	8004c50 <xTaskCreateStatic+0xb2>
 8004c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9303      	str	r3, [sp, #12]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	9302      	str	r3, [sp, #8]
 8004c32:	f107 0314 	add.w	r3, r7, #20
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f850 	bl	8004ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c4a:	f000 f8ed 	bl	8004e28 <prvAddNewTaskToReadyList>
 8004c4e:	e001      	b.n	8004c54 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c54:	697b      	ldr	r3, [r7, #20]
	}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3728      	adds	r7, #40	@ 0x28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b08c      	sub	sp, #48	@ 0x30
 8004c62:	af04      	add	r7, sp, #16
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 f9ac 	bl	8005fd0 <pvPortMalloc>
 8004c78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00e      	beq.n	8004c9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c80:	20a0      	movs	r0, #160	@ 0xa0
 8004c82:	f001 f9a5 	bl	8005fd0 <pvPortMalloc>
 8004c86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c94:	e005      	b.n	8004ca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c96:	6978      	ldr	r0, [r7, #20]
 8004c98:	f001 fa68 	bl	800616c <vPortFree>
 8004c9c:	e001      	b.n	8004ca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9303      	str	r3, [sp, #12]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	9302      	str	r3, [sp, #8]
 8004cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f80e 	bl	8004ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ccc:	69f8      	ldr	r0, [r7, #28]
 8004cce:	f000 f8ab 	bl	8004e28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	e002      	b.n	8004cde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cde:	69bb      	ldr	r3, [r7, #24]
	}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d00:	3b01      	subs	r3, #1
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	617b      	str	r3, [r7, #20]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01f      	beq.n	8004d78 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e012      	b.n	8004d64 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	7819      	ldrb	r1, [r3, #0]
 8004d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3334      	adds	r3, #52	@ 0x34
 8004d4e:	460a      	mov	r2, r1
 8004d50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d006      	beq.n	8004d6c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3301      	adds	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	d9e9      	bls.n	8004d3e <prvInitialiseNewTask+0x56>
 8004d6a:	e000      	b.n	8004d6e <prvInitialiseNewTask+0x86>
			{
				break;
 8004d6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d76:	e003      	b.n	8004d80 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d901      	bls.n	8004d8a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d86:	2306      	movs	r3, #6
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d94:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	2200      	movs	r2, #0
 8004d9a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff f8bc 	bl	8003f1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	3318      	adds	r3, #24
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff f8b7 	bl	8003f1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	f1c3 0207 	rsb	r2, r3, #7
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	334c      	adds	r3, #76	@ 0x4c
 8004dda:	224c      	movs	r2, #76	@ 0x4c
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fb0e 	bl	8006400 <memset>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de6:	4a0d      	ldr	r2, [pc, #52]	@ (8004e1c <prvInitialiseNewTask+0x134>)
 8004de8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	4a0c      	ldr	r2, [pc, #48]	@ (8004e20 <prvInitialiseNewTask+0x138>)
 8004dee:	655a      	str	r2, [r3, #84]	@ 0x54
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	4a0c      	ldr	r2, [pc, #48]	@ (8004e24 <prvInitialiseNewTask+0x13c>)
 8004df4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	69b8      	ldr	r0, [r7, #24]
 8004dfc:	f000 fef8 	bl	8005bf0 <pxPortInitialiseStack>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e12:	bf00      	nop
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2000162c 	.word	0x2000162c
 8004e20:	20001694 	.word	0x20001694
 8004e24:	200016fc 	.word	0x200016fc

08004e28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e30:	f000 ffcc 	bl	8005dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee0 <prvAddNewTaskToReadyList+0xb8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	4a29      	ldr	r2, [pc, #164]	@ (8004ee0 <prvAddNewTaskToReadyList+0xb8>)
 8004e3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ee4 <prvAddNewTaskToReadyList+0xbc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e46:	4a27      	ldr	r2, [pc, #156]	@ (8004ee4 <prvAddNewTaskToReadyList+0xbc>)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e4c:	4b24      	ldr	r3, [pc, #144]	@ (8004ee0 <prvAddNewTaskToReadyList+0xb8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d110      	bne.n	8004e76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e54:	f000 fbe2 	bl	800561c <prvInitialiseTaskLists>
 8004e58:	e00d      	b.n	8004e76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e5a:	4b23      	ldr	r3, [pc, #140]	@ (8004ee8 <prvAddNewTaskToReadyList+0xc0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e62:	4b20      	ldr	r3, [pc, #128]	@ (8004ee4 <prvAddNewTaskToReadyList+0xbc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d802      	bhi.n	8004e76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee4 <prvAddNewTaskToReadyList+0xbc>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e76:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <prvAddNewTaskToReadyList+0xc4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004eec <prvAddNewTaskToReadyList+0xc4>)
 8004e7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	4b19      	ldr	r3, [pc, #100]	@ (8004ef0 <prvAddNewTaskToReadyList+0xc8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	4a18      	ldr	r2, [pc, #96]	@ (8004ef0 <prvAddNewTaskToReadyList+0xc8>)
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ef4 <prvAddNewTaskToReadyList+0xcc>)
 8004ea0:	441a      	add	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7ff f844 	bl	8003f36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004eae:	f000 ffbd 	bl	8005e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <prvAddNewTaskToReadyList+0xc0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00e      	beq.n	8004ed8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004eba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <prvAddNewTaskToReadyList+0xbc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d207      	bcs.n	8004ed8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <prvAddNewTaskToReadyList+0xd0>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	200009d8 	.word	0x200009d8
 8004ee4:	200008d8 	.word	0x200008d8
 8004ee8:	200009e4 	.word	0x200009e4
 8004eec:	200009f4 	.word	0x200009f4
 8004ef0:	200009e0 	.word	0x200009e0
 8004ef4:	200008dc 	.word	0x200008dc
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d018      	beq.n	8004f40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f0e:	4b14      	ldr	r3, [pc, #80]	@ (8004f60 <vTaskDelay+0x64>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00b      	beq.n	8004f2e <vTaskDelay+0x32>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	60bb      	str	r3, [r7, #8]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f2e:	f000 f885 	bl	800503c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f32:	2100      	movs	r1, #0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fdf5 	bl	8005b24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f3a:	f000 f88d 	bl	8005058 <xTaskResumeAll>
 8004f3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d107      	bne.n	8004f56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f46:	4b07      	ldr	r3, [pc, #28]	@ (8004f64 <vTaskDelay+0x68>)
 8004f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000a00 	.word	0x20000a00
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	@ 0x28
 8004f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f76:	463a      	mov	r2, r7
 8004f78:	1d39      	adds	r1, r7, #4
 8004f7a:	f107 0308 	add.w	r3, r7, #8
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb f8e6 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	9202      	str	r2, [sp, #8]
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	2300      	movs	r3, #0
 8004f94:	460a      	mov	r2, r1
 8004f96:	4921      	ldr	r1, [pc, #132]	@ (800501c <vTaskStartScheduler+0xb4>)
 8004f98:	4821      	ldr	r0, [pc, #132]	@ (8005020 <vTaskStartScheduler+0xb8>)
 8004f9a:	f7ff fe00 	bl	8004b9e <xTaskCreateStatic>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4a20      	ldr	r2, [pc, #128]	@ (8005024 <vTaskStartScheduler+0xbc>)
 8004fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005024 <vTaskStartScheduler+0xbc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fac:	2301      	movs	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	e001      	b.n	8004fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d11b      	bne.n	8004ff4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	613b      	str	r3, [r7, #16]
}
 8004fce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fd0:	4b15      	ldr	r3, [pc, #84]	@ (8005028 <vTaskStartScheduler+0xc0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	334c      	adds	r3, #76	@ 0x4c
 8004fd6:	4a15      	ldr	r2, [pc, #84]	@ (800502c <vTaskStartScheduler+0xc4>)
 8004fd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fda:	4b15      	ldr	r3, [pc, #84]	@ (8005030 <vTaskStartScheduler+0xc8>)
 8004fdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fe0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fe2:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <vTaskStartScheduler+0xcc>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fe8:	4b13      	ldr	r3, [pc, #76]	@ (8005038 <vTaskStartScheduler+0xd0>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fee:	f000 fe7b 	bl	8005ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ff2:	e00f      	b.n	8005014 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ffa:	d10b      	bne.n	8005014 <vTaskStartScheduler+0xac>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	60fb      	str	r3, [r7, #12]
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <vTaskStartScheduler+0xa8>
}
 8005014:	bf00      	nop
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	08006e48 	.word	0x08006e48
 8005020:	080055ed 	.word	0x080055ed
 8005024:	200009fc 	.word	0x200009fc
 8005028:	200008d8 	.word	0x200008d8
 800502c:	20000020 	.word	0x20000020
 8005030:	200009f8 	.word	0x200009f8
 8005034:	200009e4 	.word	0x200009e4
 8005038:	200009dc 	.word	0x200009dc

0800503c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005040:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <vTaskSuspendAll+0x18>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a03      	ldr	r2, [pc, #12]	@ (8005054 <vTaskSuspendAll+0x18>)
 8005048:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800504a:	bf00      	nop
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000a00 	.word	0x20000a00

08005058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005066:	4b42      	ldr	r3, [pc, #264]	@ (8005170 <xTaskResumeAll+0x118>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <xTaskResumeAll+0x2e>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005086:	f000 fea1 	bl	8005dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800508a:	4b39      	ldr	r3, [pc, #228]	@ (8005170 <xTaskResumeAll+0x118>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3b01      	subs	r3, #1
 8005090:	4a37      	ldr	r2, [pc, #220]	@ (8005170 <xTaskResumeAll+0x118>)
 8005092:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005094:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <xTaskResumeAll+0x118>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d161      	bne.n	8005160 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800509c:	4b35      	ldr	r3, [pc, #212]	@ (8005174 <xTaskResumeAll+0x11c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d05d      	beq.n	8005160 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050a4:	e02e      	b.n	8005104 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a6:	4b34      	ldr	r3, [pc, #208]	@ (8005178 <xTaskResumeAll+0x120>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3318      	adds	r3, #24
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe ff9a 	bl	8003fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe ff95 	bl	8003fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c6:	2201      	movs	r2, #1
 80050c8:	409a      	lsls	r2, r3
 80050ca:	4b2c      	ldr	r3, [pc, #176]	@ (800517c <xTaskResumeAll+0x124>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	4a2a      	ldr	r2, [pc, #168]	@ (800517c <xTaskResumeAll+0x124>)
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4a27      	ldr	r2, [pc, #156]	@ (8005180 <xTaskResumeAll+0x128>)
 80050e2:	441a      	add	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fe ff23 	bl	8003f36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f4:	4b23      	ldr	r3, [pc, #140]	@ (8005184 <xTaskResumeAll+0x12c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d302      	bcc.n	8005104 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050fe:	4b22      	ldr	r3, [pc, #136]	@ (8005188 <xTaskResumeAll+0x130>)
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005104:	4b1c      	ldr	r3, [pc, #112]	@ (8005178 <xTaskResumeAll+0x120>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1cc      	bne.n	80050a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005112:	f000 fb27 	bl	8005764 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005116:	4b1d      	ldr	r3, [pc, #116]	@ (800518c <xTaskResumeAll+0x134>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d010      	beq.n	8005144 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005122:	f000 f837 	bl	8005194 <xTaskIncrementTick>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800512c:	4b16      	ldr	r3, [pc, #88]	@ (8005188 <xTaskResumeAll+0x130>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3b01      	subs	r3, #1
 8005136:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f1      	bne.n	8005122 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800513e:	4b13      	ldr	r3, [pc, #76]	@ (800518c <xTaskResumeAll+0x134>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005144:	4b10      	ldr	r3, [pc, #64]	@ (8005188 <xTaskResumeAll+0x130>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800514c:	2301      	movs	r3, #1
 800514e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005150:	4b0f      	ldr	r3, [pc, #60]	@ (8005190 <xTaskResumeAll+0x138>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005160:	f000 fe64 	bl	8005e2c <vPortExitCritical>

	return xAlreadyYielded;
 8005164:	68bb      	ldr	r3, [r7, #8]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000a00 	.word	0x20000a00
 8005174:	200009d8 	.word	0x200009d8
 8005178:	20000998 	.word	0x20000998
 800517c:	200009e0 	.word	0x200009e0
 8005180:	200008dc 	.word	0x200008dc
 8005184:	200008d8 	.word	0x200008d8
 8005188:	200009ec 	.word	0x200009ec
 800518c:	200009e8 	.word	0x200009e8
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519e:	4b4f      	ldr	r3, [pc, #316]	@ (80052dc <xTaskIncrementTick+0x148>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f040 808f 	bne.w	80052c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051a8:	4b4d      	ldr	r3, [pc, #308]	@ (80052e0 <xTaskIncrementTick+0x14c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3301      	adds	r3, #1
 80051ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051b0:	4a4b      	ldr	r2, [pc, #300]	@ (80052e0 <xTaskIncrementTick+0x14c>)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d121      	bne.n	8005200 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80051bc:	4b49      	ldr	r3, [pc, #292]	@ (80052e4 <xTaskIncrementTick+0x150>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <xTaskIncrementTick+0x4a>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	603b      	str	r3, [r7, #0]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <xTaskIncrementTick+0x46>
 80051de:	4b41      	ldr	r3, [pc, #260]	@ (80052e4 <xTaskIncrementTick+0x150>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	4b40      	ldr	r3, [pc, #256]	@ (80052e8 <xTaskIncrementTick+0x154>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a3e      	ldr	r2, [pc, #248]	@ (80052e4 <xTaskIncrementTick+0x150>)
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4a3e      	ldr	r2, [pc, #248]	@ (80052e8 <xTaskIncrementTick+0x154>)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	4b3e      	ldr	r3, [pc, #248]	@ (80052ec <xTaskIncrementTick+0x158>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3301      	adds	r3, #1
 80051f8:	4a3c      	ldr	r2, [pc, #240]	@ (80052ec <xTaskIncrementTick+0x158>)
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	f000 fab2 	bl	8005764 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005200:	4b3b      	ldr	r3, [pc, #236]	@ (80052f0 <xTaskIncrementTick+0x15c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	429a      	cmp	r2, r3
 8005208:	d348      	bcc.n	800529c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800520a:	4b36      	ldr	r3, [pc, #216]	@ (80052e4 <xTaskIncrementTick+0x150>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005214:	4b36      	ldr	r3, [pc, #216]	@ (80052f0 <xTaskIncrementTick+0x15c>)
 8005216:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800521a:	601a      	str	r2, [r3, #0]
					break;
 800521c:	e03e      	b.n	800529c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521e:	4b31      	ldr	r3, [pc, #196]	@ (80052e4 <xTaskIncrementTick+0x150>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d203      	bcs.n	800523e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005236:	4a2e      	ldr	r2, [pc, #184]	@ (80052f0 <xTaskIncrementTick+0x15c>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800523c:	e02e      	b.n	800529c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	3304      	adds	r3, #4
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fed2 	bl	8003fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	3318      	adds	r3, #24
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe fec9 	bl	8003fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	2201      	movs	r2, #1
 8005260:	409a      	lsls	r2, r3
 8005262:	4b24      	ldr	r3, [pc, #144]	@ (80052f4 <xTaskIncrementTick+0x160>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4313      	orrs	r3, r2
 8005268:	4a22      	ldr	r2, [pc, #136]	@ (80052f4 <xTaskIncrementTick+0x160>)
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4a1f      	ldr	r2, [pc, #124]	@ (80052f8 <xTaskIncrementTick+0x164>)
 800527a:	441a      	add	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f7fe fe57 	bl	8003f36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528c:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <xTaskIncrementTick+0x168>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	429a      	cmp	r2, r3
 8005294:	d3b9      	bcc.n	800520a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005296:	2301      	movs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529a:	e7b6      	b.n	800520a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800529c:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <xTaskIncrementTick+0x168>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a2:	4915      	ldr	r1, [pc, #84]	@ (80052f8 <xTaskIncrementTick+0x164>)
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d901      	bls.n	80052b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <xTaskIncrementTick+0x16c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e004      	b.n	80052d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005304 <xTaskIncrementTick+0x170>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005304 <xTaskIncrementTick+0x170>)
 80052ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052d0:	697b      	ldr	r3, [r7, #20]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000a00 	.word	0x20000a00
 80052e0:	200009dc 	.word	0x200009dc
 80052e4:	20000990 	.word	0x20000990
 80052e8:	20000994 	.word	0x20000994
 80052ec:	200009f0 	.word	0x200009f0
 80052f0:	200009f8 	.word	0x200009f8
 80052f4:	200009e0 	.word	0x200009e0
 80052f8:	200008dc 	.word	0x200008dc
 80052fc:	200008d8 	.word	0x200008d8
 8005300:	200009ec 	.word	0x200009ec
 8005304:	200009e8 	.word	0x200009e8

08005308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800530e:	4b29      	ldr	r3, [pc, #164]	@ (80053b4 <vTaskSwitchContext+0xac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005316:	4b28      	ldr	r3, [pc, #160]	@ (80053b8 <vTaskSwitchContext+0xb0>)
 8005318:	2201      	movs	r2, #1
 800531a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800531c:	e045      	b.n	80053aa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800531e:	4b26      	ldr	r3, [pc, #152]	@ (80053b8 <vTaskSwitchContext+0xb0>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005324:	4b25      	ldr	r3, [pc, #148]	@ (80053bc <vTaskSwitchContext+0xb4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	fab3 f383 	clz	r3, r3
 8005330:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005332:	7afb      	ldrb	r3, [r7, #11]
 8005334:	f1c3 031f 	rsb	r3, r3, #31
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	4921      	ldr	r1, [pc, #132]	@ (80053c0 <vTaskSwitchContext+0xb8>)
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <vTaskSwitchContext+0x5e>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	607b      	str	r3, [r7, #4]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <vTaskSwitchContext+0x5a>
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a13      	ldr	r2, [pc, #76]	@ (80053c0 <vTaskSwitchContext+0xb8>)
 8005372:	4413      	add	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	605a      	str	r2, [r3, #4]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	3308      	adds	r3, #8
 8005388:	429a      	cmp	r2, r3
 800538a:	d104      	bne.n	8005396 <vTaskSwitchContext+0x8e>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a09      	ldr	r2, [pc, #36]	@ (80053c4 <vTaskSwitchContext+0xbc>)
 800539e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053a0:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <vTaskSwitchContext+0xbc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	334c      	adds	r3, #76	@ 0x4c
 80053a6:	4a08      	ldr	r2, [pc, #32]	@ (80053c8 <vTaskSwitchContext+0xc0>)
 80053a8:	6013      	str	r3, [r2, #0]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	20000a00 	.word	0x20000a00
 80053b8:	200009ec 	.word	0x200009ec
 80053bc:	200009e0 	.word	0x200009e0
 80053c0:	200008dc 	.word	0x200008dc
 80053c4:	200008d8 	.word	0x200008d8
 80053c8:	20000020 	.word	0x20000020

080053cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60fb      	str	r3, [r7, #12]
}
 80053ee:	bf00      	nop
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053f4:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <vTaskPlaceOnEventList+0x48>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3318      	adds	r3, #24
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fe fdbd 	bl	8003f7c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005402:	2101      	movs	r1, #1
 8005404:	6838      	ldr	r0, [r7, #0]
 8005406:	f000 fb8d 	bl	8005b24 <prvAddCurrentTaskToDelayedList>
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200008d8 	.word	0x200008d8

08005418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60fb      	str	r3, [r7, #12]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3318      	adds	r3, #24
 800544a:	4618      	mov	r0, r3
 800544c:	f7fe fdce 	bl	8003fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005450:	4b1d      	ldr	r3, [pc, #116]	@ (80054c8 <xTaskRemoveFromEventList+0xb0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11c      	bne.n	8005492 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3304      	adds	r3, #4
 800545c:	4618      	mov	r0, r3
 800545e:	f7fe fdc5 	bl	8003fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	2201      	movs	r2, #1
 8005468:	409a      	lsls	r2, r3
 800546a:	4b18      	ldr	r3, [pc, #96]	@ (80054cc <xTaskRemoveFromEventList+0xb4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4313      	orrs	r3, r2
 8005470:	4a16      	ldr	r2, [pc, #88]	@ (80054cc <xTaskRemoveFromEventList+0xb4>)
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <xTaskRemoveFromEventList+0xb8>)
 8005482:	441a      	add	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f7fe fd53 	bl	8003f36 <vListInsertEnd>
 8005490:	e005      	b.n	800549e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3318      	adds	r3, #24
 8005496:	4619      	mov	r1, r3
 8005498:	480e      	ldr	r0, [pc, #56]	@ (80054d4 <xTaskRemoveFromEventList+0xbc>)
 800549a:	f7fe fd4c 	bl	8003f36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <xTaskRemoveFromEventList+0xc0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d905      	bls.n	80054b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054b0:	4b0a      	ldr	r3, [pc, #40]	@ (80054dc <xTaskRemoveFromEventList+0xc4>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e001      	b.n	80054bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054bc:	697b      	ldr	r3, [r7, #20]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000a00 	.word	0x20000a00
 80054cc:	200009e0 	.word	0x200009e0
 80054d0:	200008dc 	.word	0x200008dc
 80054d4:	20000998 	.word	0x20000998
 80054d8:	200008d8 	.word	0x200008d8
 80054dc:	200009ec 	.word	0x200009ec

080054e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054e8:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <vTaskInternalSetTimeOutState+0x24>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054f0:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <vTaskInternalSetTimeOutState+0x28>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	605a      	str	r2, [r3, #4]
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	200009f0 	.word	0x200009f0
 8005508:	200009dc 	.word	0x200009dc

0800550c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10b      	bne.n	8005534 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	613b      	str	r3, [r7, #16]
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	60fb      	str	r3, [r7, #12]
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	e7fd      	b.n	800554e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005552:	f000 fc3b 	bl	8005dcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005556:	4b1d      	ldr	r3, [pc, #116]	@ (80055cc <xTaskCheckForTimeOut+0xc0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800556e:	d102      	bne.n	8005576 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005570:	2300      	movs	r3, #0
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	e023      	b.n	80055be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b15      	ldr	r3, [pc, #84]	@ (80055d0 <xTaskCheckForTimeOut+0xc4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d007      	beq.n	8005592 <xTaskCheckForTimeOut+0x86>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	429a      	cmp	r2, r3
 800558a:	d302      	bcc.n	8005592 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	e015      	b.n	80055be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	429a      	cmp	r2, r3
 800559a:	d20b      	bcs.n	80055b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	1ad2      	subs	r2, r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff99 	bl	80054e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	e004      	b.n	80055be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055be:	f000 fc35 	bl	8005e2c <vPortExitCritical>

	return xReturn;
 80055c2:	69fb      	ldr	r3, [r7, #28]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	200009dc 	.word	0x200009dc
 80055d0:	200009f0 	.word	0x200009f0

080055d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055d8:	4b03      	ldr	r3, [pc, #12]	@ (80055e8 <vTaskMissedYield+0x14>)
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	200009ec 	.word	0x200009ec

080055ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055f4:	f000 f852 	bl	800569c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055f8:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <prvIdleTask+0x28>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d9f9      	bls.n	80055f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <prvIdleTask+0x2c>)
 8005602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005610:	e7f0      	b.n	80055f4 <prvIdleTask+0x8>
 8005612:	bf00      	nop
 8005614:	200008dc 	.word	0x200008dc
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005622:	2300      	movs	r3, #0
 8005624:	607b      	str	r3, [r7, #4]
 8005626:	e00c      	b.n	8005642 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4a12      	ldr	r2, [pc, #72]	@ (800567c <prvInitialiseTaskLists+0x60>)
 8005634:	4413      	add	r3, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fc52 	bl	8003ee0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3301      	adds	r3, #1
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b06      	cmp	r3, #6
 8005646:	d9ef      	bls.n	8005628 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005648:	480d      	ldr	r0, [pc, #52]	@ (8005680 <prvInitialiseTaskLists+0x64>)
 800564a:	f7fe fc49 	bl	8003ee0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800564e:	480d      	ldr	r0, [pc, #52]	@ (8005684 <prvInitialiseTaskLists+0x68>)
 8005650:	f7fe fc46 	bl	8003ee0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005654:	480c      	ldr	r0, [pc, #48]	@ (8005688 <prvInitialiseTaskLists+0x6c>)
 8005656:	f7fe fc43 	bl	8003ee0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800565a:	480c      	ldr	r0, [pc, #48]	@ (800568c <prvInitialiseTaskLists+0x70>)
 800565c:	f7fe fc40 	bl	8003ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005660:	480b      	ldr	r0, [pc, #44]	@ (8005690 <prvInitialiseTaskLists+0x74>)
 8005662:	f7fe fc3d 	bl	8003ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005666:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <prvInitialiseTaskLists+0x78>)
 8005668:	4a05      	ldr	r2, [pc, #20]	@ (8005680 <prvInitialiseTaskLists+0x64>)
 800566a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800566c:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <prvInitialiseTaskLists+0x7c>)
 800566e:	4a05      	ldr	r2, [pc, #20]	@ (8005684 <prvInitialiseTaskLists+0x68>)
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	200008dc 	.word	0x200008dc
 8005680:	20000968 	.word	0x20000968
 8005684:	2000097c 	.word	0x2000097c
 8005688:	20000998 	.word	0x20000998
 800568c:	200009ac 	.word	0x200009ac
 8005690:	200009c4 	.word	0x200009c4
 8005694:	20000990 	.word	0x20000990
 8005698:	20000994 	.word	0x20000994

0800569c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056a2:	e019      	b.n	80056d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056a4:	f000 fb92 	bl	8005dcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a8:	4b10      	ldr	r3, [pc, #64]	@ (80056ec <prvCheckTasksWaitingTermination+0x50>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fe fc99 	bl	8003fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056ba:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <prvCheckTasksWaitingTermination+0x54>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3b01      	subs	r3, #1
 80056c0:	4a0b      	ldr	r2, [pc, #44]	@ (80056f0 <prvCheckTasksWaitingTermination+0x54>)
 80056c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <prvCheckTasksWaitingTermination+0x58>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	4a0a      	ldr	r2, [pc, #40]	@ (80056f4 <prvCheckTasksWaitingTermination+0x58>)
 80056cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056ce:	f000 fbad 	bl	8005e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f810 	bl	80056f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056d8:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <prvCheckTasksWaitingTermination+0x58>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e1      	bne.n	80056a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	200009ac 	.word	0x200009ac
 80056f0:	200009d8 	.word	0x200009d8
 80056f4:	200009c0 	.word	0x200009c0

080056f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	334c      	adds	r3, #76	@ 0x4c
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fe83 	bl	8006410 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005710:	2b00      	cmp	r3, #0
 8005712:	d108      	bne.n	8005726 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fd27 	bl	800616c <vPortFree>
				vPortFree( pxTCB );
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fd24 	bl	800616c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005724:	e019      	b.n	800575a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800572c:	2b01      	cmp	r3, #1
 800572e:	d103      	bne.n	8005738 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fd1b 	bl	800616c <vPortFree>
	}
 8005736:	e010      	b.n	800575a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800573e:	2b02      	cmp	r3, #2
 8005740:	d00b      	beq.n	800575a <prvDeleteTCB+0x62>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	60fb      	str	r3, [r7, #12]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <prvDeleteTCB+0x5e>
	}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800576a:	4b0c      	ldr	r3, [pc, #48]	@ (800579c <prvResetNextTaskUnblockTime+0x38>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005774:	4b0a      	ldr	r3, [pc, #40]	@ (80057a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005776:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800577a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800577c:	e008      	b.n	8005790 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577e:	4b07      	ldr	r3, [pc, #28]	@ (800579c <prvResetNextTaskUnblockTime+0x38>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	4a04      	ldr	r2, [pc, #16]	@ (80057a0 <prvResetNextTaskUnblockTime+0x3c>)
 800578e:	6013      	str	r3, [r2, #0]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000990 	.word	0x20000990
 80057a0:	200009f8 	.word	0x200009f8

080057a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057aa:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <xTaskGetSchedulerState+0x34>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057b2:	2301      	movs	r3, #1
 80057b4:	607b      	str	r3, [r7, #4]
 80057b6:	e008      	b.n	80057ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b8:	4b08      	ldr	r3, [pc, #32]	@ (80057dc <xTaskGetSchedulerState+0x38>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057c0:	2302      	movs	r3, #2
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	e001      	b.n	80057ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057ca:	687b      	ldr	r3, [r7, #4]
	}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	200009e4 	.word	0x200009e4
 80057dc:	20000a00 	.word	0x20000a00

080057e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d05e      	beq.n	80058b4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fa:	4b31      	ldr	r3, [pc, #196]	@ (80058c0 <xTaskPriorityInherit+0xe0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005800:	429a      	cmp	r2, r3
 8005802:	d24e      	bcs.n	80058a2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	db06      	blt.n	800581a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580c:	4b2c      	ldr	r3, [pc, #176]	@ (80058c0 <xTaskPriorityInherit+0xe0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005812:	f1c3 0207 	rsb	r2, r3, #7
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6959      	ldr	r1, [r3, #20]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4a26      	ldr	r2, [pc, #152]	@ (80058c4 <xTaskPriorityInherit+0xe4>)
 800582c:	4413      	add	r3, r2
 800582e:	4299      	cmp	r1, r3
 8005830:	d12f      	bne.n	8005892 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	3304      	adds	r3, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe fbd8 	bl	8003fec <uxListRemove>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	2201      	movs	r2, #1
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43da      	mvns	r2, r3
 800584e:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <xTaskPriorityInherit+0xe8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4013      	ands	r3, r2
 8005854:	4a1c      	ldr	r2, [pc, #112]	@ (80058c8 <xTaskPriorityInherit+0xe8>)
 8005856:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005858:	4b19      	ldr	r3, [pc, #100]	@ (80058c0 <xTaskPriorityInherit+0xe0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	2201      	movs	r2, #1
 8005868:	409a      	lsls	r2, r3
 800586a:	4b17      	ldr	r3, [pc, #92]	@ (80058c8 <xTaskPriorityInherit+0xe8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4313      	orrs	r3, r2
 8005870:	4a15      	ldr	r2, [pc, #84]	@ (80058c8 <xTaskPriorityInherit+0xe8>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4a10      	ldr	r2, [pc, #64]	@ (80058c4 <xTaskPriorityInherit+0xe4>)
 8005882:	441a      	add	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f7fe fb53 	bl	8003f36 <vListInsertEnd>
 8005890:	e004      	b.n	800589c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005892:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <xTaskPriorityInherit+0xe0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800589c:	2301      	movs	r3, #1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e008      	b.n	80058b4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058a6:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <xTaskPriorityInherit+0xe0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d201      	bcs.n	80058b4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80058b0:	2301      	movs	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058b4:	68fb      	ldr	r3, [r7, #12]
	}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200008d8 	.word	0x200008d8
 80058c4:	200008dc 	.word	0x200008dc
 80058c8:	200009e0 	.word	0x200009e0

080058cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d070      	beq.n	80059c4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058e2:	4b3b      	ldr	r3, [pc, #236]	@ (80059d0 <xTaskPriorityDisinherit+0x104>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d00b      	beq.n	8005904 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60fb      	str	r3, [r7, #12]
}
 80058fe:	bf00      	nop
 8005900:	bf00      	nop
 8005902:	e7fd      	b.n	8005900 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60bb      	str	r3, [r7, #8]
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	e7fd      	b.n	8005920 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005928:	1e5a      	subs	r2, r3, #1
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	429a      	cmp	r2, r3
 8005938:	d044      	beq.n	80059c4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800593e:	2b00      	cmp	r3, #0
 8005940:	d140      	bne.n	80059c4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3304      	adds	r3, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe fb50 	bl	8003fec <uxListRemove>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d115      	bne.n	800597e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005956:	491f      	ldr	r1, [pc, #124]	@ (80059d4 <xTaskPriorityDisinherit+0x108>)
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <xTaskPriorityDisinherit+0xb2>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	2201      	movs	r2, #1
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43da      	mvns	r2, r3
 8005974:	4b18      	ldr	r3, [pc, #96]	@ (80059d8 <xTaskPriorityDisinherit+0x10c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	4a17      	ldr	r2, [pc, #92]	@ (80059d8 <xTaskPriorityDisinherit+0x10c>)
 800597c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	f1c3 0207 	rsb	r2, r3, #7
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	2201      	movs	r2, #1
 8005998:	409a      	lsls	r2, r3
 800599a:	4b0f      	ldr	r3, [pc, #60]	@ (80059d8 <xTaskPriorityDisinherit+0x10c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	4a0d      	ldr	r2, [pc, #52]	@ (80059d8 <xTaskPriorityDisinherit+0x10c>)
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4a08      	ldr	r2, [pc, #32]	@ (80059d4 <xTaskPriorityDisinherit+0x108>)
 80059b2:	441a      	add	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7fe fabb 	bl	8003f36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059c4:	697b      	ldr	r3, [r7, #20]
	}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200008d8 	.word	0x200008d8
 80059d4:	200008dc 	.word	0x200008dc
 80059d8:	200009e0 	.word	0x200009e0

080059dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80059ea:	2301      	movs	r3, #1
 80059ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d079      	beq.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10b      	bne.n	8005a14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	60fb      	str	r3, [r7, #12]
}
 8005a0e:	bf00      	nop
 8005a10:	bf00      	nop
 8005a12:	e7fd      	b.n	8005a10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d902      	bls.n	8005a24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	e002      	b.n	8005a2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d059      	beq.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d154      	bne.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005af0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d10b      	bne.n	8005a60 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	60bb      	str	r3, [r7, #8]
}
 8005a5a:	bf00      	nop
 8005a5c:	bf00      	nop
 8005a5e:	e7fd      	b.n	8005a5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db04      	blt.n	8005a7e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f1c3 0207 	rsb	r2, r3, #7
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	6959      	ldr	r1, [r3, #20]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4a19      	ldr	r2, [pc, #100]	@ (8005af4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005a8e:	4413      	add	r3, r2
 8005a90:	4299      	cmp	r1, r3
 8005a92:	d129      	bne.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe faa7 	bl	8003fec <uxListRemove>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	4b11      	ldr	r3, [pc, #68]	@ (8005af8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	4a10      	ldr	r2, [pc, #64]	@ (8005af8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005ab8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abe:	2201      	movs	r2, #1
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8005af8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4a06      	ldr	r2, [pc, #24]	@ (8005af4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005ada:	441a      	add	r2, r3
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f7fe fa27 	bl	8003f36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ae8:	bf00      	nop
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	200008d8 	.word	0x200008d8
 8005af4:	200008dc 	.word	0x200008dc
 8005af8:	200009e0 	.word	0x200009e0

08005afc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b00:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d004      	beq.n	8005b12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b08:	4b05      	ldr	r3, [pc, #20]	@ (8005b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b0e:	3201      	adds	r2, #1
 8005b10:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005b12:	4b03      	ldr	r3, [pc, #12]	@ (8005b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b14:	681b      	ldr	r3, [r3, #0]
	}
 8005b16:	4618      	mov	r0, r3
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	200008d8 	.word	0x200008d8

08005b24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b2e:	4b29      	ldr	r3, [pc, #164]	@ (8005bd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b34:	4b28      	ldr	r3, [pc, #160]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fa56 	bl	8003fec <uxListRemove>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10b      	bne.n	8005b5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b46:	4b24      	ldr	r3, [pc, #144]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43da      	mvns	r2, r3
 8005b54:	4b21      	ldr	r3, [pc, #132]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	4a20      	ldr	r2, [pc, #128]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b64:	d10a      	bne.n	8005b7c <prvAddCurrentTaskToDelayedList+0x58>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4619      	mov	r1, r3
 8005b74:	481a      	ldr	r0, [pc, #104]	@ (8005be0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b76:	f7fe f9de 	bl	8003f36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b7a:	e026      	b.n	8005bca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b84:	4b14      	ldr	r3, [pc, #80]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d209      	bcs.n	8005ba8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b94:	4b13      	ldr	r3, [pc, #76]	@ (8005be4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f7fe f9eb 	bl	8003f7c <vListInsert>
}
 8005ba6:	e010      	b.n	8005bca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8005be8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f7fe f9e1 	bl	8003f7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bba:	4b0c      	ldr	r3, [pc, #48]	@ (8005bec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d202      	bcs.n	8005bca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005bc4:	4a09      	ldr	r2, [pc, #36]	@ (8005bec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6013      	str	r3, [r2, #0]
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200009dc 	.word	0x200009dc
 8005bd8:	200008d8 	.word	0x200008d8
 8005bdc:	200009e0 	.word	0x200009e0
 8005be0:	200009c4 	.word	0x200009c4
 8005be4:	20000994 	.word	0x20000994
 8005be8:	20000990 	.word	0x20000990
 8005bec:	200009f8 	.word	0x200009f8

08005bf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3b04      	subs	r3, #4
 8005c00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3b04      	subs	r3, #4
 8005c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f023 0201 	bic.w	r2, r3, #1
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3b04      	subs	r3, #4
 8005c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c20:	4a08      	ldr	r2, [pc, #32]	@ (8005c44 <pxPortInitialiseStack+0x54>)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3b14      	subs	r3, #20
 8005c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3b20      	subs	r3, #32
 8005c36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c38:	68fb      	ldr	r3, [r7, #12]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	08005c49 	.word	0x08005c49

08005c48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c52:	4b12      	ldr	r3, [pc, #72]	@ (8005c9c <prvTaskExitError+0x54>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c5a:	d00b      	beq.n	8005c74 <prvTaskExitError+0x2c>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <prvTaskExitError+0x28>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60bb      	str	r3, [r7, #8]
}
 8005c86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c88:	bf00      	nop
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0fc      	beq.n	8005c8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	2000001c 	.word	0x2000001c

08005ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ca0:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <pxCurrentTCBConst2>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005caa:	f380 8809 	msr	PSP, r0
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0
 8005cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8005cbe:	4770      	bx	lr

08005cc0 <pxCurrentTCBConst2>:
 8005cc0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005cc8:	4806      	ldr	r0, [pc, #24]	@ (8005ce4 <prvPortStartFirstTask+0x1c>)
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f380 8808 	msr	MSP, r0
 8005cd2:	b662      	cpsie	i
 8005cd4:	b661      	cpsie	f
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	df00      	svc	0
 8005ce0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed08 	.word	0xe000ed08

08005ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cee:	4b32      	ldr	r3, [pc, #200]	@ (8005db8 <xPortStartScheduler+0xd0>)
 8005cf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	22ff      	movs	r2, #255	@ 0xff
 8005cfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b2a      	ldr	r3, [pc, #168]	@ (8005dbc <xPortStartScheduler+0xd4>)
 8005d14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d16:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc0 <xPortStartScheduler+0xd8>)
 8005d18:	2207      	movs	r2, #7
 8005d1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d1c:	e009      	b.n	8005d32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d1e:	4b28      	ldr	r3, [pc, #160]	@ (8005dc0 <xPortStartScheduler+0xd8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	4a26      	ldr	r2, [pc, #152]	@ (8005dc0 <xPortStartScheduler+0xd8>)
 8005d26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3a:	2b80      	cmp	r3, #128	@ 0x80
 8005d3c:	d0ef      	beq.n	8005d1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d3e:	4b20      	ldr	r3, [pc, #128]	@ (8005dc0 <xPortStartScheduler+0xd8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1c3 0307 	rsb	r3, r3, #7
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d00b      	beq.n	8005d62 <xPortStartScheduler+0x7a>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	60bb      	str	r3, [r7, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d62:	4b17      	ldr	r3, [pc, #92]	@ (8005dc0 <xPortStartScheduler+0xd8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	4a15      	ldr	r2, [pc, #84]	@ (8005dc0 <xPortStartScheduler+0xd8>)
 8005d6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d6c:	4b14      	ldr	r3, [pc, #80]	@ (8005dc0 <xPortStartScheduler+0xd8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d74:	4a12      	ldr	r2, [pc, #72]	@ (8005dc0 <xPortStartScheduler+0xd8>)
 8005d76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d80:	4b10      	ldr	r3, [pc, #64]	@ (8005dc4 <xPortStartScheduler+0xdc>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0f      	ldr	r2, [pc, #60]	@ (8005dc4 <xPortStartScheduler+0xdc>)
 8005d86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <xPortStartScheduler+0xdc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc4 <xPortStartScheduler+0xdc>)
 8005d92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005d96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d98:	f000 f8b8 	bl	8005f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <xPortStartScheduler+0xe0>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005da2:	f7ff ff91 	bl	8005cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005da6:	f7ff faaf 	bl	8005308 <vTaskSwitchContext>
	prvTaskExitError();
 8005daa:	f7ff ff4d 	bl	8005c48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	e000e400 	.word	0xe000e400
 8005dbc:	20000a04 	.word	0x20000a04
 8005dc0:	20000a08 	.word	0x20000a08
 8005dc4:	e000ed20 	.word	0xe000ed20
 8005dc8:	2000001c 	.word	0x2000001c

08005dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	607b      	str	r3, [r7, #4]
}
 8005de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005de6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e24 <vPortEnterCritical+0x58>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	4a0d      	ldr	r2, [pc, #52]	@ (8005e24 <vPortEnterCritical+0x58>)
 8005dee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005df0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <vPortEnterCritical+0x58>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d110      	bne.n	8005e1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005df8:	4b0b      	ldr	r3, [pc, #44]	@ (8005e28 <vPortEnterCritical+0x5c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <vPortEnterCritical+0x4e>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	603b      	str	r3, [r7, #0]
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	e7fd      	b.n	8005e16 <vPortEnterCritical+0x4a>
	}
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr
 8005e24:	2000001c 	.word	0x2000001c
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e32:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <vPortExitCritical+0x50>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <vPortExitCritical+0x26>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	607b      	str	r3, [r7, #4]
}
 8005e4c:	bf00      	nop
 8005e4e:	bf00      	nop
 8005e50:	e7fd      	b.n	8005e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e52:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <vPortExitCritical+0x50>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	4a08      	ldr	r2, [pc, #32]	@ (8005e7c <vPortExitCritical+0x50>)
 8005e5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e5c:	4b07      	ldr	r3, [pc, #28]	@ (8005e7c <vPortExitCritical+0x50>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <vPortExitCritical+0x44>
 8005e64:	2300      	movs	r3, #0
 8005e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	2000001c 	.word	0x2000001c

08005e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e80:	f3ef 8009 	mrs	r0, PSP
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec0 <pxCurrentTCBConst>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e90:	6010      	str	r0, [r2, #0]
 8005e92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005e96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005e9a:	f380 8811 	msr	BASEPRI, r0
 8005e9e:	f7ff fa33 	bl	8005308 <vTaskSwitchContext>
 8005ea2:	f04f 0000 	mov.w	r0, #0
 8005ea6:	f380 8811 	msr	BASEPRI, r0
 8005eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005eae:	6819      	ldr	r1, [r3, #0]
 8005eb0:	6808      	ldr	r0, [r1, #0]
 8005eb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005eb6:	f380 8809 	msr	PSP, r0
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	4770      	bx	lr

08005ec0 <pxCurrentTCBConst>:
 8005ec0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ee2:	f7ff f957 	bl	8005194 <xTaskIncrementTick>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eec:	4b06      	ldr	r3, [pc, #24]	@ (8005f08 <SysTick_Handler+0x40>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f383 8811 	msr	BASEPRI, r3
}
 8005efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f10:	4b0a      	ldr	r3, [pc, #40]	@ (8005f3c <vPortSetupTimerInterrupt+0x30>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f16:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <vPortSetupTimerInterrupt+0x34>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f1c:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <vPortSetupTimerInterrupt+0x38>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a09      	ldr	r2, [pc, #36]	@ (8005f48 <vPortSetupTimerInterrupt+0x3c>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	4a08      	ldr	r2, [pc, #32]	@ (8005f4c <vPortSetupTimerInterrupt+0x40>)
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f2e:	4b03      	ldr	r3, [pc, #12]	@ (8005f3c <vPortSetupTimerInterrupt+0x30>)
 8005f30:	2207      	movs	r2, #7
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr
 8005f3c:	e000e010 	.word	0xe000e010
 8005f40:	e000e018 	.word	0xe000e018
 8005f44:	20000010 	.word	0x20000010
 8005f48:	10624dd3 	.word	0x10624dd3
 8005f4c:	e000e014 	.word	0xe000e014

08005f50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f56:	f3ef 8305 	mrs	r3, IPSR
 8005f5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b0f      	cmp	r3, #15
 8005f60:	d915      	bls.n	8005f8e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f62:	4a17      	ldr	r2, [pc, #92]	@ (8005fc0 <vPortValidateInterruptPriority+0x70>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f6c:	4b15      	ldr	r3, [pc, #84]	@ (8005fc4 <vPortValidateInterruptPriority+0x74>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	7afa      	ldrb	r2, [r7, #11]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d20b      	bcs.n	8005f8e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	607b      	str	r3, [r7, #4]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc8 <vPortValidateInterruptPriority+0x78>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f96:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <vPortValidateInterruptPriority+0x7c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d90b      	bls.n	8005fb6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	603b      	str	r3, [r7, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <vPortValidateInterruptPriority+0x62>
	}
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	e000e3f0 	.word	0xe000e3f0
 8005fc4:	20000a04 	.word	0x20000a04
 8005fc8:	e000ed0c 	.word	0xe000ed0c
 8005fcc:	20000a08 	.word	0x20000a08

08005fd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	@ 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fdc:	f7ff f82e 	bl	800503c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fe0:	4b5c      	ldr	r3, [pc, #368]	@ (8006154 <pvPortMalloc+0x184>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fe8:	f000 f92e 	bl	8006248 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fec:	4b5a      	ldr	r3, [pc, #360]	@ (8006158 <pvPortMalloc+0x188>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 8095 	bne.w	8006124 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01e      	beq.n	800603e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006000:	2208      	movs	r2, #8
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4413      	add	r3, r2
 8006006:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b00      	cmp	r3, #0
 8006010:	d015      	beq.n	800603e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f023 0307 	bic.w	r3, r3, #7
 8006018:	3308      	adds	r3, #8
 800601a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <pvPortMalloc+0x6e>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	617b      	str	r3, [r7, #20]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d06f      	beq.n	8006124 <pvPortMalloc+0x154>
 8006044:	4b45      	ldr	r3, [pc, #276]	@ (800615c <pvPortMalloc+0x18c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d86a      	bhi.n	8006124 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800604e:	4b44      	ldr	r3, [pc, #272]	@ (8006160 <pvPortMalloc+0x190>)
 8006050:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006052:	4b43      	ldr	r3, [pc, #268]	@ (8006160 <pvPortMalloc+0x190>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006058:	e004      	b.n	8006064 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d903      	bls.n	8006076 <pvPortMalloc+0xa6>
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f1      	bne.n	800605a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006076:	4b37      	ldr	r3, [pc, #220]	@ (8006154 <pvPortMalloc+0x184>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800607c:	429a      	cmp	r2, r3
 800607e:	d051      	beq.n	8006124 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2208      	movs	r2, #8
 8006086:	4413      	add	r3, r2
 8006088:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	1ad2      	subs	r2, r2, r3
 800609a:	2308      	movs	r3, #8
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	429a      	cmp	r2, r3
 80060a0:	d920      	bls.n	80060e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <pvPortMalloc+0xfc>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	613b      	str	r3, [r7, #16]
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	e7fd      	b.n	80060c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	1ad2      	subs	r2, r2, r3
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060de:	69b8      	ldr	r0, [r7, #24]
 80060e0:	f000 f914 	bl	800630c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060e4:	4b1d      	ldr	r3, [pc, #116]	@ (800615c <pvPortMalloc+0x18c>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	4a1b      	ldr	r2, [pc, #108]	@ (800615c <pvPortMalloc+0x18c>)
 80060f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060f2:	4b1a      	ldr	r3, [pc, #104]	@ (800615c <pvPortMalloc+0x18c>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <pvPortMalloc+0x194>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d203      	bcs.n	8006106 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060fe:	4b17      	ldr	r3, [pc, #92]	@ (800615c <pvPortMalloc+0x18c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a18      	ldr	r2, [pc, #96]	@ (8006164 <pvPortMalloc+0x194>)
 8006104:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	4b13      	ldr	r3, [pc, #76]	@ (8006158 <pvPortMalloc+0x188>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	431a      	orrs	r2, r3
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800611a:	4b13      	ldr	r3, [pc, #76]	@ (8006168 <pvPortMalloc+0x198>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a11      	ldr	r2, [pc, #68]	@ (8006168 <pvPortMalloc+0x198>)
 8006122:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006124:	f7fe ff98 	bl	8005058 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <pvPortMalloc+0x17a>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	60fb      	str	r3, [r7, #12]
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop
 8006148:	e7fd      	b.n	8006146 <pvPortMalloc+0x176>
	return pvReturn;
 800614a:	69fb      	ldr	r3, [r7, #28]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3728      	adds	r7, #40	@ 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20001614 	.word	0x20001614
 8006158:	20001628 	.word	0x20001628
 800615c:	20001618 	.word	0x20001618
 8006160:	2000160c 	.word	0x2000160c
 8006164:	2000161c 	.word	0x2000161c
 8006168:	20001620 	.word	0x20001620

0800616c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d04f      	beq.n	800621e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800617e:	2308      	movs	r3, #8
 8006180:	425b      	negs	r3, r3
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	4b25      	ldr	r3, [pc, #148]	@ (8006228 <vPortFree+0xbc>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <vPortFree+0x46>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60fb      	str	r3, [r7, #12]
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <vPortFree+0x66>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60bb      	str	r3, [r7, #8]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	4b14      	ldr	r3, [pc, #80]	@ (8006228 <vPortFree+0xbc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4013      	ands	r3, r2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01e      	beq.n	800621e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11a      	bne.n	800621e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006228 <vPortFree+0xbc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	43db      	mvns	r3, r3
 80061f2:	401a      	ands	r2, r3
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061f8:	f7fe ff20 	bl	800503c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	4b0a      	ldr	r3, [pc, #40]	@ (800622c <vPortFree+0xc0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4413      	add	r3, r2
 8006206:	4a09      	ldr	r2, [pc, #36]	@ (800622c <vPortFree+0xc0>)
 8006208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800620a:	6938      	ldr	r0, [r7, #16]
 800620c:	f000 f87e 	bl	800630c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006210:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <vPortFree+0xc4>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	4a06      	ldr	r2, [pc, #24]	@ (8006230 <vPortFree+0xc4>)
 8006218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800621a:	f7fe ff1d 	bl	8005058 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800621e:	bf00      	nop
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20001628 	.word	0x20001628
 800622c:	20001618 	.word	0x20001618
 8006230:	20001624 	.word	0x20001624

08006234 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8006238:	4b02      	ldr	r3, [pc, #8]	@ (8006244 <xPortGetFreeHeapSize+0x10>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr
 8006244:	20001618 	.word	0x20001618

08006248 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800624e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006252:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006254:	4b27      	ldr	r3, [pc, #156]	@ (80062f4 <prvHeapInit+0xac>)
 8006256:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3307      	adds	r3, #7
 8006266:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	4a1f      	ldr	r2, [pc, #124]	@ (80062f4 <prvHeapInit+0xac>)
 8006278:	4413      	add	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006280:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <prvHeapInit+0xb0>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006286:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <prvHeapInit+0xb0>)
 8006288:	2200      	movs	r2, #0
 800628a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4413      	add	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006294:	2208      	movs	r2, #8
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0307 	bic.w	r3, r3, #7
 80062a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <prvHeapInit+0xb4>)
 80062a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062aa:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <prvHeapInit+0xb4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062b2:	4b12      	ldr	r3, [pc, #72]	@ (80062fc <prvHeapInit+0xb4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062c8:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <prvHeapInit+0xb4>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006300 <prvHeapInit+0xb8>)
 80062d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4a09      	ldr	r2, [pc, #36]	@ (8006304 <prvHeapInit+0xbc>)
 80062de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062e0:	4b09      	ldr	r3, [pc, #36]	@ (8006308 <prvHeapInit+0xc0>)
 80062e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062e6:	601a      	str	r2, [r3, #0]
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000a0c 	.word	0x20000a0c
 80062f8:	2000160c 	.word	0x2000160c
 80062fc:	20001614 	.word	0x20001614
 8006300:	2000161c 	.word	0x2000161c
 8006304:	20001618 	.word	0x20001618
 8006308:	20001628 	.word	0x20001628

0800630c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006314:	4b27      	ldr	r3, [pc, #156]	@ (80063b4 <prvInsertBlockIntoFreeList+0xa8>)
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	e002      	b.n	8006320 <prvInsertBlockIntoFreeList+0x14>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d8f7      	bhi.n	800631a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	429a      	cmp	r2, r3
 800633a:	d108      	bne.n	800634e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	441a      	add	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	441a      	add	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d118      	bne.n	8006394 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <prvInsertBlockIntoFreeList+0xac>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d00d      	beq.n	800638a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	441a      	add	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e008      	b.n	800639c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800638a:	4b0b      	ldr	r3, [pc, #44]	@ (80063b8 <prvInsertBlockIntoFreeList+0xac>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e003      	b.n	800639c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d002      	beq.n	80063aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr
 80063b4:	2000160c 	.word	0x2000160c
 80063b8:	20001614 	.word	0x20001614

080063bc <siprintf>:
 80063bc:	b40e      	push	{r1, r2, r3}
 80063be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063c2:	b510      	push	{r4, lr}
 80063c4:	2400      	movs	r4, #0
 80063c6:	b09d      	sub	sp, #116	@ 0x74
 80063c8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80063ca:	9002      	str	r0, [sp, #8]
 80063cc:	9006      	str	r0, [sp, #24]
 80063ce:	9107      	str	r1, [sp, #28]
 80063d0:	9104      	str	r1, [sp, #16]
 80063d2:	4809      	ldr	r0, [pc, #36]	@ (80063f8 <siprintf+0x3c>)
 80063d4:	4909      	ldr	r1, [pc, #36]	@ (80063fc <siprintf+0x40>)
 80063d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063da:	9105      	str	r1, [sp, #20]
 80063dc:	6800      	ldr	r0, [r0, #0]
 80063de:	a902      	add	r1, sp, #8
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80063e4:	f000 f9fe 	bl	80067e4 <_svfiprintf_r>
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	701c      	strb	r4, [r3, #0]
 80063ec:	b01d      	add	sp, #116	@ 0x74
 80063ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f2:	b003      	add	sp, #12
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000020 	.word	0x20000020
 80063fc:	ffff0208 	.word	0xffff0208

08006400 <memset>:
 8006400:	4603      	mov	r3, r0
 8006402:	4402      	add	r2, r0
 8006404:	4293      	cmp	r3, r2
 8006406:	d100      	bne.n	800640a <memset+0xa>
 8006408:	4770      	bx	lr
 800640a:	f803 1b01 	strb.w	r1, [r3], #1
 800640e:	e7f9      	b.n	8006404 <memset+0x4>

08006410 <_reclaim_reent>:
 8006410:	4b2d      	ldr	r3, [pc, #180]	@ (80064c8 <_reclaim_reent+0xb8>)
 8006412:	b570      	push	{r4, r5, r6, lr}
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4604      	mov	r4, r0
 8006418:	4283      	cmp	r3, r0
 800641a:	d053      	beq.n	80064c4 <_reclaim_reent+0xb4>
 800641c:	69c3      	ldr	r3, [r0, #28]
 800641e:	b31b      	cbz	r3, 8006468 <_reclaim_reent+0x58>
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	b163      	cbz	r3, 800643e <_reclaim_reent+0x2e>
 8006424:	2500      	movs	r5, #0
 8006426:	69e3      	ldr	r3, [r4, #28]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	5959      	ldr	r1, [r3, r5]
 800642c:	b9b1      	cbnz	r1, 800645c <_reclaim_reent+0x4c>
 800642e:	3504      	adds	r5, #4
 8006430:	2d80      	cmp	r5, #128	@ 0x80
 8006432:	d1f8      	bne.n	8006426 <_reclaim_reent+0x16>
 8006434:	69e3      	ldr	r3, [r4, #28]
 8006436:	4620      	mov	r0, r4
 8006438:	68d9      	ldr	r1, [r3, #12]
 800643a:	f000 f881 	bl	8006540 <_free_r>
 800643e:	69e3      	ldr	r3, [r4, #28]
 8006440:	6819      	ldr	r1, [r3, #0]
 8006442:	b111      	cbz	r1, 800644a <_reclaim_reent+0x3a>
 8006444:	4620      	mov	r0, r4
 8006446:	f000 f87b 	bl	8006540 <_free_r>
 800644a:	69e3      	ldr	r3, [r4, #28]
 800644c:	689d      	ldr	r5, [r3, #8]
 800644e:	b15d      	cbz	r5, 8006468 <_reclaim_reent+0x58>
 8006450:	4629      	mov	r1, r5
 8006452:	4620      	mov	r0, r4
 8006454:	682d      	ldr	r5, [r5, #0]
 8006456:	f000 f873 	bl	8006540 <_free_r>
 800645a:	e7f8      	b.n	800644e <_reclaim_reent+0x3e>
 800645c:	680e      	ldr	r6, [r1, #0]
 800645e:	4620      	mov	r0, r4
 8006460:	f000 f86e 	bl	8006540 <_free_r>
 8006464:	4631      	mov	r1, r6
 8006466:	e7e1      	b.n	800642c <_reclaim_reent+0x1c>
 8006468:	6961      	ldr	r1, [r4, #20]
 800646a:	b111      	cbz	r1, 8006472 <_reclaim_reent+0x62>
 800646c:	4620      	mov	r0, r4
 800646e:	f000 f867 	bl	8006540 <_free_r>
 8006472:	69e1      	ldr	r1, [r4, #28]
 8006474:	b111      	cbz	r1, 800647c <_reclaim_reent+0x6c>
 8006476:	4620      	mov	r0, r4
 8006478:	f000 f862 	bl	8006540 <_free_r>
 800647c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800647e:	b111      	cbz	r1, 8006486 <_reclaim_reent+0x76>
 8006480:	4620      	mov	r0, r4
 8006482:	f000 f85d 	bl	8006540 <_free_r>
 8006486:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006488:	b111      	cbz	r1, 8006490 <_reclaim_reent+0x80>
 800648a:	4620      	mov	r0, r4
 800648c:	f000 f858 	bl	8006540 <_free_r>
 8006490:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006492:	b111      	cbz	r1, 800649a <_reclaim_reent+0x8a>
 8006494:	4620      	mov	r0, r4
 8006496:	f000 f853 	bl	8006540 <_free_r>
 800649a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800649c:	b111      	cbz	r1, 80064a4 <_reclaim_reent+0x94>
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 f84e 	bl	8006540 <_free_r>
 80064a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80064a6:	b111      	cbz	r1, 80064ae <_reclaim_reent+0x9e>
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 f849 	bl	8006540 <_free_r>
 80064ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80064b0:	b111      	cbz	r1, 80064b8 <_reclaim_reent+0xa8>
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f844 	bl	8006540 <_free_r>
 80064b8:	6a23      	ldr	r3, [r4, #32]
 80064ba:	b11b      	cbz	r3, 80064c4 <_reclaim_reent+0xb4>
 80064bc:	4620      	mov	r0, r4
 80064be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064c2:	4718      	bx	r3
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
 80064c6:	bf00      	nop
 80064c8:	20000020 	.word	0x20000020

080064cc <__errno>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	@ (80064d4 <__errno+0x8>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000020 	.word	0x20000020

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	2600      	movs	r6, #0
 80064dc:	4d0c      	ldr	r5, [pc, #48]	@ (8006510 <__libc_init_array+0x38>)
 80064de:	4c0d      	ldr	r4, [pc, #52]	@ (8006514 <__libc_init_array+0x3c>)
 80064e0:	1b64      	subs	r4, r4, r5
 80064e2:	10a4      	asrs	r4, r4, #2
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	f000 fc76 	bl	8006dd8 <_init>
 80064ec:	2600      	movs	r6, #0
 80064ee:	4d0a      	ldr	r5, [pc, #40]	@ (8006518 <__libc_init_array+0x40>)
 80064f0:	4c0a      	ldr	r4, [pc, #40]	@ (800651c <__libc_init_array+0x44>)
 80064f2:	1b64      	subs	r4, r4, r5
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006500:	4798      	blx	r3
 8006502:	3601      	adds	r6, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f855 3b04 	ldr.w	r3, [r5], #4
 800650a:	4798      	blx	r3
 800650c:	3601      	adds	r6, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	08007c0c 	.word	0x08007c0c
 8006514:	08007c0c 	.word	0x08007c0c
 8006518:	08007c0c 	.word	0x08007c0c
 800651c:	08007c10 	.word	0x08007c10

08006520 <__retarget_lock_acquire_recursive>:
 8006520:	4770      	bx	lr

08006522 <__retarget_lock_release_recursive>:
 8006522:	4770      	bx	lr

08006524 <memcpy>:
 8006524:	440a      	add	r2, r1
 8006526:	4291      	cmp	r1, r2
 8006528:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800652c:	d100      	bne.n	8006530 <memcpy+0xc>
 800652e:	4770      	bx	lr
 8006530:	b510      	push	{r4, lr}
 8006532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006536:	4291      	cmp	r1, r2
 8006538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800653c:	d1f9      	bne.n	8006532 <memcpy+0xe>
 800653e:	bd10      	pop	{r4, pc}

08006540 <_free_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4605      	mov	r5, r0
 8006544:	2900      	cmp	r1, #0
 8006546:	d040      	beq.n	80065ca <_free_r+0x8a>
 8006548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800654c:	1f0c      	subs	r4, r1, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	bfb8      	it	lt
 8006552:	18e4      	addlt	r4, r4, r3
 8006554:	f000 f8de 	bl	8006714 <__malloc_lock>
 8006558:	4a1c      	ldr	r2, [pc, #112]	@ (80065cc <_free_r+0x8c>)
 800655a:	6813      	ldr	r3, [r2, #0]
 800655c:	b933      	cbnz	r3, 800656c <_free_r+0x2c>
 800655e:	6063      	str	r3, [r4, #4]
 8006560:	6014      	str	r4, [r2, #0]
 8006562:	4628      	mov	r0, r5
 8006564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006568:	f000 b8da 	b.w	8006720 <__malloc_unlock>
 800656c:	42a3      	cmp	r3, r4
 800656e:	d908      	bls.n	8006582 <_free_r+0x42>
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	1821      	adds	r1, r4, r0
 8006574:	428b      	cmp	r3, r1
 8006576:	bf01      	itttt	eq
 8006578:	6819      	ldreq	r1, [r3, #0]
 800657a:	685b      	ldreq	r3, [r3, #4]
 800657c:	1809      	addeq	r1, r1, r0
 800657e:	6021      	streq	r1, [r4, #0]
 8006580:	e7ed      	b.n	800655e <_free_r+0x1e>
 8006582:	461a      	mov	r2, r3
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	b10b      	cbz	r3, 800658c <_free_r+0x4c>
 8006588:	42a3      	cmp	r3, r4
 800658a:	d9fa      	bls.n	8006582 <_free_r+0x42>
 800658c:	6811      	ldr	r1, [r2, #0]
 800658e:	1850      	adds	r0, r2, r1
 8006590:	42a0      	cmp	r0, r4
 8006592:	d10b      	bne.n	80065ac <_free_r+0x6c>
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	4401      	add	r1, r0
 8006598:	1850      	adds	r0, r2, r1
 800659a:	4283      	cmp	r3, r0
 800659c:	6011      	str	r1, [r2, #0]
 800659e:	d1e0      	bne.n	8006562 <_free_r+0x22>
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	4408      	add	r0, r1
 80065a6:	6010      	str	r0, [r2, #0]
 80065a8:	6053      	str	r3, [r2, #4]
 80065aa:	e7da      	b.n	8006562 <_free_r+0x22>
 80065ac:	d902      	bls.n	80065b4 <_free_r+0x74>
 80065ae:	230c      	movs	r3, #12
 80065b0:	602b      	str	r3, [r5, #0]
 80065b2:	e7d6      	b.n	8006562 <_free_r+0x22>
 80065b4:	6820      	ldr	r0, [r4, #0]
 80065b6:	1821      	adds	r1, r4, r0
 80065b8:	428b      	cmp	r3, r1
 80065ba:	bf01      	itttt	eq
 80065bc:	6819      	ldreq	r1, [r3, #0]
 80065be:	685b      	ldreq	r3, [r3, #4]
 80065c0:	1809      	addeq	r1, r1, r0
 80065c2:	6021      	streq	r1, [r4, #0]
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	6054      	str	r4, [r2, #4]
 80065c8:	e7cb      	b.n	8006562 <_free_r+0x22>
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	20001770 	.word	0x20001770

080065d0 <sbrk_aligned>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006610 <sbrk_aligned+0x40>)
 80065d4:	460c      	mov	r4, r1
 80065d6:	6831      	ldr	r1, [r6, #0]
 80065d8:	4605      	mov	r5, r0
 80065da:	b911      	cbnz	r1, 80065e2 <sbrk_aligned+0x12>
 80065dc:	f000 fba8 	bl	8006d30 <_sbrk_r>
 80065e0:	6030      	str	r0, [r6, #0]
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 fba3 	bl	8006d30 <_sbrk_r>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d103      	bne.n	80065f6 <sbrk_aligned+0x26>
 80065ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80065f2:	4620      	mov	r0, r4
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	1cc4      	adds	r4, r0, #3
 80065f8:	f024 0403 	bic.w	r4, r4, #3
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d0f8      	beq.n	80065f2 <sbrk_aligned+0x22>
 8006600:	1a21      	subs	r1, r4, r0
 8006602:	4628      	mov	r0, r5
 8006604:	f000 fb94 	bl	8006d30 <_sbrk_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d1f2      	bne.n	80065f2 <sbrk_aligned+0x22>
 800660c:	e7ef      	b.n	80065ee <sbrk_aligned+0x1e>
 800660e:	bf00      	nop
 8006610:	2000176c 	.word	0x2000176c

08006614 <_malloc_r>:
 8006614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006618:	1ccd      	adds	r5, r1, #3
 800661a:	f025 0503 	bic.w	r5, r5, #3
 800661e:	3508      	adds	r5, #8
 8006620:	2d0c      	cmp	r5, #12
 8006622:	bf38      	it	cc
 8006624:	250c      	movcc	r5, #12
 8006626:	2d00      	cmp	r5, #0
 8006628:	4606      	mov	r6, r0
 800662a:	db01      	blt.n	8006630 <_malloc_r+0x1c>
 800662c:	42a9      	cmp	r1, r5
 800662e:	d904      	bls.n	800663a <_malloc_r+0x26>
 8006630:	230c      	movs	r3, #12
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	2000      	movs	r0, #0
 8006636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006710 <_malloc_r+0xfc>
 800663e:	f000 f869 	bl	8006714 <__malloc_lock>
 8006642:	f8d8 3000 	ldr.w	r3, [r8]
 8006646:	461c      	mov	r4, r3
 8006648:	bb44      	cbnz	r4, 800669c <_malloc_r+0x88>
 800664a:	4629      	mov	r1, r5
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff ffbf 	bl	80065d0 <sbrk_aligned>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	4604      	mov	r4, r0
 8006656:	d158      	bne.n	800670a <_malloc_r+0xf6>
 8006658:	f8d8 4000 	ldr.w	r4, [r8]
 800665c:	4627      	mov	r7, r4
 800665e:	2f00      	cmp	r7, #0
 8006660:	d143      	bne.n	80066ea <_malloc_r+0xd6>
 8006662:	2c00      	cmp	r4, #0
 8006664:	d04b      	beq.n	80066fe <_malloc_r+0xea>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	4639      	mov	r1, r7
 800666a:	4630      	mov	r0, r6
 800666c:	eb04 0903 	add.w	r9, r4, r3
 8006670:	f000 fb5e 	bl	8006d30 <_sbrk_r>
 8006674:	4581      	cmp	r9, r0
 8006676:	d142      	bne.n	80066fe <_malloc_r+0xea>
 8006678:	6821      	ldr	r1, [r4, #0]
 800667a:	4630      	mov	r0, r6
 800667c:	1a6d      	subs	r5, r5, r1
 800667e:	4629      	mov	r1, r5
 8006680:	f7ff ffa6 	bl	80065d0 <sbrk_aligned>
 8006684:	3001      	adds	r0, #1
 8006686:	d03a      	beq.n	80066fe <_malloc_r+0xea>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	442b      	add	r3, r5
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	f8d8 3000 	ldr.w	r3, [r8]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	bb62      	cbnz	r2, 80066f0 <_malloc_r+0xdc>
 8006696:	f8c8 7000 	str.w	r7, [r8]
 800669a:	e00f      	b.n	80066bc <_malloc_r+0xa8>
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	1b52      	subs	r2, r2, r5
 80066a0:	d420      	bmi.n	80066e4 <_malloc_r+0xd0>
 80066a2:	2a0b      	cmp	r2, #11
 80066a4:	d917      	bls.n	80066d6 <_malloc_r+0xc2>
 80066a6:	1961      	adds	r1, r4, r5
 80066a8:	42a3      	cmp	r3, r4
 80066aa:	6025      	str	r5, [r4, #0]
 80066ac:	bf18      	it	ne
 80066ae:	6059      	strne	r1, [r3, #4]
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	bf08      	it	eq
 80066b4:	f8c8 1000 	streq.w	r1, [r8]
 80066b8:	5162      	str	r2, [r4, r5]
 80066ba:	604b      	str	r3, [r1, #4]
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 f82f 	bl	8006720 <__malloc_unlock>
 80066c2:	f104 000b 	add.w	r0, r4, #11
 80066c6:	1d23      	adds	r3, r4, #4
 80066c8:	f020 0007 	bic.w	r0, r0, #7
 80066cc:	1ac2      	subs	r2, r0, r3
 80066ce:	bf1c      	itt	ne
 80066d0:	1a1b      	subne	r3, r3, r0
 80066d2:	50a3      	strne	r3, [r4, r2]
 80066d4:	e7af      	b.n	8006636 <_malloc_r+0x22>
 80066d6:	6862      	ldr	r2, [r4, #4]
 80066d8:	42a3      	cmp	r3, r4
 80066da:	bf0c      	ite	eq
 80066dc:	f8c8 2000 	streq.w	r2, [r8]
 80066e0:	605a      	strne	r2, [r3, #4]
 80066e2:	e7eb      	b.n	80066bc <_malloc_r+0xa8>
 80066e4:	4623      	mov	r3, r4
 80066e6:	6864      	ldr	r4, [r4, #4]
 80066e8:	e7ae      	b.n	8006648 <_malloc_r+0x34>
 80066ea:	463c      	mov	r4, r7
 80066ec:	687f      	ldr	r7, [r7, #4]
 80066ee:	e7b6      	b.n	800665e <_malloc_r+0x4a>
 80066f0:	461a      	mov	r2, r3
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	d1fb      	bne.n	80066f0 <_malloc_r+0xdc>
 80066f8:	2300      	movs	r3, #0
 80066fa:	6053      	str	r3, [r2, #4]
 80066fc:	e7de      	b.n	80066bc <_malloc_r+0xa8>
 80066fe:	230c      	movs	r3, #12
 8006700:	4630      	mov	r0, r6
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	f000 f80c 	bl	8006720 <__malloc_unlock>
 8006708:	e794      	b.n	8006634 <_malloc_r+0x20>
 800670a:	6005      	str	r5, [r0, #0]
 800670c:	e7d6      	b.n	80066bc <_malloc_r+0xa8>
 800670e:	bf00      	nop
 8006710:	20001770 	.word	0x20001770

08006714 <__malloc_lock>:
 8006714:	4801      	ldr	r0, [pc, #4]	@ (800671c <__malloc_lock+0x8>)
 8006716:	f7ff bf03 	b.w	8006520 <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	20001768 	.word	0x20001768

08006720 <__malloc_unlock>:
 8006720:	4801      	ldr	r0, [pc, #4]	@ (8006728 <__malloc_unlock+0x8>)
 8006722:	f7ff befe 	b.w	8006522 <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	20001768 	.word	0x20001768

0800672c <__ssputs_r>:
 800672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	461f      	mov	r7, r3
 8006732:	688e      	ldr	r6, [r1, #8]
 8006734:	4682      	mov	sl, r0
 8006736:	42be      	cmp	r6, r7
 8006738:	460c      	mov	r4, r1
 800673a:	4690      	mov	r8, r2
 800673c:	680b      	ldr	r3, [r1, #0]
 800673e:	d82d      	bhi.n	800679c <__ssputs_r+0x70>
 8006740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006744:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006748:	d026      	beq.n	8006798 <__ssputs_r+0x6c>
 800674a:	6965      	ldr	r5, [r4, #20]
 800674c:	6909      	ldr	r1, [r1, #16]
 800674e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006752:	eba3 0901 	sub.w	r9, r3, r1
 8006756:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800675a:	1c7b      	adds	r3, r7, #1
 800675c:	444b      	add	r3, r9
 800675e:	106d      	asrs	r5, r5, #1
 8006760:	429d      	cmp	r5, r3
 8006762:	bf38      	it	cc
 8006764:	461d      	movcc	r5, r3
 8006766:	0553      	lsls	r3, r2, #21
 8006768:	d527      	bpl.n	80067ba <__ssputs_r+0x8e>
 800676a:	4629      	mov	r1, r5
 800676c:	f7ff ff52 	bl	8006614 <_malloc_r>
 8006770:	4606      	mov	r6, r0
 8006772:	b360      	cbz	r0, 80067ce <__ssputs_r+0xa2>
 8006774:	464a      	mov	r2, r9
 8006776:	6921      	ldr	r1, [r4, #16]
 8006778:	f7ff fed4 	bl	8006524 <memcpy>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006786:	81a3      	strh	r3, [r4, #12]
 8006788:	6126      	str	r6, [r4, #16]
 800678a:	444e      	add	r6, r9
 800678c:	6026      	str	r6, [r4, #0]
 800678e:	463e      	mov	r6, r7
 8006790:	6165      	str	r5, [r4, #20]
 8006792:	eba5 0509 	sub.w	r5, r5, r9
 8006796:	60a5      	str	r5, [r4, #8]
 8006798:	42be      	cmp	r6, r7
 800679a:	d900      	bls.n	800679e <__ssputs_r+0x72>
 800679c:	463e      	mov	r6, r7
 800679e:	4632      	mov	r2, r6
 80067a0:	4641      	mov	r1, r8
 80067a2:	6820      	ldr	r0, [r4, #0]
 80067a4:	f000 faaa 	bl	8006cfc <memmove>
 80067a8:	2000      	movs	r0, #0
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	1b9b      	subs	r3, r3, r6
 80067ae:	60a3      	str	r3, [r4, #8]
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	4433      	add	r3, r6
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ba:	462a      	mov	r2, r5
 80067bc:	f000 fad6 	bl	8006d6c <_realloc_r>
 80067c0:	4606      	mov	r6, r0
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d1e0      	bne.n	8006788 <__ssputs_r+0x5c>
 80067c6:	4650      	mov	r0, sl
 80067c8:	6921      	ldr	r1, [r4, #16]
 80067ca:	f7ff feb9 	bl	8006540 <_free_r>
 80067ce:	230c      	movs	r3, #12
 80067d0:	f8ca 3000 	str.w	r3, [sl]
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	e7e9      	b.n	80067b6 <__ssputs_r+0x8a>
	...

080067e4 <_svfiprintf_r>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	4698      	mov	r8, r3
 80067ea:	898b      	ldrh	r3, [r1, #12]
 80067ec:	4607      	mov	r7, r0
 80067ee:	061b      	lsls	r3, r3, #24
 80067f0:	460d      	mov	r5, r1
 80067f2:	4614      	mov	r4, r2
 80067f4:	b09d      	sub	sp, #116	@ 0x74
 80067f6:	d510      	bpl.n	800681a <_svfiprintf_r+0x36>
 80067f8:	690b      	ldr	r3, [r1, #16]
 80067fa:	b973      	cbnz	r3, 800681a <_svfiprintf_r+0x36>
 80067fc:	2140      	movs	r1, #64	@ 0x40
 80067fe:	f7ff ff09 	bl	8006614 <_malloc_r>
 8006802:	6028      	str	r0, [r5, #0]
 8006804:	6128      	str	r0, [r5, #16]
 8006806:	b930      	cbnz	r0, 8006816 <_svfiprintf_r+0x32>
 8006808:	230c      	movs	r3, #12
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006810:	b01d      	add	sp, #116	@ 0x74
 8006812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006816:	2340      	movs	r3, #64	@ 0x40
 8006818:	616b      	str	r3, [r5, #20]
 800681a:	2300      	movs	r3, #0
 800681c:	9309      	str	r3, [sp, #36]	@ 0x24
 800681e:	2320      	movs	r3, #32
 8006820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006824:	2330      	movs	r3, #48	@ 0x30
 8006826:	f04f 0901 	mov.w	r9, #1
 800682a:	f8cd 800c 	str.w	r8, [sp, #12]
 800682e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80069c8 <_svfiprintf_r+0x1e4>
 8006832:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006836:	4623      	mov	r3, r4
 8006838:	469a      	mov	sl, r3
 800683a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800683e:	b10a      	cbz	r2, 8006844 <_svfiprintf_r+0x60>
 8006840:	2a25      	cmp	r2, #37	@ 0x25
 8006842:	d1f9      	bne.n	8006838 <_svfiprintf_r+0x54>
 8006844:	ebba 0b04 	subs.w	fp, sl, r4
 8006848:	d00b      	beq.n	8006862 <_svfiprintf_r+0x7e>
 800684a:	465b      	mov	r3, fp
 800684c:	4622      	mov	r2, r4
 800684e:	4629      	mov	r1, r5
 8006850:	4638      	mov	r0, r7
 8006852:	f7ff ff6b 	bl	800672c <__ssputs_r>
 8006856:	3001      	adds	r0, #1
 8006858:	f000 80a7 	beq.w	80069aa <_svfiprintf_r+0x1c6>
 800685c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800685e:	445a      	add	r2, fp
 8006860:	9209      	str	r2, [sp, #36]	@ 0x24
 8006862:	f89a 3000 	ldrb.w	r3, [sl]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 809f 	beq.w	80069aa <_svfiprintf_r+0x1c6>
 800686c:	2300      	movs	r3, #0
 800686e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006876:	f10a 0a01 	add.w	sl, sl, #1
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	9307      	str	r3, [sp, #28]
 800687e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006882:	931a      	str	r3, [sp, #104]	@ 0x68
 8006884:	4654      	mov	r4, sl
 8006886:	2205      	movs	r2, #5
 8006888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688c:	484e      	ldr	r0, [pc, #312]	@ (80069c8 <_svfiprintf_r+0x1e4>)
 800688e:	f000 fa5f 	bl	8006d50 <memchr>
 8006892:	9a04      	ldr	r2, [sp, #16]
 8006894:	b9d8      	cbnz	r0, 80068ce <_svfiprintf_r+0xea>
 8006896:	06d0      	lsls	r0, r2, #27
 8006898:	bf44      	itt	mi
 800689a:	2320      	movmi	r3, #32
 800689c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068a0:	0711      	lsls	r1, r2, #28
 80068a2:	bf44      	itt	mi
 80068a4:	232b      	movmi	r3, #43	@ 0x2b
 80068a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068aa:	f89a 3000 	ldrb.w	r3, [sl]
 80068ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b0:	d015      	beq.n	80068de <_svfiprintf_r+0xfa>
 80068b2:	4654      	mov	r4, sl
 80068b4:	2000      	movs	r0, #0
 80068b6:	f04f 0c0a 	mov.w	ip, #10
 80068ba:	9a07      	ldr	r2, [sp, #28]
 80068bc:	4621      	mov	r1, r4
 80068be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068c2:	3b30      	subs	r3, #48	@ 0x30
 80068c4:	2b09      	cmp	r3, #9
 80068c6:	d94b      	bls.n	8006960 <_svfiprintf_r+0x17c>
 80068c8:	b1b0      	cbz	r0, 80068f8 <_svfiprintf_r+0x114>
 80068ca:	9207      	str	r2, [sp, #28]
 80068cc:	e014      	b.n	80068f8 <_svfiprintf_r+0x114>
 80068ce:	eba0 0308 	sub.w	r3, r0, r8
 80068d2:	fa09 f303 	lsl.w	r3, r9, r3
 80068d6:	4313      	orrs	r3, r2
 80068d8:	46a2      	mov	sl, r4
 80068da:	9304      	str	r3, [sp, #16]
 80068dc:	e7d2      	b.n	8006884 <_svfiprintf_r+0xa0>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	1d19      	adds	r1, r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	9103      	str	r1, [sp, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bfbb      	ittet	lt
 80068ea:	425b      	neglt	r3, r3
 80068ec:	f042 0202 	orrlt.w	r2, r2, #2
 80068f0:	9307      	strge	r3, [sp, #28]
 80068f2:	9307      	strlt	r3, [sp, #28]
 80068f4:	bfb8      	it	lt
 80068f6:	9204      	strlt	r2, [sp, #16]
 80068f8:	7823      	ldrb	r3, [r4, #0]
 80068fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80068fc:	d10a      	bne.n	8006914 <_svfiprintf_r+0x130>
 80068fe:	7863      	ldrb	r3, [r4, #1]
 8006900:	2b2a      	cmp	r3, #42	@ 0x2a
 8006902:	d132      	bne.n	800696a <_svfiprintf_r+0x186>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	3402      	adds	r4, #2
 8006908:	1d1a      	adds	r2, r3, #4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	9203      	str	r2, [sp, #12]
 800690e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80069cc <_svfiprintf_r+0x1e8>
 8006918:	2203      	movs	r2, #3
 800691a:	4650      	mov	r0, sl
 800691c:	7821      	ldrb	r1, [r4, #0]
 800691e:	f000 fa17 	bl	8006d50 <memchr>
 8006922:	b138      	cbz	r0, 8006934 <_svfiprintf_r+0x150>
 8006924:	2240      	movs	r2, #64	@ 0x40
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	eba0 000a 	sub.w	r0, r0, sl
 800692c:	4082      	lsls	r2, r0
 800692e:	4313      	orrs	r3, r2
 8006930:	3401      	adds	r4, #1
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006938:	2206      	movs	r2, #6
 800693a:	4825      	ldr	r0, [pc, #148]	@ (80069d0 <_svfiprintf_r+0x1ec>)
 800693c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006940:	f000 fa06 	bl	8006d50 <memchr>
 8006944:	2800      	cmp	r0, #0
 8006946:	d036      	beq.n	80069b6 <_svfiprintf_r+0x1d2>
 8006948:	4b22      	ldr	r3, [pc, #136]	@ (80069d4 <_svfiprintf_r+0x1f0>)
 800694a:	bb1b      	cbnz	r3, 8006994 <_svfiprintf_r+0x1b0>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	3307      	adds	r3, #7
 8006950:	f023 0307 	bic.w	r3, r3, #7
 8006954:	3308      	adds	r3, #8
 8006956:	9303      	str	r3, [sp, #12]
 8006958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800695a:	4433      	add	r3, r6
 800695c:	9309      	str	r3, [sp, #36]	@ 0x24
 800695e:	e76a      	b.n	8006836 <_svfiprintf_r+0x52>
 8006960:	460c      	mov	r4, r1
 8006962:	2001      	movs	r0, #1
 8006964:	fb0c 3202 	mla	r2, ip, r2, r3
 8006968:	e7a8      	b.n	80068bc <_svfiprintf_r+0xd8>
 800696a:	2300      	movs	r3, #0
 800696c:	f04f 0c0a 	mov.w	ip, #10
 8006970:	4619      	mov	r1, r3
 8006972:	3401      	adds	r4, #1
 8006974:	9305      	str	r3, [sp, #20]
 8006976:	4620      	mov	r0, r4
 8006978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800697c:	3a30      	subs	r2, #48	@ 0x30
 800697e:	2a09      	cmp	r2, #9
 8006980:	d903      	bls.n	800698a <_svfiprintf_r+0x1a6>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0c6      	beq.n	8006914 <_svfiprintf_r+0x130>
 8006986:	9105      	str	r1, [sp, #20]
 8006988:	e7c4      	b.n	8006914 <_svfiprintf_r+0x130>
 800698a:	4604      	mov	r4, r0
 800698c:	2301      	movs	r3, #1
 800698e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006992:	e7f0      	b.n	8006976 <_svfiprintf_r+0x192>
 8006994:	ab03      	add	r3, sp, #12
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	462a      	mov	r2, r5
 800699a:	4638      	mov	r0, r7
 800699c:	4b0e      	ldr	r3, [pc, #56]	@ (80069d8 <_svfiprintf_r+0x1f4>)
 800699e:	a904      	add	r1, sp, #16
 80069a0:	f3af 8000 	nop.w
 80069a4:	1c42      	adds	r2, r0, #1
 80069a6:	4606      	mov	r6, r0
 80069a8:	d1d6      	bne.n	8006958 <_svfiprintf_r+0x174>
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	065b      	lsls	r3, r3, #25
 80069ae:	f53f af2d 	bmi.w	800680c <_svfiprintf_r+0x28>
 80069b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069b4:	e72c      	b.n	8006810 <_svfiprintf_r+0x2c>
 80069b6:	ab03      	add	r3, sp, #12
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	462a      	mov	r2, r5
 80069bc:	4638      	mov	r0, r7
 80069be:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <_svfiprintf_r+0x1f4>)
 80069c0:	a904      	add	r1, sp, #16
 80069c2:	f000 f87d 	bl	8006ac0 <_printf_i>
 80069c6:	e7ed      	b.n	80069a4 <_svfiprintf_r+0x1c0>
 80069c8:	08007bd6 	.word	0x08007bd6
 80069cc:	08007bdc 	.word	0x08007bdc
 80069d0:	08007be0 	.word	0x08007be0
 80069d4:	00000000 	.word	0x00000000
 80069d8:	0800672d 	.word	0x0800672d

080069dc <_printf_common>:
 80069dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	4616      	mov	r6, r2
 80069e2:	4698      	mov	r8, r3
 80069e4:	688a      	ldr	r2, [r1, #8]
 80069e6:	690b      	ldr	r3, [r1, #16]
 80069e8:	4607      	mov	r7, r0
 80069ea:	4293      	cmp	r3, r2
 80069ec:	bfb8      	it	lt
 80069ee:	4613      	movlt	r3, r2
 80069f0:	6033      	str	r3, [r6, #0]
 80069f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069f6:	460c      	mov	r4, r1
 80069f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069fc:	b10a      	cbz	r2, 8006a02 <_printf_common+0x26>
 80069fe:	3301      	adds	r3, #1
 8006a00:	6033      	str	r3, [r6, #0]
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	0699      	lsls	r1, r3, #26
 8006a06:	bf42      	ittt	mi
 8006a08:	6833      	ldrmi	r3, [r6, #0]
 8006a0a:	3302      	addmi	r3, #2
 8006a0c:	6033      	strmi	r3, [r6, #0]
 8006a0e:	6825      	ldr	r5, [r4, #0]
 8006a10:	f015 0506 	ands.w	r5, r5, #6
 8006a14:	d106      	bne.n	8006a24 <_printf_common+0x48>
 8006a16:	f104 0a19 	add.w	sl, r4, #25
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	6832      	ldr	r2, [r6, #0]
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	42ab      	cmp	r3, r5
 8006a22:	dc2b      	bgt.n	8006a7c <_printf_common+0xa0>
 8006a24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	3b00      	subs	r3, #0
 8006a2c:	bf18      	it	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	0692      	lsls	r2, r2, #26
 8006a32:	d430      	bmi.n	8006a96 <_printf_common+0xba>
 8006a34:	4641      	mov	r1, r8
 8006a36:	4638      	mov	r0, r7
 8006a38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a3c:	47c8      	blx	r9
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d023      	beq.n	8006a8a <_printf_common+0xae>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	f003 0306 	and.w	r3, r3, #6
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	bf14      	ite	ne
 8006a4e:	2500      	movne	r5, #0
 8006a50:	6833      	ldreq	r3, [r6, #0]
 8006a52:	f04f 0600 	mov.w	r6, #0
 8006a56:	bf08      	it	eq
 8006a58:	68e5      	ldreq	r5, [r4, #12]
 8006a5a:	f104 041a 	add.w	r4, r4, #26
 8006a5e:	bf08      	it	eq
 8006a60:	1aed      	subeq	r5, r5, r3
 8006a62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006a66:	bf08      	it	eq
 8006a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	bfc4      	itt	gt
 8006a70:	1a9b      	subgt	r3, r3, r2
 8006a72:	18ed      	addgt	r5, r5, r3
 8006a74:	42b5      	cmp	r5, r6
 8006a76:	d11a      	bne.n	8006aae <_printf_common+0xd2>
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e008      	b.n	8006a8e <_printf_common+0xb2>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4652      	mov	r2, sl
 8006a80:	4641      	mov	r1, r8
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c8      	blx	r9
 8006a86:	3001      	adds	r0, #1
 8006a88:	d103      	bne.n	8006a92 <_printf_common+0xb6>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a92:	3501      	adds	r5, #1
 8006a94:	e7c1      	b.n	8006a1a <_printf_common+0x3e>
 8006a96:	2030      	movs	r0, #48	@ 0x30
 8006a98:	18e1      	adds	r1, r4, r3
 8006a9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006aa4:	4422      	add	r2, r4
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006aac:	e7c2      	b.n	8006a34 <_printf_common+0x58>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	4641      	mov	r1, r8
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	47c8      	blx	r9
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d0e6      	beq.n	8006a8a <_printf_common+0xae>
 8006abc:	3601      	adds	r6, #1
 8006abe:	e7d9      	b.n	8006a74 <_printf_common+0x98>

08006ac0 <_printf_i>:
 8006ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	7e0f      	ldrb	r7, [r1, #24]
 8006ac6:	4691      	mov	r9, r2
 8006ac8:	2f78      	cmp	r7, #120	@ 0x78
 8006aca:	4680      	mov	r8, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	469a      	mov	sl, r3
 8006ad0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ad6:	d807      	bhi.n	8006ae8 <_printf_i+0x28>
 8006ad8:	2f62      	cmp	r7, #98	@ 0x62
 8006ada:	d80a      	bhi.n	8006af2 <_printf_i+0x32>
 8006adc:	2f00      	cmp	r7, #0
 8006ade:	f000 80d1 	beq.w	8006c84 <_printf_i+0x1c4>
 8006ae2:	2f58      	cmp	r7, #88	@ 0x58
 8006ae4:	f000 80b8 	beq.w	8006c58 <_printf_i+0x198>
 8006ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006aec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006af0:	e03a      	b.n	8006b68 <_printf_i+0xa8>
 8006af2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006af6:	2b15      	cmp	r3, #21
 8006af8:	d8f6      	bhi.n	8006ae8 <_printf_i+0x28>
 8006afa:	a101      	add	r1, pc, #4	@ (adr r1, 8006b00 <_printf_i+0x40>)
 8006afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006ae9 	.word	0x08006ae9
 8006b0c:	08006ae9 	.word	0x08006ae9
 8006b10:	08006ae9 	.word	0x08006ae9
 8006b14:	08006ae9 	.word	0x08006ae9
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006ae9 	.word	0x08006ae9
 8006b20:	08006ae9 	.word	0x08006ae9
 8006b24:	08006ae9 	.word	0x08006ae9
 8006b28:	08006ae9 	.word	0x08006ae9
 8006b2c:	08006c6b 	.word	0x08006c6b
 8006b30:	08006b97 	.word	0x08006b97
 8006b34:	08006c25 	.word	0x08006c25
 8006b38:	08006ae9 	.word	0x08006ae9
 8006b3c:	08006ae9 	.word	0x08006ae9
 8006b40:	08006c8d 	.word	0x08006c8d
 8006b44:	08006ae9 	.word	0x08006ae9
 8006b48:	08006b97 	.word	0x08006b97
 8006b4c:	08006ae9 	.word	0x08006ae9
 8006b50:	08006ae9 	.word	0x08006ae9
 8006b54:	08006c2d 	.word	0x08006c2d
 8006b58:	6833      	ldr	r3, [r6, #0]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6032      	str	r2, [r6, #0]
 8006b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e09c      	b.n	8006ca6 <_printf_i+0x1e6>
 8006b6c:	6833      	ldr	r3, [r6, #0]
 8006b6e:	6820      	ldr	r0, [r4, #0]
 8006b70:	1d19      	adds	r1, r3, #4
 8006b72:	6031      	str	r1, [r6, #0]
 8006b74:	0606      	lsls	r6, r0, #24
 8006b76:	d501      	bpl.n	8006b7c <_printf_i+0xbc>
 8006b78:	681d      	ldr	r5, [r3, #0]
 8006b7a:	e003      	b.n	8006b84 <_printf_i+0xc4>
 8006b7c:	0645      	lsls	r5, r0, #25
 8006b7e:	d5fb      	bpl.n	8006b78 <_printf_i+0xb8>
 8006b80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	da03      	bge.n	8006b90 <_printf_i+0xd0>
 8006b88:	232d      	movs	r3, #45	@ 0x2d
 8006b8a:	426d      	negs	r5, r5
 8006b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b90:	230a      	movs	r3, #10
 8006b92:	4858      	ldr	r0, [pc, #352]	@ (8006cf4 <_printf_i+0x234>)
 8006b94:	e011      	b.n	8006bba <_printf_i+0xfa>
 8006b96:	6821      	ldr	r1, [r4, #0]
 8006b98:	6833      	ldr	r3, [r6, #0]
 8006b9a:	0608      	lsls	r0, r1, #24
 8006b9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ba0:	d402      	bmi.n	8006ba8 <_printf_i+0xe8>
 8006ba2:	0649      	lsls	r1, r1, #25
 8006ba4:	bf48      	it	mi
 8006ba6:	b2ad      	uxthmi	r5, r5
 8006ba8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	bf14      	ite	ne
 8006bae:	230a      	movne	r3, #10
 8006bb0:	2308      	moveq	r3, #8
 8006bb2:	4850      	ldr	r0, [pc, #320]	@ (8006cf4 <_printf_i+0x234>)
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bba:	6866      	ldr	r6, [r4, #4]
 8006bbc:	2e00      	cmp	r6, #0
 8006bbe:	60a6      	str	r6, [r4, #8]
 8006bc0:	db05      	blt.n	8006bce <_printf_i+0x10e>
 8006bc2:	6821      	ldr	r1, [r4, #0]
 8006bc4:	432e      	orrs	r6, r5
 8006bc6:	f021 0104 	bic.w	r1, r1, #4
 8006bca:	6021      	str	r1, [r4, #0]
 8006bcc:	d04b      	beq.n	8006c66 <_printf_i+0x1a6>
 8006bce:	4616      	mov	r6, r2
 8006bd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bd4:	fb03 5711 	mls	r7, r3, r1, r5
 8006bd8:	5dc7      	ldrb	r7, [r0, r7]
 8006bda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bde:	462f      	mov	r7, r5
 8006be0:	42bb      	cmp	r3, r7
 8006be2:	460d      	mov	r5, r1
 8006be4:	d9f4      	bls.n	8006bd0 <_printf_i+0x110>
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d10b      	bne.n	8006c02 <_printf_i+0x142>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	07df      	lsls	r7, r3, #31
 8006bee:	d508      	bpl.n	8006c02 <_printf_i+0x142>
 8006bf0:	6923      	ldr	r3, [r4, #16]
 8006bf2:	6861      	ldr	r1, [r4, #4]
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	bfde      	ittt	le
 8006bf8:	2330      	movle	r3, #48	@ 0x30
 8006bfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bfe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006c02:	1b92      	subs	r2, r2, r6
 8006c04:	6122      	str	r2, [r4, #16]
 8006c06:	464b      	mov	r3, r9
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	f8cd a000 	str.w	sl, [sp]
 8006c10:	aa03      	add	r2, sp, #12
 8006c12:	f7ff fee3 	bl	80069dc <_printf_common>
 8006c16:	3001      	adds	r0, #1
 8006c18:	d14a      	bne.n	8006cb0 <_printf_i+0x1f0>
 8006c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c1e:	b004      	add	sp, #16
 8006c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	f043 0320 	orr.w	r3, r3, #32
 8006c2a:	6023      	str	r3, [r4, #0]
 8006c2c:	2778      	movs	r7, #120	@ 0x78
 8006c2e:	4832      	ldr	r0, [pc, #200]	@ (8006cf8 <_printf_i+0x238>)
 8006c30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	6831      	ldr	r1, [r6, #0]
 8006c38:	061f      	lsls	r7, r3, #24
 8006c3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c3e:	d402      	bmi.n	8006c46 <_printf_i+0x186>
 8006c40:	065f      	lsls	r7, r3, #25
 8006c42:	bf48      	it	mi
 8006c44:	b2ad      	uxthmi	r5, r5
 8006c46:	6031      	str	r1, [r6, #0]
 8006c48:	07d9      	lsls	r1, r3, #31
 8006c4a:	bf44      	itt	mi
 8006c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8006c50:	6023      	strmi	r3, [r4, #0]
 8006c52:	b11d      	cbz	r5, 8006c5c <_printf_i+0x19c>
 8006c54:	2310      	movs	r3, #16
 8006c56:	e7ad      	b.n	8006bb4 <_printf_i+0xf4>
 8006c58:	4826      	ldr	r0, [pc, #152]	@ (8006cf4 <_printf_i+0x234>)
 8006c5a:	e7e9      	b.n	8006c30 <_printf_i+0x170>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	f023 0320 	bic.w	r3, r3, #32
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	e7f6      	b.n	8006c54 <_printf_i+0x194>
 8006c66:	4616      	mov	r6, r2
 8006c68:	e7bd      	b.n	8006be6 <_printf_i+0x126>
 8006c6a:	6833      	ldr	r3, [r6, #0]
 8006c6c:	6825      	ldr	r5, [r4, #0]
 8006c6e:	1d18      	adds	r0, r3, #4
 8006c70:	6961      	ldr	r1, [r4, #20]
 8006c72:	6030      	str	r0, [r6, #0]
 8006c74:	062e      	lsls	r6, r5, #24
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	d501      	bpl.n	8006c7e <_printf_i+0x1be>
 8006c7a:	6019      	str	r1, [r3, #0]
 8006c7c:	e002      	b.n	8006c84 <_printf_i+0x1c4>
 8006c7e:	0668      	lsls	r0, r5, #25
 8006c80:	d5fb      	bpl.n	8006c7a <_printf_i+0x1ba>
 8006c82:	8019      	strh	r1, [r3, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	4616      	mov	r6, r2
 8006c88:	6123      	str	r3, [r4, #16]
 8006c8a:	e7bc      	b.n	8006c06 <_printf_i+0x146>
 8006c8c:	6833      	ldr	r3, [r6, #0]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	1d1a      	adds	r2, r3, #4
 8006c92:	6032      	str	r2, [r6, #0]
 8006c94:	681e      	ldr	r6, [r3, #0]
 8006c96:	6862      	ldr	r2, [r4, #4]
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f000 f859 	bl	8006d50 <memchr>
 8006c9e:	b108      	cbz	r0, 8006ca4 <_printf_i+0x1e4>
 8006ca0:	1b80      	subs	r0, r0, r6
 8006ca2:	6060      	str	r0, [r4, #4]
 8006ca4:	6863      	ldr	r3, [r4, #4]
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cae:	e7aa      	b.n	8006c06 <_printf_i+0x146>
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	47d0      	blx	sl
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d0ad      	beq.n	8006c1a <_printf_i+0x15a>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	079b      	lsls	r3, r3, #30
 8006cc2:	d413      	bmi.n	8006cec <_printf_i+0x22c>
 8006cc4:	68e0      	ldr	r0, [r4, #12]
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	4298      	cmp	r0, r3
 8006cca:	bfb8      	it	lt
 8006ccc:	4618      	movlt	r0, r3
 8006cce:	e7a6      	b.n	8006c1e <_printf_i+0x15e>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	47d0      	blx	sl
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d09d      	beq.n	8006c1a <_printf_i+0x15a>
 8006cde:	3501      	adds	r5, #1
 8006ce0:	68e3      	ldr	r3, [r4, #12]
 8006ce2:	9903      	ldr	r1, [sp, #12]
 8006ce4:	1a5b      	subs	r3, r3, r1
 8006ce6:	42ab      	cmp	r3, r5
 8006ce8:	dcf2      	bgt.n	8006cd0 <_printf_i+0x210>
 8006cea:	e7eb      	b.n	8006cc4 <_printf_i+0x204>
 8006cec:	2500      	movs	r5, #0
 8006cee:	f104 0619 	add.w	r6, r4, #25
 8006cf2:	e7f5      	b.n	8006ce0 <_printf_i+0x220>
 8006cf4:	08007be7 	.word	0x08007be7
 8006cf8:	08007bf8 	.word	0x08007bf8

08006cfc <memmove>:
 8006cfc:	4288      	cmp	r0, r1
 8006cfe:	b510      	push	{r4, lr}
 8006d00:	eb01 0402 	add.w	r4, r1, r2
 8006d04:	d902      	bls.n	8006d0c <memmove+0x10>
 8006d06:	4284      	cmp	r4, r0
 8006d08:	4623      	mov	r3, r4
 8006d0a:	d807      	bhi.n	8006d1c <memmove+0x20>
 8006d0c:	1e43      	subs	r3, r0, #1
 8006d0e:	42a1      	cmp	r1, r4
 8006d10:	d008      	beq.n	8006d24 <memmove+0x28>
 8006d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d1a:	e7f8      	b.n	8006d0e <memmove+0x12>
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	4402      	add	r2, r0
 8006d20:	428a      	cmp	r2, r1
 8006d22:	d100      	bne.n	8006d26 <memmove+0x2a>
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d2e:	e7f7      	b.n	8006d20 <memmove+0x24>

08006d30 <_sbrk_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	2300      	movs	r3, #0
 8006d34:	4d05      	ldr	r5, [pc, #20]	@ (8006d4c <_sbrk_r+0x1c>)
 8006d36:	4604      	mov	r4, r0
 8006d38:	4608      	mov	r0, r1
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	f7fa f99e 	bl	800107c <_sbrk>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d102      	bne.n	8006d4a <_sbrk_r+0x1a>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	b103      	cbz	r3, 8006d4a <_sbrk_r+0x1a>
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	20001764 	.word	0x20001764

08006d50 <memchr>:
 8006d50:	4603      	mov	r3, r0
 8006d52:	b510      	push	{r4, lr}
 8006d54:	b2c9      	uxtb	r1, r1
 8006d56:	4402      	add	r2, r0
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	d101      	bne.n	8006d62 <memchr+0x12>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e003      	b.n	8006d6a <memchr+0x1a>
 8006d62:	7804      	ldrb	r4, [r0, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	428c      	cmp	r4, r1
 8006d68:	d1f6      	bne.n	8006d58 <memchr+0x8>
 8006d6a:	bd10      	pop	{r4, pc}

08006d6c <_realloc_r>:
 8006d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d70:	4607      	mov	r7, r0
 8006d72:	4614      	mov	r4, r2
 8006d74:	460d      	mov	r5, r1
 8006d76:	b921      	cbnz	r1, 8006d82 <_realloc_r+0x16>
 8006d78:	4611      	mov	r1, r2
 8006d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7e:	f7ff bc49 	b.w	8006614 <_malloc_r>
 8006d82:	b92a      	cbnz	r2, 8006d90 <_realloc_r+0x24>
 8006d84:	f7ff fbdc 	bl	8006540 <_free_r>
 8006d88:	4625      	mov	r5, r4
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d90:	f000 f81a 	bl	8006dc8 <_malloc_usable_size_r>
 8006d94:	4284      	cmp	r4, r0
 8006d96:	4606      	mov	r6, r0
 8006d98:	d802      	bhi.n	8006da0 <_realloc_r+0x34>
 8006d9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d9e:	d8f4      	bhi.n	8006d8a <_realloc_r+0x1e>
 8006da0:	4621      	mov	r1, r4
 8006da2:	4638      	mov	r0, r7
 8006da4:	f7ff fc36 	bl	8006614 <_malloc_r>
 8006da8:	4680      	mov	r8, r0
 8006daa:	b908      	cbnz	r0, 8006db0 <_realloc_r+0x44>
 8006dac:	4645      	mov	r5, r8
 8006dae:	e7ec      	b.n	8006d8a <_realloc_r+0x1e>
 8006db0:	42b4      	cmp	r4, r6
 8006db2:	4622      	mov	r2, r4
 8006db4:	4629      	mov	r1, r5
 8006db6:	bf28      	it	cs
 8006db8:	4632      	movcs	r2, r6
 8006dba:	f7ff fbb3 	bl	8006524 <memcpy>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff fbbd 	bl	8006540 <_free_r>
 8006dc6:	e7f1      	b.n	8006dac <_realloc_r+0x40>

08006dc8 <_malloc_usable_size_r>:
 8006dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dcc:	1f18      	subs	r0, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bfbc      	itt	lt
 8006dd2:	580b      	ldrlt	r3, [r1, r0]
 8006dd4:	18c0      	addlt	r0, r0, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_init>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr

08006de4 <_fini>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr
