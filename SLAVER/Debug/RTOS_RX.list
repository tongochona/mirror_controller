
RTOS_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005aec  08005aec  00006aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b54  08005b54  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005b54  08005b54  00007068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005b54  08005b54  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00006b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b58  08005b58  00006b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005b5c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e0  20000068  08005bc4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001348  08005bc4  00007348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa2c  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b8  00000000  00000000  00016abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00019478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6e  00000000  00000000  0001a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190ca  00000000  00000000  0001aec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb6f  00000000  00000000  00033f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fe3  00000000  00000000  00043aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5ae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004024  00000000  00000000  000d5b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d9b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ad4 	.word	0x08005ad4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005ad4 	.word	0x08005ad4

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000084 	.word	0x20000084
 800017c:	20000124 	.word	0x20000124

08000180 <HAL_CAN_RxFifo1MsgPendingCallback>:
void Task_SendMessage (void *argument);
void Task_ReceiveMessage (void *argument);

int lastDataRx;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
//	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000188:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 800018a:	4a07      	ldr	r2, [pc, #28]	@ (80001a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 800018c:	2101      	movs	r1, #1
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f001 f87f 	bl	8001292 <HAL_CAN_GetRxMessage>
//	if(lastDataRx != RxData[7]){
//		lastDataRx = RxData[7];
//		xQueueSendFromISR(ControlSignalQueue, &lastDataRx, &xHigherPriorityTaskWoken);
//		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
//	}
	signal_control = RxData[7];
 8000194:	4b03      	ldr	r3, [pc, #12]	@ (80001a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000196:	79da      	ldrb	r2, [r3, #7]
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 800019a:	701a      	strb	r2, [r3, #0]

}
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	2000043c 	.word	0x2000043c
 80001a8:	20000420 	.word	0x20000420
 80001ac:	20000444 	.word	0x20000444

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f000 fd63 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f8b9 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 f9fd 	bl	80005bc <MX_GPIO_Init>
  MX_CAN_Init();
 80001c2:	f000 f8fb 	bl	80003bc <MX_CAN_Init>
  MX_TIM2_Init();
 80001c6:	f000 f92f 	bl	8000428 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ca:	f000 f9a3 	bl	8000514 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Init CAN
  HAL_CAN_Start(&hcan);
 80001ce:	4843      	ldr	r0, [pc, #268]	@ (80002dc <main+0x12c>)
 80001d0:	f000 ff4c 	bl	800106c <HAL_CAN_Start>
  // Configure the filter
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80001d4:	4b42      	ldr	r3, [pc, #264]	@ (80002e0 <main+0x130>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80001da:	4b41      	ldr	r3, [pc, #260]	@ (80002e0 <main+0x130>)
 80001dc:	2201      	movs	r2, #1
 80001de:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001e0:	4b3f      	ldr	r3, [pc, #252]	@ (80002e0 <main+0x130>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6A5<<5;
 80001e6:	4b3e      	ldr	r3, [pc, #248]	@ (80002e0 <main+0x130>)
 80001e8:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 80001ec:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 80001ee:	4b3c      	ldr	r3, [pc, #240]	@ (80002e0 <main+0x130>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 80001f4:	4b3a      	ldr	r3, [pc, #232]	@ (80002e0 <main+0x130>)
 80001f6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80001fa:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80001fc:	4b38      	ldr	r3, [pc, #224]	@ (80002e0 <main+0x130>)
 80001fe:	2200      	movs	r2, #0
 8000200:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000202:	4b37      	ldr	r3, [pc, #220]	@ (80002e0 <main+0x130>)
 8000204:	2201      	movs	r2, #1
 8000206:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000208:	4935      	ldr	r1, [pc, #212]	@ (80002e0 <main+0x130>)
 800020a:	4834      	ldr	r0, [pc, #208]	@ (80002dc <main+0x12c>)
 800020c:	f000 fe65 	bl	8000eda <HAL_CAN_ConfigFilter>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000210:	2110      	movs	r1, #16
 8000212:	4832      	ldr	r0, [pc, #200]	@ (80002dc <main+0x12c>)
 8000214:	f001 f95e 	bl	80014d4 <HAL_CAN_ActivateNotification>
  // config tx
  TxHeader.DLC = 8;  // data length
 8000218:	4b32      	ldr	r3, [pc, #200]	@ (80002e4 <main+0x134>)
 800021a:	2208      	movs	r2, #8
 800021c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800021e:	4b31      	ldr	r3, [pc, #196]	@ (80002e4 <main+0x134>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000224:	4b2f      	ldr	r3, [pc, #188]	@ (80002e4 <main+0x134>)
 8000226:	2200      	movs	r2, #0
 8000228:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x6F5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 800022a:	4b2e      	ldr	r3, [pc, #184]	@ (80002e4 <main+0x134>)
 800022c:	f240 62f5 	movw	r2, #1781	@ 0x6f5
 8000230:	601a      	str	r2, [r3, #0]

  // Motor
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PA1 TIM2 CH2
 8000232:	2104      	movs	r1, #4
 8000234:	482c      	ldr	r0, [pc, #176]	@ (80002e8 <main+0x138>)
 8000236:	f002 fb51 	bl	80028dc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	2180      	movs	r1, #128	@ 0x80
 800023e:	482b      	ldr	r0, [pc, #172]	@ (80002ec <main+0x13c>)
 8000240:	f001 fdf4 	bl	8001e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	4828      	ldr	r0, [pc, #160]	@ (80002ec <main+0x13c>)
 800024a:	f001 fdef 	bl	8001e2c <HAL_GPIO_WritePin>

  // Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800024e:	213c      	movs	r1, #60	@ 0x3c
 8000250:	4827      	ldr	r0, [pc, #156]	@ (80002f0 <main+0x140>)
 8000252:	f002 fc87 	bl	8002b64 <HAL_TIM_Encoder_Start>


  // create task
  CurrentAngleMutex = xSemaphoreCreateMutex();
 8000256:	2001      	movs	r0, #1
 8000258:	f003 fc5e 	bl	8003b18 <xQueueCreateMutex>
 800025c:	4603      	mov	r3, r0
 800025e:	4a25      	ldr	r2, [pc, #148]	@ (80002f4 <main+0x144>)
 8000260:	6013      	str	r3, [r2, #0]
  if (CurrentAngleMutex != NULL)
 8000262:	4b24      	ldr	r3, [pc, #144]	@ (80002f4 <main+0x144>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <main+0xc2>
  {
   debug = 1000;
 800026a:	4b23      	ldr	r3, [pc, #140]	@ (80002f8 <main+0x148>)
 800026c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000270:	601a      	str	r2, [r3, #0]
  }

  ControlSignalQueue = xQueueCreate(5, sizeof (int));
 8000272:	2200      	movs	r2, #0
 8000274:	2104      	movs	r1, #4
 8000276:	2005      	movs	r0, #5
 8000278:	f003 fbda 	bl	8003a30 <xQueueGenericCreate>
 800027c:	4603      	mov	r3, r0
 800027e:	4a1f      	ldr	r2, [pc, #124]	@ (80002fc <main+0x14c>)
 8000280:	6013      	str	r3, [r2, #0]

  xTaskCreate(Task_ControlMotor, "ControlMotor", 128, NULL, 1, &ControlMotor_Handler);
 8000282:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <main+0x150>)
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	2301      	movs	r3, #1
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2300      	movs	r3, #0
 800028c:	2280      	movs	r2, #128	@ 0x80
 800028e:	491d      	ldr	r1, [pc, #116]	@ (8000304 <main+0x154>)
 8000290:	481d      	ldr	r0, [pc, #116]	@ (8000308 <main+0x158>)
 8000292:	f003 ffcc 	bl	800422e <xTaskCreate>
  xTaskCreate(Task_ReadEncoder, "EncoderRead", 128, NULL, 3, &ReadEncoder_Handler);
 8000296:	4b1d      	ldr	r3, [pc, #116]	@ (800030c <main+0x15c>)
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	2303      	movs	r3, #3
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2300      	movs	r3, #0
 80002a0:	2280      	movs	r2, #128	@ 0x80
 80002a2:	491b      	ldr	r1, [pc, #108]	@ (8000310 <main+0x160>)
 80002a4:	481b      	ldr	r0, [pc, #108]	@ (8000314 <main+0x164>)
 80002a6:	f003 ffc2 	bl	800422e <xTaskCreate>
  xTaskCreate(Task_ToggleLED, "ToggleLED", 128, NULL, 1, &ToggleLED_Handler);
 80002aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000318 <main+0x168>)
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	2301      	movs	r3, #1
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2300      	movs	r3, #0
 80002b4:	2280      	movs	r2, #128	@ 0x80
 80002b6:	4919      	ldr	r1, [pc, #100]	@ (800031c <main+0x16c>)
 80002b8:	4819      	ldr	r0, [pc, #100]	@ (8000320 <main+0x170>)
 80002ba:	f003 ffb8 	bl	800422e <xTaskCreate>
  xTaskCreate(Task_SendMessage, "SendMessage", 128, NULL, 2, &SendMessage_Handler);
 80002be:	4b19      	ldr	r3, [pc, #100]	@ (8000324 <main+0x174>)
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2302      	movs	r3, #2
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2300      	movs	r3, #0
 80002c8:	2280      	movs	r2, #128	@ 0x80
 80002ca:	4917      	ldr	r1, [pc, #92]	@ (8000328 <main+0x178>)
 80002cc:	4817      	ldr	r0, [pc, #92]	@ (800032c <main+0x17c>)
 80002ce:	f003 ffae 	bl	800422e <xTaskCreate>
//  xTaskCreate(Task_ReceiveMessage, "ReceiveMessage", 128, NULL, 4, &ReceiveMessage_Handler);

  vTaskStartScheduler();
 80002d2:	f004 f931 	bl	8004538 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80002d6:	bf00      	nop
 80002d8:	e7fd      	b.n	80002d6 <main+0x126>
 80002da:	bf00      	nop
 80002dc:	20000324 	.word	0x20000324
 80002e0:	200003f8 	.word	0x200003f8
 80002e4:	200003dc 	.word	0x200003dc
 80002e8:	2000034c 	.word	0x2000034c
 80002ec:	40010800 	.word	0x40010800
 80002f0:	20000394 	.word	0x20000394
 80002f4:	20000454 	.word	0x20000454
 80002f8:	20000448 	.word	0x20000448
 80002fc:	20000450 	.word	0x20000450
 8000300:	20000458 	.word	0x20000458
 8000304:	08005aec 	.word	0x08005aec
 8000308:	08000679 	.word	0x08000679
 800030c:	2000045c 	.word	0x2000045c
 8000310:	08005afc 	.word	0x08005afc
 8000314:	08000771 	.word	0x08000771
 8000318:	20000460 	.word	0x20000460
 800031c:	08005b08 	.word	0x08005b08
 8000320:	080007b9 	.word	0x080007b9
 8000324:	20000464 	.word	0x20000464
 8000328:	08005b14 	.word	0x08005b14
 800032c:	080007e1 	.word	0x080007e1

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b090      	sub	sp, #64	@ 0x40
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	2228      	movs	r2, #40	@ 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f005 fada 	bl	80058f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800035a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	2302      	movs	r3, #2
 8000366:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800036c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f001 fd89 	bl	8001e90 <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000384:	f000 fa6c 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038c:	2302      	movs	r3, #2
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2102      	movs	r1, #2
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 fff6 	bl	8002394 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ae:	f000 fa57 	bl	8000860 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3740      	adds	r7, #64	@ 0x40
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003c0:	4b17      	ldr	r3, [pc, #92]	@ (8000420 <MX_CAN_Init+0x64>)
 80003c2:	4a18      	ldr	r2, [pc, #96]	@ (8000424 <MX_CAN_Init+0x68>)
 80003c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 80003c6:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <MX_CAN_Init+0x64>)
 80003c8:	2248      	movs	r2, #72	@ 0x48
 80003ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003cc:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <MX_CAN_Init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003d2:	4b13      	ldr	r3, [pc, #76]	@ (8000420 <MX_CAN_Init+0x64>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003d8:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <MX_CAN_Init+0x64>)
 80003da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003de:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_CAN_Init+0x64>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <MX_CAN_Init+0x64>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <MX_CAN_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <MX_CAN_Init+0x64>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003f8:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <MX_CAN_Init+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <MX_CAN_Init+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000404:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <MX_CAN_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800040a:	4805      	ldr	r0, [pc, #20]	@ (8000420 <MX_CAN_Init+0x64>)
 800040c:	f000 fc6a 	bl	8000ce4 <HAL_CAN_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000416:	f000 fa23 	bl	8000860 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000324 	.word	0x20000324
 8000424:	40006400 	.word	0x40006400

08000428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08e      	sub	sp, #56	@ 0x38
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043c:	f107 0320 	add.w	r3, r7, #32
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
 8000454:	615a      	str	r2, [r3, #20]
 8000456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000458:	4b2d      	ldr	r3, [pc, #180]	@ (8000510 <MX_TIM2_Init+0xe8>)
 800045a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800045e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000460:	4b2b      	ldr	r3, [pc, #172]	@ (8000510 <MX_TIM2_Init+0xe8>)
 8000462:	227f      	movs	r2, #127	@ 0x7f
 8000464:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000466:	4b2a      	ldr	r3, [pc, #168]	@ (8000510 <MX_TIM2_Init+0xe8>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 800046c:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <MX_TIM2_Init+0xe8>)
 800046e:	f240 2271 	movw	r2, #625	@ 0x271
 8000472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b26      	ldr	r3, [pc, #152]	@ (8000510 <MX_TIM2_Init+0xe8>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047a:	4b25      	ldr	r3, [pc, #148]	@ (8000510 <MX_TIM2_Init+0xe8>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000480:	4823      	ldr	r0, [pc, #140]	@ (8000510 <MX_TIM2_Init+0xe8>)
 8000482:	f002 f931 	bl	80026e8 <HAL_TIM_Base_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800048c:	f000 f9e8 	bl	8000860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000494:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800049a:	4619      	mov	r1, r3
 800049c:	481c      	ldr	r0, [pc, #112]	@ (8000510 <MX_TIM2_Init+0xe8>)
 800049e:	f002 fda1 	bl	8002fe4 <HAL_TIM_ConfigClockSource>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80004a8:	f000 f9da 	bl	8000860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004ac:	4818      	ldr	r0, [pc, #96]	@ (8000510 <MX_TIM2_Init+0xe8>)
 80004ae:	f002 f9bd 	bl	800282c <HAL_TIM_PWM_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80004b8:	f000 f9d2 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004bc:	2300      	movs	r3, #0
 80004be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004c4:	f107 0320 	add.w	r3, r7, #32
 80004c8:	4619      	mov	r1, r3
 80004ca:	4811      	ldr	r0, [pc, #68]	@ (8000510 <MX_TIM2_Init+0xe8>)
 80004cc:	f003 f926 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80004d6:	f000 f9c3 	bl	8000860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004da:	2360      	movs	r3, #96	@ 0x60
 80004dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2204      	movs	r2, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	4807      	ldr	r0, [pc, #28]	@ (8000510 <MX_TIM2_Init+0xe8>)
 80004f2:	f002 fcb5 	bl	8002e60 <HAL_TIM_PWM_ConfigChannel>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80004fc:	f000 f9b0 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000500:	4803      	ldr	r0, [pc, #12]	@ (8000510 <MX_TIM2_Init+0xe8>)
 8000502:	f000 fac1 	bl	8000a88 <HAL_TIM_MspPostInit>

}
 8000506:	bf00      	nop
 8000508:	3738      	adds	r7, #56	@ 0x38
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000034c 	.word	0x2000034c

08000514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	@ 0x30
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	2224      	movs	r2, #36	@ 0x24
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f005 f9e8 	bl	80058f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000530:	4b20      	ldr	r3, [pc, #128]	@ (80005b4 <MX_TIM3_Init+0xa0>)
 8000532:	4a21      	ldr	r2, [pc, #132]	@ (80005b8 <MX_TIM3_Init+0xa4>)
 8000534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000536:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <MX_TIM3_Init+0xa0>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b1d      	ldr	r3, [pc, #116]	@ (80005b4 <MX_TIM3_Init+0xa0>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47;
 8000542:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <MX_TIM3_Init+0xa0>)
 8000544:	222f      	movs	r2, #47	@ 0x2f
 8000546:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000548:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <MX_TIM3_Init+0xa0>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054e:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <MX_TIM3_Init+0xa0>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000554:	2303      	movs	r3, #3
 8000556:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800056c:	2301      	movs	r3, #1
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	480d      	ldr	r0, [pc, #52]	@ (80005b4 <MX_TIM3_Init+0xa0>)
 8000580:	f002 fa4e 	bl	8002a20 <HAL_TIM_Encoder_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800058a:	f000 f969 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4619      	mov	r1, r3
 800059a:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <MX_TIM3_Init+0xa0>)
 800059c:	f003 f8be 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005a6:	f000 f95b 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	3730      	adds	r7, #48	@ 0x30
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000394 	.word	0x20000394
 80005b8:	40000400 	.word	0x40000400

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d0:	4b26      	ldr	r3, [pc, #152]	@ (800066c <MX_GPIO_Init+0xb0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a25      	ldr	r2, [pc, #148]	@ (800066c <MX_GPIO_Init+0xb0>)
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b23      	ldr	r3, [pc, #140]	@ (800066c <MX_GPIO_Init+0xb0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <MX_GPIO_Init+0xb0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a1f      	ldr	r2, [pc, #124]	@ (800066c <MX_GPIO_Init+0xb0>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <MX_GPIO_Init+0xb0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_GPIO_Init+0xb0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a19      	ldr	r2, [pc, #100]	@ (800066c <MX_GPIO_Init+0xb0>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_GPIO_Init+0xb0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	21a0      	movs	r1, #160	@ 0xa0
 800061c:	4814      	ldr	r0, [pc, #80]	@ (8000670 <MX_GPIO_Init+0xb4>)
 800061e:	f001 fc05 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	4813      	ldr	r0, [pc, #76]	@ (8000674 <MX_GPIO_Init+0xb8>)
 8000628:	f001 fc00 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800062c:	23a0      	movs	r3, #160	@ 0xa0
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	480b      	ldr	r0, [pc, #44]	@ (8000670 <MX_GPIO_Init+0xb4>)
 8000644:	f001 fa6e 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000648:	2304      	movs	r3, #4
 800064a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4619      	mov	r1, r3
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_GPIO_Init+0xb8>)
 8000660:	f001 fa60 	bl	8001b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	40010800 	.word	0x40010800
 8000674:	40010c00 	.word	0x40010c00

08000678 <Task_ControlMotor>:

/* USER CODE BEGIN 4 */
//define task
void Task_ControlMotor(void *argument){
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	int threshold = 10;
 8000680:	230a      	movs	r3, #10
 8000682:	617b      	str	r3, [r7, #20]
	int error;
	int current_angle;
	int desire_angle;
	while(1){
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 8000684:	4b33      	ldr	r3, [pc, #204]	@ (8000754 <Task_ControlMotor+0xdc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fb5d 	bl	8003d4c <xQueueSemaphoreTake>
		desire_angle = (signal_control*90)/255;
 8000692:	4b31      	ldr	r3, [pc, #196]	@ (8000758 <Task_ControlMotor+0xe0>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	235a      	movs	r3, #90	@ 0x5a
 800069c:	fb02 f303 	mul.w	r3, r2, r3
 80006a0:	4a2e      	ldr	r2, [pc, #184]	@ (800075c <Task_ControlMotor+0xe4>)
 80006a2:	fb82 1203 	smull	r1, r2, r2, r3
 80006a6:	441a      	add	r2, r3
 80006a8:	11d2      	asrs	r2, r2, #7
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	613b      	str	r3, [r7, #16]
		current_angle = (position * 360) / 47;
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <Task_ControlMotor+0xe8>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4a29      	ldr	r2, [pc, #164]	@ (8000764 <Task_ControlMotor+0xec>)
 80006c0:	fb82 1203 	smull	r1, r2, r2, r3
 80006c4:	441a      	add	r2, r3
 80006c6:	1152      	asrs	r2, r2, #5
 80006c8:	17db      	asrs	r3, r3, #31
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	60fb      	str	r3, [r7, #12]
		error = desire_angle - current_angle;
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	60bb      	str	r3, [r7, #8]

		if (abs(error) > threshold){
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bfb8      	it	lt
 80006dc:	425b      	neglt	r3, r3
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	da1d      	bge.n	8000720 <Task_ControlMotor+0xa8>
			if (error > 0){
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	dd0a      	ble.n	8000700 <Task_ControlMotor+0x88>
				// Quay phải
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // IN1 = 0
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	481e      	ldr	r0, [pc, #120]	@ (8000768 <Task_ControlMotor+0xf0>)
 80006f0:	f001 fb9c 	bl	8001e2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN2 = 1
 80006f4:	2201      	movs	r2, #1
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	481b      	ldr	r0, [pc, #108]	@ (8000768 <Task_ControlMotor+0xf0>)
 80006fa:	f001 fb97 	bl	8001e2c <HAL_GPIO_WritePin>
 80006fe:	e009      	b.n	8000714 <Task_ControlMotor+0x9c>
			}
			else {
				// Quay trái
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2120      	movs	r1, #32
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <Task_ControlMotor+0xf0>)
 8000706:	f001 fb91 	bl	8001e2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	@ 0x80
 800070e:	4816      	ldr	r0, [pc, #88]	@ (8000768 <Task_ControlMotor+0xf0>)
 8000710:	f001 fb8c 	bl	8001e2c <HAL_GPIO_WritePin>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <Task_ControlMotor+0xf4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f240 2271 	movw	r2, #625	@ 0x271
 800071c:	639a      	str	r2, [r3, #56]	@ 0x38
 800071e:	e00d      	b.n	800073c <Task_ControlMotor+0xc4>
		}
		else {
			// Dừng motor
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	4810      	ldr	r0, [pc, #64]	@ (8000768 <Task_ControlMotor+0xf0>)
 8000726:	f001 fb81 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <Task_ControlMotor+0xf0>)
 8000730:	f001 fb7c 	bl	8001e2c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <Task_ControlMotor+0xf4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2200      	movs	r2, #0
 800073a:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		xSemaphoreGive(CurrentAngleMutex);
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <Task_ControlMotor+0xdc>)
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	2300      	movs	r3, #0
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	f003 f9ff 	bl	8003b48 <xQueueGenericSend>
		vTaskDelay(100);
 800074a:	2064      	movs	r0, #100	@ 0x64
 800074c:	f003 febe 	bl	80044cc <vTaskDelay>
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 8000750:	e798      	b.n	8000684 <Task_ControlMotor+0xc>
 8000752:	bf00      	nop
 8000754:	20000454 	.word	0x20000454
 8000758:	20000444 	.word	0x20000444
 800075c:	80808081 	.word	0x80808081
 8000760:	2000044c 	.word	0x2000044c
 8000764:	ae4c415d 	.word	0xae4c415d
 8000768:	40010800 	.word	0x40010800
 800076c:	2000034c 	.word	0x2000034c

08000770 <Task_ReadEncoder>:
	}
}

void Task_ReadEncoder(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <Task_ReadEncoder+0x3c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fae3 	bl	8003d4c <xQueueSemaphoreTake>
    	position = __HAL_TIM_GET_COUNTER(&htim3);
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <Task_ReadEncoder+0x40>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <Task_ReadEncoder+0x44>)
 8000790:	801a      	strh	r2, [r3, #0]
        xSemaphoreGive(CurrentAngleMutex);
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <Task_ReadEncoder+0x3c>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	f003 f9d4 	bl	8003b48 <xQueueGenericSend>
        vTaskDelay(100); // đọc mỗi 100ms
 80007a0:	2064      	movs	r0, #100	@ 0x64
 80007a2:	f003 fe93 	bl	80044cc <vTaskDelay>
    	xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 80007a6:	bf00      	nop
 80007a8:	e7e6      	b.n	8000778 <Task_ReadEncoder+0x8>
 80007aa:	bf00      	nop
 80007ac:	20000454 	.word	0x20000454
 80007b0:	20000394 	.word	0x20000394
 80007b4:	2000044c 	.word	0x2000044c

080007b8 <Task_ToggleLED>:
    }
}

void Task_ToggleLED(void *argument){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80007c0:	2104      	movs	r1, #4
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <Task_ToggleLED+0x20>)
 80007c4:	f001 fb4a 	bl	8001e5c <HAL_GPIO_TogglePin>
		vTaskDelay(debug);
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <Task_ToggleLED+0x24>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fe7d 	bl	80044cc <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80007d2:	bf00      	nop
 80007d4:	e7f4      	b.n	80007c0 <Task_ToggleLED+0x8>
 80007d6:	bf00      	nop
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	20000448 	.word	0x20000448

080007e0 <Task_SendMessage>:
	}
}

void Task_SendMessage(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <Task_SendMessage+0x44>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 faab 	bl	8003d4c <xQueueSemaphoreTake>
		TxData[7] = position;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <Task_SendMessage+0x48>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <Task_SendMessage+0x4c>)
 80007fe:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <Task_SendMessage+0x50>)
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <Task_SendMessage+0x4c>)
 8000804:	490b      	ldr	r1, [pc, #44]	@ (8000834 <Task_SendMessage+0x54>)
 8000806:	480c      	ldr	r0, [pc, #48]	@ (8000838 <Task_SendMessage+0x58>)
 8000808:	f000 fc74 	bl	80010f4 <HAL_CAN_AddTxMessage>
		xSemaphoreGive(CurrentAngleMutex);
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <Task_SendMessage+0x44>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	2300      	movs	r3, #0
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	f003 f997 	bl	8003b48 <xQueueGenericSend>
		vTaskDelay(200);
 800081a:	20c8      	movs	r0, #200	@ 0xc8
 800081c:	f003 fe56 	bl	80044cc <vTaskDelay>
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 8000820:	bf00      	nop
 8000822:	e7e1      	b.n	80007e8 <Task_SendMessage+0x8>
 8000824:	20000454 	.word	0x20000454
 8000828:	2000044c 	.word	0x2000044c
 800082c:	20000000 	.word	0x20000000
 8000830:	200003f4 	.word	0x200003f4
 8000834:	200003dc 	.word	0x200003dc
 8000838:	20000324 	.word	0x20000324

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	@ (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800084e:	f000 fa2d 	bl	8000cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40012c00 	.word	0x40012c00

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HAL_MspInit+0x68>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a17      	ldr	r2, [pc, #92]	@ (80008d4 <HAL_MspInit+0x68>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_MspInit+0x68>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_MspInit+0x68>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a11      	ldr	r2, [pc, #68]	@ (80008d4 <HAL_MspInit+0x68>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x68>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f001 f910 	bl	8001ace <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <HAL_MspInit+0x6c>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_MspInit+0x6c>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010000 	.word	0x40010000

080008dc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a29      	ldr	r2, [pc, #164]	@ (800099c <HAL_CAN_MspInit+0xc0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d14b      	bne.n	8000994 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008fc:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <HAL_CAN_MspInit+0xc4>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	4a27      	ldr	r2, [pc, #156]	@ (80009a0 <HAL_CAN_MspInit+0xc4>)
 8000902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000906:	61d3      	str	r3, [r2, #28]
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <HAL_CAN_MspInit+0xc4>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <HAL_CAN_MspInit+0xc4>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <HAL_CAN_MspInit+0xc4>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <HAL_CAN_MspInit+0xc4>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800092c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4818      	ldr	r0, [pc, #96]	@ (80009a4 <HAL_CAN_MspInit+0xc8>)
 8000942:	f001 f8ef 	bl	8001b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000946:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <HAL_CAN_MspInit+0xc8>)
 800095c:	f001 f8e2 	bl	8001b24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <HAL_CAN_MspInit+0xcc>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
 8000966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000968:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
 8000976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_CAN_MspInit+0xcc>)
 8000980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000982:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2105      	movs	r1, #5
 8000988:	2015      	movs	r0, #21
 800098a:	f001 f8a0 	bl	8001ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800098e:	2015      	movs	r0, #21
 8000990:	f001 f8b9 	bl	8001b06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	@ 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40006400 	.word	0x40006400
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010c00 	.word	0x40010c00
 80009a8:	40010000 	.word	0x40010000

080009ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009bc:	d10b      	bne.n	80009d6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_TIM_Base_MspInit+0x34>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_TIM_Base_MspInit+0x34>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <HAL_TIM_Base_MspInit+0x34>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000a78 <HAL_TIM_Encoder_MspInit+0x94>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d135      	bne.n	8000a70 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <HAL_TIM_Encoder_MspInit+0x98>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <HAL_TIM_Encoder_MspInit+0x98>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	61d3      	str	r3, [r2, #28]
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_TIM_Encoder_MspInit+0x98>)
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_TIM_Encoder_MspInit+0x98>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <HAL_TIM_Encoder_MspInit+0x98>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_TIM_Encoder_MspInit+0x98>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a34:	2330      	movs	r3, #48	@ 0x30
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	480e      	ldr	r0, [pc, #56]	@ (8000a80 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000a48:	f001 f86c 	bl	8001b24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a6a:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6e:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	@ 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40000400 	.word	0x40000400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010c00 	.word	0x40010c00
 8000a84:	40010000 	.word	0x40010000

08000a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa6:	d117      	bne.n	8000ad8 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <HAL_TIM_MspPostInit+0x58>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae0 <HAL_TIM_MspPostInit+0x58>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <HAL_TIM_MspPostInit+0x58>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <HAL_TIM_MspPostInit+0x5c>)
 8000ad4:	f001 f826 	bl	8001b24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000afe:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb8 <HAL_InitTick+0xd0>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb8 <HAL_InitTick+0xd0>)
 8000b04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <HAL_InitTick+0xd0>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b16:	f107 020c 	add.w	r2, r7, #12
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fd93 	bl	800264c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b26:	f001 fd7d 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 8000b2a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b2e:	4a23      	ldr	r2, [pc, #140]	@ (8000bbc <HAL_InitTick+0xd4>)
 8000b30:	fba2 2303 	umull	r2, r3, r2, r3
 8000b34:	0c9b      	lsrs	r3, r3, #18
 8000b36:	3b01      	subs	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b3c:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b3e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b46:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b48:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b60:	4817      	ldr	r0, [pc, #92]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b62:	f001 fdc1 	bl	80026e8 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d11b      	bne.n	8000bac <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b74:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b76:	f001 fe07 	bl	8002788 <HAL_TIM_Base_Start_IT>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d111      	bne.n	8000bac <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b88:	2019      	movs	r0, #25
 8000b8a:	f000 ffbc 	bl	8001b06 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d808      	bhi.n	8000ba6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	2019      	movs	r0, #25
 8000b9a:	f000 ff98 	bl	8001ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_InitTick+0xe0>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e002      	b.n	8000bac <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3730      	adds	r7, #48	@ 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	20000468 	.word	0x20000468
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	2000000c 	.word	0x2000000c

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <CAN1_RX1_IRQHandler+0x10>)
 8000c06:	f000 fc8a 	bl	800151e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000324 	.word	0x20000324

08000c14 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <TIM1_UP_IRQHandler+0x10>)
 8000c1a:	f002 f831 	bl	8002c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000468 	.word	0x20000468

08000c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff fff8 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c3a:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a09      	ldr	r2, [pc, #36]	@ (8000c74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c50:	4c09      	ldr	r4, [pc, #36]	@ (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f004 feb1 	bl	80059c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c62:	f7ff faa5 	bl	80001b0 <main>
  bx lr
 8000c66:	4770      	bx	lr
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c70:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 8000c74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c78:	20001348 	.word	0x20001348

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_Init+0x28>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_Init+0x28>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 ff11 	bl	8001ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff ff26 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fde6 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a03      	ldr	r2, [pc, #12]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	20000010 	.word	0x20000010
 8000ccc:	200004b0 	.word	0x200004b0

08000cd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	@ (8000ce0 <HAL_GetTick+0x10>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	200004b0 	.word	0x200004b0

08000ce4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e0ed      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fdea 	bl	80008dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d18:	f7ff ffda 	bl	8000cd0 <HAL_GetTick>
 8000d1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d1e:	e012      	b.n	8000d46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d20:	f7ff ffd6 	bl	8000cd0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b0a      	cmp	r3, #10
 8000d2c:	d90b      	bls.n	8000d46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2205      	movs	r2, #5
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0c5      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0e5      	beq.n	8000d20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0202 	bic.w	r2, r2, #2
 8000d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d64:	f7ff ffb4 	bl	8000cd0 <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d6a:	e012      	b.n	8000d92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d6c:	f7ff ffb0 	bl	8000cd0 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d90b      	bls.n	8000d92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2205      	movs	r2, #5
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e09f      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e5      	bne.n	8000d6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7e1b      	ldrb	r3, [r3, #24]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d108      	bne.n	8000dba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e007      	b.n	8000dca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7e5b      	ldrb	r3, [r3, #25]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d108      	bne.n	8000de4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7e9b      	ldrb	r3, [r3, #26]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d108      	bne.n	8000e0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0220 	orr.w	r2, r2, #32
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e007      	b.n	8000e1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0220 	bic.w	r2, r2, #32
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7edb      	ldrb	r3, [r3, #27]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0210 	bic.w	r2, r2, #16
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0210 	orr.w	r2, r2, #16
 8000e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7f1b      	ldrb	r3, [r3, #28]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d108      	bne.n	8000e62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0208 	orr.w	r2, r2, #8
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0208 	bic.w	r2, r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7f5b      	ldrb	r3, [r3, #29]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0204 	orr.w	r2, r2, #4
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e007      	b.n	8000e9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0204 	bic.w	r2, r2, #4
 8000e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	ea42 0103 	orr.w	r1, r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b087      	sub	sp, #28
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef2:	7cfb      	ldrb	r3, [r7, #19]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d003      	beq.n	8000f00 <HAL_CAN_ConfigFilter+0x26>
 8000ef8:	7cfb      	ldrb	r3, [r7, #19]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	f040 80aa 	bne.w	8001054 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	2201      	movs	r2, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d123      	bne.n	8000f82 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	401a      	ands	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3248      	adds	r2, #72	@ 0x48
 8000f62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f78:	6979      	ldr	r1, [r7, #20]
 8000f7a:	3348      	adds	r3, #72	@ 0x48
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d122      	bne.n	8000fd0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	431a      	orrs	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000faa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3248      	adds	r2, #72	@ 0x48
 8000fb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc6:	6979      	ldr	r1, [r7, #20]
 8000fc8:	3348      	adds	r3, #72	@ 0x48
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001016:	e007      	b.n	8001028 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d107      	bne.n	8001040 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	431a      	orrs	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001046:	f023 0201 	bic.w	r2, r3, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	e006      	b.n	8001062 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
  }
}
 8001062:	4618      	mov	r0, r3
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b01      	cmp	r3, #1
 800107e:	d12e      	bne.n	80010de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2202      	movs	r2, #2
 8001084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001098:	f7ff fe1a 	bl	8000cd0 <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800109e:	e012      	b.n	80010c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a0:	f7ff fe16 	bl	8000cd0 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d90b      	bls.n	80010c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2205      	movs	r2, #5
 80010be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e012      	b.n	80010ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e5      	bne.n	80010a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e006      	b.n	80010ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
  }
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001108:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001112:	7ffb      	ldrb	r3, [r7, #31]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d003      	beq.n	8001120 <HAL_CAN_AddTxMessage+0x2c>
 8001118:	7ffb      	ldrb	r3, [r7, #31]
 800111a:	2b02      	cmp	r3, #2
 800111c:	f040 80ad 	bne.w	800127a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8095 	beq.w	800126a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	0e1b      	lsrs	r3, r3, #24
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800114a:	2201      	movs	r2, #1
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10d      	bne.n	8001178 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	6809      	ldr	r1, [r1, #0]
 800116a:	431a      	orrs	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3318      	adds	r3, #24
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	440b      	add	r3, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e00f      	b.n	8001198 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001182:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800118c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3318      	adds	r3, #24
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	440b      	add	r3, r1
 8001196:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3318      	adds	r3, #24
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	440b      	add	r3, r1
 80011a8:	3304      	adds	r3, #4
 80011aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	7d1b      	ldrb	r3, [r3, #20]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d111      	bne.n	80011d8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3318      	adds	r3, #24
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	6811      	ldr	r1, [r2, #0]
 80011c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3318      	adds	r3, #24
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	440b      	add	r3, r1
 80011d4:	3304      	adds	r3, #4
 80011d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3307      	adds	r3, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	061a      	lsls	r2, r3, #24
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3306      	adds	r3, #6
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	041b      	lsls	r3, r3, #16
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3305      	adds	r3, #5
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	4313      	orrs	r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	3204      	adds	r2, #4
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	4610      	mov	r0, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	6811      	ldr	r1, [r2, #0]
 8001200:	ea43 0200 	orr.w	r2, r3, r0
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	440b      	add	r3, r1
 800120a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800120e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3303      	adds	r3, #3
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	061a      	lsls	r2, r3, #24
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3302      	adds	r3, #2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	041b      	lsls	r3, r3, #16
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3301      	adds	r3, #1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	4313      	orrs	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	4610      	mov	r0, r2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	6811      	ldr	r1, [r2, #0]
 8001236:	ea43 0200 	orr.w	r2, r3, r0
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	440b      	add	r3, r1
 8001240:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001244:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3318      	adds	r3, #24
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	6811      	ldr	r1, [r2, #0]
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3318      	adds	r3, #24
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	440b      	add	r3, r1
 8001264:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e00e      	b.n	8001288 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e006      	b.n	8001288 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
  }
}
 8001288:	4618      	mov	r0, r3
 800128a:	3724      	adds	r7, #36	@ 0x24
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001292:	b480      	push	{r7}
 8001294:	b087      	sub	sp, #28
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d003      	beq.n	80012b6 <HAL_CAN_GetRxMessage+0x24>
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	f040 8103 	bne.w	80014bc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10e      	bne.n	80012da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d116      	bne.n	80012f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e0f7      	b.n	80014ca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0e8      	b.n	80014ca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	331b      	adds	r3, #27
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0204 	and.w	r2, r3, #4
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	331b      	adds	r3, #27
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	4413      	add	r3, r2
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0d5b      	lsrs	r3, r3, #21
 8001326:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e00b      	b.n	8001348 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	331b      	adds	r3, #27
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	4413      	add	r3, r2
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	08db      	lsrs	r3, r3, #3
 8001340:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	331b      	adds	r3, #27
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0202 	and.w	r2, r3, #2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	331b      	adds	r3, #27
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	3304      	adds	r3, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2208      	movs	r2, #8
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	e00b      	b.n	8001396 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	331b      	adds	r3, #27
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	3304      	adds	r3, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 020f 	and.w	r2, r3, #15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	331b      	adds	r3, #27
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	4413      	add	r3, r2
 80013a2:	3304      	adds	r3, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	331b      	adds	r3, #27
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	3304      	adds	r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0c1b      	lsrs	r3, r3, #16
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	0a1a      	lsrs	r2, r3, #8
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0c1a      	lsrs	r2, r3, #16
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3302      	adds	r3, #2
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0e1a      	lsrs	r2, r3, #24
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3303      	adds	r3, #3
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	3304      	adds	r3, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0a1a      	lsrs	r2, r3, #8
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	3305      	adds	r3, #5
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4413      	add	r3, r2
 8001466:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0c1a      	lsrs	r2, r3, #16
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3306      	adds	r3, #6
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0e1a      	lsrs	r2, r3, #24
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3307      	adds	r3, #7
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d108      	bne.n	80014a8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0220 	orr.w	r2, r2, #32
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	e007      	b.n	80014b8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0220 	orr.w	r2, r2, #32
 80014b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e006      	b.n	80014ca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d002      	beq.n	80014f2 <HAL_CAN_ActivateNotification+0x1e>
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d109      	bne.n	8001506 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6959      	ldr	r1, [r3, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e006      	b.n	8001514 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
  }
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b08a      	sub	sp, #40	@ 0x28
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d07c      	beq.n	800165e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d023      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f983 	bl	800188c <HAL_CAN_TxMailbox0CompleteCallback>
 8001586:	e016      	b.n	80015b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
 800159a:	e00c      	b.n	80015b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ae:	e002      	b.n	80015b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f986 	bl	80018c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d024      	beq.n	800160a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f962 	bl	800189e <HAL_CAN_TxMailbox1CompleteCallback>
 80015da:	e016      	b.n	800160a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ee:	e00c      	b.n	800160a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
 8001602:	e002      	b.n	800160a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f965 	bl	80018d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d024      	beq.n	800165e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800161c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f941 	bl	80018b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800162e:	e016      	b.n	800165e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
 8001642:	e00c      	b.n	800165e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
 8001656:	e002      	b.n	800165e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f944 	bl	80018e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00c      	beq.n	8001682 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2210      	movs	r2, #16
 8001680:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2208      	movs	r2, #8
 800169c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f933 	bl	800190a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f91b 	bl	80018f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00c      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2210      	movs	r2, #16
 80016e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2208      	movs	r2, #8
 8001700:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f90a 	bl	800191c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7fe fd2d 	bl	8000180 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2210      	movs	r2, #16
 8001740:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8f3 	bl	800192e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2208      	movs	r2, #8
 8001762:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f8eb 	bl	8001940 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d07b      	beq.n	800186c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d072      	beq.n	8001864 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d043      	beq.n	8001864 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d03e      	beq.n	8001864 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017ec:	2b60      	cmp	r3, #96	@ 0x60
 80017ee:	d02b      	beq.n	8001848 <HAL_CAN_IRQHandler+0x32a>
 80017f0:	2b60      	cmp	r3, #96	@ 0x60
 80017f2:	d82e      	bhi.n	8001852 <HAL_CAN_IRQHandler+0x334>
 80017f4:	2b50      	cmp	r3, #80	@ 0x50
 80017f6:	d022      	beq.n	800183e <HAL_CAN_IRQHandler+0x320>
 80017f8:	2b50      	cmp	r3, #80	@ 0x50
 80017fa:	d82a      	bhi.n	8001852 <HAL_CAN_IRQHandler+0x334>
 80017fc:	2b40      	cmp	r3, #64	@ 0x40
 80017fe:	d019      	beq.n	8001834 <HAL_CAN_IRQHandler+0x316>
 8001800:	2b40      	cmp	r3, #64	@ 0x40
 8001802:	d826      	bhi.n	8001852 <HAL_CAN_IRQHandler+0x334>
 8001804:	2b30      	cmp	r3, #48	@ 0x30
 8001806:	d010      	beq.n	800182a <HAL_CAN_IRQHandler+0x30c>
 8001808:	2b30      	cmp	r3, #48	@ 0x30
 800180a:	d822      	bhi.n	8001852 <HAL_CAN_IRQHandler+0x334>
 800180c:	2b10      	cmp	r3, #16
 800180e:	d002      	beq.n	8001816 <HAL_CAN_IRQHandler+0x2f8>
 8001810:	2b20      	cmp	r3, #32
 8001812:	d005      	beq.n	8001820 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001814:	e01d      	b.n	8001852 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800181e:	e019      	b.n	8001854 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001828:	e014      	b.n	8001854 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	f043 0320 	orr.w	r3, r3, #32
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001832:	e00f      	b.n	8001854 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800183c:	e00a      	b.n	8001854 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001846:	e005      	b.n	8001854 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001850:	e000      	b.n	8001854 <HAL_CAN_IRQHandler+0x336>
            break;
 8001852:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001862:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2204      	movs	r2, #4
 800186a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f867 	bl	8001952 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4906      	ldr	r1, [pc, #24]	@ (80019fc <__NVIC_EnableIRQ+0x34>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	@ (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	@ 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff4f 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae0:	f7ff ff64 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	6978      	ldr	r0, [r7, #20]
 8001aec:	f7ff ffb2 	bl	8001a54 <NVIC_EncodePriority>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff81 	bl	8001a00 <__NVIC_SetPriority>
}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff57 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b08b      	sub	sp, #44	@ 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e169      	b.n	8001e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8158 	bne.w	8001e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a9a      	ldr	r2, [pc, #616]	@ (8001dc4 <HAL_GPIO_Init+0x2a0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d05e      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b60:	4a98      	ldr	r2, [pc, #608]	@ (8001dc4 <HAL_GPIO_Init+0x2a0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d875      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b66:	4a98      	ldr	r2, [pc, #608]	@ (8001dc8 <HAL_GPIO_Init+0x2a4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d058      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b6c:	4a96      	ldr	r2, [pc, #600]	@ (8001dc8 <HAL_GPIO_Init+0x2a4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d86f      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b72:	4a96      	ldr	r2, [pc, #600]	@ (8001dcc <HAL_GPIO_Init+0x2a8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d052      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b78:	4a94      	ldr	r2, [pc, #592]	@ (8001dcc <HAL_GPIO_Init+0x2a8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d869      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b7e:	4a94      	ldr	r2, [pc, #592]	@ (8001dd0 <HAL_GPIO_Init+0x2ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d04c      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b84:	4a92      	ldr	r2, [pc, #584]	@ (8001dd0 <HAL_GPIO_Init+0x2ac>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d863      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b8a:	4a92      	ldr	r2, [pc, #584]	@ (8001dd4 <HAL_GPIO_Init+0x2b0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d046      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b90:	4a90      	ldr	r2, [pc, #576]	@ (8001dd4 <HAL_GPIO_Init+0x2b0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d85d      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d82a      	bhi.n	8001bf0 <HAL_GPIO_Init+0xcc>
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d859      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba4 <HAL_GPIO_Init+0x80>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001bf9 	.word	0x08001bf9
 8001bac:	08001c0b 	.word	0x08001c0b
 8001bb0:	08001c4d 	.word	0x08001c4d
 8001bb4:	08001c53 	.word	0x08001c53
 8001bb8:	08001c53 	.word	0x08001c53
 8001bbc:	08001c53 	.word	0x08001c53
 8001bc0:	08001c53 	.word	0x08001c53
 8001bc4:	08001c53 	.word	0x08001c53
 8001bc8:	08001c53 	.word	0x08001c53
 8001bcc:	08001c53 	.word	0x08001c53
 8001bd0:	08001c53 	.word	0x08001c53
 8001bd4:	08001c53 	.word	0x08001c53
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c53 	.word	0x08001c53
 8001be0:	08001c53 	.word	0x08001c53
 8001be4:	08001c53 	.word	0x08001c53
 8001be8:	08001c01 	.word	0x08001c01
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	4a79      	ldr	r2, [pc, #484]	@ (8001dd8 <HAL_GPIO_Init+0x2b4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf6:	e02c      	b.n	8001c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e029      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e024      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e01f      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e01a      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c26:	2304      	movs	r3, #4
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e013      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c34:	2308      	movs	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	611a      	str	r2, [r3, #16]
          break;
 8001c3e:	e009      	b.n	8001c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	615a      	str	r2, [r3, #20]
          break;
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          break;
 8001c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2bff      	cmp	r3, #255	@ 0xff
 8001c58:	d801      	bhi.n	8001c5e <HAL_GPIO_Init+0x13a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_Init+0x13e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	@ 0xff
 8001c68:	d802      	bhi.n	8001c70 <HAL_GPIO_Init+0x14c>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x152>
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	3b08      	subs	r3, #8
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80b1 	beq.w	8001e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cbc:	4a48      	ldr	r2, [pc, #288]	@ (8001de0 <HAL_GPIO_Init+0x2bc>)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a40      	ldr	r2, [pc, #256]	@ (8001de4 <HAL_GPIO_Init+0x2c0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1ec>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a3f      	ldr	r2, [pc, #252]	@ (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1e8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dec <HAL_GPIO_Init+0x2c8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1e4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1e0>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d04:	2304      	movs	r3, #4
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d10:	2300      	movs	r3, #0
 8001d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d22:	492f      	ldr	r1, [pc, #188]	@ (8001de0 <HAL_GPIO_Init+0x2bc>)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	492c      	ldr	r1, [pc, #176]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4928      	ldr	r1, [pc, #160]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d64:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4922      	ldr	r1, [pc, #136]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60cb      	str	r3, [r1, #12]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	491e      	ldr	r1, [pc, #120]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4918      	ldr	r1, [pc, #96]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4914      	ldr	r1, [pc, #80]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d021      	beq.n	8001df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	490e      	ldr	r1, [pc, #56]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e021      	b.n	8001e06 <HAL_GPIO_Init+0x2e2>
 8001dc2:	bf00      	nop
 8001dc4:	10320000 	.word	0x10320000
 8001dc8:	10310000 	.word	0x10310000
 8001dcc:	10220000 	.word	0x10220000
 8001dd0:	10210000 	.word	0x10210000
 8001dd4:	10120000 	.word	0x10120000
 8001dd8:	10110000 	.word	0x10110000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000
 8001de4:	40010800 	.word	0x40010800
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40011000 	.word	0x40011000
 8001df0:	40011400 	.word	0x40011400
 8001df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	4909      	ldr	r1, [pc, #36]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	3301      	adds	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f ae8e 	bne.w	8001b38 <HAL_GPIO_Init+0x14>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	372c      	adds	r7, #44	@ 0x2c
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43d9      	mvns	r1, r3
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e272      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8087 	beq.w	8001fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb0:	4b92      	ldr	r3, [pc, #584]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d00c      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ebc:	4b8f      	ldr	r3, [pc, #572]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d112      	bne.n	8001eee <HAL_RCC_OscConfig+0x5e>
 8001ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed4:	d10b      	bne.n	8001eee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed6:	4b89      	ldr	r3, [pc, #548]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d06c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x12c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d168      	bne.n	8001fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e24c      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x76>
 8001ef8:	4b80      	ldr	r3, [pc, #512]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a7f      	ldr	r2, [pc, #508]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e02e      	b.n	8001f64 <HAL_RCC_OscConfig+0xd4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x98>
 8001f0e:	4b7b      	ldr	r3, [pc, #492]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7a      	ldr	r2, [pc, #488]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b78      	ldr	r3, [pc, #480]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a77      	ldr	r2, [pc, #476]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e01d      	b.n	8001f64 <HAL_RCC_OscConfig+0xd4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0xbc>
 8001f32:	4b72      	ldr	r3, [pc, #456]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a71      	ldr	r2, [pc, #452]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6e      	ldr	r2, [pc, #440]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0xd4>
 8001f4c:	4b6b      	ldr	r3, [pc, #428]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6a      	ldr	r2, [pc, #424]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b68      	ldr	r3, [pc, #416]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a67      	ldr	r2, [pc, #412]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe feb0 	bl	8000cd0 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7fe feac 	bl	8000cd0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	@ 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e200      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b5d      	ldr	r3, [pc, #372]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0xe4>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe fe9c 	bl	8000cd0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7fe fe98 	bl	8000cd0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	@ 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1ec      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	4b53      	ldr	r3, [pc, #332]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x10c>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d063      	beq.n	8002092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fca:	4b4c      	ldr	r3, [pc, #304]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fd6:	4b49      	ldr	r3, [pc, #292]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d11c      	bne.n	800201c <HAL_RCC_OscConfig+0x18c>
 8001fe2:	4b46      	ldr	r3, [pc, #280]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d116      	bne.n	800201c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	4b43      	ldr	r3, [pc, #268]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_RCC_OscConfig+0x176>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e1c0      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b3d      	ldr	r3, [pc, #244]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4939      	ldr	r1, [pc, #228]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	e03a      	b.n	8002092 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002024:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <HAL_RCC_OscConfig+0x270>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7fe fe51 	bl	8000cd0 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002032:	f7fe fe4d 	bl	8000cd0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e1a1      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	4b2d      	ldr	r3, [pc, #180]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002050:	4b2a      	ldr	r3, [pc, #168]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4927      	ldr	r1, [pc, #156]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002066:	4b26      	ldr	r3, [pc, #152]	@ (8002100 <HAL_RCC_OscConfig+0x270>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fe30 	bl	8000cd0 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002074:	f7fe fe2c 	bl	8000cd0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e180      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d03a      	beq.n	8002114 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d019      	beq.n	80020da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <HAL_RCC_OscConfig+0x274>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ac:	f7fe fe10 	bl	8000cd0 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7fe fe0c 	bl	8000cd0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e160      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <HAL_RCC_OscConfig+0x26c>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f000 faea 	bl	80026ac <RCC_Delay>
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020da:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <HAL_RCC_OscConfig+0x274>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7fe fdf6 	bl	8000cd0 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e8:	f7fe fdf2 	bl	8000cd0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d908      	bls.n	8002108 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e146      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	42420000 	.word	0x42420000
 8002104:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	4b92      	ldr	r3, [pc, #584]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e9      	bne.n	80020e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a6 	beq.w	800226e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b8b      	ldr	r3, [pc, #556]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10d      	bne.n	800214e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b88      	ldr	r3, [pc, #544]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a87      	ldr	r2, [pc, #540]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b85      	ldr	r3, [pc, #532]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b82      	ldr	r3, [pc, #520]	@ (8002358 <HAL_RCC_OscConfig+0x4c8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d118      	bne.n	800218c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215a:	4b7f      	ldr	r3, [pc, #508]	@ (8002358 <HAL_RCC_OscConfig+0x4c8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7e      	ldr	r2, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x4c8>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7fe fdb3 	bl	8000cd0 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7fe fdaf 	bl	8000cd0 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b64      	cmp	r3, #100	@ 0x64
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e103      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	4b75      	ldr	r3, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x4c8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x312>
 8002194:	4b6f      	ldr	r3, [pc, #444]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a6e      	ldr	r2, [pc, #440]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e02d      	b.n	80021fe <HAL_RCC_OscConfig+0x36e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x334>
 80021aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a69      	ldr	r2, [pc, #420]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6213      	str	r3, [r2, #32]
 80021b6:	4b67      	ldr	r3, [pc, #412]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a66      	ldr	r2, [pc, #408]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	e01c      	b.n	80021fe <HAL_RCC_OscConfig+0x36e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCC_OscConfig+0x356>
 80021cc:	4b61      	ldr	r3, [pc, #388]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a60      	ldr	r2, [pc, #384]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	e00b      	b.n	80021fe <HAL_RCC_OscConfig+0x36e>
 80021e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6213      	str	r3, [r2, #32]
 80021f2:	4b58      	ldr	r3, [pc, #352]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a57      	ldr	r2, [pc, #348]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d015      	beq.n	8002232 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7fe fd63 	bl	8000cd0 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7fe fd5f 	bl	8000cd0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0b1      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	4b4b      	ldr	r3, [pc, #300]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ee      	beq.n	800220e <HAL_RCC_OscConfig+0x37e>
 8002230:	e014      	b.n	800225c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7fe fd4d 	bl	8000cd0 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fd49 	bl	8000cd0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e09b      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	4b40      	ldr	r3, [pc, #256]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ee      	bne.n	800223a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b3c      	ldr	r3, [pc, #240]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a3b      	ldr	r2, [pc, #236]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8087 	beq.w	8002386 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002278:	4b36      	ldr	r3, [pc, #216]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d061      	beq.n	8002348 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d146      	bne.n	800231a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b33      	ldr	r3, [pc, #204]	@ (800235c <HAL_RCC_OscConfig+0x4cc>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe fd1d 	bl	8000cd0 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe fd19 	bl	8000cd0 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e06d      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ac:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d108      	bne.n	80022d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022c2:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4921      	ldr	r1, [pc, #132]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a19      	ldr	r1, [r3, #32]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	430b      	orrs	r3, r1
 80022e6:	491b      	ldr	r1, [pc, #108]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ec:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <HAL_RCC_OscConfig+0x4cc>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe fced 	bl	8000cd0 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe fce9 	bl	8000cd0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e03d      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x46a>
 8002318:	e035      	b.n	8002386 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_RCC_OscConfig+0x4cc>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fcd6 	bl	8000cd0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fcd2 	bl	8000cd0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e026      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x498>
 8002346:	e01e      	b.n	8002386 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e019      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
 8002354:	40021000 	.word	0x40021000
 8002358:	40007000 	.word	0x40007000
 800235c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_RCC_OscConfig+0x500>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	429a      	cmp	r2, r3
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0d0      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d910      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b67      	ldr	r3, [pc, #412]	@ (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4965      	ldr	r1, [pc, #404]	@ (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b63      	ldr	r3, [pc, #396]	@ (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0b8      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f0:	4b59      	ldr	r3, [pc, #356]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a58      	ldr	r2, [pc, #352]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002408:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a52      	ldr	r2, [pc, #328]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002412:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4b50      	ldr	r3, [pc, #320]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	494d      	ldr	r1, [pc, #308]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d040      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d115      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e07f      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e073      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4b3d      	ldr	r3, [pc, #244]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e06b      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002472:	4b39      	ldr	r3, [pc, #228]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f023 0203 	bic.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4936      	ldr	r1, [pc, #216]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe fc24 	bl	8000cd0 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7fe fc20 	bl	8000cd0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e053      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 020c 	and.w	r2, r3, #12
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1eb      	bne.n	800248c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d210      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0207 	bic.w	r2, r3, #7
 80024ca:	4922      	ldr	r1, [pc, #136]	@ (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e032      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4916      	ldr	r1, [pc, #88]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	490e      	ldr	r1, [pc, #56]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002522:	f000 f821 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8002526:	4602      	mov	r2, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	490a      	ldr	r1, [pc, #40]	@ (800255c <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	5ccb      	ldrb	r3, [r1, r3]
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a09      	ldr	r2, [pc, #36]	@ (8002560 <HAL_RCC_ClockConfig+0x1cc>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_RCC_ClockConfig+0x1d0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fad0 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40022000 	.word	0x40022000
 8002558:	40021000 	.word	0x40021000
 800255c:	08005b28 	.word	0x08005b28
 8002560:	20000008 	.word	0x20000008
 8002564:	2000000c 	.word	0x2000000c

08002568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002582:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d002      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x30>
 8002592:	2b08      	cmp	r3, #8
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x36>
 8002596:	e027      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x98>)
 800259a:	613b      	str	r3, [r7, #16]
      break;
 800259c:	e027      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	4a17      	ldr	r2, [pc, #92]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d010      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x94>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	0c5b      	lsrs	r3, r3, #17
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ca:	fb03 f202 	mul.w	r2, r3, r2
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e004      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a0c      	ldr	r2, [pc, #48]	@ (800260c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	613b      	str	r3, [r7, #16]
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ea:	613b      	str	r3, [r7, #16]
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	693b      	ldr	r3, [r7, #16]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	007a1200 	.word	0x007a1200
 8002604:	08005b40 	.word	0x08005b40
 8002608:	08005b50 	.word	0x08005b50
 800260c:	003d0900 	.word	0x003d0900

08002610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b02      	ldr	r3, [pc, #8]	@ (8002620 <HAL_RCC_GetHCLKFreq+0x10>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000008 	.word	0x20000008

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002628:	f7ff fff2 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	0adb      	lsrs	r3, r3, #11
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	@ (8002648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	08005b38 	.word	0x08005b38

0800264c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	220f      	movs	r2, #15
 800265a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <HAL_RCC_GetClockConfig+0x58>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002668:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <HAL_RCC_GetClockConfig+0x58>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_GetClockConfig+0x58>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <HAL_RCC_GetClockConfig+0x58>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	08db      	lsrs	r3, r3, #3
 8002686:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0207 	and.w	r2, r3, #7
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40022000 	.word	0x40022000

080026ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b4:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <RCC_Delay+0x34>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <RCC_Delay+0x38>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a5b      	lsrs	r3, r3, #9
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c8:	bf00      	nop
  }
  while (Delay --);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	60fa      	str	r2, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f9      	bne.n	80026c8 <RCC_Delay+0x1c>
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000008 	.word	0x20000008
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e041      	b.n	800277e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe f94c 	bl	80009ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f000 fd48 	bl	80031bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d001      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e03a      	b.n	8002816 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a18      	ldr	r2, [pc, #96]	@ (8002820 <HAL_TIM_Base_Start_IT+0x98>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00e      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x58>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ca:	d009      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x58>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <HAL_TIM_Base_Start_IT+0x9c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x58>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a13      	ldr	r2, [pc, #76]	@ (8002828 <HAL_TIM_Base_Start_IT+0xa0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d111      	bne.n	8002804 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d010      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	e007      	b.n	8002814 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800

0800282c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e041      	b.n	80028c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f839 	bl	80028ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fca6 	bl	80031bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_TIM_PWM_Start+0x24>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e022      	b.n	8002946 <HAL_TIM_PWM_Start+0x6a>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d109      	bne.n	800291a <HAL_TIM_PWM_Start+0x3e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	bf14      	ite	ne
 8002912:	2301      	movne	r3, #1
 8002914:	2300      	moveq	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	e015      	b.n	8002946 <HAL_TIM_PWM_Start+0x6a>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d109      	bne.n	8002934 <HAL_TIM_PWM_Start+0x58>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e008      	b.n	8002946 <HAL_TIM_PWM_Start+0x6a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e05e      	b.n	8002a0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <HAL_TIM_PWM_Start+0x82>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800295c:	e013      	b.n	8002986 <HAL_TIM_PWM_Start+0xaa>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d104      	bne.n	800296e <HAL_TIM_PWM_Start+0x92>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800296c:	e00b      	b.n	8002986 <HAL_TIM_PWM_Start+0xaa>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d104      	bne.n	800297e <HAL_TIM_PWM_Start+0xa2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800297c:	e003      	b.n	8002986 <HAL_TIM_PWM_Start+0xaa>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fea0 	bl	80036d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1e      	ldr	r2, [pc, #120]	@ (8002a14 <HAL_TIM_PWM_Start+0x138>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d107      	bne.n	80029ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a18      	ldr	r2, [pc, #96]	@ (8002a14 <HAL_TIM_PWM_Start+0x138>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIM_PWM_Start+0xfa>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c0:	d009      	beq.n	80029d6 <HAL_TIM_PWM_Start+0xfa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a14      	ldr	r2, [pc, #80]	@ (8002a18 <HAL_TIM_PWM_Start+0x13c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIM_PWM_Start+0xfa>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a12      	ldr	r2, [pc, #72]	@ (8002a1c <HAL_TIM_PWM_Start+0x140>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d111      	bne.n	80029fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	d010      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e007      	b.n	8002a0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e093      	b.n	8002b5c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d106      	bne.n	8002a4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fd ffcb 	bl	80009e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a64:	f023 0307 	bic.w	r3, r3, #7
 8002a68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f000 fba1 	bl	80031bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002ac0:	f023 030c 	bic.w	r3, r3, #12
 8002ac4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002acc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	4313      	orrs	r3, r2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	011a      	lsls	r2, r3, #4
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	031b      	lsls	r3, r3, #12
 8002af0:	4313      	orrs	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002afe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002b8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d110      	bne.n	8002bb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b9a:	7b7b      	ldrb	r3, [r7, #13]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d001      	beq.n	8002ba4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e069      	b.n	8002c78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bb4:	e031      	b.n	8002c1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d110      	bne.n	8002bde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d102      	bne.n	8002bc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bc2:	7b3b      	ldrb	r3, [r7, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e055      	b.n	8002c78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bdc:	e01d      	b.n	8002c1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d108      	bne.n	8002bf6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bea:	7b7b      	ldrb	r3, [r7, #13]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bf0:	7b3b      	ldrb	r3, [r7, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e03e      	b.n	8002c78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_TIM_Encoder_Start+0xc4>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d008      	beq.n	8002c38 <HAL_TIM_Encoder_Start+0xd4>
 8002c26:	e00f      	b.n	8002c48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fd4f 	bl	80036d4 <TIM_CCxChannelCmd>
      break;
 8002c36:	e016      	b.n	8002c66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2104      	movs	r1, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fd47 	bl	80036d4 <TIM_CCxChannelCmd>
      break;
 8002c46:	e00e      	b.n	8002c66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fd3f 	bl	80036d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fd38 	bl	80036d4 <TIM_CCxChannelCmd>
      break;
 8002c64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0202 	mvn.w	r2, #2
 8002cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa5a 	bl	8003184 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa4d 	bl	8003172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa5c 	bl	8003196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0204 	mvn.w	r2, #4
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fa34 	bl	8003184 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa27 	bl	8003172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fa36 	bl	8003196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d020      	beq.n	8002d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0208 	mvn.w	r2, #8
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2204      	movs	r2, #4
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa0e 	bl	8003184 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa01 	bl	8003172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fa10 	bl	8003196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d020      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0210 	mvn.w	r2, #16
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9e8 	bl	8003184 <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9db 	bl	8003172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f9ea 	bl	8003196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00c      	beq.n	8002dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd fd28 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fced 	bl	80037ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9ba 	bl	80031a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0220 	mvn.w	r2, #32
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fcc0 	bl	80037d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0ae      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	f200 809f 	bhi.w	8002fcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002fcd 	.word	0x08002fcd
 8002e9c:	08002fcd 	.word	0x08002fcd
 8002ea0:	08002fcd 	.word	0x08002fcd
 8002ea4:	08002f09 	.word	0x08002f09
 8002ea8:	08002fcd 	.word	0x08002fcd
 8002eac:	08002fcd 	.word	0x08002fcd
 8002eb0:	08002fcd 	.word	0x08002fcd
 8002eb4:	08002f4b 	.word	0x08002f4b
 8002eb8:	08002fcd 	.word	0x08002fcd
 8002ebc:	08002fcd 	.word	0x08002fcd
 8002ec0:	08002fcd 	.word	0x08002fcd
 8002ec4:	08002f8b 	.word	0x08002f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f9e2 	bl	8003298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0204 	bic.w	r2, r2, #4
 8002ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6999      	ldr	r1, [r3, #24]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	619a      	str	r2, [r3, #24]
      break;
 8002f06:	e064      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fa28 	bl	8003364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	619a      	str	r2, [r3, #24]
      break;
 8002f48:	e043      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa71 	bl	8003438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0208 	orr.w	r2, r2, #8
 8002f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0204 	bic.w	r2, r2, #4
 8002f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	61da      	str	r2, [r3, #28]
      break;
 8002f88:	e023      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fabb 	bl	800350c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	61da      	str	r2, [r3, #28]
      break;
 8002fca:	e002      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_ConfigClockSource+0x1c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0b4      	b.n	800316a <HAL_TIM_ConfigClockSource+0x186>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800301e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003038:	d03e      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0xd4>
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800303e:	f200 8087 	bhi.w	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003046:	f000 8086 	beq.w	8003156 <HAL_TIM_ConfigClockSource+0x172>
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800304e:	d87f      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b70      	cmp	r3, #112	@ 0x70
 8003052:	d01a      	beq.n	800308a <HAL_TIM_ConfigClockSource+0xa6>
 8003054:	2b70      	cmp	r3, #112	@ 0x70
 8003056:	d87b      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b60      	cmp	r3, #96	@ 0x60
 800305a:	d050      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x11a>
 800305c:	2b60      	cmp	r3, #96	@ 0x60
 800305e:	d877      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b50      	cmp	r3, #80	@ 0x50
 8003062:	d03c      	beq.n	80030de <HAL_TIM_ConfigClockSource+0xfa>
 8003064:	2b50      	cmp	r3, #80	@ 0x50
 8003066:	d873      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b40      	cmp	r3, #64	@ 0x40
 800306a:	d058      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x13a>
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d86f      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b30      	cmp	r3, #48	@ 0x30
 8003072:	d064      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b30      	cmp	r3, #48	@ 0x30
 8003076:	d86b      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d060      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d867      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d05c      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003084:	2b10      	cmp	r3, #16
 8003086:	d05a      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	e062      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800309a:	f000 fafc 	bl	8003696 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	609a      	str	r2, [r3, #8]
      break;
 80030b6:	e04f      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c8:	f000 fae5 	bl	8003696 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030da:	609a      	str	r2, [r3, #8]
      break;
 80030dc:	e03c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	461a      	mov	r2, r3
 80030ec:	f000 fa5c 	bl	80035a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2150      	movs	r1, #80	@ 0x50
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fab3 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 80030fc:	e02c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800310a:	461a      	mov	r2, r3
 800310c:	f000 fa7a 	bl	8003604 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2160      	movs	r1, #96	@ 0x60
 8003116:	4618      	mov	r0, r3
 8003118:	f000 faa3 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 800311c:	e01c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	461a      	mov	r2, r3
 800312c:	f000 fa3c 	bl	80035a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2140      	movs	r1, #64	@ 0x40
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fa93 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 800313c:	e00c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f000 fa8a 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 800314e:	e003      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e000      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
	...

080031bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <TIM_Base_SetConfig+0xd0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00b      	beq.n	80031ec <TIM_Base_SetConfig+0x30>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031da:	d007      	beq.n	80031ec <TIM_Base_SetConfig+0x30>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a2c      	ldr	r2, [pc, #176]	@ (8003290 <TIM_Base_SetConfig+0xd4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <TIM_Base_SetConfig+0x30>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003294 <TIM_Base_SetConfig+0xd8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d108      	bne.n	80031fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a22      	ldr	r2, [pc, #136]	@ (800328c <TIM_Base_SetConfig+0xd0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00b      	beq.n	800321e <TIM_Base_SetConfig+0x62>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320c:	d007      	beq.n	800321e <TIM_Base_SetConfig+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <TIM_Base_SetConfig+0xd4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d003      	beq.n	800321e <TIM_Base_SetConfig+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <TIM_Base_SetConfig+0xd8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d108      	bne.n	8003230 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <TIM_Base_SetConfig+0xd0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d103      	bne.n	8003264 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
  }
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800

08003298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f023 0201 	bic.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f023 0302 	bic.w	r3, r3, #2
 80032e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <TIM_OC1_SetConfig+0xc8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10c      	bne.n	800330e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0308 	bic.w	r3, r3, #8
 80032fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <TIM_OC1_SetConfig+0xc8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d111      	bne.n	800333a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800331c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	621a      	str	r2, [r3, #32]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40012c00 	.word	0x40012c00

08003364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 0210 	bic.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0320 	bic.w	r3, r3, #32
 80033ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a1d      	ldr	r2, [pc, #116]	@ (8003434 <TIM_OC2_SetConfig+0xd0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10d      	bne.n	80033e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a14      	ldr	r2, [pc, #80]	@ (8003434 <TIM_OC2_SetConfig+0xd0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d113      	bne.n	8003410 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	40012c00 	.word	0x40012c00

08003438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <TIM_OC3_SetConfig+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10d      	bne.n	80034b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800349c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a14      	ldr	r2, [pc, #80]	@ (8003508 <TIM_OC3_SetConfig+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d113      	bne.n	80034e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00

0800350c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	031b      	lsls	r3, r3, #12
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0f      	ldr	r2, [pc, #60]	@ (80035a4 <TIM_OC4_SetConfig+0x98>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d109      	bne.n	8003580 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	40012c00 	.word	0x40012c00

080035a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f023 0201 	bic.w	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 030a 	bic.w	r3, r3, #10
 80035e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0210 	bic.w	r2, r3, #16
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800362e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	031b      	lsls	r3, r3, #12
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003640:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	f043 0307 	orr.w	r3, r3, #7
 8003684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003696:	b480      	push	{r7}
 8003698:	b087      	sub	sp, #28
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	021a      	lsls	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	609a      	str	r2, [r3, #8]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2201      	movs	r2, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	401a      	ands	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e046      	b.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00e      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003780:	d009      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a12      	ldr	r2, [pc, #72]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a10      	ldr	r2, [pc, #64]	@ (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10c      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800379c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800

080037d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f103 0208 	add.w	r2, r3, #8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f103 0208 	add.w	r2, r3, #8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f103 0208 	add.w	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ae:	d103      	bne.n	80038b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e00c      	b.n	80038d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3308      	adds	r3, #8
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e002      	b.n	80038c6 <vListInsert+0x2e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d2f6      	bcs.n	80038c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	601a      	str	r2, [r3, #0]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6852      	ldr	r2, [r2, #4]
 8003928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d103      	bne.n	800393c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
	...

0800395c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003988:	f001 fd08 	bl	800539c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	441a      	add	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	3b01      	subs	r3, #1
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	441a      	add	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	22ff      	movs	r2, #255	@ 0xff
 80039cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	22ff      	movs	r2, #255	@ 0xff
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d114      	bne.n	8003a08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01a      	beq.n	8003a1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3310      	adds	r3, #16
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fffc 	bl	80049e8 <xTaskRemoveFromEventList>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039f6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <xQueueGenericReset+0xd0>)
 80039f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	e009      	b.n	8003a1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fef5 	bl	80037fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3324      	adds	r3, #36	@ 0x24
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fef0 	bl	80037fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a1c:	f001 fcee 	bl	80053fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a20:	2301      	movs	r3, #1
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	e000ed04 	.word	0xe000ed04

08003a30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <xQueueGenericCreate+0x2c>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	613b      	str	r3, [r7, #16]
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3348      	adds	r3, #72	@ 0x48
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 fd58 	bl	8005520 <pvPortMalloc>
 8003a70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d011      	beq.n	8003a9c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3348      	adds	r3, #72	@ 0x48
 8003a80:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a8a:	79fa      	ldrb	r2, [r7, #7]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f805 	bl	8003aa6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e002      	b.n	8003ac8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	69b8      	ldr	r0, [r7, #24]
 8003ad8:	f7ff ff40 	bl	800395c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00e      	beq.n	8003b10 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b04:	2300      	movs	r3, #0
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f81c 	bl	8003b48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b22:	2301      	movs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6939      	ldr	r1, [r7, #16]
 8003b30:	6978      	ldr	r0, [r7, #20]
 8003b32:	f7ff ff7d 	bl	8003a30 <xQueueGenericCreate>
 8003b36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff ffd3 	bl	8003ae4 <prvInitialiseMutex>

		return xNewQueue;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
	}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08e      	sub	sp, #56	@ 0x38
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <xQueueGenericSend+0x34>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <xQueueGenericSend+0x42>
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <xQueueGenericSend+0x46>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <xQueueGenericSend+0x48>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <xQueueGenericSend+0x64>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d103      	bne.n	8003bba <xQueueGenericSend+0x72>
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <xQueueGenericSend+0x76>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueGenericSend+0x78>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <xQueueGenericSend+0x94>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	623b      	str	r3, [r7, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bdc:	f001 f8ca 	bl	8004d74 <xTaskGetSchedulerState>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <xQueueGenericSend+0xa4>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <xQueueGenericSend+0xa8>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <xQueueGenericSend+0xaa>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <xQueueGenericSend+0xc6>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	61fb      	str	r3, [r7, #28]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c0e:	f001 fbc5 	bl	800539c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <xQueueGenericSend+0xdc>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d129      	bne.n	8003c78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c2a:	f000 f9b6 	bl	8003f9a <prvCopyDataToQueue>
 8003c2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	3324      	adds	r3, #36	@ 0x24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fed3 	bl	80049e8 <xTaskRemoveFromEventList>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c48:	4b3f      	ldr	r3, [pc, #252]	@ (8003d48 <xQueueGenericSend+0x200>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	e00a      	b.n	8003c70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c60:	4b39      	ldr	r3, [pc, #228]	@ (8003d48 <xQueueGenericSend+0x200>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c70:	f001 fbc4 	bl	80053fc <vPortExitCritical>
				return pdPASS;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e063      	b.n	8003d40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c7e:	f001 fbbd 	bl	80053fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e05c      	b.n	8003d40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 ff0d 	bl	8004ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c9a:	f001 fbaf 	bl	80053fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c9e:	f000 fcb5 	bl	800460c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ca2:	f001 fb7b 	bl	800539c <vPortEnterCritical>
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cac:	b25b      	sxtb	r3, r3
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cb2:	d103      	bne.n	8003cbc <xQueueGenericSend+0x174>
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cc2:	b25b      	sxtb	r3, r3
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc8:	d103      	bne.n	8003cd2 <xQueueGenericSend+0x18a>
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cd2:	f001 fb93 	bl	80053fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cd6:	1d3a      	adds	r2, r7, #4
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fefc 	bl	8004adc <xTaskCheckForTimeOut>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d124      	bne.n	8003d34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cec:	f000 fa27 	bl	800413e <prvIsQueueFull>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d018      	beq.n	8003d28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	3310      	adds	r3, #16
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fe4c 	bl	800499c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d06:	f000 f9b2 	bl	800406e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d0a:	f000 fc8d 	bl	8004628 <xTaskResumeAll>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f47f af7c 	bne.w	8003c0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003d16:	4b0c      	ldr	r3, [pc, #48]	@ (8003d48 <xQueueGenericSend+0x200>)
 8003d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	e772      	b.n	8003c0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d2a:	f000 f9a0 	bl	800406e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d2e:	f000 fc7b 	bl	8004628 <xTaskResumeAll>
 8003d32:	e76c      	b.n	8003c0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d36:	f000 f99a 	bl	800406e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d3a:	f000 fc75 	bl	8004628 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3738      	adds	r7, #56	@ 0x38
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	e000ed04 	.word	0xe000ed04

08003d4c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08e      	sub	sp, #56	@ 0x38
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	623b      	str	r3, [r7, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	61fb      	str	r3, [r7, #28]
}
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
 8003d9e:	e7fd      	b.n	8003d9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003da0:	f000 ffe8 	bl	8004d74 <xTaskGetSchedulerState>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <xQueueSemaphoreTake+0x64>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <xQueueSemaphoreTake+0x68>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <xQueueSemaphoreTake+0x6a>
 8003db4:	2300      	movs	r3, #0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	61bb      	str	r3, [r7, #24]
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	e7fd      	b.n	8003dce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dd2:	f001 fae3 	bl	800539c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d024      	beq.n	8003e2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d104      	bne.n	8003dfc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003df2:	f001 f96b 	bl	80050cc <pvTaskIncrementMutexHeldCount>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00f      	beq.n	8003e24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	3310      	adds	r3, #16
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fded 	bl	80049e8 <xTaskRemoveFromEventList>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e14:	4b54      	ldr	r3, [pc, #336]	@ (8003f68 <xQueueSemaphoreTake+0x21c>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e24:	f001 faea 	bl	80053fc <vPortExitCritical>
				return pdPASS;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e098      	b.n	8003f5e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d112      	bne.n	8003e58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	617b      	str	r3, [r7, #20]
}
 8003e4a:	bf00      	nop
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e50:	f001 fad4 	bl	80053fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e082      	b.n	8003f5e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e5e:	f107 030c 	add.w	r3, r7, #12
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fe24 	bl	8004ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e6c:	f001 fac6 	bl	80053fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e70:	f000 fbcc 	bl	800460c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e74:	f001 fa92 	bl	800539c <vPortEnterCritical>
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e84:	d103      	bne.n	8003e8e <xQueueSemaphoreTake+0x142>
 8003e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e9a:	d103      	bne.n	8003ea4 <xQueueSemaphoreTake+0x158>
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ea4:	f001 faaa 	bl	80053fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ea8:	463a      	mov	r2, r7
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fe13 	bl	8004adc <xTaskCheckForTimeOut>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d132      	bne.n	8003f22 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ebc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ebe:	f000 f928 	bl	8004112 <prvIsQueueEmpty>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d026      	beq.n	8003f16 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003ed0:	f001 fa64 	bl	800539c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 ff69 	bl	8004db0 <xTaskPriorityInherit>
 8003ede:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003ee0:	f001 fa8c 	bl	80053fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee6:	3324      	adds	r3, #36	@ 0x24
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd55 	bl	800499c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ef2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ef4:	f000 f8bb 	bl	800406e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ef8:	f000 fb96 	bl	8004628 <xTaskResumeAll>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f47f af67 	bne.w	8003dd2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003f04:	4b18      	ldr	r3, [pc, #96]	@ (8003f68 <xQueueSemaphoreTake+0x21c>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	e75d      	b.n	8003dd2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f18:	f000 f8a9 	bl	800406e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f1c:	f000 fb84 	bl	8004628 <xTaskResumeAll>
 8003f20:	e757      	b.n	8003dd2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f24:	f000 f8a3 	bl	800406e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f28:	f000 fb7e 	bl	8004628 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f2e:	f000 f8f0 	bl	8004112 <prvIsQueueEmpty>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f43f af4c 	beq.w	8003dd2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003f40:	f001 fa2c 	bl	800539c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f46:	f000 f811 	bl	8003f6c <prvGetDisinheritPriorityAfterTimeout>
 8003f4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 f82a 	bl	8004fac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f58:	f001 fa50 	bl	80053fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3738      	adds	r7, #56	@ 0x38
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1c3 0307 	rsb	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e001      	b.n	8003f8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
	}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10d      	bne.n	8003fd4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d14d      	bne.n	800405c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 ff69 	bl	8004e9c <xTaskPriorityDisinherit>
 8003fca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
 8003fd2:	e043      	b.n	800405c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d119      	bne.n	800400e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6858      	ldr	r0, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	f001 fd13 	bl	8005a10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d32b      	bcc.n	800405c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	e026      	b.n	800405c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68d8      	ldr	r0, [r3, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	461a      	mov	r2, r3
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	f001 fcf9 	bl	8005a10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	425b      	negs	r3, r3
 8004028:	441a      	add	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d207      	bcs.n	800404a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	425b      	negs	r3, r3
 8004044:	441a      	add	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d105      	bne.n	800405c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3b01      	subs	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004064:	697b      	ldr	r3, [r7, #20]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004076:	f001 f991 	bl	800539c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004080:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004082:	e011      	b.n	80040a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3324      	adds	r3, #36	@ 0x24
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fca9 	bl	80049e8 <xTaskRemoveFromEventList>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800409c:	f000 fd82 	bl	8004ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	dce9      	bgt.n	8004084 <prvUnlockQueue+0x16>
 80040b0:	e000      	b.n	80040b4 <prvUnlockQueue+0x46>
					break;
 80040b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	22ff      	movs	r2, #255	@ 0xff
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80040bc:	f001 f99e 	bl	80053fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040c0:	f001 f96c 	bl	800539c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040cc:	e011      	b.n	80040f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3310      	adds	r3, #16
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc84 	bl	80049e8 <xTaskRemoveFromEventList>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040e6:	f000 fd5d 	bl	8004ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040ea:	7bbb      	ldrb	r3, [r7, #14]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	dce9      	bgt.n	80040ce <prvUnlockQueue+0x60>
 80040fa:	e000      	b.n	80040fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	22ff      	movs	r2, #255	@ 0xff
 8004102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004106:	f001 f979 	bl	80053fc <vPortExitCritical>
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800411a:	f001 f93f 	bl	800539c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004126:	2301      	movs	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e001      	b.n	8004130 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004130:	f001 f964 	bl	80053fc <vPortExitCritical>

	return xReturn;
 8004134:	68fb      	ldr	r3, [r7, #12]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004146:	f001 f929 	bl	800539c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004152:	429a      	cmp	r2, r3
 8004154:	d102      	bne.n	800415c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004156:	2301      	movs	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e001      	b.n	8004160 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004160:	f001 f94c 	bl	80053fc <vPortExitCritical>

	return xReturn;
 8004164:	68fb      	ldr	r3, [r7, #12]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800416e:	b580      	push	{r7, lr}
 8004170:	b08e      	sub	sp, #56	@ 0x38
 8004172:	af04      	add	r7, sp, #16
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800417c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <xTaskCreateStatic+0x2c>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	623b      	str	r3, [r7, #32]
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	e7fd      	b.n	8004196 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	61fb      	str	r3, [r7, #28]
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	e7fd      	b.n	80041b4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041b8:	23a0      	movs	r3, #160	@ 0xa0
 80041ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2ba0      	cmp	r3, #160	@ 0xa0
 80041c0:	d00b      	beq.n	80041da <xTaskCreateStatic+0x6c>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61bb      	str	r3, [r7, #24]
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	e7fd      	b.n	80041d6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01e      	beq.n	8004220 <xTaskCreateStatic+0xb2>
 80041e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041f0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041fa:	2300      	movs	r3, #0
 80041fc:	9303      	str	r3, [sp, #12]
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	9302      	str	r3, [sp, #8]
 8004202:	f107 0314 	add.w	r3, r7, #20
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f850 	bl	80042b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004218:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800421a:	f000 f8ed 	bl	80043f8 <prvAddNewTaskToReadyList>
 800421e:	e001      	b.n	8004224 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004224:	697b      	ldr	r3, [r7, #20]
	}
 8004226:	4618      	mov	r0, r3
 8004228:	3728      	adds	r7, #40	@ 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08c      	sub	sp, #48	@ 0x30
 8004232:	af04      	add	r7, sp, #16
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f001 f96c 	bl	8005520 <pvPortMalloc>
 8004248:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00e      	beq.n	800426e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004250:	20a0      	movs	r0, #160	@ 0xa0
 8004252:	f001 f965 	bl	8005520 <pvPortMalloc>
 8004256:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30
 8004264:	e005      	b.n	8004272 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004266:	6978      	ldr	r0, [r7, #20]
 8004268:	f001 fa28 	bl	80056bc <vPortFree>
 800426c:	e001      	b.n	8004272 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d017      	beq.n	80042a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004280:	88fa      	ldrh	r2, [r7, #6]
 8004282:	2300      	movs	r3, #0
 8004284:	9303      	str	r3, [sp, #12]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	9302      	str	r3, [sp, #8]
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f80e 	bl	80042b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800429c:	69f8      	ldr	r0, [r7, #28]
 800429e:	f000 f8ab 	bl	80043f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042a2:	2301      	movs	r3, #1
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	e002      	b.n	80042ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042ae:	69bb      	ldr	r3, [r7, #24]
	}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042d0:	3b01      	subs	r3, #1
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f023 0307 	bic.w	r3, r3, #7
 80042de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	617b      	str	r3, [r7, #20]
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01f      	beq.n	8004348 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e012      	b.n	8004334 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	7819      	ldrb	r1, [r3, #0]
 8004316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	3334      	adds	r3, #52	@ 0x34
 800431e:	460a      	mov	r2, r1
 8004320:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3301      	adds	r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b0f      	cmp	r3, #15
 8004338:	d9e9      	bls.n	800430e <prvInitialiseNewTask+0x56>
 800433a:	e000      	b.n	800433e <prvInitialiseNewTask+0x86>
			{
				break;
 800433c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004346:	e003      	b.n	8004350 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	2b06      	cmp	r3, #6
 8004354:	d901      	bls.n	800435a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004356:	2306      	movs	r3, #6
 8004358:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800435e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004364:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	2200      	movs	r2, #0
 800436a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fa62 	bl	800383a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	3318      	adds	r3, #24
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fa5d 	bl	800383a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004384:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	f1c3 0207 	rsb	r2, r3, #7
 800438c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	2200      	movs	r2, #0
 800439a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	334c      	adds	r3, #76	@ 0x4c
 80043aa:	224c      	movs	r2, #76	@ 0x4c
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 faa2 	bl	80058f8 <memset>
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <prvInitialiseNewTask+0x134>)
 80043b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	4a0c      	ldr	r2, [pc, #48]	@ (80043f0 <prvInitialiseNewTask+0x138>)
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	4a0c      	ldr	r2, [pc, #48]	@ (80043f4 <prvInitialiseNewTask+0x13c>)
 80043c4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	69b8      	ldr	r0, [r7, #24]
 80043cc:	f000 fef8 	bl	80051c0 <pxPortInitialiseStack>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e2:	bf00      	nop
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20001208 	.word	0x20001208
 80043f0:	20001270 	.word	0x20001270
 80043f4:	200012d8 	.word	0x200012d8

080043f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004400:	f000 ffcc 	bl	800539c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004404:	4b2a      	ldr	r3, [pc, #168]	@ (80044b0 <prvAddNewTaskToReadyList+0xb8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	4a29      	ldr	r2, [pc, #164]	@ (80044b0 <prvAddNewTaskToReadyList+0xb8>)
 800440c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800440e:	4b29      	ldr	r3, [pc, #164]	@ (80044b4 <prvAddNewTaskToReadyList+0xbc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004416:	4a27      	ldr	r2, [pc, #156]	@ (80044b4 <prvAddNewTaskToReadyList+0xbc>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800441c:	4b24      	ldr	r3, [pc, #144]	@ (80044b0 <prvAddNewTaskToReadyList+0xb8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d110      	bne.n	8004446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004424:	f000 fbe2 	bl	8004bec <prvInitialiseTaskLists>
 8004428:	e00d      	b.n	8004446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800442a:	4b23      	ldr	r3, [pc, #140]	@ (80044b8 <prvAddNewTaskToReadyList+0xc0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004432:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <prvAddNewTaskToReadyList+0xbc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	429a      	cmp	r2, r3
 800443e:	d802      	bhi.n	8004446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004440:	4a1c      	ldr	r2, [pc, #112]	@ (80044b4 <prvAddNewTaskToReadyList+0xbc>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004446:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <prvAddNewTaskToReadyList+0xc4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3301      	adds	r3, #1
 800444c:	4a1b      	ldr	r2, [pc, #108]	@ (80044bc <prvAddNewTaskToReadyList+0xc4>)
 800444e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	2201      	movs	r2, #1
 8004456:	409a      	lsls	r2, r3
 8004458:	4b19      	ldr	r3, [pc, #100]	@ (80044c0 <prvAddNewTaskToReadyList+0xc8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4313      	orrs	r3, r2
 800445e:	4a18      	ldr	r2, [pc, #96]	@ (80044c0 <prvAddNewTaskToReadyList+0xc8>)
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <prvAddNewTaskToReadyList+0xcc>)
 8004470:	441a      	add	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f7ff f9ea 	bl	8003852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800447e:	f000 ffbd 	bl	80053fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <prvAddNewTaskToReadyList+0xc0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800448a:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <prvAddNewTaskToReadyList+0xbc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004494:	429a      	cmp	r2, r3
 8004496:	d207      	bcs.n	80044a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <prvAddNewTaskToReadyList+0xd0>)
 800449a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	200005b4 	.word	0x200005b4
 80044b4:	200004b4 	.word	0x200004b4
 80044b8:	200005c0 	.word	0x200005c0
 80044bc:	200005d0 	.word	0x200005d0
 80044c0:	200005bc 	.word	0x200005bc
 80044c4:	200004b8 	.word	0x200004b8
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d018      	beq.n	8004510 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044de:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <vTaskDelay+0x64>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <vTaskDelay+0x32>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60bb      	str	r3, [r7, #8]
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044fe:	f000 f885 	bl	800460c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004502:	2100      	movs	r1, #0
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fdf5 	bl	80050f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800450a:	f000 f88d 	bl	8004628 <xTaskResumeAll>
 800450e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d107      	bne.n	8004526 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004516:	4b07      	ldr	r3, [pc, #28]	@ (8004534 <vTaskDelay+0x68>)
 8004518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200005dc 	.word	0x200005dc
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	@ 0x28
 800453c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004546:	463a      	mov	r2, r7
 8004548:	1d39      	adds	r1, r7, #4
 800454a:	f107 0308 	add.w	r3, r7, #8
 800454e:	4618      	mov	r0, r3
 8004550:	f7fb fdfe 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	9202      	str	r2, [sp, #8]
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	2300      	movs	r3, #0
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	2300      	movs	r3, #0
 8004564:	460a      	mov	r2, r1
 8004566:	4921      	ldr	r1, [pc, #132]	@ (80045ec <vTaskStartScheduler+0xb4>)
 8004568:	4821      	ldr	r0, [pc, #132]	@ (80045f0 <vTaskStartScheduler+0xb8>)
 800456a:	f7ff fe00 	bl	800416e <xTaskCreateStatic>
 800456e:	4603      	mov	r3, r0
 8004570:	4a20      	ldr	r2, [pc, #128]	@ (80045f4 <vTaskStartScheduler+0xbc>)
 8004572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004574:	4b1f      	ldr	r3, [pc, #124]	@ (80045f4 <vTaskStartScheduler+0xbc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800457c:	2301      	movs	r3, #1
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	e001      	b.n	8004586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d11b      	bne.n	80045c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	613b      	str	r3, [r7, #16]
}
 800459e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045a0:	4b15      	ldr	r3, [pc, #84]	@ (80045f8 <vTaskStartScheduler+0xc0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	334c      	adds	r3, #76	@ 0x4c
 80045a6:	4a15      	ldr	r2, [pc, #84]	@ (80045fc <vTaskStartScheduler+0xc4>)
 80045a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045aa:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <vTaskStartScheduler+0xc8>)
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045b2:	4b14      	ldr	r3, [pc, #80]	@ (8004604 <vTaskStartScheduler+0xcc>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045b8:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <vTaskStartScheduler+0xd0>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045be:	f000 fe7b 	bl	80052b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045c2:	e00f      	b.n	80045e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045ca:	d10b      	bne.n	80045e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	60fb      	str	r3, [r7, #12]
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <vTaskStartScheduler+0xa8>
}
 80045e4:	bf00      	nop
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	08005b20 	.word	0x08005b20
 80045f0:	08004bbd 	.word	0x08004bbd
 80045f4:	200005d8 	.word	0x200005d8
 80045f8:	200004b4 	.word	0x200004b4
 80045fc:	20000018 	.word	0x20000018
 8004600:	200005d4 	.word	0x200005d4
 8004604:	200005c0 	.word	0x200005c0
 8004608:	200005b8 	.word	0x200005b8

0800460c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004610:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <vTaskSuspendAll+0x18>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	4a03      	ldr	r2, [pc, #12]	@ (8004624 <vTaskSuspendAll+0x18>)
 8004618:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	200005dc 	.word	0x200005dc

08004628 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004636:	4b42      	ldr	r3, [pc, #264]	@ (8004740 <xTaskResumeAll+0x118>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <xTaskResumeAll+0x2e>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	603b      	str	r3, [r7, #0]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004656:	f000 fea1 	bl	800539c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800465a:	4b39      	ldr	r3, [pc, #228]	@ (8004740 <xTaskResumeAll+0x118>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3b01      	subs	r3, #1
 8004660:	4a37      	ldr	r2, [pc, #220]	@ (8004740 <xTaskResumeAll+0x118>)
 8004662:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004664:	4b36      	ldr	r3, [pc, #216]	@ (8004740 <xTaskResumeAll+0x118>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d161      	bne.n	8004730 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800466c:	4b35      	ldr	r3, [pc, #212]	@ (8004744 <xTaskResumeAll+0x11c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05d      	beq.n	8004730 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004674:	e02e      	b.n	80046d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004676:	4b34      	ldr	r3, [pc, #208]	@ (8004748 <xTaskResumeAll+0x120>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3318      	adds	r3, #24
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f940 	bl	8003908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3304      	adds	r3, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff f93b 	bl	8003908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	2201      	movs	r2, #1
 8004698:	409a      	lsls	r2, r3
 800469a:	4b2c      	ldr	r3, [pc, #176]	@ (800474c <xTaskResumeAll+0x124>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4313      	orrs	r3, r2
 80046a0:	4a2a      	ldr	r2, [pc, #168]	@ (800474c <xTaskResumeAll+0x124>)
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4a27      	ldr	r2, [pc, #156]	@ (8004750 <xTaskResumeAll+0x128>)
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7ff f8c9 	bl	8003852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c4:	4b23      	ldr	r3, [pc, #140]	@ (8004754 <xTaskResumeAll+0x12c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80046ce:	4b22      	ldr	r3, [pc, #136]	@ (8004758 <xTaskResumeAll+0x130>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004748 <xTaskResumeAll+0x120>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1cc      	bne.n	8004676 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046e2:	f000 fb27 	bl	8004d34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046e6:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <xTaskResumeAll+0x134>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d010      	beq.n	8004714 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046f2:	f000 f837 	bl	8004764 <xTaskIncrementTick>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80046fc:	4b16      	ldr	r3, [pc, #88]	@ (8004758 <xTaskResumeAll+0x130>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3b01      	subs	r3, #1
 8004706:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f1      	bne.n	80046f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800470e:	4b13      	ldr	r3, [pc, #76]	@ (800475c <xTaskResumeAll+0x134>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004714:	4b10      	ldr	r3, [pc, #64]	@ (8004758 <xTaskResumeAll+0x130>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800471c:	2301      	movs	r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004720:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <xTaskResumeAll+0x138>)
 8004722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004730:	f000 fe64 	bl	80053fc <vPortExitCritical>

	return xAlreadyYielded;
 8004734:	68bb      	ldr	r3, [r7, #8]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200005dc 	.word	0x200005dc
 8004744:	200005b4 	.word	0x200005b4
 8004748:	20000574 	.word	0x20000574
 800474c:	200005bc 	.word	0x200005bc
 8004750:	200004b8 	.word	0x200004b8
 8004754:	200004b4 	.word	0x200004b4
 8004758:	200005c8 	.word	0x200005c8
 800475c:	200005c4 	.word	0x200005c4
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800476e:	4b4f      	ldr	r3, [pc, #316]	@ (80048ac <xTaskIncrementTick+0x148>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 808f 	bne.w	8004896 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004778:	4b4d      	ldr	r3, [pc, #308]	@ (80048b0 <xTaskIncrementTick+0x14c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3301      	adds	r3, #1
 800477e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004780:	4a4b      	ldr	r2, [pc, #300]	@ (80048b0 <xTaskIncrementTick+0x14c>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d121      	bne.n	80047d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800478c:	4b49      	ldr	r3, [pc, #292]	@ (80048b4 <xTaskIncrementTick+0x150>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	603b      	str	r3, [r7, #0]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <xTaskIncrementTick+0x46>
 80047ae:	4b41      	ldr	r3, [pc, #260]	@ (80048b4 <xTaskIncrementTick+0x150>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	4b40      	ldr	r3, [pc, #256]	@ (80048b8 <xTaskIncrementTick+0x154>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3e      	ldr	r2, [pc, #248]	@ (80048b4 <xTaskIncrementTick+0x150>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4a3e      	ldr	r2, [pc, #248]	@ (80048b8 <xTaskIncrementTick+0x154>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4b3e      	ldr	r3, [pc, #248]	@ (80048bc <xTaskIncrementTick+0x158>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	4a3c      	ldr	r2, [pc, #240]	@ (80048bc <xTaskIncrementTick+0x158>)
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	f000 fab2 	bl	8004d34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047d0:	4b3b      	ldr	r3, [pc, #236]	@ (80048c0 <xTaskIncrementTick+0x15c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d348      	bcc.n	800486c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047da:	4b36      	ldr	r3, [pc, #216]	@ (80048b4 <xTaskIncrementTick+0x150>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d104      	bne.n	80047ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e4:	4b36      	ldr	r3, [pc, #216]	@ (80048c0 <xTaskIncrementTick+0x15c>)
 80047e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047ea:	601a      	str	r2, [r3, #0]
					break;
 80047ec:	e03e      	b.n	800486c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ee:	4b31      	ldr	r3, [pc, #196]	@ (80048b4 <xTaskIncrementTick+0x150>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d203      	bcs.n	800480e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004806:	4a2e      	ldr	r2, [pc, #184]	@ (80048c0 <xTaskIncrementTick+0x15c>)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800480c:	e02e      	b.n	800486c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff f878 	bl	8003908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3318      	adds	r3, #24
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff f86f 	bl	8003908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	2201      	movs	r2, #1
 8004830:	409a      	lsls	r2, r3
 8004832:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <xTaskIncrementTick+0x160>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	4a22      	ldr	r2, [pc, #136]	@ (80048c4 <xTaskIncrementTick+0x160>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4a1f      	ldr	r2, [pc, #124]	@ (80048c8 <xTaskIncrementTick+0x164>)
 800484a:	441a      	add	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7fe fffd 	bl	8003852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <xTaskIncrementTick+0x168>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	429a      	cmp	r2, r3
 8004864:	d3b9      	bcc.n	80047da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004866:	2301      	movs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486a:	e7b6      	b.n	80047da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800486c:	4b17      	ldr	r3, [pc, #92]	@ (80048cc <xTaskIncrementTick+0x168>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004872:	4915      	ldr	r1, [pc, #84]	@ (80048c8 <xTaskIncrementTick+0x164>)
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d901      	bls.n	8004888 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004888:	4b11      	ldr	r3, [pc, #68]	@ (80048d0 <xTaskIncrementTick+0x16c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e004      	b.n	80048a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004896:	4b0f      	ldr	r3, [pc, #60]	@ (80048d4 <xTaskIncrementTick+0x170>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a0d      	ldr	r2, [pc, #52]	@ (80048d4 <xTaskIncrementTick+0x170>)
 800489e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048a0:	697b      	ldr	r3, [r7, #20]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	200005dc 	.word	0x200005dc
 80048b0:	200005b8 	.word	0x200005b8
 80048b4:	2000056c 	.word	0x2000056c
 80048b8:	20000570 	.word	0x20000570
 80048bc:	200005cc 	.word	0x200005cc
 80048c0:	200005d4 	.word	0x200005d4
 80048c4:	200005bc 	.word	0x200005bc
 80048c8:	200004b8 	.word	0x200004b8
 80048cc:	200004b4 	.word	0x200004b4
 80048d0:	200005c8 	.word	0x200005c8
 80048d4:	200005c4 	.word	0x200005c4

080048d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048de:	4b29      	ldr	r3, [pc, #164]	@ (8004984 <vTaskSwitchContext+0xac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048e6:	4b28      	ldr	r3, [pc, #160]	@ (8004988 <vTaskSwitchContext+0xb0>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048ec:	e045      	b.n	800497a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80048ee:	4b26      	ldr	r3, [pc, #152]	@ (8004988 <vTaskSwitchContext+0xb0>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f4:	4b25      	ldr	r3, [pc, #148]	@ (800498c <vTaskSwitchContext+0xb4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	fab3 f383 	clz	r3, r3
 8004900:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004902:	7afb      	ldrb	r3, [r7, #11]
 8004904:	f1c3 031f 	rsb	r3, r3, #31
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	4921      	ldr	r1, [pc, #132]	@ (8004990 <vTaskSwitchContext+0xb8>)
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <vTaskSwitchContext+0x5e>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <vTaskSwitchContext+0x5a>
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4a13      	ldr	r2, [pc, #76]	@ (8004990 <vTaskSwitchContext+0xb8>)
 8004942:	4413      	add	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3308      	adds	r3, #8
 8004958:	429a      	cmp	r2, r3
 800495a:	d104      	bne.n	8004966 <vTaskSwitchContext+0x8e>
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a09      	ldr	r2, [pc, #36]	@ (8004994 <vTaskSwitchContext+0xbc>)
 800496e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004970:	4b08      	ldr	r3, [pc, #32]	@ (8004994 <vTaskSwitchContext+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	334c      	adds	r3, #76	@ 0x4c
 8004976:	4a08      	ldr	r2, [pc, #32]	@ (8004998 <vTaskSwitchContext+0xc0>)
 8004978:	6013      	str	r3, [r2, #0]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	200005dc 	.word	0x200005dc
 8004988:	200005c8 	.word	0x200005c8
 800498c:	200005bc 	.word	0x200005bc
 8004990:	200004b8 	.word	0x200004b8
 8004994:	200004b4 	.word	0x200004b4
 8004998:	20000018 	.word	0x20000018

0800499c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049c4:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <vTaskPlaceOnEventList+0x48>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3318      	adds	r3, #24
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fe ff63 	bl	8003898 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049d2:	2101      	movs	r1, #1
 80049d4:	6838      	ldr	r0, [r7, #0]
 80049d6:	f000 fb8d 	bl	80050f4 <prvAddCurrentTaskToDelayedList>
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	200004b4 	.word	0x200004b4

080049e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60fb      	str	r3, [r7, #12]
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	e7fd      	b.n	8004a12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	3318      	adds	r3, #24
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe ff74 	bl	8003908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a20:	4b1d      	ldr	r3, [pc, #116]	@ (8004a98 <xTaskRemoveFromEventList+0xb0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11c      	bne.n	8004a62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe ff6b 	bl	8003908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a36:	2201      	movs	r2, #1
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	4b18      	ldr	r3, [pc, #96]	@ (8004a9c <xTaskRemoveFromEventList+0xb4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <xTaskRemoveFromEventList+0xb4>)
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4a13      	ldr	r2, [pc, #76]	@ (8004aa0 <xTaskRemoveFromEventList+0xb8>)
 8004a52:	441a      	add	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f7fe fef9 	bl	8003852 <vListInsertEnd>
 8004a60:	e005      	b.n	8004a6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	3318      	adds	r3, #24
 8004a66:	4619      	mov	r1, r3
 8004a68:	480e      	ldr	r0, [pc, #56]	@ (8004aa4 <xTaskRemoveFromEventList+0xbc>)
 8004a6a:	f7fe fef2 	bl	8003852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a72:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa8 <xTaskRemoveFromEventList+0xc0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d905      	bls.n	8004a88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a80:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <xTaskRemoveFromEventList+0xc4>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e001      	b.n	8004a8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a8c:	697b      	ldr	r3, [r7, #20]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	200005dc 	.word	0x200005dc
 8004a9c:	200005bc 	.word	0x200005bc
 8004aa0:	200004b8 	.word	0x200004b8
 8004aa4:	20000574 	.word	0x20000574
 8004aa8:	200004b4 	.word	0x200004b4
 8004aac:	200005c8 	.word	0x200005c8

08004ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <vTaskInternalSetTimeOutState+0x24>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <vTaskInternalSetTimeOutState+0x28>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	605a      	str	r2, [r3, #4]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	200005cc 	.word	0x200005cc
 8004ad8:	200005b8 	.word	0x200005b8

08004adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	613b      	str	r3, [r7, #16]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60fb      	str	r3, [r7, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004b22:	f000 fc3b 	bl	800539c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b26:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <xTaskCheckForTimeOut+0xc0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b3e:	d102      	bne.n	8004b46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e023      	b.n	8004b8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <xTaskCheckForTimeOut+0xc4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d007      	beq.n	8004b62 <xTaskCheckForTimeOut+0x86>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	e015      	b.n	8004b8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d20b      	bcs.n	8004b84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ff99 	bl	8004ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e004      	b.n	8004b8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b8e:	f000 fc35 	bl	80053fc <vPortExitCritical>

	return xReturn;
 8004b92:	69fb      	ldr	r3, [r7, #28]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	200005b8 	.word	0x200005b8
 8004ba0:	200005cc 	.word	0x200005cc

08004ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	@ (8004bb8 <vTaskMissedYield+0x14>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	200005c8 	.word	0x200005c8

08004bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bc4:	f000 f852 	bl	8004c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc8:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <prvIdleTask+0x28>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d9f9      	bls.n	8004bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bd0:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <prvIdleTask+0x2c>)
 8004bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004be0:	e7f0      	b.n	8004bc4 <prvIdleTask+0x8>
 8004be2:	bf00      	nop
 8004be4:	200004b8 	.word	0x200004b8
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	e00c      	b.n	8004c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4a12      	ldr	r2, [pc, #72]	@ (8004c4c <prvInitialiseTaskLists+0x60>)
 8004c04:	4413      	add	r3, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fdf8 	bl	80037fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b06      	cmp	r3, #6
 8004c16:	d9ef      	bls.n	8004bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c18:	480d      	ldr	r0, [pc, #52]	@ (8004c50 <prvInitialiseTaskLists+0x64>)
 8004c1a:	f7fe fdef 	bl	80037fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c1e:	480d      	ldr	r0, [pc, #52]	@ (8004c54 <prvInitialiseTaskLists+0x68>)
 8004c20:	f7fe fdec 	bl	80037fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c24:	480c      	ldr	r0, [pc, #48]	@ (8004c58 <prvInitialiseTaskLists+0x6c>)
 8004c26:	f7fe fde9 	bl	80037fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c2a:	480c      	ldr	r0, [pc, #48]	@ (8004c5c <prvInitialiseTaskLists+0x70>)
 8004c2c:	f7fe fde6 	bl	80037fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c30:	480b      	ldr	r0, [pc, #44]	@ (8004c60 <prvInitialiseTaskLists+0x74>)
 8004c32:	f7fe fde3 	bl	80037fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <prvInitialiseTaskLists+0x78>)
 8004c38:	4a05      	ldr	r2, [pc, #20]	@ (8004c50 <prvInitialiseTaskLists+0x64>)
 8004c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <prvInitialiseTaskLists+0x7c>)
 8004c3e:	4a05      	ldr	r2, [pc, #20]	@ (8004c54 <prvInitialiseTaskLists+0x68>)
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200004b8 	.word	0x200004b8
 8004c50:	20000544 	.word	0x20000544
 8004c54:	20000558 	.word	0x20000558
 8004c58:	20000574 	.word	0x20000574
 8004c5c:	20000588 	.word	0x20000588
 8004c60:	200005a0 	.word	0x200005a0
 8004c64:	2000056c 	.word	0x2000056c
 8004c68:	20000570 	.word	0x20000570

08004c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c72:	e019      	b.n	8004ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c74:	f000 fb92 	bl	800539c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c78:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <prvCheckTasksWaitingTermination+0x50>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe fe3f 	bl	8003908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <prvCheckTasksWaitingTermination+0x54>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc0 <prvCheckTasksWaitingTermination+0x54>)
 8004c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c94:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c9e:	f000 fbad 	bl	80053fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f810 	bl	8004cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca8:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e1      	bne.n	8004c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000588 	.word	0x20000588
 8004cc0:	200005b4 	.word	0x200005b4
 8004cc4:	2000059c 	.word	0x2000059c

08004cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	334c      	adds	r3, #76	@ 0x4c
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fe17 	bl	8005908 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d108      	bne.n	8004cf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fce7 	bl	80056bc <vPortFree>
				vPortFree( pxTCB );
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fce4 	bl	80056bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cf4:	e019      	b.n	8004d2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d103      	bne.n	8004d08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fcdb 	bl	80056bc <vPortFree>
	}
 8004d06:	e010      	b.n	8004d2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d00b      	beq.n	8004d2a <prvDeleteTCB+0x62>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60fb      	str	r3, [r7, #12]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <prvDeleteTCB+0x5e>
	}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <prvResetNextTaskUnblockTime+0x38>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d44:	4b0a      	ldr	r3, [pc, #40]	@ (8004d70 <prvResetNextTaskUnblockTime+0x3c>)
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d4c:	e008      	b.n	8004d60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4e:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <prvResetNextTaskUnblockTime+0x38>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a04      	ldr	r2, [pc, #16]	@ (8004d70 <prvResetNextTaskUnblockTime+0x3c>)
 8004d5e:	6013      	str	r3, [r2, #0]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	2000056c 	.word	0x2000056c
 8004d70:	200005d4 	.word	0x200005d4

08004d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <xTaskGetSchedulerState+0x34>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d82:	2301      	movs	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	e008      	b.n	8004d9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d88:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <xTaskGetSchedulerState+0x38>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d90:	2302      	movs	r3, #2
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e001      	b.n	8004d9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d9a:	687b      	ldr	r3, [r7, #4]
	}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	200005c0 	.word	0x200005c0
 8004dac:	200005dc 	.word	0x200005dc

08004db0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d05e      	beq.n	8004e84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dca:	4b31      	ldr	r3, [pc, #196]	@ (8004e90 <xTaskPriorityInherit+0xe0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d24e      	bcs.n	8004e72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db06      	blt.n	8004dea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8004e90 <xTaskPriorityInherit+0xe0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	f1c3 0207 	rsb	r2, r3, #7
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6959      	ldr	r1, [r3, #20]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4a26      	ldr	r2, [pc, #152]	@ (8004e94 <xTaskPriorityInherit+0xe4>)
 8004dfc:	4413      	add	r3, r2
 8004dfe:	4299      	cmp	r1, r3
 8004e00:	d12f      	bne.n	8004e62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fd7e 	bl	8003908 <uxListRemove>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	2201      	movs	r2, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43da      	mvns	r2, r3
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e98 <xTaskPriorityInherit+0xe8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4013      	ands	r3, r2
 8004e24:	4a1c      	ldr	r2, [pc, #112]	@ (8004e98 <xTaskPriorityInherit+0xe8>)
 8004e26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e28:	4b19      	ldr	r3, [pc, #100]	@ (8004e90 <xTaskPriorityInherit+0xe0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	2201      	movs	r2, #1
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	4b17      	ldr	r3, [pc, #92]	@ (8004e98 <xTaskPriorityInherit+0xe8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	4a15      	ldr	r2, [pc, #84]	@ (8004e98 <xTaskPriorityInherit+0xe8>)
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4a10      	ldr	r2, [pc, #64]	@ (8004e94 <xTaskPriorityInherit+0xe4>)
 8004e52:	441a      	add	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f7fe fcf9 	bl	8003852 <vListInsertEnd>
 8004e60:	e004      	b.n	8004e6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e62:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <xTaskPriorityInherit+0xe0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e008      	b.n	8004e84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e76:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <xTaskPriorityInherit+0xe0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d201      	bcs.n	8004e84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e84:	68fb      	ldr	r3, [r7, #12]
	}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200004b4 	.word	0x200004b4
 8004e94:	200004b8 	.word	0x200004b8
 8004e98:	200005bc 	.word	0x200005bc

08004e9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d070      	beq.n	8004f94 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa0 <xTaskPriorityDisinherit+0x104>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d00b      	beq.n	8004ed4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	60fb      	str	r3, [r7, #12]
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60bb      	str	r3, [r7, #8]
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef8:	1e5a      	subs	r2, r3, #1
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d044      	beq.n	8004f94 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d140      	bne.n	8004f94 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fcf6 	bl	8003908 <uxListRemove>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d115      	bne.n	8004f4e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f26:	491f      	ldr	r1, [pc, #124]	@ (8004fa4 <xTaskPriorityDisinherit+0x108>)
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <xTaskPriorityDisinherit+0xb2>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43da      	mvns	r2, r3
 8004f44:	4b18      	ldr	r3, [pc, #96]	@ (8004fa8 <xTaskPriorityDisinherit+0x10c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	4a17      	ldr	r2, [pc, #92]	@ (8004fa8 <xTaskPriorityDisinherit+0x10c>)
 8004f4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	f1c3 0207 	rsb	r2, r3, #7
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	2201      	movs	r2, #1
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa8 <xTaskPriorityDisinherit+0x10c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa8 <xTaskPriorityDisinherit+0x10c>)
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4a08      	ldr	r2, [pc, #32]	@ (8004fa4 <xTaskPriorityDisinherit+0x108>)
 8004f82:	441a      	add	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7fe fc61 	bl	8003852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f94:	697b      	ldr	r3, [r7, #20]
	}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200004b4 	.word	0x200004b4
 8004fa4:	200004b8 	.word	0x200004b8
 8004fa8:	200005bc 	.word	0x200005bc

08004fac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d079      	beq.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	60fb      	str	r3, [r7, #12]
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	e7fd      	b.n	8004fe0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d902      	bls.n	8004ff4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e002      	b.n	8004ffa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	429a      	cmp	r2, r3
 8005002:	d059      	beq.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	429a      	cmp	r2, r3
 800500c:	d154      	bne.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800500e:	4b2c      	ldr	r3, [pc, #176]	@ (80050c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	429a      	cmp	r2, r3
 8005016:	d10b      	bne.n	8005030 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60bb      	str	r3, [r7, #8]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	db04      	blt.n	800504e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f1c3 0207 	rsb	r2, r3, #7
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	6959      	ldr	r1, [r3, #20]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a19      	ldr	r2, [pc, #100]	@ (80050c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800505e:	4413      	add	r3, r2
 8005060:	4299      	cmp	r1, r3
 8005062:	d129      	bne.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	3304      	adds	r3, #4
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe fc4d 	bl	8003908 <uxListRemove>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	2201      	movs	r2, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43da      	mvns	r2, r3
 8005080:	4b11      	ldr	r3, [pc, #68]	@ (80050c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4013      	ands	r3, r2
 8005086:	4a10      	ldr	r2, [pc, #64]	@ (80050c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005088:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	2201      	movs	r2, #1
 8005090:	409a      	lsls	r2, r3
 8005092:	4b0d      	ldr	r3, [pc, #52]	@ (80050c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	4a0b      	ldr	r2, [pc, #44]	@ (80050c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4a06      	ldr	r2, [pc, #24]	@ (80050c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80050aa:	441a      	add	r2, r3
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f7fe fbcd 	bl	8003852 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050b8:	bf00      	nop
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	200004b4 	.word	0x200004b4
 80050c4:	200004b8 	.word	0x200004b8
 80050c8:	200005bc 	.word	0x200005bc

080050cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050de:	3201      	adds	r2, #1
 80050e0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80050e2:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050e4:	681b      	ldr	r3, [r3, #0]
	}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	200004b4 	.word	0x200004b4

080050f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050fe:	4b29      	ldr	r3, [pc, #164]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005104:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3304      	adds	r3, #4
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fbfc 	bl	8003908 <uxListRemove>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005116:	4b24      	ldr	r3, [pc, #144]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	2201      	movs	r2, #1
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43da      	mvns	r2, r3
 8005124:	4b21      	ldr	r3, [pc, #132]	@ (80051ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4013      	ands	r3, r2
 800512a:	4a20      	ldr	r2, [pc, #128]	@ (80051ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800512c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005134:	d10a      	bne.n	800514c <prvAddCurrentTaskToDelayedList+0x58>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800513c:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	481a      	ldr	r0, [pc, #104]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005146:	f7fe fb84 	bl	8003852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800514a:	e026      	b.n	800519a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005154:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	429a      	cmp	r2, r3
 8005162:	d209      	bcs.n	8005178 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005164:	4b13      	ldr	r3, [pc, #76]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3304      	adds	r3, #4
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7fe fb91 	bl	8003898 <vListInsert>
}
 8005176:	e010      	b.n	800519a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005178:	4b0f      	ldr	r3, [pc, #60]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3304      	adds	r3, #4
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f7fe fb87 	bl	8003898 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800518a:	4b0c      	ldr	r3, [pc, #48]	@ (80051bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d202      	bcs.n	800519a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005194:	4a09      	ldr	r2, [pc, #36]	@ (80051bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6013      	str	r3, [r2, #0]
}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200005b8 	.word	0x200005b8
 80051a8:	200004b4 	.word	0x200004b4
 80051ac:	200005bc 	.word	0x200005bc
 80051b0:	200005a0 	.word	0x200005a0
 80051b4:	20000570 	.word	0x20000570
 80051b8:	2000056c 	.word	0x2000056c
 80051bc:	200005d4 	.word	0x200005d4

080051c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3b04      	subs	r3, #4
 80051d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3b04      	subs	r3, #4
 80051de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f023 0201 	bic.w	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3b04      	subs	r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051f0:	4a08      	ldr	r2, [pc, #32]	@ (8005214 <pxPortInitialiseStack+0x54>)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b14      	subs	r3, #20
 80051fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3b20      	subs	r3, #32
 8005206:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005208:	68fb      	ldr	r3, [r7, #12]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	08005219 	.word	0x08005219

08005218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005222:	4b12      	ldr	r3, [pc, #72]	@ (800526c <prvTaskExitError+0x54>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800522a:	d00b      	beq.n	8005244 <prvTaskExitError+0x2c>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60fb      	str	r3, [r7, #12]
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <prvTaskExitError+0x28>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60bb      	str	r3, [r7, #8]
}
 8005256:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005258:	bf00      	nop
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0fc      	beq.n	800525a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	20000014 	.word	0x20000014

08005270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005270:	4b07      	ldr	r3, [pc, #28]	@ (8005290 <pxCurrentTCBConst2>)
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6808      	ldr	r0, [r1, #0]
 8005276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800527a:	f380 8809 	msr	PSP, r0
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	f04e 0e0d 	orr.w	lr, lr, #13
 800528e:	4770      	bx	lr

08005290 <pxCurrentTCBConst2>:
 8005290:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005298:	4806      	ldr	r0, [pc, #24]	@ (80052b4 <prvPortStartFirstTask+0x1c>)
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f380 8808 	msr	MSP, r0
 80052a2:	b662      	cpsie	i
 80052a4:	b661      	cpsie	f
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	df00      	svc	0
 80052b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052b2:	bf00      	nop
 80052b4:	e000ed08 	.word	0xe000ed08

080052b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052be:	4b32      	ldr	r3, [pc, #200]	@ (8005388 <xPortStartScheduler+0xd0>)
 80052c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	22ff      	movs	r2, #255	@ 0xff
 80052ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4b2a      	ldr	r3, [pc, #168]	@ (800538c <xPortStartScheduler+0xd4>)
 80052e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005390 <xPortStartScheduler+0xd8>)
 80052e8:	2207      	movs	r2, #7
 80052ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ec:	e009      	b.n	8005302 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052ee:	4b28      	ldr	r3, [pc, #160]	@ (8005390 <xPortStartScheduler+0xd8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	4a26      	ldr	r2, [pc, #152]	@ (8005390 <xPortStartScheduler+0xd8>)
 80052f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530a:	2b80      	cmp	r3, #128	@ 0x80
 800530c:	d0ef      	beq.n	80052ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800530e:	4b20      	ldr	r3, [pc, #128]	@ (8005390 <xPortStartScheduler+0xd8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1c3 0307 	rsb	r3, r3, #7
 8005316:	2b04      	cmp	r3, #4
 8005318:	d00b      	beq.n	8005332 <xPortStartScheduler+0x7a>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60bb      	str	r3, [r7, #8]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005332:	4b17      	ldr	r3, [pc, #92]	@ (8005390 <xPortStartScheduler+0xd8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <xPortStartScheduler+0xd8>)
 800533a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800533c:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <xPortStartScheduler+0xd8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005344:	4a12      	ldr	r2, [pc, #72]	@ (8005390 <xPortStartScheduler+0xd8>)
 8005346:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005350:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <xPortStartScheduler+0xdc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0f      	ldr	r2, [pc, #60]	@ (8005394 <xPortStartScheduler+0xdc>)
 8005356:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800535a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800535c:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <xPortStartScheduler+0xdc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <xPortStartScheduler+0xdc>)
 8005362:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005366:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005368:	f000 f8b8 	bl	80054dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <xPortStartScheduler+0xe0>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005372:	f7ff ff91 	bl	8005298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005376:	f7ff faaf 	bl	80048d8 <vTaskSwitchContext>
	prvTaskExitError();
 800537a:	f7ff ff4d 	bl	8005218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	e000e400 	.word	0xe000e400
 800538c:	200005e0 	.word	0x200005e0
 8005390:	200005e4 	.word	0x200005e4
 8005394:	e000ed20 	.word	0xe000ed20
 8005398:	20000014 	.word	0x20000014

0800539c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	607b      	str	r3, [r7, #4]
}
 80053b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053b6:	4b0f      	ldr	r3, [pc, #60]	@ (80053f4 <vPortEnterCritical+0x58>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	4a0d      	ldr	r2, [pc, #52]	@ (80053f4 <vPortEnterCritical+0x58>)
 80053be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053c0:	4b0c      	ldr	r3, [pc, #48]	@ (80053f4 <vPortEnterCritical+0x58>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d110      	bne.n	80053ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053c8:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <vPortEnterCritical+0x5c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <vPortEnterCritical+0x4e>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	603b      	str	r3, [r7, #0]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <vPortEnterCritical+0x4a>
	}
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	20000014 	.word	0x20000014
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <vPortExitCritical+0x50>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <vPortExitCritical+0x26>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	607b      	str	r3, [r7, #4]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005422:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <vPortExitCritical+0x50>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3b01      	subs	r3, #1
 8005428:	4a08      	ldr	r2, [pc, #32]	@ (800544c <vPortExitCritical+0x50>)
 800542a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800542c:	4b07      	ldr	r3, [pc, #28]	@ (800544c <vPortExitCritical+0x50>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <vPortExitCritical+0x44>
 8005434:	2300      	movs	r3, #0
 8005436:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800543e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000014 	.word	0x20000014

08005450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005450:	f3ef 8009 	mrs	r0, PSP
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <pxCurrentTCBConst>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005460:	6010      	str	r0, [r2, #0]
 8005462:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005466:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800546a:	f380 8811 	msr	BASEPRI, r0
 800546e:	f7ff fa33 	bl	80048d8 <vTaskSwitchContext>
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f380 8811 	msr	BASEPRI, r0
 800547a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	6808      	ldr	r0, [r1, #0]
 8005482:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005486:	f380 8809 	msr	PSP, r0
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	4770      	bx	lr

08005490 <pxCurrentTCBConst>:
 8005490:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054b2:	f7ff f957 	bl	8004764 <xTaskIncrementTick>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <SysTick_Handler+0x40>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054e0:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <vPortSetupTimerInterrupt+0x30>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005510 <vPortSetupTimerInterrupt+0x34>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ec:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <vPortSetupTimerInterrupt+0x38>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a09      	ldr	r2, [pc, #36]	@ (8005518 <vPortSetupTimerInterrupt+0x3c>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	099b      	lsrs	r3, r3, #6
 80054f8:	4a08      	ldr	r2, [pc, #32]	@ (800551c <vPortSetupTimerInterrupt+0x40>)
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054fe:	4b03      	ldr	r3, [pc, #12]	@ (800550c <vPortSetupTimerInterrupt+0x30>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	e000e010 	.word	0xe000e010
 8005510:	e000e018 	.word	0xe000e018
 8005514:	20000008 	.word	0x20000008
 8005518:	10624dd3 	.word	0x10624dd3
 800551c:	e000e014 	.word	0xe000e014

08005520 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	@ 0x28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800552c:	f7ff f86e 	bl	800460c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005530:	4b5c      	ldr	r3, [pc, #368]	@ (80056a4 <pvPortMalloc+0x184>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005538:	f000 f924 	bl	8005784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800553c:	4b5a      	ldr	r3, [pc, #360]	@ (80056a8 <pvPortMalloc+0x188>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 8095 	bne.w	8005674 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01e      	beq.n	800558e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005550:	2208      	movs	r2, #8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b00      	cmp	r3, #0
 8005560:	d015      	beq.n	800558e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f023 0307 	bic.w	r3, r3, #7
 8005568:	3308      	adds	r3, #8
 800556a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <pvPortMalloc+0x6e>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	617b      	str	r3, [r7, #20]
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	e7fd      	b.n	800558a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d06f      	beq.n	8005674 <pvPortMalloc+0x154>
 8005594:	4b45      	ldr	r3, [pc, #276]	@ (80056ac <pvPortMalloc+0x18c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d86a      	bhi.n	8005674 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800559e:	4b44      	ldr	r3, [pc, #272]	@ (80056b0 <pvPortMalloc+0x190>)
 80055a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055a2:	4b43      	ldr	r3, [pc, #268]	@ (80056b0 <pvPortMalloc+0x190>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055a8:	e004      	b.n	80055b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d903      	bls.n	80055c6 <pvPortMalloc+0xa6>
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f1      	bne.n	80055aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055c6:	4b37      	ldr	r3, [pc, #220]	@ (80056a4 <pvPortMalloc+0x184>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d051      	beq.n	8005674 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2208      	movs	r2, #8
 80055d6:	4413      	add	r3, r2
 80055d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	1ad2      	subs	r2, r2, r3
 80055ea:	2308      	movs	r3, #8
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d920      	bls.n	8005634 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4413      	add	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <pvPortMalloc+0xfc>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	613b      	str	r3, [r7, #16]
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800562e:	69b8      	ldr	r0, [r7, #24]
 8005630:	f000 f90a 	bl	8005848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005634:	4b1d      	ldr	r3, [pc, #116]	@ (80056ac <pvPortMalloc+0x18c>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	4a1b      	ldr	r2, [pc, #108]	@ (80056ac <pvPortMalloc+0x18c>)
 8005640:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005642:	4b1a      	ldr	r3, [pc, #104]	@ (80056ac <pvPortMalloc+0x18c>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b1b      	ldr	r3, [pc, #108]	@ (80056b4 <pvPortMalloc+0x194>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d203      	bcs.n	8005656 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800564e:	4b17      	ldr	r3, [pc, #92]	@ (80056ac <pvPortMalloc+0x18c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a18      	ldr	r2, [pc, #96]	@ (80056b4 <pvPortMalloc+0x194>)
 8005654:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	4b13      	ldr	r3, [pc, #76]	@ (80056a8 <pvPortMalloc+0x188>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	431a      	orrs	r2, r3
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800566a:	4b13      	ldr	r3, [pc, #76]	@ (80056b8 <pvPortMalloc+0x198>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3301      	adds	r3, #1
 8005670:	4a11      	ldr	r2, [pc, #68]	@ (80056b8 <pvPortMalloc+0x198>)
 8005672:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005674:	f7fe ffd8 	bl	8004628 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <pvPortMalloc+0x17a>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60fb      	str	r3, [r7, #12]
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	e7fd      	b.n	8005696 <pvPortMalloc+0x176>
	return pvReturn;
 800569a:	69fb      	ldr	r3, [r7, #28]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3728      	adds	r7, #40	@ 0x28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	200011f0 	.word	0x200011f0
 80056a8:	20001204 	.word	0x20001204
 80056ac:	200011f4 	.word	0x200011f4
 80056b0:	200011e8 	.word	0x200011e8
 80056b4:	200011f8 	.word	0x200011f8
 80056b8:	200011fc 	.word	0x200011fc

080056bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d04f      	beq.n	800576e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056ce:	2308      	movs	r3, #8
 80056d0:	425b      	negs	r3, r3
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4b25      	ldr	r3, [pc, #148]	@ (8005778 <vPortFree+0xbc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <vPortFree+0x46>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60fb      	str	r3, [r7, #12]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <vPortFree+0x66>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60bb      	str	r3, [r7, #8]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b14      	ldr	r3, [pc, #80]	@ (8005778 <vPortFree+0xbc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01e      	beq.n	800576e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11a      	bne.n	800576e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b0e      	ldr	r3, [pc, #56]	@ (8005778 <vPortFree+0xbc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005748:	f7fe ff60 	bl	800460c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <vPortFree+0xc0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4413      	add	r3, r2
 8005756:	4a09      	ldr	r2, [pc, #36]	@ (800577c <vPortFree+0xc0>)
 8005758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800575a:	6938      	ldr	r0, [r7, #16]
 800575c:	f000 f874 	bl	8005848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005760:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <vPortFree+0xc4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	4a06      	ldr	r2, [pc, #24]	@ (8005780 <vPortFree+0xc4>)
 8005768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800576a:	f7fe ff5d 	bl	8004628 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20001204 	.word	0x20001204
 800577c:	200011f4 	.word	0x200011f4
 8005780:	20001200 	.word	0x20001200

08005784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800578a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800578e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005790:	4b27      	ldr	r3, [pc, #156]	@ (8005830 <prvHeapInit+0xac>)
 8005792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3307      	adds	r3, #7
 80057a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0307 	bic.w	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005830 <prvHeapInit+0xac>)
 80057b4:	4413      	add	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005834 <prvHeapInit+0xb0>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005834 <prvHeapInit+0xb0>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4413      	add	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057d0:	2208      	movs	r2, #8
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4a15      	ldr	r2, [pc, #84]	@ (8005838 <prvHeapInit+0xb4>)
 80057e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057e6:	4b14      	ldr	r3, [pc, #80]	@ (8005838 <prvHeapInit+0xb4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057ee:	4b12      	ldr	r3, [pc, #72]	@ (8005838 <prvHeapInit+0xb4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <prvHeapInit+0xb4>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4a0a      	ldr	r2, [pc, #40]	@ (800583c <prvHeapInit+0xb8>)
 8005812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a09      	ldr	r2, [pc, #36]	@ (8005840 <prvHeapInit+0xbc>)
 800581a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <prvHeapInit+0xc0>)
 800581e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005822:	601a      	str	r2, [r3, #0]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	200005e8 	.word	0x200005e8
 8005834:	200011e8 	.word	0x200011e8
 8005838:	200011f0 	.word	0x200011f0
 800583c:	200011f8 	.word	0x200011f8
 8005840:	200011f4 	.word	0x200011f4
 8005844:	20001204 	.word	0x20001204

08005848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005850:	4b27      	ldr	r3, [pc, #156]	@ (80058f0 <prvInsertBlockIntoFreeList+0xa8>)
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e002      	b.n	800585c <prvInsertBlockIntoFreeList+0x14>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d8f7      	bhi.n	8005856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	4413      	add	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	d108      	bne.n	800588a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	441a      	add	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d118      	bne.n	80058d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <prvInsertBlockIntoFreeList+0xac>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d00d      	beq.n	80058c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	441a      	add	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e008      	b.n	80058d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058c6:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <prvInsertBlockIntoFreeList+0xac>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e003      	b.n	80058d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d002      	beq.n	80058e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	200011e8 	.word	0x200011e8
 80058f4:	200011f0 	.word	0x200011f0

080058f8 <memset>:
 80058f8:	4603      	mov	r3, r0
 80058fa:	4402      	add	r2, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d100      	bne.n	8005902 <memset+0xa>
 8005900:	4770      	bx	lr
 8005902:	f803 1b01 	strb.w	r1, [r3], #1
 8005906:	e7f9      	b.n	80058fc <memset+0x4>

08005908 <_reclaim_reent>:
 8005908:	4b2d      	ldr	r3, [pc, #180]	@ (80059c0 <_reclaim_reent+0xb8>)
 800590a:	b570      	push	{r4, r5, r6, lr}
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4604      	mov	r4, r0
 8005910:	4283      	cmp	r3, r0
 8005912:	d053      	beq.n	80059bc <_reclaim_reent+0xb4>
 8005914:	69c3      	ldr	r3, [r0, #28]
 8005916:	b31b      	cbz	r3, 8005960 <_reclaim_reent+0x58>
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	b163      	cbz	r3, 8005936 <_reclaim_reent+0x2e>
 800591c:	2500      	movs	r5, #0
 800591e:	69e3      	ldr	r3, [r4, #28]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	5959      	ldr	r1, [r3, r5]
 8005924:	b9b1      	cbnz	r1, 8005954 <_reclaim_reent+0x4c>
 8005926:	3504      	adds	r5, #4
 8005928:	2d80      	cmp	r5, #128	@ 0x80
 800592a:	d1f8      	bne.n	800591e <_reclaim_reent+0x16>
 800592c:	69e3      	ldr	r3, [r4, #28]
 800592e:	4620      	mov	r0, r4
 8005930:	68d9      	ldr	r1, [r3, #12]
 8005932:	f000 f87b 	bl	8005a2c <_free_r>
 8005936:	69e3      	ldr	r3, [r4, #28]
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	b111      	cbz	r1, 8005942 <_reclaim_reent+0x3a>
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f875 	bl	8005a2c <_free_r>
 8005942:	69e3      	ldr	r3, [r4, #28]
 8005944:	689d      	ldr	r5, [r3, #8]
 8005946:	b15d      	cbz	r5, 8005960 <_reclaim_reent+0x58>
 8005948:	4629      	mov	r1, r5
 800594a:	4620      	mov	r0, r4
 800594c:	682d      	ldr	r5, [r5, #0]
 800594e:	f000 f86d 	bl	8005a2c <_free_r>
 8005952:	e7f8      	b.n	8005946 <_reclaim_reent+0x3e>
 8005954:	680e      	ldr	r6, [r1, #0]
 8005956:	4620      	mov	r0, r4
 8005958:	f000 f868 	bl	8005a2c <_free_r>
 800595c:	4631      	mov	r1, r6
 800595e:	e7e1      	b.n	8005924 <_reclaim_reent+0x1c>
 8005960:	6961      	ldr	r1, [r4, #20]
 8005962:	b111      	cbz	r1, 800596a <_reclaim_reent+0x62>
 8005964:	4620      	mov	r0, r4
 8005966:	f000 f861 	bl	8005a2c <_free_r>
 800596a:	69e1      	ldr	r1, [r4, #28]
 800596c:	b111      	cbz	r1, 8005974 <_reclaim_reent+0x6c>
 800596e:	4620      	mov	r0, r4
 8005970:	f000 f85c 	bl	8005a2c <_free_r>
 8005974:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005976:	b111      	cbz	r1, 800597e <_reclaim_reent+0x76>
 8005978:	4620      	mov	r0, r4
 800597a:	f000 f857 	bl	8005a2c <_free_r>
 800597e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005980:	b111      	cbz	r1, 8005988 <_reclaim_reent+0x80>
 8005982:	4620      	mov	r0, r4
 8005984:	f000 f852 	bl	8005a2c <_free_r>
 8005988:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800598a:	b111      	cbz	r1, 8005992 <_reclaim_reent+0x8a>
 800598c:	4620      	mov	r0, r4
 800598e:	f000 f84d 	bl	8005a2c <_free_r>
 8005992:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005994:	b111      	cbz	r1, 800599c <_reclaim_reent+0x94>
 8005996:	4620      	mov	r0, r4
 8005998:	f000 f848 	bl	8005a2c <_free_r>
 800599c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800599e:	b111      	cbz	r1, 80059a6 <_reclaim_reent+0x9e>
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f843 	bl	8005a2c <_free_r>
 80059a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80059a8:	b111      	cbz	r1, 80059b0 <_reclaim_reent+0xa8>
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 f83e 	bl	8005a2c <_free_r>
 80059b0:	6a23      	ldr	r3, [r4, #32]
 80059b2:	b11b      	cbz	r3, 80059bc <_reclaim_reent+0xb4>
 80059b4:	4620      	mov	r0, r4
 80059b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059ba:	4718      	bx	r3
 80059bc:	bd70      	pop	{r4, r5, r6, pc}
 80059be:	bf00      	nop
 80059c0:	20000018 	.word	0x20000018

080059c4 <__libc_init_array>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	2600      	movs	r6, #0
 80059c8:	4d0c      	ldr	r5, [pc, #48]	@ (80059fc <__libc_init_array+0x38>)
 80059ca:	4c0d      	ldr	r4, [pc, #52]	@ (8005a00 <__libc_init_array+0x3c>)
 80059cc:	1b64      	subs	r4, r4, r5
 80059ce:	10a4      	asrs	r4, r4, #2
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	d109      	bne.n	80059e8 <__libc_init_array+0x24>
 80059d4:	f000 f87e 	bl	8005ad4 <_init>
 80059d8:	2600      	movs	r6, #0
 80059da:	4d0a      	ldr	r5, [pc, #40]	@ (8005a04 <__libc_init_array+0x40>)
 80059dc:	4c0a      	ldr	r4, [pc, #40]	@ (8005a08 <__libc_init_array+0x44>)
 80059de:	1b64      	subs	r4, r4, r5
 80059e0:	10a4      	asrs	r4, r4, #2
 80059e2:	42a6      	cmp	r6, r4
 80059e4:	d105      	bne.n	80059f2 <__libc_init_array+0x2e>
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ec:	4798      	blx	r3
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7ee      	b.n	80059d0 <__libc_init_array+0xc>
 80059f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f6:	4798      	blx	r3
 80059f8:	3601      	adds	r6, #1
 80059fa:	e7f2      	b.n	80059e2 <__libc_init_array+0x1e>
 80059fc:	08005b54 	.word	0x08005b54
 8005a00:	08005b54 	.word	0x08005b54
 8005a04:	08005b54 	.word	0x08005b54
 8005a08:	08005b58 	.word	0x08005b58

08005a0c <__retarget_lock_acquire_recursive>:
 8005a0c:	4770      	bx	lr

08005a0e <__retarget_lock_release_recursive>:
 8005a0e:	4770      	bx	lr

08005a10 <memcpy>:
 8005a10:	440a      	add	r2, r1
 8005a12:	4291      	cmp	r1, r2
 8005a14:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a18:	d100      	bne.n	8005a1c <memcpy+0xc>
 8005a1a:	4770      	bx	lr
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a22:	4291      	cmp	r1, r2
 8005a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a28:	d1f9      	bne.n	8005a1e <memcpy+0xe>
 8005a2a:	bd10      	pop	{r4, pc}

08005a2c <_free_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4605      	mov	r5, r0
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d040      	beq.n	8005ab6 <_free_r+0x8a>
 8005a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a38:	1f0c      	subs	r4, r1, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfb8      	it	lt
 8005a3e:	18e4      	addlt	r4, r4, r3
 8005a40:	f000 f83c 	bl	8005abc <__malloc_lock>
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <_free_r+0x8c>)
 8005a46:	6813      	ldr	r3, [r2, #0]
 8005a48:	b933      	cbnz	r3, 8005a58 <_free_r+0x2c>
 8005a4a:	6063      	str	r3, [r4, #4]
 8005a4c:	6014      	str	r4, [r2, #0]
 8005a4e:	4628      	mov	r0, r5
 8005a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a54:	f000 b838 	b.w	8005ac8 <__malloc_unlock>
 8005a58:	42a3      	cmp	r3, r4
 8005a5a:	d908      	bls.n	8005a6e <_free_r+0x42>
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	1821      	adds	r1, r4, r0
 8005a60:	428b      	cmp	r3, r1
 8005a62:	bf01      	itttt	eq
 8005a64:	6819      	ldreq	r1, [r3, #0]
 8005a66:	685b      	ldreq	r3, [r3, #4]
 8005a68:	1809      	addeq	r1, r1, r0
 8005a6a:	6021      	streq	r1, [r4, #0]
 8005a6c:	e7ed      	b.n	8005a4a <_free_r+0x1e>
 8005a6e:	461a      	mov	r2, r3
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	b10b      	cbz	r3, 8005a78 <_free_r+0x4c>
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	d9fa      	bls.n	8005a6e <_free_r+0x42>
 8005a78:	6811      	ldr	r1, [r2, #0]
 8005a7a:	1850      	adds	r0, r2, r1
 8005a7c:	42a0      	cmp	r0, r4
 8005a7e:	d10b      	bne.n	8005a98 <_free_r+0x6c>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	4401      	add	r1, r0
 8005a84:	1850      	adds	r0, r2, r1
 8005a86:	4283      	cmp	r3, r0
 8005a88:	6011      	str	r1, [r2, #0]
 8005a8a:	d1e0      	bne.n	8005a4e <_free_r+0x22>
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4408      	add	r0, r1
 8005a92:	6010      	str	r0, [r2, #0]
 8005a94:	6053      	str	r3, [r2, #4]
 8005a96:	e7da      	b.n	8005a4e <_free_r+0x22>
 8005a98:	d902      	bls.n	8005aa0 <_free_r+0x74>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	602b      	str	r3, [r5, #0]
 8005a9e:	e7d6      	b.n	8005a4e <_free_r+0x22>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	1821      	adds	r1, r4, r0
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	bf01      	itttt	eq
 8005aa8:	6819      	ldreq	r1, [r3, #0]
 8005aaa:	685b      	ldreq	r3, [r3, #4]
 8005aac:	1809      	addeq	r1, r1, r0
 8005aae:	6021      	streq	r1, [r4, #0]
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	6054      	str	r4, [r2, #4]
 8005ab4:	e7cb      	b.n	8005a4e <_free_r+0x22>
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	20001344 	.word	0x20001344

08005abc <__malloc_lock>:
 8005abc:	4801      	ldr	r0, [pc, #4]	@ (8005ac4 <__malloc_lock+0x8>)
 8005abe:	f7ff bfa5 	b.w	8005a0c <__retarget_lock_acquire_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	20001340 	.word	0x20001340

08005ac8 <__malloc_unlock>:
 8005ac8:	4801      	ldr	r0, [pc, #4]	@ (8005ad0 <__malloc_unlock+0x8>)
 8005aca:	f7ff bfa0 	b.w	8005a0e <__retarget_lock_release_recursive>
 8005ace:	bf00      	nop
 8005ad0:	20001340 	.word	0x20001340

08005ad4 <_init>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	bf00      	nop
 8005ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ada:	bc08      	pop	{r3}
 8005adc:	469e      	mov	lr, r3
 8005ade:	4770      	bx	lr

08005ae0 <_fini>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	bf00      	nop
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr
