
SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000646c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800657c  0800657c  0000757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e4  080065e4  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080065e4  080065e4  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080065e4  080065e4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e4  080065e4  000075e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080065ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e4  20000068  08006654  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000134c  08006654  0000834c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faa0  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029cb  00000000  00000000  00017b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0001a500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6e  00000000  00000000  0001b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019272  00000000  00000000  0001bf4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbb6  00000000  00000000  000351c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092833  00000000  00000000  00044d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d75a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  000d75ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000db904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006564 	.word	0x08006564

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006564 	.word	0x08006564

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__gedf2>:
 8000630:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000634:	e006      	b.n	8000644 <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__ledf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	e002      	b.n	8000644 <__cmpdf2+0x4>
 800063e:	bf00      	nop

08000640 <__cmpdf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800064c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000650:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000654:	bf18      	it	ne
 8000656:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800065a:	d01b      	beq.n	8000694 <__cmpdf2+0x54>
 800065c:	b001      	add	sp, #4
 800065e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000662:	bf0c      	ite	eq
 8000664:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000668:	ea91 0f03 	teqne	r1, r3
 800066c:	bf02      	ittt	eq
 800066e:	ea90 0f02 	teqeq	r0, r2
 8000672:	2000      	moveq	r0, #0
 8000674:	4770      	bxeq	lr
 8000676:	f110 0f00 	cmn.w	r0, #0
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf58      	it	pl
 8000680:	4299      	cmppl	r1, r3
 8000682:	bf08      	it	eq
 8000684:	4290      	cmpeq	r0, r2
 8000686:	bf2c      	ite	cs
 8000688:	17d8      	asrcs	r0, r3, #31
 800068a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800068e:	f040 0001 	orr.w	r0, r0, #1
 8000692:	4770      	bx	lr
 8000694:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800069c:	d102      	bne.n	80006a4 <__cmpdf2+0x64>
 800069e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006a2:	d107      	bne.n	80006b4 <__cmpdf2+0x74>
 80006a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006ac:	d1d6      	bne.n	800065c <__cmpdf2+0x1c>
 80006ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006b2:	d0d3      	beq.n	800065c <__cmpdf2+0x1c>
 80006b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__aeabi_cdrcmple>:
 80006bc:	4684      	mov	ip, r0
 80006be:	4610      	mov	r0, r2
 80006c0:	4662      	mov	r2, ip
 80006c2:	468c      	mov	ip, r1
 80006c4:	4619      	mov	r1, r3
 80006c6:	4663      	mov	r3, ip
 80006c8:	e000      	b.n	80006cc <__aeabi_cdcmpeq>
 80006ca:	bf00      	nop

080006cc <__aeabi_cdcmpeq>:
 80006cc:	b501      	push	{r0, lr}
 80006ce:	f7ff ffb7 	bl	8000640 <__cmpdf2>
 80006d2:	2800      	cmp	r0, #0
 80006d4:	bf48      	it	mi
 80006d6:	f110 0f00 	cmnmi.w	r0, #0
 80006da:	bd01      	pop	{r0, pc}

080006dc <__aeabi_dcmpeq>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff fff4 	bl	80006cc <__aeabi_cdcmpeq>
 80006e4:	bf0c      	ite	eq
 80006e6:	2001      	moveq	r0, #1
 80006e8:	2000      	movne	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmplt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffea 	bl	80006cc <__aeabi_cdcmpeq>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_dcmple>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffe0 	bl	80006cc <__aeabi_cdcmpeq>
 800070c:	bf94      	ite	ls
 800070e:	2001      	movls	r0, #1
 8000710:	2000      	movhi	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_dcmpge>:
 8000718:	f84d ed08 	str.w	lr, [sp, #-8]!
 800071c:	f7ff ffce 	bl	80006bc <__aeabi_cdrcmple>
 8000720:	bf94      	ite	ls
 8000722:	2001      	movls	r0, #1
 8000724:	2000      	movhi	r0, #0
 8000726:	f85d fb08 	ldr.w	pc, [sp], #8
 800072a:	bf00      	nop

0800072c <__aeabi_dcmpgt>:
 800072c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000730:	f7ff ffc4 	bl	80006bc <__aeabi_cdrcmple>
 8000734:	bf34      	ite	cc
 8000736:	2001      	movcc	r0, #1
 8000738:	2000      	movcs	r0, #0
 800073a:	f85d fb08 	ldr.w	pc, [sp], #8
 800073e:	bf00      	nop

08000740 <__aeabi_frsub>:
 8000740:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000744:	e002      	b.n	800074c <__addsf3>
 8000746:	bf00      	nop

08000748 <__aeabi_fsub>:
 8000748:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800074c <__addsf3>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	bf1f      	itttt	ne
 8000750:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000754:	ea92 0f03 	teqne	r2, r3
 8000758:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800075c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000760:	d06a      	beq.n	8000838 <__addsf3+0xec>
 8000762:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000766:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800076a:	bfc1      	itttt	gt
 800076c:	18d2      	addgt	r2, r2, r3
 800076e:	4041      	eorgt	r1, r0
 8000770:	4048      	eorgt	r0, r1
 8000772:	4041      	eorgt	r1, r0
 8000774:	bfb8      	it	lt
 8000776:	425b      	neglt	r3, r3
 8000778:	2b19      	cmp	r3, #25
 800077a:	bf88      	it	hi
 800077c:	4770      	bxhi	lr
 800077e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000782:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000786:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800078a:	bf18      	it	ne
 800078c:	4240      	negne	r0, r0
 800078e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000792:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000796:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800079a:	bf18      	it	ne
 800079c:	4249      	negne	r1, r1
 800079e:	ea92 0f03 	teq	r2, r3
 80007a2:	d03f      	beq.n	8000824 <__addsf3+0xd8>
 80007a4:	f1a2 0201 	sub.w	r2, r2, #1
 80007a8:	fa41 fc03 	asr.w	ip, r1, r3
 80007ac:	eb10 000c 	adds.w	r0, r0, ip
 80007b0:	f1c3 0320 	rsb	r3, r3, #32
 80007b4:	fa01 f103 	lsl.w	r1, r1, r3
 80007b8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007bc:	d502      	bpl.n	80007c4 <__addsf3+0x78>
 80007be:	4249      	negs	r1, r1
 80007c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007c4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007c8:	d313      	bcc.n	80007f2 <__addsf3+0xa6>
 80007ca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007ce:	d306      	bcc.n	80007de <__addsf3+0x92>
 80007d0:	0840      	lsrs	r0, r0, #1
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	f102 0201 	add.w	r2, r2, #1
 80007da:	2afe      	cmp	r2, #254	@ 0xfe
 80007dc:	d251      	bcs.n	8000882 <__addsf3+0x136>
 80007de:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e6:	bf08      	it	eq
 80007e8:	f020 0001 	biceq.w	r0, r0, #1
 80007ec:	ea40 0003 	orr.w	r0, r0, r3
 80007f0:	4770      	bx	lr
 80007f2:	0049      	lsls	r1, r1, #1
 80007f4:	eb40 0000 	adc.w	r0, r0, r0
 80007f8:	3a01      	subs	r2, #1
 80007fa:	bf28      	it	cs
 80007fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000800:	d2ed      	bcs.n	80007de <__addsf3+0x92>
 8000802:	fab0 fc80 	clz	ip, r0
 8000806:	f1ac 0c08 	sub.w	ip, ip, #8
 800080a:	ebb2 020c 	subs.w	r2, r2, ip
 800080e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000812:	bfaa      	itet	ge
 8000814:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000818:	4252      	neglt	r2, r2
 800081a:	4318      	orrge	r0, r3
 800081c:	bfbc      	itt	lt
 800081e:	40d0      	lsrlt	r0, r2
 8000820:	4318      	orrlt	r0, r3
 8000822:	4770      	bx	lr
 8000824:	f092 0f00 	teq	r2, #0
 8000828:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800082c:	bf06      	itte	eq
 800082e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000832:	3201      	addeq	r2, #1
 8000834:	3b01      	subne	r3, #1
 8000836:	e7b5      	b.n	80007a4 <__addsf3+0x58>
 8000838:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800083c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000840:	bf18      	it	ne
 8000842:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000846:	d021      	beq.n	800088c <__addsf3+0x140>
 8000848:	ea92 0f03 	teq	r2, r3
 800084c:	d004      	beq.n	8000858 <__addsf3+0x10c>
 800084e:	f092 0f00 	teq	r2, #0
 8000852:	bf08      	it	eq
 8000854:	4608      	moveq	r0, r1
 8000856:	4770      	bx	lr
 8000858:	ea90 0f01 	teq	r0, r1
 800085c:	bf1c      	itt	ne
 800085e:	2000      	movne	r0, #0
 8000860:	4770      	bxne	lr
 8000862:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000866:	d104      	bne.n	8000872 <__addsf3+0x126>
 8000868:	0040      	lsls	r0, r0, #1
 800086a:	bf28      	it	cs
 800086c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000870:	4770      	bx	lr
 8000872:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000876:	bf3c      	itt	cc
 8000878:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800087c:	4770      	bxcc	lr
 800087e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000882:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000886:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800088a:	4770      	bx	lr
 800088c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000890:	bf16      	itet	ne
 8000892:	4608      	movne	r0, r1
 8000894:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000898:	4601      	movne	r1, r0
 800089a:	0242      	lsls	r2, r0, #9
 800089c:	bf06      	itte	eq
 800089e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008a2:	ea90 0f01 	teqeq	r0, r1
 80008a6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008aa:	4770      	bx	lr

080008ac <__aeabi_ui2f>:
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	e004      	b.n	80008bc <__aeabi_i2f+0x8>
 80008b2:	bf00      	nop

080008b4 <__aeabi_i2f>:
 80008b4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008b8:	bf48      	it	mi
 80008ba:	4240      	negmi	r0, r0
 80008bc:	ea5f 0c00 	movs.w	ip, r0
 80008c0:	bf08      	it	eq
 80008c2:	4770      	bxeq	lr
 80008c4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008c8:	4601      	mov	r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	e01c      	b.n	800090a <__aeabi_l2f+0x2a>

080008d0 <__aeabi_ul2f>:
 80008d0:	ea50 0201 	orrs.w	r2, r0, r1
 80008d4:	bf08      	it	eq
 80008d6:	4770      	bxeq	lr
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e00a      	b.n	80008f4 <__aeabi_l2f+0x14>
 80008de:	bf00      	nop

080008e0 <__aeabi_l2f>:
 80008e0:	ea50 0201 	orrs.w	r2, r0, r1
 80008e4:	bf08      	it	eq
 80008e6:	4770      	bxeq	lr
 80008e8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008ec:	d502      	bpl.n	80008f4 <__aeabi_l2f+0x14>
 80008ee:	4240      	negs	r0, r0
 80008f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008f4:	ea5f 0c01 	movs.w	ip, r1
 80008f8:	bf02      	ittt	eq
 80008fa:	4684      	moveq	ip, r0
 80008fc:	4601      	moveq	r1, r0
 80008fe:	2000      	moveq	r0, #0
 8000900:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000904:	bf08      	it	eq
 8000906:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800090a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800090e:	fabc f28c 	clz	r2, ip
 8000912:	3a08      	subs	r2, #8
 8000914:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000918:	db10      	blt.n	800093c <__aeabi_l2f+0x5c>
 800091a:	fa01 fc02 	lsl.w	ip, r1, r2
 800091e:	4463      	add	r3, ip
 8000920:	fa00 fc02 	lsl.w	ip, r0, r2
 8000924:	f1c2 0220 	rsb	r2, r2, #32
 8000928:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800092c:	fa20 f202 	lsr.w	r2, r0, r2
 8000930:	eb43 0002 	adc.w	r0, r3, r2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f102 0220 	add.w	r2, r2, #32
 8000940:	fa01 fc02 	lsl.w	ip, r1, r2
 8000944:	f1c2 0220 	rsb	r2, r2, #32
 8000948:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800094c:	fa21 f202 	lsr.w	r2, r1, r2
 8000950:	eb43 0002 	adc.w	r0, r3, r2
 8000954:	bf08      	it	eq
 8000956:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800095a:	4770      	bx	lr

0800095c <__gesf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000960:	e006      	b.n	8000970 <__cmpsf2+0x4>
 8000962:	bf00      	nop

08000964 <__lesf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpsf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpsf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000978:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800097c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000980:	bf18      	it	ne
 8000982:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000986:	d011      	beq.n	80009ac <__cmpsf2+0x40>
 8000988:	b001      	add	sp, #4
 800098a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800098e:	bf18      	it	ne
 8000990:	ea90 0f01 	teqne	r0, r1
 8000994:	bf58      	it	pl
 8000996:	ebb2 0003 	subspl.w	r0, r2, r3
 800099a:	bf88      	it	hi
 800099c:	17c8      	asrhi	r0, r1, #31
 800099e:	bf38      	it	cc
 80009a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009a4:	bf18      	it	ne
 80009a6:	f040 0001 	orrne.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b0:	d102      	bne.n	80009b8 <__cmpsf2+0x4c>
 80009b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009b6:	d105      	bne.n	80009c4 <__cmpsf2+0x58>
 80009b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009bc:	d1e4      	bne.n	8000988 <__cmpsf2+0x1c>
 80009be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009c2:	d0e1      	beq.n	8000988 <__cmpsf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cfrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4608      	mov	r0, r1
 80009d0:	4661      	mov	r1, ip
 80009d2:	e7ff      	b.n	80009d4 <__aeabi_cfcmpeq>

080009d4 <__aeabi_cfcmpeq>:
 80009d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80009d6:	f7ff ffc9 	bl	800096c <__cmpsf2>
 80009da:	2800      	cmp	r0, #0
 80009dc:	bf48      	it	mi
 80009de:	f110 0f00 	cmnmi.w	r0, #0
 80009e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009e4 <__aeabi_fcmpeq>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff fff4 	bl	80009d4 <__aeabi_cfcmpeq>
 80009ec:	bf0c      	ite	eq
 80009ee:	2001      	moveq	r0, #1
 80009f0:	2000      	movne	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_fcmplt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffea 	bl	80009d4 <__aeabi_cfcmpeq>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fcmple>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffe0 	bl	80009d4 <__aeabi_cfcmpeq>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_fcmpge>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffd2 	bl	80009cc <__aeabi_cfrcmple>
 8000a28:	bf94      	ite	ls
 8000a2a:	2001      	movls	r0, #1
 8000a2c:	2000      	movhi	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_fcmpgt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffc8 	bl	80009cc <__aeabi_cfrcmple>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_f2iz>:
 8000a48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a50:	d30f      	bcc.n	8000a72 <__aeabi_f2iz+0x2a>
 8000a52:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a5a:	d90d      	bls.n	8000a78 <__aeabi_f2iz+0x30>
 8000a5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a64:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a68:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6c:	bf18      	it	ne
 8000a6e:	4240      	negne	r0, r0
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr
 8000a78:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a7c:	d101      	bne.n	8000a82 <__aeabi_f2iz+0x3a>
 8000a7e:	0242      	lsls	r2, r0, #9
 8000a80:	d105      	bne.n	8000a8e <__aeabi_f2iz+0x46>
 8000a82:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000a86:	bf08      	it	eq
 8000a88:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_f2uiz>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	d20e      	bcs.n	8000ab6 <__aeabi_f2uiz+0x22>
 8000a98:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a9c:	d30b      	bcc.n	8000ab6 <__aeabi_f2uiz+0x22>
 8000a9e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000aa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aa6:	d409      	bmi.n	8000abc <__aeabi_f2uiz+0x28>
 8000aa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr
 8000abc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_f2uiz+0x32>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d102      	bne.n	8000acc <__aeabi_f2uiz+0x38>
 8000ac6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4a06      	ldr	r2, [pc, #24]	@ (8000afc <vApplicationGetIdleTaskMemory+0x28>)
 8000ae4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <vApplicationGetIdleTaskMemory+0x2c>)
 8000aea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000084 	.word	0x20000084
 8000b00:	20000124 	.word	0x20000124

08000b04 <HAL_CAN_RxFifo1MsgPendingCallback>:
void Task_SendMessage (void *argument);
void Task_ReceiveMessage (void *argument);

int lastDataRx;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
//	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000b0e:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f001 f8ff 	bl	8001d16 <HAL_CAN_GetRxMessage>
//	if(lastDataRx != RxData[7]){
//		lastDataRx = RxData[7];
//		xQueueSendFromISR(ControlSignalQueue, &lastDataRx, &xHigherPriorityTaskWoken);
//		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
//	}
	signal_control = RxData[7];
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000b1a:	79da      	ldrb	r2, [r3, #7]
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000b1e:	701a      	strb	r2, [r3, #0]

}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000043c 	.word	0x2000043c
 8000b2c:	20000420 	.word	0x20000420
 8000b30:	20000444 	.word	0x20000444

08000b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3a:	f000 fde3 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3e:	f000 f8b9 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b42:	f000 f9fd 	bl	8000f40 <MX_GPIO_Init>
  MX_CAN_Init();
 8000b46:	f000 f8fb 	bl	8000d40 <MX_CAN_Init>
  MX_TIM2_Init();
 8000b4a:	f000 f92f 	bl	8000dac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b4e:	f000 f9a3 	bl	8000e98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Init CAN
  HAL_CAN_Start(&hcan);
 8000b52:	4843      	ldr	r0, [pc, #268]	@ (8000c60 <main+0x12c>)
 8000b54:	f000 ffcc 	bl	8001af0 <HAL_CAN_Start>
  // Configure the filter
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b58:	4b42      	ldr	r3, [pc, #264]	@ (8000c64 <main+0x130>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000b5e:	4b41      	ldr	r3, [pc, #260]	@ (8000c64 <main+0x130>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b64:	4b3f      	ldr	r3, [pc, #252]	@ (8000c64 <main+0x130>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6A5<<5;
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c64 <main+0x130>)
 8000b6c:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 8000b70:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000b72:	4b3c      	ldr	r3, [pc, #240]	@ (8000c64 <main+0x130>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000b78:	4b3a      	ldr	r3, [pc, #232]	@ (8000c64 <main+0x130>)
 8000b7a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000b7e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000b80:	4b38      	ldr	r3, [pc, #224]	@ (8000c64 <main+0x130>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b86:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <main+0x130>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000b8c:	4935      	ldr	r1, [pc, #212]	@ (8000c64 <main+0x130>)
 8000b8e:	4834      	ldr	r0, [pc, #208]	@ (8000c60 <main+0x12c>)
 8000b90:	f000 fee5 	bl	800195e <HAL_CAN_ConfigFilter>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000b94:	2110      	movs	r1, #16
 8000b96:	4832      	ldr	r0, [pc, #200]	@ (8000c60 <main+0x12c>)
 8000b98:	f001 f9de 	bl	8001f58 <HAL_CAN_ActivateNotification>
  // config tx
  TxHeader.DLC = 8;  // data length
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <main+0x134>)
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000ba2:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <main+0x134>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c68 <main+0x134>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x6F5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 8000bae:	4b2e      	ldr	r3, [pc, #184]	@ (8000c68 <main+0x134>)
 8000bb0:	f240 62f5 	movw	r2, #1781	@ 0x6f5
 8000bb4:	601a      	str	r2, [r3, #0]

  // Motor
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PA1 TIM2 CH2
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	482c      	ldr	r0, [pc, #176]	@ (8000c6c <main+0x138>)
 8000bba:	f002 fbd1 	bl	8003360 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2180      	movs	r1, #128	@ 0x80
 8000bc2:	482b      	ldr	r0, [pc, #172]	@ (8000c70 <main+0x13c>)
 8000bc4:	f001 fe74 	bl	80028b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2120      	movs	r1, #32
 8000bcc:	4828      	ldr	r0, [pc, #160]	@ (8000c70 <main+0x13c>)
 8000bce:	f001 fe6f 	bl	80028b0 <HAL_GPIO_WritePin>

  // Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bd2:	213c      	movs	r1, #60	@ 0x3c
 8000bd4:	4827      	ldr	r0, [pc, #156]	@ (8000c74 <main+0x140>)
 8000bd6:	f002 fd07 	bl	80035e8 <HAL_TIM_Encoder_Start>


  // create task
  CurrentAngleMutex = xSemaphoreCreateMutex();
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f003 fcde 	bl	800459c <xQueueCreateMutex>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a25      	ldr	r2, [pc, #148]	@ (8000c78 <main+0x144>)
 8000be4:	6013      	str	r3, [r2, #0]
  if (CurrentAngleMutex != NULL)
 8000be6:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <main+0x144>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <main+0xc2>
  {
   debug = 1000;
 8000bee:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <main+0x148>)
 8000bf0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  ControlSignalQueue = xQueueCreate(5, sizeof (int));
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	2005      	movs	r0, #5
 8000bfc:	f003 fc5a 	bl	80044b4 <xQueueGenericCreate>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a1f      	ldr	r2, [pc, #124]	@ (8000c80 <main+0x14c>)
 8000c04:	6013      	str	r3, [r2, #0]

  xTaskCreate(Task_ControlMotor, "ControlMotor", 128, NULL, 1, &ControlMotor_Handler);
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <main+0x150>)
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	491d      	ldr	r1, [pc, #116]	@ (8000c88 <main+0x154>)
 8000c14:	481d      	ldr	r0, [pc, #116]	@ (8000c8c <main+0x158>)
 8000c16:	f004 f84c 	bl	8004cb2 <xTaskCreate>
  xTaskCreate(Task_ReadEncoder, "EncoderRead", 128, NULL, 3, &ReadEncoder_Handler);
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <main+0x15c>)
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	2303      	movs	r3, #3
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2300      	movs	r3, #0
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	491b      	ldr	r1, [pc, #108]	@ (8000c94 <main+0x160>)
 8000c28:	481b      	ldr	r0, [pc, #108]	@ (8000c98 <main+0x164>)
 8000c2a:	f004 f842 	bl	8004cb2 <xTaskCreate>
  xTaskCreate(Task_ToggleLED, "ToggleLED", 128, NULL, 1, &ToggleLED_Handler);
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <main+0x168>)
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	2301      	movs	r3, #1
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2300      	movs	r3, #0
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	4919      	ldr	r1, [pc, #100]	@ (8000ca0 <main+0x16c>)
 8000c3c:	4819      	ldr	r0, [pc, #100]	@ (8000ca4 <main+0x170>)
 8000c3e:	f004 f838 	bl	8004cb2 <xTaskCreate>
  xTaskCreate(Task_SendMessage, "SendMessage", 128, NULL, 2, &SendMessage_Handler);
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <main+0x174>)
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	2302      	movs	r3, #2
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	4917      	ldr	r1, [pc, #92]	@ (8000cac <main+0x178>)
 8000c50:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <main+0x17c>)
 8000c52:	f004 f82e 	bl	8004cb2 <xTaskCreate>
//  xTaskCreate(Task_ReceiveMessage, "ReceiveMessage", 128, NULL, 4, &ReceiveMessage_Handler);

  vTaskStartScheduler();
 8000c56:	f004 f9b1 	bl	8004fbc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000c5a:	bf00      	nop
 8000c5c:	e7fd      	b.n	8000c5a <main+0x126>
 8000c5e:	bf00      	nop
 8000c60:	20000324 	.word	0x20000324
 8000c64:	200003f8 	.word	0x200003f8
 8000c68:	200003dc 	.word	0x200003dc
 8000c6c:	2000034c 	.word	0x2000034c
 8000c70:	40010800 	.word	0x40010800
 8000c74:	20000394 	.word	0x20000394
 8000c78:	20000458 	.word	0x20000458
 8000c7c:	20000448 	.word	0x20000448
 8000c80:	20000454 	.word	0x20000454
 8000c84:	2000045c 	.word	0x2000045c
 8000c88:	0800657c 	.word	0x0800657c
 8000c8c:	08000ffd 	.word	0x08000ffd
 8000c90:	20000460 	.word	0x20000460
 8000c94:	0800658c 	.word	0x0800658c
 8000c98:	080011e5 	.word	0x080011e5
 8000c9c:	20000464 	.word	0x20000464
 8000ca0:	08006598 	.word	0x08006598
 8000ca4:	0800122d 	.word	0x0800122d
 8000ca8:	20000468 	.word	0x20000468
 8000cac:	080065a4 	.word	0x080065a4
 8000cb0:	08001255 	.word	0x08001255

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b090      	sub	sp, #64	@ 0x40
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	2228      	movs	r2, #40	@ 0x28
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 fb60 	bl	8006388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cf2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fe09 	bl	8002914 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d08:	f000 faec 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2102      	movs	r1, #2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 f876 	bl	8002e18 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d32:	f000 fad7 	bl	80012e4 <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3740      	adds	r7, #64	@ 0x40
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d46:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <MX_CAN_Init+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d4c:	2248      	movs	r2, #72	@ 0x48
 8000d4e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d62:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_CAN_Init+0x64>)
 8000d90:	f000 fcea 	bl	8001768 <HAL_CAN_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000d9a:	f000 faa3 	bl	80012e4 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000324 	.word	0x20000324
 8000da8:	40006400 	.word	0x40006400

08000dac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	@ 0x38
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000dde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000de6:	227f      	movs	r2, #127	@ 0x7f
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000df2:	f240 2271 	movw	r2, #625	@ 0x271
 8000df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e04:	4823      	ldr	r0, [pc, #140]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000e06:	f002 f9b1 	bl	800316c <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e10:	f000 fa68 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481c      	ldr	r0, [pc, #112]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000e22:	f002 fe21 	bl	8003a68 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e2c:	f000 fa5a 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e30:	4818      	ldr	r0, [pc, #96]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000e32:	f002 fa3d 	bl	80032b0 <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e3c:	f000 fa52 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000e50:	f003 f9a6 	bl	80041a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e5a:	f000 fa43 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5e:	2360      	movs	r3, #96	@ 0x60
 8000e60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2204      	movs	r2, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000e76:	f002 fd35 	bl	80038e4 <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e80:	f000 fa30 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e84:	4803      	ldr	r0, [pc, #12]	@ (8000e94 <MX_TIM2_Init+0xe8>)
 8000e86:	f000 fb41 	bl	800150c <HAL_TIM_MspPostInit>

}
 8000e8a:	bf00      	nop
 8000e8c:	3738      	adds	r7, #56	@ 0x38
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000034c 	.word	0x2000034c

08000e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	@ 0x30
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2224      	movs	r2, #36	@ 0x24
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f005 fa6e 	bl	8006388 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb4:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <MX_TIM3_Init+0xa0>)
 8000eb6:	4a21      	ldr	r2, [pc, #132]	@ (8000f3c <MX_TIM3_Init+0xa4>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <MX_TIM3_Init+0xa0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <MX_TIM3_Init+0xa0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <MX_TIM3_Init+0xa0>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ecc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_TIM3_Init+0xa0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_TIM3_Init+0xa0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000eda:	2303      	movs	r3, #3
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <MX_TIM3_Init+0xa0>)
 8000f06:	f002 facd 	bl	80034a4 <HAL_TIM_Encoder_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f10:	f000 f9e8 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_TIM3_Init+0xa0>)
 8000f22:	f003 f93d 	bl	80041a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f2c:	f000 f9da 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	@ 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000394 	.word	0x20000394
 8000f3c:	40000400 	.word	0x40000400

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f54:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a25      	ldr	r2, [pc, #148]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f5a:	f043 0320 	orr.w	r3, r3, #32
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0320 	and.w	r3, r3, #32
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	21a0      	movs	r1, #160	@ 0xa0
 8000fa0:	4814      	ldr	r0, [pc, #80]	@ (8000ff4 <MX_GPIO_Init+0xb4>)
 8000fa2:	f001 fc85 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4813      	ldr	r0, [pc, #76]	@ (8000ff8 <MX_GPIO_Init+0xb8>)
 8000fac:	f001 fc80 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fb0:	23a0      	movs	r3, #160	@ 0xa0
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <MX_GPIO_Init+0xb4>)
 8000fc8:	f001 faee 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_GPIO_Init+0xb8>)
 8000fe4:	f001 fae0 	bl	80025a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40010c00 	.word	0x40010c00

08000ffc <Task_ControlMotor>:

/* USER CODE BEGIN 4 */
//define task
void Task_ControlMotor(void *argument){
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	b08d      	sub	sp, #52	@ 0x34
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	int desire_angle;
	int error;
	float derivative;
	float output;

	float Kp = 15.0f;
 8001004:	4b6b      	ldr	r3, [pc, #428]	@ (80011b4 <Task_ControlMotor+0x1b8>)
 8001006:	623b      	str	r3, [r7, #32]
	float Ki = 0.5f;
 8001008:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800100c:	61fb      	str	r3, [r7, #28]
	float Kd = 0.5f;
 800100e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001012:	61bb      	str	r3, [r7, #24]

	float integral = 0.0f;
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
	float previous_error = 0.0f;
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24

	while(1){
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 8001020:	4b65      	ldr	r3, [pc, #404]	@ (80011b8 <Task_ControlMotor+0x1bc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fbd1 	bl	80047d0 <xQueueSemaphoreTake>

		// Tính góc mong muốn và góc hiện tại
		desire_angle = (signal_control * 90) / 255;
 800102e:	4b63      	ldr	r3, [pc, #396]	@ (80011bc <Task_ControlMotor+0x1c0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	235a      	movs	r3, #90	@ 0x5a
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4a60      	ldr	r2, [pc, #384]	@ (80011c0 <Task_ControlMotor+0x1c4>)
 800103e:	fb82 1203 	smull	r1, r2, r2, r3
 8001042:	441a      	add	r2, r3
 8001044:	11d2      	asrs	r2, r2, #7
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
		current_angle = position/257;
 800104c:	4b5d      	ldr	r3, [pc, #372]	@ (80011c4 <Task_ControlMotor+0x1c8>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	4a5d      	ldr	r2, [pc, #372]	@ (80011c8 <Task_ControlMotor+0x1cc>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	613b      	str	r3, [r7, #16]
		error = desire_angle - current_angle;
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	60fb      	str	r3, [r7, #12]

		// Tính các thành phần PID
		integral += error;
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fc25 	bl	80008b4 <__aeabi_i2f>
 800106a:	4603      	mov	r3, r0
 800106c:	4619      	mov	r1, r3
 800106e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001070:	f7ff fb6c 	bl	800074c <__addsf3>
 8001074:	4603      	mov	r3, r0
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
		derivative = error - previous_error;
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff fc1b 	bl	80008b4 <__aeabi_i2f>
 800107e:	4603      	mov	r3, r0
 8001080:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fb60 	bl	8000748 <__aeabi_fsub>
 8001088:	4603      	mov	r3, r0
 800108a:	60bb      	str	r3, [r7, #8]
		output = Kp * error + Ki * integral + Kd * derivative;
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f7ff fc11 	bl	80008b4 <__aeabi_i2f>
 8001092:	4603      	mov	r3, r0
 8001094:	6a39      	ldr	r1, [r7, #32]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f85a 	bl	8000150 <__aeabi_fmul>
 800109c:	4603      	mov	r3, r0
 800109e:	461e      	mov	r6, r3
 80010a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010a2:	69f8      	ldr	r0, [r7, #28]
 80010a4:	f7ff f854 	bl	8000150 <__aeabi_fmul>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4630      	mov	r0, r6
 80010ae:	f7ff fb4d 	bl	800074c <__addsf3>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461e      	mov	r6, r3
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	69b8      	ldr	r0, [r7, #24]
 80010ba:	f7ff f849 	bl	8000150 <__aeabi_fmul>
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fb42 	bl	800074c <__addsf3>
 80010c8:	4603      	mov	r3, r0
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		previous_error = error;
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff fbf1 	bl	80008b4 <__aeabi_i2f>
 80010d2:	4603      	mov	r3, r0
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24

		// Giới hạn output thành giá trị PWM hợp lệ (0–100%)
		if (output > 625) output = 625;
 80010d6:	493d      	ldr	r1, [pc, #244]	@ (80011cc <Task_ControlMotor+0x1d0>)
 80010d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010da:	f7ff fcab 	bl	8000a34 <__aeabi_fcmpgt>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <Task_ControlMotor+0xec>
 80010e4:	4b39      	ldr	r3, [pc, #228]	@ (80011cc <Task_ControlMotor+0x1d0>)
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (output < -625) output = -625;
 80010e8:	4939      	ldr	r1, [pc, #228]	@ (80011d0 <Task_ControlMotor+0x1d4>)
 80010ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010ec:	f7ff fc84 	bl	80009f8 <__aeabi_fcmplt>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <Task_ControlMotor+0xfe>
 80010f6:	4b36      	ldr	r3, [pc, #216]	@ (80011d0 <Task_ControlMotor+0x1d4>)
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (fabs(error) > 1) {
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff fa2e 	bl	800055c <__aeabi_i2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4614      	mov	r4, r2
 8001106:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <Task_ControlMotor+0x1d8>)
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff fb0a 	bl	800072c <__aeabi_dcmpgt>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d02e      	beq.n	800117c <Task_ControlMotor+0x180>
			if (output > 0) {
 800111e:	f04f 0100 	mov.w	r1, #0
 8001122:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001124:	f7ff fc86 	bl	8000a34 <__aeabi_fcmpgt>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00a      	beq.n	8001144 <Task_ControlMotor+0x148>
				// Quay phải
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // IN1 = 0
 800112e:	2200      	movs	r2, #0
 8001130:	2120      	movs	r1, #32
 8001132:	4829      	ldr	r0, [pc, #164]	@ (80011d8 <Task_ControlMotor+0x1dc>)
 8001134:	f001 fbbc 	bl	80028b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN2 = 1
 8001138:	2201      	movs	r2, #1
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	4826      	ldr	r0, [pc, #152]	@ (80011d8 <Task_ControlMotor+0x1dc>)
 800113e:	f001 fbb7 	bl	80028b0 <HAL_GPIO_WritePin>
 8001142:	e00d      	b.n	8001160 <Task_ControlMotor+0x164>
			}
			else {
				// Quay trái
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2120      	movs	r1, #32
 8001148:	4823      	ldr	r0, [pc, #140]	@ (80011d8 <Task_ControlMotor+0x1dc>)
 800114a:	f001 fbb1 	bl	80028b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2180      	movs	r1, #128	@ 0x80
 8001152:	4821      	ldr	r0, [pc, #132]	@ (80011d8 <Task_ControlMotor+0x1dc>)
 8001154:	f001 fbac 	bl	80028b0 <HAL_GPIO_WritePin>
				output = -output; // PWM phải luôn dương
 8001158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint32_t)output);
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <Task_ControlMotor+0x1e0>)
 8001162:	681e      	ldr	r6, [r3, #0]
 8001164:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001166:	f7ff fc95 	bl	8000a94 <__aeabi_f2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	63b3      	str	r3, [r6, #56]	@ 0x38
			speed = output;
 800116e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001170:	f7ff fc6a 	bl	8000a48 <__aeabi_f2iz>
 8001174:	4603      	mov	r3, r0
 8001176:	4a1a      	ldr	r2, [pc, #104]	@ (80011e0 <Task_ControlMotor+0x1e4>)
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e010      	b.n	800119e <Task_ControlMotor+0x1a2>
		}
		else {
			// Dừng motor khi đủ chính xác
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2120      	movs	r1, #32
 8001180:	4815      	ldr	r0, [pc, #84]	@ (80011d8 <Task_ControlMotor+0x1dc>)
 8001182:	f001 fb95 	bl	80028b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	4813      	ldr	r0, [pc, #76]	@ (80011d8 <Task_ControlMotor+0x1dc>)
 800118c:	f001 fb90 	bl	80028b0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <Task_ControlMotor+0x1e0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2200      	movs	r2, #0
 8001196:	639a      	str	r2, [r3, #56]	@ 0x38
			integral = 0.0f;
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		xSemaphoreGive(CurrentAngleMutex);
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <Task_ControlMotor+0x1bc>)
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	2300      	movs	r3, #0
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	f003 fa10 	bl	80045cc <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(50)); // PID hoạt động mỗi 50ms
 80011ac:	2032      	movs	r0, #50	@ 0x32
 80011ae:	f003 fecf 	bl	8004f50 <vTaskDelay>
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 80011b2:	e735      	b.n	8001020 <Task_ControlMotor+0x24>
 80011b4:	41700000 	.word	0x41700000
 80011b8:	20000458 	.word	0x20000458
 80011bc:	20000444 	.word	0x20000444
 80011c0:	80808081 	.word	0x80808081
 80011c4:	2000044c 	.word	0x2000044c
 80011c8:	ff00ff01 	.word	0xff00ff01
 80011cc:	441c4000 	.word	0x441c4000
 80011d0:	c41c4000 	.word	0xc41c4000
 80011d4:	3ff00000 	.word	0x3ff00000
 80011d8:	40010800 	.word	0x40010800
 80011dc:	2000034c 	.word	0x2000034c
 80011e0:	20000450 	.word	0x20000450

080011e4 <Task_ReadEncoder>:
	}
}


void Task_ReadEncoder(void *argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <Task_ReadEncoder+0x3c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 faeb 	bl	80047d0 <xQueueSemaphoreTake>
    	position = __HAL_TIM_GET_COUNTER(&htim3);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <Task_ReadEncoder+0x40>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <Task_ReadEncoder+0x44>)
 8001204:	801a      	strh	r2, [r3, #0]
        xSemaphoreGive(CurrentAngleMutex);
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <Task_ReadEncoder+0x3c>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	2300      	movs	r3, #0
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	f003 f9dc 	bl	80045cc <xQueueGenericSend>
        vTaskDelay(100); // đọc mỗi 100ms
 8001214:	2064      	movs	r0, #100	@ 0x64
 8001216:	f003 fe9b 	bl	8004f50 <vTaskDelay>
    	xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 800121a:	bf00      	nop
 800121c:	e7e6      	b.n	80011ec <Task_ReadEncoder+0x8>
 800121e:	bf00      	nop
 8001220:	20000458 	.word	0x20000458
 8001224:	20000394 	.word	0x20000394
 8001228:	2000044c 	.word	0x2000044c

0800122c <Task_ToggleLED>:
    }
}

void Task_ToggleLED(void *argument){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001234:	2104      	movs	r1, #4
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <Task_ToggleLED+0x20>)
 8001238:	f001 fb52 	bl	80028e0 <HAL_GPIO_TogglePin>
		vTaskDelay(debug);
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <Task_ToggleLED+0x24>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fe85 	bl	8004f50 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001246:	bf00      	nop
 8001248:	e7f4      	b.n	8001234 <Task_ToggleLED+0x8>
 800124a:	bf00      	nop
 800124c:	40010c00 	.word	0x40010c00
 8001250:	20000448 	.word	0x20000448

08001254 <Task_SendMessage>:
	}
}

void Task_SendMessage(void *argument)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <Task_SendMessage+0x50>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fab3 	bl	80047d0 <xQueueSemaphoreTake>
		TxData[7] = position/257;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <Task_SendMessage+0x54>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <Task_SendMessage+0x58>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	b29b      	uxth	r3, r3
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <Task_SendMessage+0x5c>)
 800127c:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <Task_SendMessage+0x60>)
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <Task_SendMessage+0x5c>)
 8001282:	490d      	ldr	r1, [pc, #52]	@ (80012b8 <Task_SendMessage+0x64>)
 8001284:	480d      	ldr	r0, [pc, #52]	@ (80012bc <Task_SendMessage+0x68>)
 8001286:	f000 fc77 	bl	8001b78 <HAL_CAN_AddTxMessage>
		xSemaphoreGive(CurrentAngleMutex);
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <Task_SendMessage+0x50>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	f003 f99a 	bl	80045cc <xQueueGenericSend>
		vTaskDelay(200);
 8001298:	20c8      	movs	r0, #200	@ 0xc8
 800129a:	f003 fe59 	bl	8004f50 <vTaskDelay>
		xSemaphoreTake(CurrentAngleMutex, portMAX_DELAY);
 800129e:	bf00      	nop
 80012a0:	e7dc      	b.n	800125c <Task_SendMessage+0x8>
 80012a2:	bf00      	nop
 80012a4:	20000458 	.word	0x20000458
 80012a8:	2000044c 	.word	0x2000044c
 80012ac:	ff00ff01 	.word	0xff00ff01
 80012b0:	20000000 	.word	0x20000000
 80012b4:	200003f4 	.word	0x200003f4
 80012b8:	200003dc 	.word	0x200003dc
 80012bc:	20000324 	.word	0x20000324

080012c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012d2:	f000 fa2d 	bl	8001730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40012c00 	.word	0x40012c00

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <Error_Handler+0x8>

080012f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_MspInit+0x68>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <HAL_MspInit+0x68>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_MspInit+0x68>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_MspInit+0x68>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a11      	ldr	r2, [pc, #68]	@ (8001358 <HAL_MspInit+0x68>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <HAL_MspInit+0x68>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	210f      	movs	r1, #15
 800132a:	f06f 0001 	mvn.w	r0, #1
 800132e:	f001 f910 	bl	8002552 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <HAL_MspInit+0x6c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4a04      	ldr	r2, [pc, #16]	@ (800135c <HAL_MspInit+0x6c>)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000

08001360 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <HAL_CAN_MspInit+0xc0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d14b      	bne.n	8001418 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001380:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_CAN_MspInit+0xc4>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <HAL_CAN_MspInit+0xc4>)
 8001386:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800138a:	61d3      	str	r3, [r2, #28]
 800138c:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <HAL_CAN_MspInit+0xc4>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <HAL_CAN_MspInit+0xc4>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <HAL_CAN_MspInit+0xc4>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <HAL_CAN_MspInit+0xc4>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4818      	ldr	r0, [pc, #96]	@ (8001428 <HAL_CAN_MspInit+0xc8>)
 80013c6:	f001 f8ef 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4812      	ldr	r0, [pc, #72]	@ (8001428 <HAL_CAN_MspInit+0xc8>)
 80013e0:	f001 f8e2 	bl	80025a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_CAN_MspInit+0xcc>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <HAL_CAN_MspInit+0xcc>)
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2105      	movs	r1, #5
 800140c:	2015      	movs	r0, #21
 800140e:	f001 f8a0 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001412:	2015      	movs	r0, #21
 8001414:	f001 f8b9 	bl	800258a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	@ 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40006400 	.word	0x40006400
 8001424:	40021000 	.word	0x40021000
 8001428:	40010c00 	.word	0x40010c00
 800142c:	40010000 	.word	0x40010000

08001430 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001440:	d10b      	bne.n	800145a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_TIM_Base_MspInit+0x34>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_TIM_Base_MspInit+0x34>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_TIM_Base_MspInit+0x34>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1e      	ldr	r2, [pc, #120]	@ (80014fc <HAL_TIM_Encoder_MspInit+0x94>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d135      	bne.n	80014f4 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <HAL_TIM_Encoder_MspInit+0x98>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <HAL_TIM_Encoder_MspInit+0x98>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	61d3      	str	r3, [r2, #28]
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HAL_TIM_Encoder_MspInit+0x98>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <HAL_TIM_Encoder_MspInit+0x98>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a16      	ldr	r2, [pc, #88]	@ (8001500 <HAL_TIM_Encoder_MspInit+0x98>)
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_TIM_Encoder_MspInit+0x98>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014b8:	2330      	movs	r3, #48	@ 0x30
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	480e      	ldr	r0, [pc, #56]	@ (8001504 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014cc:	f001 f86c 	bl	80025a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <HAL_TIM_Encoder_MspInit+0xa0>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ee:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <HAL_TIM_Encoder_MspInit+0xa0>)
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	@ 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40000400 	.word	0x40000400
 8001500:	40021000 	.word	0x40021000
 8001504:	40010c00 	.word	0x40010c00
 8001508:	40010000 	.word	0x40010000

0800150c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800152a:	d117      	bne.n	800155c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <HAL_TIM_MspPostInit+0x58>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a0c      	ldr	r2, [pc, #48]	@ (8001564 <HAL_TIM_MspPostInit+0x58>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <HAL_TIM_MspPostInit+0x58>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2302      	movs	r3, #2
 800154e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	4804      	ldr	r0, [pc, #16]	@ (8001568 <HAL_TIM_MspPostInit+0x5c>)
 8001558:	f001 f826 	bl	80025a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	40010800 	.word	0x40010800

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <HAL_InitTick+0xd0>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a2d      	ldr	r2, [pc, #180]	@ (800163c <HAL_InitTick+0xd0>)
 8001588:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_InitTick+0xd0>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159a:	f107 020c 	add.w	r2, r7, #12
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 fd93 	bl	80030d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015aa:	f001 fd7d 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 80015ae:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b2:	4a23      	ldr	r2, [pc, #140]	@ (8001640 <HAL_InitTick+0xd4>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	0c9b      	lsrs	r3, r3, #18
 80015ba:	3b01      	subs	r3, #1
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <HAL_InitTick+0xd8>)
 80015c0:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <HAL_InitTick+0xdc>)
 80015c2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <HAL_InitTick+0xd8>)
 80015c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ca:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001644 <HAL_InitTick+0xd8>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <HAL_InitTick+0xd8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <HAL_InitTick+0xd8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_InitTick+0xd8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015e4:	4817      	ldr	r0, [pc, #92]	@ (8001644 <HAL_InitTick+0xd8>)
 80015e6:	f001 fdc1 	bl	800316c <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11b      	bne.n	8001630 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015f8:	4812      	ldr	r0, [pc, #72]	@ (8001644 <HAL_InitTick+0xd8>)
 80015fa:	f001 fe07 	bl	800320c <HAL_TIM_Base_Start_IT>
 80015fe:	4603      	mov	r3, r0
 8001600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800160c:	2019      	movs	r0, #25
 800160e:	f000 ffbc 	bl	800258a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d808      	bhi.n	800162a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	2019      	movs	r0, #25
 800161e:	f000 ff98 	bl	8002552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_InitTick+0xe0>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e002      	b.n	8001630 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001630:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001634:	4618      	mov	r0, r3
 8001636:	3730      	adds	r7, #48	@ 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	431bde83 	.word	0x431bde83
 8001644:	2000046c 	.word	0x2000046c
 8001648:	40012c00 	.word	0x40012c00
 800164c:	2000000c 	.word	0x2000000c

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <NMI_Handler+0x4>

08001658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <UsageFault_Handler+0x4>

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <CAN1_RX1_IRQHandler+0x10>)
 800168a:	f000 fc8a 	bl	8001fa2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000324 	.word	0x20000324

08001698 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <TIM1_UP_IRQHandler+0x10>)
 800169e:	f002 f831 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000046c 	.word	0x2000046c

080016ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <Reset_Handler>:
 80016b8:	f7ff fff8 	bl	80016ac <SystemInit>
 80016bc:	480b      	ldr	r0, [pc, #44]	@ (80016ec <LoopFillZerobss+0xe>)
 80016be:	490c      	ldr	r1, [pc, #48]	@ (80016f0 <LoopFillZerobss+0x12>)
 80016c0:	4a0c      	ldr	r2, [pc, #48]	@ (80016f4 <LoopFillZerobss+0x16>)
 80016c2:	2300      	movs	r3, #0
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:
 80016c6:	58d4      	ldr	r4, [r2, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:
 80016cc:	18c4      	adds	r4, r0, r3
 80016ce:	428c      	cmp	r4, r1
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
 80016d2:	4a09      	ldr	r2, [pc, #36]	@ (80016f8 <LoopFillZerobss+0x1a>)
 80016d4:	4c09      	ldr	r4, [pc, #36]	@ (80016fc <LoopFillZerobss+0x1e>)
 80016d6:	2300      	movs	r3, #0
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:
 80016de:	42a2      	cmp	r2, r4
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>
 80016e2:	f004 feb7 	bl	8006454 <__libc_init_array>
 80016e6:	f7ff fa25 	bl	8000b34 <main>
 80016ea:	4770      	bx	lr
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000068 	.word	0x20000068
 80016f4:	080065ec 	.word	0x080065ec
 80016f8:	20000068 	.word	0x20000068
 80016fc:	2000134c 	.word	0x2000134c

08001700 <ADC1_2_IRQHandler>:
 8001700:	e7fe      	b.n	8001700 <ADC1_2_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <HAL_Init+0x28>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a07      	ldr	r2, [pc, #28]	@ (800172c <HAL_Init+0x28>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 ff11 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	200f      	movs	r0, #15
 800171c:	f7ff ff26 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff fde6 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <HAL_IncTick+0x1c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_IncTick+0x20>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a03      	ldr	r2, [pc, #12]	@ (8001750 <HAL_IncTick+0x20>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000010 	.word	0x20000010
 8001750:	200004b4 	.word	0x200004b4

08001754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b02      	ldr	r3, [pc, #8]	@ (8001764 <HAL_GetTick+0x10>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	200004b4 	.word	0x200004b4

08001768 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0ed      	b.n	8001956 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fdea 	bl	8001360 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800179c:	f7ff ffda 	bl	8001754 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017a2:	e012      	b.n	80017ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a4:	f7ff ffd6 	bl	8001754 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	d90b      	bls.n	80017ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2205      	movs	r2, #5
 80017c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0c5      	b.n	8001956 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0e5      	beq.n	80017a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0202 	bic.w	r2, r2, #2
 80017e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e8:	f7ff ffb4 	bl	8001754 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ee:	e012      	b.n	8001816 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017f0:	f7ff ffb0 	bl	8001754 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b0a      	cmp	r3, #10
 80017fc:	d90b      	bls.n	8001816 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2205      	movs	r2, #5
 800180e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e09f      	b.n	8001956 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e5      	bne.n	80017f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7e1b      	ldrb	r3, [r3, #24]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d108      	bne.n	800183e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e007      	b.n	800184e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7e5b      	ldrb	r3, [r3, #25]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e007      	b.n	8001878 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001876:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7e9b      	ldrb	r3, [r3, #26]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d108      	bne.n	8001892 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0220 	orr.w	r2, r2, #32
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	e007      	b.n	80018a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0220 	bic.w	r2, r2, #32
 80018a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7edb      	ldrb	r3, [r3, #27]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d108      	bne.n	80018bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0210 	bic.w	r2, r2, #16
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e007      	b.n	80018cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0210 	orr.w	r2, r2, #16
 80018ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7f1b      	ldrb	r3, [r3, #28]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d108      	bne.n	80018e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0208 	orr.w	r2, r2, #8
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e007      	b.n	80018f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0208 	bic.w	r2, r2, #8
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7f5b      	ldrb	r3, [r3, #29]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d108      	bne.n	8001910 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0204 	orr.w	r2, r2, #4
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e007      	b.n	8001920 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0204 	bic.w	r2, r2, #4
 800191e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	ea42 0103 	orr.w	r1, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	1e5a      	subs	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800195e:	b480      	push	{r7}
 8001960:	b087      	sub	sp, #28
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001974:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001976:	7cfb      	ldrb	r3, [r7, #19]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d003      	beq.n	8001984 <HAL_CAN_ConfigFilter+0x26>
 800197c:	7cfb      	ldrb	r3, [r7, #19]
 800197e:	2b02      	cmp	r3, #2
 8001980:	f040 80aa 	bne.w	8001ad8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f003 031f 	and.w	r3, r3, #31
 800199c:	2201      	movs	r2, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d123      	bne.n	8001a06 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	401a      	ands	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3248      	adds	r2, #72	@ 0x48
 80019e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019fc:	6979      	ldr	r1, [r7, #20]
 80019fe:	3348      	adds	r3, #72	@ 0x48
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d122      	bne.n	8001a54 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3248      	adds	r2, #72	@ 0x48
 8001a34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a4a:	6979      	ldr	r1, [r7, #20]
 8001a4c:	3348      	adds	r3, #72	@ 0x48
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001a6e:	e007      	b.n	8001a80 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001a9a:	e007      	b.n	8001aac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001aca:	f023 0201 	bic.w	r2, r3, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e006      	b.n	8001ae6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
  }
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d12e      	bne.n	8001b62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff fe1a 	bl	8001754 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b22:	e012      	b.n	8001b4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b24:	f7ff fe16 	bl	8001754 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d90b      	bls.n	8001b4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2205      	movs	r2, #5
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e012      	b.n	8001b70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e5      	bne.n	8001b24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e006      	b.n	8001b70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b66:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	@ 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d003      	beq.n	8001ba4 <HAL_CAN_AddTxMessage+0x2c>
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	f040 80ad 	bne.w	8001cfe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8095 	beq.w	8001cee <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	0e1b      	lsrs	r3, r3, #24
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	6809      	ldr	r1, [r1, #0]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3318      	adds	r3, #24
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	440b      	add	r3, r1
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e00f      	b.n	8001c1c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c06:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c10:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3318      	adds	r3, #24
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	440b      	add	r3, r1
 8001c1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3318      	adds	r3, #24
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	7d1b      	ldrb	r3, [r3, #20]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d111      	bne.n	8001c5c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3318      	adds	r3, #24
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6811      	ldr	r1, [r2, #0]
 8001c4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3318      	adds	r3, #24
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	440b      	add	r3, r1
 8001c58:	3304      	adds	r3, #4
 8001c5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3307      	adds	r3, #7
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	061a      	lsls	r2, r3, #24
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3306      	adds	r3, #6
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3305      	adds	r3, #5
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	4313      	orrs	r3, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	3204      	adds	r2, #4
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	4610      	mov	r0, r2
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	6811      	ldr	r1, [r2, #0]
 8001c84:	ea43 0200 	orr.w	r2, r3, r0
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	440b      	add	r3, r1
 8001c8e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3303      	adds	r3, #3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	061a      	lsls	r2, r3, #24
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	041b      	lsls	r3, r3, #16
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	6811      	ldr	r1, [r2, #0]
 8001cba:	ea43 0200 	orr.w	r2, r3, r0
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3318      	adds	r3, #24
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	6811      	ldr	r1, [r2, #0]
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3318      	adds	r3, #24
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	440b      	add	r3, r1
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e00e      	b.n	8001d0c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e006      	b.n	8001d0c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3724      	adds	r7, #36	@ 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d16:	b480      	push	{r7}
 8001d18:	b087      	sub	sp, #28
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d003      	beq.n	8001d3a <HAL_CAN_GetRxMessage+0x24>
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	f040 8103 	bne.w	8001f40 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10e      	bne.n	8001d5e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d116      	bne.n	8001d7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0f7      	b.n	8001f4e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0e8      	b.n	8001f4e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	331b      	adds	r3, #27
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0204 	and.w	r2, r3, #4
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	331b      	adds	r3, #27
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0d5b      	lsrs	r3, r3, #21
 8001daa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	331b      	adds	r3, #27
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	331b      	adds	r3, #27
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0202 	and.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	331b      	adds	r3, #27
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	e00b      	b.n	8001e1a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	331b      	adds	r3, #27
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3304      	adds	r3, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	331b      	adds	r3, #27
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	331b      	adds	r3, #27
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0a1a      	lsrs	r2, r3, #8
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0c1a      	lsrs	r2, r3, #16
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	3302      	adds	r3, #2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e1a      	lsrs	r2, r3, #24
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0a1a      	lsrs	r2, r3, #8
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3305      	adds	r3, #5
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0c1a      	lsrs	r2, r3, #16
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0e1a      	lsrs	r2, r3, #24
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	3307      	adds	r3, #7
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d108      	bne.n	8001f2c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0220 	orr.w	r2, r2, #32
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e007      	b.n	8001f3c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0220 	orr.w	r2, r2, #32
 8001f3a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e006      	b.n	8001f4e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f68:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d002      	beq.n	8001f76 <HAL_CAN_ActivateNotification+0x1e>
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d109      	bne.n	8001f8a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6959      	ldr	r1, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e006      	b.n	8001f98 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b08a      	sub	sp, #40	@ 0x28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d07c      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d023      	beq.n	800203a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f983 	bl	8002310 <HAL_CAN_TxMailbox0CompleteCallback>
 800200a:	e016      	b.n	800203a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
 800201e:	e00c      	b.n	800203a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d004      	beq.n	8002034 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
 8002032:	e002      	b.n	800203a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f986 	bl	8002346 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d024      	beq.n	800208e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800204c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f962 	bl	8002322 <HAL_CAN_TxMailbox1CompleteCallback>
 800205e:	e016      	b.n	800208e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
 8002072:	e00c      	b.n	800208e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
 8002086:	e002      	b.n	800208e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f965 	bl	8002358 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d024      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f941 	bl	8002334 <HAL_CAN_TxMailbox2CompleteCallback>
 80020b2:	e016      	b.n	80020e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c6:	e00c      	b.n	80020e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d004      	beq.n	80020dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020da:	e002      	b.n	80020e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f944 	bl	800236a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00c      	beq.n	8002106 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2210      	movs	r2, #16
 8002104:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2208      	movs	r2, #8
 8002120:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f933 	bl	800238e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f91b 	bl	800237c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00c      	beq.n	800216a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2210      	movs	r2, #16
 8002168:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2208      	movs	r2, #8
 8002184:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f90a 	bl	80023a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7fe fcad 	bl	8000b04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2210      	movs	r2, #16
 80021c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8f3 	bl	80023b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2208      	movs	r2, #8
 80021e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f8eb 	bl	80023c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d07b      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d072      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800225c:	2b00      	cmp	r3, #0
 800225e:	d043      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03e      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002270:	2b60      	cmp	r3, #96	@ 0x60
 8002272:	d02b      	beq.n	80022cc <HAL_CAN_IRQHandler+0x32a>
 8002274:	2b60      	cmp	r3, #96	@ 0x60
 8002276:	d82e      	bhi.n	80022d6 <HAL_CAN_IRQHandler+0x334>
 8002278:	2b50      	cmp	r3, #80	@ 0x50
 800227a:	d022      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x320>
 800227c:	2b50      	cmp	r3, #80	@ 0x50
 800227e:	d82a      	bhi.n	80022d6 <HAL_CAN_IRQHandler+0x334>
 8002280:	2b40      	cmp	r3, #64	@ 0x40
 8002282:	d019      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x316>
 8002284:	2b40      	cmp	r3, #64	@ 0x40
 8002286:	d826      	bhi.n	80022d6 <HAL_CAN_IRQHandler+0x334>
 8002288:	2b30      	cmp	r3, #48	@ 0x30
 800228a:	d010      	beq.n	80022ae <HAL_CAN_IRQHandler+0x30c>
 800228c:	2b30      	cmp	r3, #48	@ 0x30
 800228e:	d822      	bhi.n	80022d6 <HAL_CAN_IRQHandler+0x334>
 8002290:	2b10      	cmp	r3, #16
 8002292:	d002      	beq.n	800229a <HAL_CAN_IRQHandler+0x2f8>
 8002294:	2b20      	cmp	r3, #32
 8002296:	d005      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002298:	e01d      	b.n	80022d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022a2:	e019      	b.n	80022d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	f043 0310 	orr.w	r3, r3, #16
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022ac:	e014      	b.n	80022d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022b6:	e00f      	b.n	80022d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022c0:	e00a      	b.n	80022d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022ca:	e005      	b.n	80022d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022d4:	e000      	b.n	80022d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80022d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80022e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2204      	movs	r2, #4
 80022ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f867 	bl	80023d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	@ 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	@ (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4906      	ldr	r1, [pc, #24]	@ (8002480 <__NVIC_EnableIRQ+0x34>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	@ (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	@ 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff4f 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff64 	bl	8002430 <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ffb2 	bl	80024d8 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff81 	bl	8002484 <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff57 	bl	800244c <__NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b08b      	sub	sp, #44	@ 0x2c
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ba:	e169      	b.n	8002890 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025bc:	2201      	movs	r2, #1
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	f040 8158 	bne.w	800288a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4a9a      	ldr	r2, [pc, #616]	@ (8002848 <HAL_GPIO_Init+0x2a0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d05e      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 80025e4:	4a98      	ldr	r2, [pc, #608]	@ (8002848 <HAL_GPIO_Init+0x2a0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d875      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 80025ea:	4a98      	ldr	r2, [pc, #608]	@ (800284c <HAL_GPIO_Init+0x2a4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d058      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 80025f0:	4a96      	ldr	r2, [pc, #600]	@ (800284c <HAL_GPIO_Init+0x2a4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d86f      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 80025f6:	4a96      	ldr	r2, [pc, #600]	@ (8002850 <HAL_GPIO_Init+0x2a8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d052      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 80025fc:	4a94      	ldr	r2, [pc, #592]	@ (8002850 <HAL_GPIO_Init+0x2a8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d869      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 8002602:	4a94      	ldr	r2, [pc, #592]	@ (8002854 <HAL_GPIO_Init+0x2ac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d04c      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 8002608:	4a92      	ldr	r2, [pc, #584]	@ (8002854 <HAL_GPIO_Init+0x2ac>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d863      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 800260e:	4a92      	ldr	r2, [pc, #584]	@ (8002858 <HAL_GPIO_Init+0x2b0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d046      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 8002614:	4a90      	ldr	r2, [pc, #576]	@ (8002858 <HAL_GPIO_Init+0x2b0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d85d      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 800261a:	2b12      	cmp	r3, #18
 800261c:	d82a      	bhi.n	8002674 <HAL_GPIO_Init+0xcc>
 800261e:	2b12      	cmp	r3, #18
 8002620:	d859      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 8002622:	a201      	add	r2, pc, #4	@ (adr r2, 8002628 <HAL_GPIO_Init+0x80>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	080026a3 	.word	0x080026a3
 800262c:	0800267d 	.word	0x0800267d
 8002630:	0800268f 	.word	0x0800268f
 8002634:	080026d1 	.word	0x080026d1
 8002638:	080026d7 	.word	0x080026d7
 800263c:	080026d7 	.word	0x080026d7
 8002640:	080026d7 	.word	0x080026d7
 8002644:	080026d7 	.word	0x080026d7
 8002648:	080026d7 	.word	0x080026d7
 800264c:	080026d7 	.word	0x080026d7
 8002650:	080026d7 	.word	0x080026d7
 8002654:	080026d7 	.word	0x080026d7
 8002658:	080026d7 	.word	0x080026d7
 800265c:	080026d7 	.word	0x080026d7
 8002660:	080026d7 	.word	0x080026d7
 8002664:	080026d7 	.word	0x080026d7
 8002668:	080026d7 	.word	0x080026d7
 800266c:	08002685 	.word	0x08002685
 8002670:	08002699 	.word	0x08002699
 8002674:	4a79      	ldr	r2, [pc, #484]	@ (800285c <HAL_GPIO_Init+0x2b4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800267a:	e02c      	b.n	80026d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	623b      	str	r3, [r7, #32]
          break;
 8002682:	e029      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	3304      	adds	r3, #4
 800268a:	623b      	str	r3, [r7, #32]
          break;
 800268c:	e024      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	3308      	adds	r3, #8
 8002694:	623b      	str	r3, [r7, #32]
          break;
 8002696:	e01f      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	330c      	adds	r3, #12
 800269e:	623b      	str	r3, [r7, #32]
          break;
 80026a0:	e01a      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026aa:	2304      	movs	r3, #4
 80026ac:	623b      	str	r3, [r7, #32]
          break;
 80026ae:	e013      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b8:	2308      	movs	r3, #8
 80026ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	611a      	str	r2, [r3, #16]
          break;
 80026c2:	e009      	b.n	80026d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c4:	2308      	movs	r3, #8
 80026c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	615a      	str	r2, [r3, #20]
          break;
 80026ce:	e003      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
          break;
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          break;
 80026d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2bff      	cmp	r3, #255	@ 0xff
 80026dc:	d801      	bhi.n	80026e2 <HAL_GPIO_Init+0x13a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	e001      	b.n	80026e6 <HAL_GPIO_Init+0x13e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2bff      	cmp	r3, #255	@ 0xff
 80026ec:	d802      	bhi.n	80026f4 <HAL_GPIO_Init+0x14c>
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	e002      	b.n	80026fa <HAL_GPIO_Init+0x152>
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	3b08      	subs	r3, #8
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	210f      	movs	r1, #15
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	401a      	ands	r2, r3
 800270c:	6a39      	ldr	r1, [r7, #32]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	431a      	orrs	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80b1 	beq.w	800288a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002728:	4b4d      	ldr	r3, [pc, #308]	@ (8002860 <HAL_GPIO_Init+0x2b8>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a4c      	ldr	r2, [pc, #304]	@ (8002860 <HAL_GPIO_Init+0x2b8>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_GPIO_Init+0x2b8>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002740:	4a48      	ldr	r2, [pc, #288]	@ (8002864 <HAL_GPIO_Init+0x2bc>)
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a40      	ldr	r2, [pc, #256]	@ (8002868 <HAL_GPIO_Init+0x2c0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d013      	beq.n	8002794 <HAL_GPIO_Init+0x1ec>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3f      	ldr	r2, [pc, #252]	@ (800286c <HAL_GPIO_Init+0x2c4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00d      	beq.n	8002790 <HAL_GPIO_Init+0x1e8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3e      	ldr	r2, [pc, #248]	@ (8002870 <HAL_GPIO_Init+0x2c8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <HAL_GPIO_Init+0x1e4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a3d      	ldr	r2, [pc, #244]	@ (8002874 <HAL_GPIO_Init+0x2cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_GPIO_Init+0x1e0>
 8002784:	2303      	movs	r3, #3
 8002786:	e006      	b.n	8002796 <HAL_GPIO_Init+0x1ee>
 8002788:	2304      	movs	r3, #4
 800278a:	e004      	b.n	8002796 <HAL_GPIO_Init+0x1ee>
 800278c:	2302      	movs	r3, #2
 800278e:	e002      	b.n	8002796 <HAL_GPIO_Init+0x1ee>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_GPIO_Init+0x1ee>
 8002794:	2300      	movs	r3, #0
 8002796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002798:	f002 0203 	and.w	r2, r2, #3
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	4093      	lsls	r3, r2
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027a6:	492f      	ldr	r1, [pc, #188]	@ (8002864 <HAL_GPIO_Init+0x2bc>)
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	492c      	ldr	r1, [pc, #176]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4928      	ldr	r1, [pc, #160]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 80027d8:	4013      	ands	r3, r2
 80027da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027e8:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	4922      	ldr	r1, [pc, #136]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	491e      	ldr	r1, [pc, #120]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 8002800:	4013      	ands	r3, r2
 8002802:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4918      	ldr	r1, [pc, #96]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800281e:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	4914      	ldr	r1, [pc, #80]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d021      	beq.n	800287c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002838:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	490e      	ldr	r1, [pc, #56]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
 8002844:	e021      	b.n	800288a <HAL_GPIO_Init+0x2e2>
 8002846:	bf00      	nop
 8002848:	10320000 	.word	0x10320000
 800284c:	10310000 	.word	0x10310000
 8002850:	10220000 	.word	0x10220000
 8002854:	10210000 	.word	0x10210000
 8002858:	10120000 	.word	0x10120000
 800285c:	10110000 	.word	0x10110000
 8002860:	40021000 	.word	0x40021000
 8002864:	40010000 	.word	0x40010000
 8002868:	40010800 	.word	0x40010800
 800286c:	40010c00 	.word	0x40010c00
 8002870:	40011000 	.word	0x40011000
 8002874:	40011400 	.word	0x40011400
 8002878:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_GPIO_Init+0x304>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	43db      	mvns	r3, r3
 8002884:	4909      	ldr	r1, [pc, #36]	@ (80028ac <HAL_GPIO_Init+0x304>)
 8002886:	4013      	ands	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	3301      	adds	r3, #1
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	f47f ae8e 	bne.w	80025bc <HAL_GPIO_Init+0x14>
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	372c      	adds	r7, #44	@ 0x2c
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	041a      	lsls	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43d9      	mvns	r1, r3
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	400b      	ands	r3, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e272      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8087 	beq.w	8002a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002934:	4b92      	ldr	r3, [pc, #584]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b04      	cmp	r3, #4
 800293e:	d00c      	beq.n	800295a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002940:	4b8f      	ldr	r3, [pc, #572]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d112      	bne.n	8002972 <HAL_RCC_OscConfig+0x5e>
 800294c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002958:	d10b      	bne.n	8002972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295a:	4b89      	ldr	r3, [pc, #548]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d06c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x12c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d168      	bne.n	8002a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e24c      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x76>
 800297c:	4b80      	ldr	r3, [pc, #512]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a7f      	ldr	r2, [pc, #508]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	e02e      	b.n	80029e8 <HAL_RCC_OscConfig+0xd4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x98>
 8002992:	4b7b      	ldr	r3, [pc, #492]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7a      	ldr	r2, [pc, #488]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b78      	ldr	r3, [pc, #480]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a77      	ldr	r2, [pc, #476]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e01d      	b.n	80029e8 <HAL_RCC_OscConfig+0xd4>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0xbc>
 80029b6:	4b72      	ldr	r3, [pc, #456]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a71      	ldr	r2, [pc, #452]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0xd4>
 80029d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b68      	ldr	r3, [pc, #416]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a67      	ldr	r2, [pc, #412]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe feb0 	bl	8001754 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe feac 	bl	8001754 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	@ 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e200      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0xe4>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe fe9c 	bl	8001754 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fe98 	bl	8001754 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1ec      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x10c>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d063      	beq.n	8002b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a5a:	4b49      	ldr	r3, [pc, #292]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d11c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x18c>
 8002a66:	4b46      	ldr	r3, [pc, #280]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d116      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a72:	4b43      	ldr	r3, [pc, #268]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x176>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e1c0      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4939      	ldr	r1, [pc, #228]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	e03a      	b.n	8002b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa8:	4b36      	ldr	r3, [pc, #216]	@ (8002b84 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fe51 	bl	8001754 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fe4d 	bl	8001754 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e1a1      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4927      	ldr	r1, [pc, #156]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aea:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <HAL_RCC_OscConfig+0x270>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fe30 	bl	8001754 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe fe2c 	bl	8001754 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e180      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d03a      	beq.n	8002b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d019      	beq.n	8002b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2a:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b30:	f7fe fe10 	bl	8001754 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b38:	f7fe fe0c 	bl	8001754 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e160      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b56:	2001      	movs	r0, #1
 8002b58:	f000 faea 	bl	8003130 <RCC_Delay>
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7fe fdf6 	bl	8001754 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6a:	e00f      	b.n	8002b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fdf2 	bl	8001754 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d908      	bls.n	8002b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e146      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	42420000 	.word	0x42420000
 8002b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	4b92      	ldr	r3, [pc, #584]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e9      	bne.n	8002b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80a6 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002baa:	4b8b      	ldr	r3, [pc, #556]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	4b88      	ldr	r3, [pc, #544]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4a87      	ldr	r2, [pc, #540]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	61d3      	str	r3, [r2, #28]
 8002bc2:	4b85      	ldr	r3, [pc, #532]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b82      	ldr	r3, [pc, #520]	@ (8002ddc <HAL_RCC_OscConfig+0x4c8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d118      	bne.n	8002c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	4b7f      	ldr	r3, [pc, #508]	@ (8002ddc <HAL_RCC_OscConfig+0x4c8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7e      	ldr	r2, [pc, #504]	@ (8002ddc <HAL_RCC_OscConfig+0x4c8>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7fe fdb3 	bl	8001754 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf2:	f7fe fdaf 	bl	8001754 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b64      	cmp	r3, #100	@ 0x64
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e103      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <HAL_RCC_OscConfig+0x4c8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x312>
 8002c18:	4b6f      	ldr	r3, [pc, #444]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6213      	str	r3, [r2, #32]
 8002c24:	e02d      	b.n	8002c82 <HAL_RCC_OscConfig+0x36e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x334>
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a69      	ldr	r2, [pc, #420]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6213      	str	r3, [r2, #32]
 8002c3a:	4b67      	ldr	r3, [pc, #412]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4a66      	ldr	r2, [pc, #408]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6213      	str	r3, [r2, #32]
 8002c46:	e01c      	b.n	8002c82 <HAL_RCC_OscConfig+0x36e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x356>
 8002c50:	4b61      	ldr	r3, [pc, #388]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4a60      	ldr	r2, [pc, #384]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6213      	str	r3, [r2, #32]
 8002c5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6213      	str	r3, [r2, #32]
 8002c68:	e00b      	b.n	8002c82 <HAL_RCC_OscConfig+0x36e>
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6213      	str	r3, [r2, #32]
 8002c76:	4b58      	ldr	r3, [pc, #352]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a57      	ldr	r2, [pc, #348]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fd63 	bl	8001754 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fd5f 	bl	8001754 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0b1      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ee      	beq.n	8002c92 <HAL_RCC_OscConfig+0x37e>
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fd4d 	bl	8001754 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fd49 	bl	8001754 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e09b      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	4b40      	ldr	r3, [pc, #256]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ee      	bne.n	8002cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d105      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4a3b      	ldr	r2, [pc, #236]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8087 	beq.w	8002e0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfc:	4b36      	ldr	r3, [pc, #216]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d061      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d146      	bne.n	8002d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d10:	4b33      	ldr	r3, [pc, #204]	@ (8002de0 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe fd1d 	bl	8001754 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe fd19 	bl	8001754 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e06d      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d30:	4b29      	ldr	r3, [pc, #164]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d44:	d108      	bne.n	8002d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d46:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4921      	ldr	r1, [pc, #132]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d58:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a19      	ldr	r1, [r3, #32]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	491b      	ldr	r1, [pc, #108]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fced 	bl	8001754 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe fce9 	bl	8001754 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e03d      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x46a>
 8002d9c:	e035      	b.n	8002e0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9e:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fcd6 	bl	8001754 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe fcd2 	bl	8001754 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e026      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x498>
 8002dca:	e01e      	b.n	8002e0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e019      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_OscConfig+0x500>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d106      	bne.n	8002e06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d001      	beq.n	8002e0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0d0      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d910      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b67      	ldr	r3, [pc, #412]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4965      	ldr	r1, [pc, #404]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b63      	ldr	r3, [pc, #396]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0b8      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e74:	4b59      	ldr	r3, [pc, #356]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a58      	ldr	r2, [pc, #352]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e8c:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a52      	ldr	r2, [pc, #328]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e98:	4b50      	ldr	r3, [pc, #320]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	494d      	ldr	r1, [pc, #308]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d040      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d115      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07f      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e073      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06b      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef6:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4936      	ldr	r1, [pc, #216]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f08:	f7fe fc24 	bl	8001754 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7fe fc20 	bl	8001754 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e053      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 020c 	and.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d1eb      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f38:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d210      	bcs.n	8002f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4922      	ldr	r1, [pc, #136]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e032      	b.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f74:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4916      	ldr	r1, [pc, #88]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f92:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	490e      	ldr	r1, [pc, #56]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fa6:	f000 f821 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	490a      	ldr	r1, [pc, #40]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	5ccb      	ldrb	r3, [r1, r3]
 8002fba:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbe:	4a09      	ldr	r2, [pc, #36]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8002fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fc2:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fad0 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	080065b8 	.word	0x080065b8
 8002fe4:	20000008 	.word	0x20000008
 8002fe8:	2000000c 	.word	0x2000000c

08002fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003006:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x94>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d002      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x30>
 8003016:	2b08      	cmp	r3, #8
 8003018:	d003      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0x36>
 800301a:	e027      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800301c:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x98>)
 800301e:	613b      	str	r3, [r7, #16]
      break;
 8003020:	e027      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	0c9b      	lsrs	r3, r3, #18
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a17      	ldr	r2, [pc, #92]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x9c>)
 800302c:	5cd3      	ldrb	r3, [r2, r3]
 800302e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d010      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800303a:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x94>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	0c5b      	lsrs	r3, r3, #17
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	4a11      	ldr	r2, [pc, #68]	@ (800308c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a0d      	ldr	r2, [pc, #52]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x98>)
 800304e:	fb03 f202 	mul.w	r2, r3, r2
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e004      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a0c      	ldr	r2, [pc, #48]	@ (8003090 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	613b      	str	r3, [r7, #16]
      break;
 800306a:	e002      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x98>)
 800306e:	613b      	str	r3, [r7, #16]
      break;
 8003070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003072:	693b      	ldr	r3, [r7, #16]
}
 8003074:	4618      	mov	r0, r3
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	007a1200 	.word	0x007a1200
 8003088:	080065d0 	.word	0x080065d0
 800308c:	080065e0 	.word	0x080065e0
 8003090:	003d0900 	.word	0x003d0900

08003094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b02      	ldr	r3, [pc, #8]	@ (80030a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	20000008 	.word	0x20000008

080030a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ac:	f7ff fff2 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	0adb      	lsrs	r3, r3, #11
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4903      	ldr	r1, [pc, #12]	@ (80030cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	080065c8 	.word	0x080065c8

080030d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	220f      	movs	r2, #15
 80030de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <HAL_RCC_GetClockConfig+0x58>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <HAL_RCC_GetClockConfig+0x58>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_RCC_GetClockConfig+0x58>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <HAL_RCC_GetClockConfig+0x58>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_RCC_GetClockConfig+0x5c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0207 	and.w	r2, r3, #7
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000
 800312c:	40022000 	.word	0x40022000

08003130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003138:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <RCC_Delay+0x34>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <RCC_Delay+0x38>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0a5b      	lsrs	r3, r3, #9
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800314c:	bf00      	nop
  }
  while (Delay --);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e5a      	subs	r2, r3, #1
 8003152:	60fa      	str	r2, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f9      	bne.n	800314c <RCC_Delay+0x1c>
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000008 	.word	0x20000008
 8003168:	10624dd3 	.word	0x10624dd3

0800316c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e041      	b.n	8003202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe f94c 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 fd48 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d001      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e03a      	b.n	800329a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a18      	ldr	r2, [pc, #96]	@ (80032a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x58>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324e:	d009      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x58>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x58>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <HAL_TIM_Base_Start_IT+0xa0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d111      	bne.n	8003288 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b06      	cmp	r3, #6
 8003274:	d010      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003286:	e007      	b.n	8003298 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800

080032b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e041      	b.n	8003346 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f839 	bl	800334e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f000 fca6 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_TIM_PWM_Start+0x24>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e022      	b.n	80033ca <HAL_TIM_PWM_Start+0x6a>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b04      	cmp	r3, #4
 8003388:	d109      	bne.n	800339e <HAL_TIM_PWM_Start+0x3e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e015      	b.n	80033ca <HAL_TIM_PWM_Start+0x6a>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d109      	bne.n	80033b8 <HAL_TIM_PWM_Start+0x58>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e008      	b.n	80033ca <HAL_TIM_PWM_Start+0x6a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e05e      	b.n	8003490 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_PWM_Start+0x82>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033e0:	e013      	b.n	800340a <HAL_TIM_PWM_Start+0xaa>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x92>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033f0:	e00b      	b.n	800340a <HAL_TIM_PWM_Start+0xaa>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0xa2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003400:	e003      	b.n	800340a <HAL_TIM_PWM_Start+0xaa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2201      	movs	r2, #1
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fea0 	bl	8004158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1e      	ldr	r2, [pc, #120]	@ (8003498 <HAL_TIM_PWM_Start+0x138>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d107      	bne.n	8003432 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a18      	ldr	r2, [pc, #96]	@ (8003498 <HAL_TIM_PWM_Start+0x138>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_TIM_PWM_Start+0xfa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003444:	d009      	beq.n	800345a <HAL_TIM_PWM_Start+0xfa>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a14      	ldr	r2, [pc, #80]	@ (800349c <HAL_TIM_PWM_Start+0x13c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_TIM_PWM_Start+0xfa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a12      	ldr	r2, [pc, #72]	@ (80034a0 <HAL_TIM_PWM_Start+0x140>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d111      	bne.n	800347e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b06      	cmp	r3, #6
 800346a:	d010      	beq.n	800348e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	e007      	b.n	800348e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800

080034a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e093      	b.n	80035e0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd ffcb 	bl	8001468 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f000 fba1 	bl	8003c40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	4313      	orrs	r3, r2
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003544:	f023 030c 	bic.w	r3, r3, #12
 8003548:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003550:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	4313      	orrs	r3, r2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	011a      	lsls	r2, r3, #4
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	4313      	orrs	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	4313      	orrs	r3, r2
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003600:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003608:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003610:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d110      	bne.n	800363a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d102      	bne.n	8003624 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800361e:	7b7b      	ldrb	r3, [r7, #13]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d001      	beq.n	8003628 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e069      	b.n	80036fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003638:	e031      	b.n	800369e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d110      	bne.n	8003662 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003646:	7b3b      	ldrb	r3, [r7, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e055      	b.n	80036fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003660:	e01d      	b.n	800369e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d108      	bne.n	800367a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003668:	7bbb      	ldrb	r3, [r7, #14]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800366e:	7b7b      	ldrb	r3, [r7, #13]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d102      	bne.n	800367a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003674:	7b3b      	ldrb	r3, [r7, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e03e      	b.n	80036fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_TIM_Encoder_Start+0xc4>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d008      	beq.n	80036bc <HAL_TIM_Encoder_Start+0xd4>
 80036aa:	e00f      	b.n	80036cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2201      	movs	r2, #1
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fd4f 	bl	8004158 <TIM_CCxChannelCmd>
      break;
 80036ba:	e016      	b.n	80036ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	2104      	movs	r1, #4
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fd47 	bl	8004158 <TIM_CCxChannelCmd>
      break;
 80036ca:	e00e      	b.n	80036ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fd3f 	bl	8004158 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2201      	movs	r2, #1
 80036e0:	2104      	movs	r1, #4
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fd38 	bl	8004158 <TIM_CCxChannelCmd>
      break;
 80036e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d020      	beq.n	8003768 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0202 	mvn.w	r2, #2
 8003738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa5a 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fa4d 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa5c 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0204 	mvn.w	r2, #4
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa34 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa27 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa36 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d020      	beq.n	8003800 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01b      	beq.n	8003800 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0208 	mvn.w	r2, #8
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2204      	movs	r2, #4
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa0e 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa01 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fa10 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d020      	beq.n	800384c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0210 	mvn.w	r2, #16
 800381c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2208      	movs	r2, #8
 8003822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9e8 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003838:	e005      	b.n	8003846 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f9db 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f9ea 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0201 	mvn.w	r2, #1
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fd28 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fced 	bl	800426e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9ba 	bl	8003c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0220 	mvn.w	r2, #32
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fcc0 	bl	800425c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038fe:	2302      	movs	r3, #2
 8003900:	e0ae      	b.n	8003a60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b0c      	cmp	r3, #12
 800390e:	f200 809f 	bhi.w	8003a50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003912:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	0800394d 	.word	0x0800394d
 800391c:	08003a51 	.word	0x08003a51
 8003920:	08003a51 	.word	0x08003a51
 8003924:	08003a51 	.word	0x08003a51
 8003928:	0800398d 	.word	0x0800398d
 800392c:	08003a51 	.word	0x08003a51
 8003930:	08003a51 	.word	0x08003a51
 8003934:	08003a51 	.word	0x08003a51
 8003938:	080039cf 	.word	0x080039cf
 800393c:	08003a51 	.word	0x08003a51
 8003940:	08003a51 	.word	0x08003a51
 8003944:	08003a51 	.word	0x08003a51
 8003948:	08003a0f 	.word	0x08003a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f9e2 	bl	8003d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0208 	orr.w	r2, r2, #8
 8003966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0204 	bic.w	r2, r2, #4
 8003976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6999      	ldr	r1, [r3, #24]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	619a      	str	r2, [r3, #24]
      break;
 800398a:	e064      	b.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fa28 	bl	8003de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6999      	ldr	r1, [r3, #24]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	021a      	lsls	r2, r3, #8
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	619a      	str	r2, [r3, #24]
      break;
 80039cc:	e043      	b.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fa71 	bl	8003ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0208 	orr.w	r2, r2, #8
 80039e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0204 	bic.w	r2, r2, #4
 80039f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69d9      	ldr	r1, [r3, #28]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	61da      	str	r2, [r3, #28]
      break;
 8003a0c:	e023      	b.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fabb 	bl	8003f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69d9      	ldr	r1, [r3, #28]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	61da      	str	r2, [r3, #28]
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
      break;
 8003a54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIM_ConfigClockSource+0x1c>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e0b4      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x186>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003abc:	d03e      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0xd4>
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac2:	f200 8087 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	f000 8086 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x172>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad2:	d87f      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b70      	cmp	r3, #112	@ 0x70
 8003ad6:	d01a      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0xa6>
 8003ad8:	2b70      	cmp	r3, #112	@ 0x70
 8003ada:	d87b      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b60      	cmp	r3, #96	@ 0x60
 8003ade:	d050      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ae0:	2b60      	cmp	r3, #96	@ 0x60
 8003ae2:	d877      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b50      	cmp	r3, #80	@ 0x50
 8003ae6:	d03c      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ae8:	2b50      	cmp	r3, #80	@ 0x50
 8003aea:	d873      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b40      	cmp	r3, #64	@ 0x40
 8003aee:	d058      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8003af0:	2b40      	cmp	r3, #64	@ 0x40
 8003af2:	d86f      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b30      	cmp	r3, #48	@ 0x30
 8003af6:	d064      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	2b30      	cmp	r3, #48	@ 0x30
 8003afa:	d86b      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d060      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d867      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d05c      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d05a      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b0c:	e062      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b1e:	f000 fafc 	bl	800411a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
      break;
 8003b3a:	e04f      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b4c:	f000 fae5 	bl	800411a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b5e:	609a      	str	r2, [r3, #8]
      break;
 8003b60:	e03c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 fa5c 	bl	800402c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2150      	movs	r1, #80	@ 0x50
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fab3 	bl	80040e6 <TIM_ITRx_SetConfig>
      break;
 8003b80:	e02c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 fa7a 	bl	8004088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2160      	movs	r1, #96	@ 0x60
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 faa3 	bl	80040e6 <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e01c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 fa3c 	bl	800402c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2140      	movs	r1, #64	@ 0x40
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fa93 	bl	80040e6 <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e00c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f000 fa8a 	bl	80040e6 <TIM_ITRx_SetConfig>
      break;
 8003bd2:	e003      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
	...

08003c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a2f      	ldr	r2, [pc, #188]	@ (8003d10 <TIM_Base_SetConfig+0xd0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5e:	d007      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a2c      	ldr	r2, [pc, #176]	@ (8003d14 <TIM_Base_SetConfig+0xd4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d18 <TIM_Base_SetConfig+0xd8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d108      	bne.n	8003c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <TIM_Base_SetConfig+0xd0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00b      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c90:	d007      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	@ (8003d14 <TIM_Base_SetConfig+0xd4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d18 <TIM_Base_SetConfig+0xd8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <TIM_Base_SetConfig+0xd0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d103      	bne.n	8003ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f023 0201 	bic.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	611a      	str	r2, [r3, #16]
  }
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800

08003d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 0201 	bic.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 0302 	bic.w	r3, r3, #2
 8003d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1c      	ldr	r2, [pc, #112]	@ (8003de4 <TIM_OC1_SetConfig+0xc8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10c      	bne.n	8003d92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0308 	bic.w	r3, r3, #8
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a13      	ldr	r2, [pc, #76]	@ (8003de4 <TIM_OC1_SetConfig+0xc8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d111      	bne.n	8003dbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	621a      	str	r2, [r3, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00

08003de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f023 0210 	bic.w	r2, r3, #16
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0320 	bic.w	r3, r3, #32
 8003e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb8 <TIM_OC2_SetConfig+0xd0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d10d      	bne.n	8003e64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a14      	ldr	r2, [pc, #80]	@ (8003eb8 <TIM_OC2_SetConfig+0xd0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d113      	bne.n	8003e94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	40012c00 	.word	0x40012c00

08003ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0303 	bic.w	r3, r3, #3
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <TIM_OC3_SetConfig+0xd0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10d      	bne.n	8003f36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a14      	ldr	r2, [pc, #80]	@ (8003f8c <TIM_OC3_SetConfig+0xd0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d113      	bne.n	8003f66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	621a      	str	r2, [r3, #32]
}
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40012c00 	.word	0x40012c00

08003f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	031b      	lsls	r3, r3, #12
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0f      	ldr	r2, [pc, #60]	@ (8004028 <TIM_OC4_SetConfig+0x98>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d109      	bne.n	8004004 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	40012c00 	.word	0x40012c00

0800402c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 030a 	bic.w	r3, r3, #10
 8004068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f023 0210 	bic.w	r2, r3, #16
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	031b      	lsls	r3, r3, #12
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	f043 0307 	orr.w	r3, r3, #7
 8004108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	609a      	str	r2, [r3, #8]
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800411a:	b480      	push	{r7}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004134:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	021a      	lsls	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	431a      	orrs	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4313      	orrs	r3, r2
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	609a      	str	r2, [r3, #8]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2201      	movs	r2, #1
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1a      	ldr	r2, [r3, #32]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	431a      	orrs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e046      	b.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a16      	ldr	r2, [pc, #88]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004204:	d009      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a12      	ldr	r2, [pc, #72]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a10      	ldr	r2, [pc, #64]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800

0800425c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f103 0208 	add.w	r2, r3, #8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004298:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f103 0208 	add.w	r2, r3, #8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f103 0208 	add.w	r2, r3, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004332:	d103      	bne.n	800433c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e00c      	b.n	8004356 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3308      	adds	r3, #8
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e002      	b.n	800434a <vListInsert+0x2e>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	d2f6      	bcs.n	8004344 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6892      	ldr	r2, [r2, #8]
 80043a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6852      	ldr	r2, [r2, #4]
 80043ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d103      	bne.n	80043c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
	...

080043e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800440c:	f001 fd0e 	bl	8005e2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	68f9      	ldr	r1, [r7, #12]
 800441a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	3b01      	subs	r3, #1
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	441a      	add	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	22ff      	movs	r2, #255	@ 0xff
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	22ff      	movs	r2, #255	@ 0xff
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d114      	bne.n	800448c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01a      	beq.n	80044a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3310      	adds	r3, #16
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fffc 	bl	800546c <xTaskRemoveFromEventList>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d012      	beq.n	80044a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <xQueueGenericReset+0xd0>)
 800447c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	e009      	b.n	80044a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3310      	adds	r3, #16
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fef5 	bl	8004280 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3324      	adds	r3, #36	@ 0x24
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fef0 	bl	8004280 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044a0:	f001 fcf4 	bl	8005e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044a4:	2301      	movs	r3, #1
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	@ 0x28
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <xQueueGenericCreate+0x2c>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	613b      	str	r3, [r7, #16]
}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3348      	adds	r3, #72	@ 0x48
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fd5e 	bl	8005fb0 <pvPortMalloc>
 80044f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d011      	beq.n	8004520 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3348      	adds	r3, #72	@ 0x48
 8004504:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800450e:	79fa      	ldrb	r2, [r7, #7]
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f805 	bl	800452a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004520:	69bb      	ldr	r3, [r7, #24]
	}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e002      	b.n	800454c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004558:	2101      	movs	r1, #1
 800455a:	69b8      	ldr	r0, [r7, #24]
 800455c:	f7ff ff40 	bl	80043e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00e      	beq.n	8004594 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004588:	2300      	movs	r3, #0
 800458a:	2200      	movs	r2, #0
 800458c:	2100      	movs	r1, #0
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f81c 	bl	80045cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045a6:	2301      	movs	r3, #1
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	461a      	mov	r2, r3
 80045b2:	6939      	ldr	r1, [r7, #16]
 80045b4:	6978      	ldr	r0, [r7, #20]
 80045b6:	f7ff ff7d 	bl	80044b4 <xQueueGenericCreate>
 80045ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff ffd3 	bl	8004568 <prvInitialiseMutex>

		return xNewQueue;
 80045c2:	68fb      	ldr	r3, [r7, #12]
	}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08e      	sub	sp, #56	@ 0x38
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045da:	2300      	movs	r3, #0
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <xQueueGenericSend+0x34>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045fa:	bf00      	nop
 80045fc:	bf00      	nop
 80045fe:	e7fd      	b.n	80045fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <xQueueGenericSend+0x42>
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <xQueueGenericSend+0x46>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <xQueueGenericSend+0x48>
 8004612:	2300      	movs	r3, #0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <xQueueGenericSend+0x64>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d103      	bne.n	800463e <xQueueGenericSend+0x72>
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <xQueueGenericSend+0x76>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <xQueueGenericSend+0x78>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <xQueueGenericSend+0x94>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	623b      	str	r3, [r7, #32]
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004660:	f001 f8ca 	bl	80057f8 <xTaskGetSchedulerState>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <xQueueGenericSend+0xa4>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <xQueueGenericSend+0xa8>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <xQueueGenericSend+0xaa>
 8004674:	2300      	movs	r3, #0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <xQueueGenericSend+0xc6>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	61fb      	str	r3, [r7, #28]
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	e7fd      	b.n	800468e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004692:	f001 fbcb 	bl	8005e2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <xQueueGenericSend+0xdc>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d129      	bne.n	80046fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ae:	f000 f9b6 	bl	8004a1e <prvCopyDataToQueue>
 80046b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046be:	3324      	adds	r3, #36	@ 0x24
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fed3 	bl	800546c <xTaskRemoveFromEventList>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046cc:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <xQueueGenericSend+0x200>)
 80046ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	e00a      	b.n	80046f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046e4:	4b39      	ldr	r3, [pc, #228]	@ (80047cc <xQueueGenericSend+0x200>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046f4:	f001 fbca 	bl	8005e8c <vPortExitCritical>
				return pdPASS;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e063      	b.n	80047c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004702:	f001 fbc3 	bl	8005e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004706:	2300      	movs	r3, #0
 8004708:	e05c      	b.n	80047c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	4618      	mov	r0, r3
 8004716:	f000 ff0d 	bl	8005534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800471a:	2301      	movs	r3, #1
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800471e:	f001 fbb5 	bl	8005e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004722:	f000 fcb5 	bl	8005090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004726:	f001 fb81 	bl	8005e2c <vPortEnterCritical>
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004730:	b25b      	sxtb	r3, r3
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004736:	d103      	bne.n	8004740 <xQueueGenericSend+0x174>
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004746:	b25b      	sxtb	r3, r3
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800474c:	d103      	bne.n	8004756 <xQueueGenericSend+0x18a>
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004756:	f001 fb99 	bl	8005e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800475a:	1d3a      	adds	r2, r7, #4
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fefc 	bl	8005560 <xTaskCheckForTimeOut>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d124      	bne.n	80047b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800476e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004770:	f000 fa27 	bl	8004bc2 <prvIsQueueFull>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	3310      	adds	r3, #16
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fe4c 	bl	8005420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800478a:	f000 f9b2 	bl	8004af2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800478e:	f000 fc8d 	bl	80050ac <xTaskResumeAll>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	f47f af7c 	bne.w	8004692 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800479a:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <xQueueGenericSend+0x200>)
 800479c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	e772      	b.n	8004692 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047ae:	f000 f9a0 	bl	8004af2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047b2:	f000 fc7b 	bl	80050ac <xTaskResumeAll>
 80047b6:	e76c      	b.n	8004692 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047ba:	f000 f99a 	bl	8004af2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047be:	f000 fc75 	bl	80050ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3738      	adds	r7, #56	@ 0x38
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	e000ed04 	.word	0xe000ed04

080047d0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08e      	sub	sp, #56	@ 0x38
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	623b      	str	r3, [r7, #32]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	61fb      	str	r3, [r7, #28]
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004824:	f000 ffe8 	bl	80057f8 <xTaskGetSchedulerState>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <xQueueSemaphoreTake+0x64>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <xQueueSemaphoreTake+0x68>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <xQueueSemaphoreTake+0x6a>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	61bb      	str	r3, [r7, #24]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004856:	f001 fae9 	bl	8005e2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d024      	beq.n	80048b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	1e5a      	subs	r2, r3, #1
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800486e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004876:	f001 f96b 	bl	8005b50 <pvTaskIncrementMutexHeldCount>
 800487a:	4602      	mov	r2, r0
 800487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00f      	beq.n	80048a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488a:	3310      	adds	r3, #16
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fded 	bl	800546c <xTaskRemoveFromEventList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004898:	4b54      	ldr	r3, [pc, #336]	@ (80049ec <xQueueSemaphoreTake+0x21c>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048a8:	f001 faf0 	bl	8005e8c <vPortExitCritical>
				return pdPASS;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e098      	b.n	80049e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d112      	bne.n	80048dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00b      	beq.n	80048d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	617b      	str	r3, [r7, #20]
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80048d4:	f001 fada 	bl	8005e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048d8:	2300      	movs	r3, #0
 80048da:	e082      	b.n	80049e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048e2:	f107 030c 	add.w	r3, r7, #12
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fe24 	bl	8005534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048f0:	f001 facc 	bl	8005e8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048f4:	f000 fbcc 	bl	8005090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048f8:	f001 fa98 	bl	8005e2c <vPortEnterCritical>
 80048fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004902:	b25b      	sxtb	r3, r3
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004908:	d103      	bne.n	8004912 <xQueueSemaphoreTake+0x142>
 800490a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004918:	b25b      	sxtb	r3, r3
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800491e:	d103      	bne.n	8004928 <xQueueSemaphoreTake+0x158>
 8004920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004928:	f001 fab0 	bl	8005e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800492c:	463a      	mov	r2, r7
 800492e:	f107 030c 	add.w	r3, r7, #12
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fe13 	bl	8005560 <xTaskCheckForTimeOut>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d132      	bne.n	80049a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004942:	f000 f928 	bl	8004b96 <prvIsQueueEmpty>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d026      	beq.n	800499a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004954:	f001 fa6a 	bl	8005e2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 ff69 	bl	8005834 <xTaskPriorityInherit>
 8004962:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004964:	f001 fa92 	bl	8005e8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496a:	3324      	adds	r3, #36	@ 0x24
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fd55 	bl	8005420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004978:	f000 f8bb 	bl	8004af2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800497c:	f000 fb96 	bl	80050ac <xTaskResumeAll>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	f47f af67 	bne.w	8004856 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004988:	4b18      	ldr	r3, [pc, #96]	@ (80049ec <xQueueSemaphoreTake+0x21c>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	e75d      	b.n	8004856 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800499a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800499c:	f000 f8a9 	bl	8004af2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049a0:	f000 fb84 	bl	80050ac <xTaskResumeAll>
 80049a4:	e757      	b.n	8004856 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80049a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049a8:	f000 f8a3 	bl	8004af2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ac:	f000 fb7e 	bl	80050ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049b2:	f000 f8f0 	bl	8004b96 <prvIsQueueEmpty>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f43f af4c 	beq.w	8004856 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00d      	beq.n	80049e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80049c4:	f001 fa32 	bl	8005e2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80049c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049ca:	f000 f811 	bl	80049f0 <prvGetDisinheritPriorityAfterTimeout>
 80049ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 f82a 	bl	8005a30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80049dc:	f001 fa56 	bl	8005e8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3738      	adds	r7, #56	@ 0x38
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	e000ed04 	.word	0xe000ed04

080049f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1c3 0307 	rsb	r3, r3, #7
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e001      	b.n	8004a12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a12:	68fb      	ldr	r3, [r7, #12]
	}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d14d      	bne.n	8004ae0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 ff69 	bl	8005920 <xTaskPriorityDisinherit>
 8004a4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	e043      	b.n	8004ae0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d119      	bne.n	8004a92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6858      	ldr	r0, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	461a      	mov	r2, r3
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	f001 fd19 	bl	80064a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	441a      	add	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d32b      	bcc.n	8004ae0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	e026      	b.n	8004ae0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68d8      	ldr	r0, [r3, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	f001 fcff 	bl	80064a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	425b      	negs	r3, r3
 8004aac:	441a      	add	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d207      	bcs.n	8004ace <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	425b      	negs	r3, r3
 8004ac8:	441a      	add	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d105      	bne.n	8004ae0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ae8:	697b      	ldr	r3, [r7, #20]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004afa:	f001 f997 	bl	8005e2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b06:	e011      	b.n	8004b2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d012      	beq.n	8004b36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3324      	adds	r3, #36	@ 0x24
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fca9 	bl	800546c <xTaskRemoveFromEventList>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b20:	f000 fd82 	bl	8005628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	dce9      	bgt.n	8004b08 <prvUnlockQueue+0x16>
 8004b34:	e000      	b.n	8004b38 <prvUnlockQueue+0x46>
					break;
 8004b36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	22ff      	movs	r2, #255	@ 0xff
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b40:	f001 f9a4 	bl	8005e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b44:	f001 f972 	bl	8005e2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b50:	e011      	b.n	8004b76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d012      	beq.n	8004b80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fc84 	bl	800546c <xTaskRemoveFromEventList>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b6a:	f000 fd5d 	bl	8005628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b6e:	7bbb      	ldrb	r3, [r7, #14]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	dce9      	bgt.n	8004b52 <prvUnlockQueue+0x60>
 8004b7e:	e000      	b.n	8004b82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	22ff      	movs	r2, #255	@ 0xff
 8004b86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b8a:	f001 f97f 	bl	8005e8c <vPortExitCritical>
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b9e:	f001 f945 	bl	8005e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004baa:	2301      	movs	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	e001      	b.n	8004bb4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bb4:	f001 f96a 	bl	8005e8c <vPortExitCritical>

	return xReturn;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bca:	f001 f92f 	bl	8005e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d102      	bne.n	8004be0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e001      	b.n	8004be4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004be4:	f001 f952 	bl	8005e8c <vPortExitCritical>

	return xReturn;
 8004be8:	68fb      	ldr	r3, [r7, #12]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b08e      	sub	sp, #56	@ 0x38
 8004bf6:	af04      	add	r7, sp, #16
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <xTaskCreateStatic+0x2c>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	623b      	str	r3, [r7, #32]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61fb      	str	r3, [r7, #28]
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c3c:	23a0      	movs	r3, #160	@ 0xa0
 8004c3e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c44:	d00b      	beq.n	8004c5e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	61bb      	str	r3, [r7, #24]
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	e7fd      	b.n	8004c5a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01e      	beq.n	8004ca4 <xTaskCreateStatic+0xb2>
 8004c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01b      	beq.n	8004ca4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9303      	str	r3, [sp, #12]
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	9302      	str	r3, [sp, #8]
 8004c86:	f107 0314 	add.w	r3, r7, #20
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f850 	bl	8004d3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c9e:	f000 f8ed 	bl	8004e7c <prvAddNewTaskToReadyList>
 8004ca2:	e001      	b.n	8004ca8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ca8:	697b      	ldr	r3, [r7, #20]
	}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3728      	adds	r7, #40	@ 0x28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b08c      	sub	sp, #48	@ 0x30
 8004cb6:	af04      	add	r7, sp, #16
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f001 f972 	bl	8005fb0 <pvPortMalloc>
 8004ccc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00e      	beq.n	8004cf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cd4:	20a0      	movs	r0, #160	@ 0xa0
 8004cd6:	f001 f96b 	bl	8005fb0 <pvPortMalloc>
 8004cda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ce8:	e005      	b.n	8004cf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f001 fa2e 	bl	800614c <vPortFree>
 8004cf0:	e001      	b.n	8004cf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d017      	beq.n	8004d2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d04:	88fa      	ldrh	r2, [r7, #6]
 8004d06:	2300      	movs	r3, #0
 8004d08:	9303      	str	r3, [sp, #12]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	9302      	str	r3, [sp, #8]
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f80e 	bl	8004d3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d20:	69f8      	ldr	r0, [r7, #28]
 8004d22:	f000 f8ab 	bl	8004e7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d26:	2301      	movs	r3, #1
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e002      	b.n	8004d32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d32:	69bb      	ldr	r3, [r7, #24]
	}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d54:	3b01      	subs	r3, #1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
 8004d62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	617b      	str	r3, [r7, #20]
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01f      	beq.n	8004dcc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	e012      	b.n	8004db8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	7819      	ldrb	r1, [r3, #0]
 8004d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	3334      	adds	r3, #52	@ 0x34
 8004da2:	460a      	mov	r2, r1
 8004da4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	3301      	adds	r3, #1
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d9e9      	bls.n	8004d92 <prvInitialiseNewTask+0x56>
 8004dbe:	e000      	b.n	8004dc2 <prvInitialiseNewTask+0x86>
			{
				break;
 8004dc0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dca:	e003      	b.n	8004dd4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	2b06      	cmp	r3, #6
 8004dd8:	d901      	bls.n	8004dde <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dda:	2306      	movs	r3, #6
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2200      	movs	r2, #0
 8004dee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	3304      	adds	r3, #4
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fa62 	bl	80042be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfc:	3318      	adds	r3, #24
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fa5d 	bl	80042be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	f1c3 0207 	rsb	r2, r3, #7
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	334c      	adds	r3, #76	@ 0x4c
 8004e2e:	224c      	movs	r2, #76	@ 0x4c
 8004e30:	2100      	movs	r1, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 faa8 	bl	8006388 <memset>
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8004e70 <prvInitialiseNewTask+0x134>)
 8004e3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	4a0c      	ldr	r2, [pc, #48]	@ (8004e74 <prvInitialiseNewTask+0x138>)
 8004e42:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e46:	4a0c      	ldr	r2, [pc, #48]	@ (8004e78 <prvInitialiseNewTask+0x13c>)
 8004e48:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	69b8      	ldr	r0, [r7, #24]
 8004e50:	f000 fef8 	bl	8005c44 <pxPortInitialiseStack>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e66:	bf00      	nop
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	2000120c 	.word	0x2000120c
 8004e74:	20001274 	.word	0x20001274
 8004e78:	200012dc 	.word	0x200012dc

08004e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e84:	f000 ffd2 	bl	8005e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e88:	4b2a      	ldr	r3, [pc, #168]	@ (8004f34 <prvAddNewTaskToReadyList+0xb8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	4a29      	ldr	r2, [pc, #164]	@ (8004f34 <prvAddNewTaskToReadyList+0xb8>)
 8004e90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e92:	4b29      	ldr	r3, [pc, #164]	@ (8004f38 <prvAddNewTaskToReadyList+0xbc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e9a:	4a27      	ldr	r2, [pc, #156]	@ (8004f38 <prvAddNewTaskToReadyList+0xbc>)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ea0:	4b24      	ldr	r3, [pc, #144]	@ (8004f34 <prvAddNewTaskToReadyList+0xb8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d110      	bne.n	8004eca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ea8:	f000 fbe2 	bl	8005670 <prvInitialiseTaskLists>
 8004eac:	e00d      	b.n	8004eca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eae:	4b23      	ldr	r3, [pc, #140]	@ (8004f3c <prvAddNewTaskToReadyList+0xc0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004eb6:	4b20      	ldr	r3, [pc, #128]	@ (8004f38 <prvAddNewTaskToReadyList+0xbc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d802      	bhi.n	8004eca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f38 <prvAddNewTaskToReadyList+0xbc>)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eca:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <prvAddNewTaskToReadyList+0xc4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f40 <prvAddNewTaskToReadyList+0xc4>)
 8004ed2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	2201      	movs	r2, #1
 8004eda:	409a      	lsls	r2, r3
 8004edc:	4b19      	ldr	r3, [pc, #100]	@ (8004f44 <prvAddNewTaskToReadyList+0xc8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	4a18      	ldr	r2, [pc, #96]	@ (8004f44 <prvAddNewTaskToReadyList+0xc8>)
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4a15      	ldr	r2, [pc, #84]	@ (8004f48 <prvAddNewTaskToReadyList+0xcc>)
 8004ef4:	441a      	add	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f7ff f9ea 	bl	80042d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f02:	f000 ffc3 	bl	8005e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f06:	4b0d      	ldr	r3, [pc, #52]	@ (8004f3c <prvAddNewTaskToReadyList+0xc0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00e      	beq.n	8004f2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <prvAddNewTaskToReadyList+0xbc>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d207      	bcs.n	8004f2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <prvAddNewTaskToReadyList+0xd0>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	200005b8 	.word	0x200005b8
 8004f38:	200004b8 	.word	0x200004b8
 8004f3c:	200005c4 	.word	0x200005c4
 8004f40:	200005d4 	.word	0x200005d4
 8004f44:	200005c0 	.word	0x200005c0
 8004f48:	200004bc 	.word	0x200004bc
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d018      	beq.n	8004f94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f62:	4b14      	ldr	r3, [pc, #80]	@ (8004fb4 <vTaskDelay+0x64>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <vTaskDelay+0x32>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	60bb      	str	r3, [r7, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	e7fd      	b.n	8004f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f82:	f000 f885 	bl	8005090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f86:	2100      	movs	r1, #0
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fdf5 	bl	8005b78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f8e:	f000 f88d 	bl	80050ac <xTaskResumeAll>
 8004f92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d107      	bne.n	8004faa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f9a:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <vTaskDelay+0x68>)
 8004f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200005e0 	.word	0x200005e0
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	@ 0x28
 8004fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fca:	463a      	mov	r2, r7
 8004fcc:	1d39      	adds	r1, r7, #4
 8004fce:	f107 0308 	add.w	r3, r7, #8
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fb fd7e 	bl	8000ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	9202      	str	r2, [sp, #8]
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	460a      	mov	r2, r1
 8004fea:	4921      	ldr	r1, [pc, #132]	@ (8005070 <vTaskStartScheduler+0xb4>)
 8004fec:	4821      	ldr	r0, [pc, #132]	@ (8005074 <vTaskStartScheduler+0xb8>)
 8004fee:	f7ff fe00 	bl	8004bf2 <xTaskCreateStatic>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4a20      	ldr	r2, [pc, #128]	@ (8005078 <vTaskStartScheduler+0xbc>)
 8004ff6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8005078 <vTaskStartScheduler+0xbc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005000:	2301      	movs	r3, #1
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	e001      	b.n	800500a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d11b      	bne.n	8005048 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	613b      	str	r3, [r7, #16]
}
 8005022:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005024:	4b15      	ldr	r3, [pc, #84]	@ (800507c <vTaskStartScheduler+0xc0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	334c      	adds	r3, #76	@ 0x4c
 800502a:	4a15      	ldr	r2, [pc, #84]	@ (8005080 <vTaskStartScheduler+0xc4>)
 800502c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <vTaskStartScheduler+0xc8>)
 8005030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005034:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005036:	4b14      	ldr	r3, [pc, #80]	@ (8005088 <vTaskStartScheduler+0xcc>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800503c:	4b13      	ldr	r3, [pc, #76]	@ (800508c <vTaskStartScheduler+0xd0>)
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005042:	f000 fe81 	bl	8005d48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005046:	e00f      	b.n	8005068 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800504e:	d10b      	bne.n	8005068 <vTaskStartScheduler+0xac>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	60fb      	str	r3, [r7, #12]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <vTaskStartScheduler+0xa8>
}
 8005068:	bf00      	nop
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	080065b0 	.word	0x080065b0
 8005074:	08005641 	.word	0x08005641
 8005078:	200005dc 	.word	0x200005dc
 800507c:	200004b8 	.word	0x200004b8
 8005080:	20000018 	.word	0x20000018
 8005084:	200005d8 	.word	0x200005d8
 8005088:	200005c4 	.word	0x200005c4
 800508c:	200005bc 	.word	0x200005bc

08005090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005094:	4b04      	ldr	r3, [pc, #16]	@ (80050a8 <vTaskSuspendAll+0x18>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3301      	adds	r3, #1
 800509a:	4a03      	ldr	r2, [pc, #12]	@ (80050a8 <vTaskSuspendAll+0x18>)
 800509c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800509e:	bf00      	nop
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	200005e0 	.word	0x200005e0

080050ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050ba:	4b42      	ldr	r3, [pc, #264]	@ (80051c4 <xTaskResumeAll+0x118>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <xTaskResumeAll+0x2e>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	603b      	str	r3, [r7, #0]
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	e7fd      	b.n	80050d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050da:	f000 fea7 	bl	8005e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050de:	4b39      	ldr	r3, [pc, #228]	@ (80051c4 <xTaskResumeAll+0x118>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	4a37      	ldr	r2, [pc, #220]	@ (80051c4 <xTaskResumeAll+0x118>)
 80050e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e8:	4b36      	ldr	r3, [pc, #216]	@ (80051c4 <xTaskResumeAll+0x118>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d161      	bne.n	80051b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050f0:	4b35      	ldr	r3, [pc, #212]	@ (80051c8 <xTaskResumeAll+0x11c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d05d      	beq.n	80051b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050f8:	e02e      	b.n	8005158 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050fa:	4b34      	ldr	r3, [pc, #208]	@ (80051cc <xTaskResumeAll+0x120>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3318      	adds	r3, #24
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff f940 	bl	800438c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3304      	adds	r3, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff f93b 	bl	800438c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	2201      	movs	r2, #1
 800511c:	409a      	lsls	r2, r3
 800511e:	4b2c      	ldr	r3, [pc, #176]	@ (80051d0 <xTaskResumeAll+0x124>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	4a2a      	ldr	r2, [pc, #168]	@ (80051d0 <xTaskResumeAll+0x124>)
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4a27      	ldr	r2, [pc, #156]	@ (80051d4 <xTaskResumeAll+0x128>)
 8005136:	441a      	add	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7ff f8c9 	bl	80042d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005148:	4b23      	ldr	r3, [pc, #140]	@ (80051d8 <xTaskResumeAll+0x12c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	429a      	cmp	r2, r3
 8005150:	d302      	bcc.n	8005158 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005152:	4b22      	ldr	r3, [pc, #136]	@ (80051dc <xTaskResumeAll+0x130>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005158:	4b1c      	ldr	r3, [pc, #112]	@ (80051cc <xTaskResumeAll+0x120>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1cc      	bne.n	80050fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005166:	f000 fb27 	bl	80057b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800516a:	4b1d      	ldr	r3, [pc, #116]	@ (80051e0 <xTaskResumeAll+0x134>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005176:	f000 f837 	bl	80051e8 <xTaskIncrementTick>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005180:	4b16      	ldr	r3, [pc, #88]	@ (80051dc <xTaskResumeAll+0x130>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3b01      	subs	r3, #1
 800518a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f1      	bne.n	8005176 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005192:	4b13      	ldr	r3, [pc, #76]	@ (80051e0 <xTaskResumeAll+0x134>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005198:	4b10      	ldr	r3, [pc, #64]	@ (80051dc <xTaskResumeAll+0x130>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051a4:	4b0f      	ldr	r3, [pc, #60]	@ (80051e4 <xTaskResumeAll+0x138>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051b4:	f000 fe6a 	bl	8005e8c <vPortExitCritical>

	return xAlreadyYielded;
 80051b8:	68bb      	ldr	r3, [r7, #8]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200005e0 	.word	0x200005e0
 80051c8:	200005b8 	.word	0x200005b8
 80051cc:	20000578 	.word	0x20000578
 80051d0:	200005c0 	.word	0x200005c0
 80051d4:	200004bc 	.word	0x200004bc
 80051d8:	200004b8 	.word	0x200004b8
 80051dc:	200005cc 	.word	0x200005cc
 80051e0:	200005c8 	.word	0x200005c8
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005330 <xTaskIncrementTick+0x148>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 808f 	bne.w	800531a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005334 <xTaskIncrementTick+0x14c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005204:	4a4b      	ldr	r2, [pc, #300]	@ (8005334 <xTaskIncrementTick+0x14c>)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d121      	bne.n	8005254 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005210:	4b49      	ldr	r3, [pc, #292]	@ (8005338 <xTaskIncrementTick+0x150>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <xTaskIncrementTick+0x4a>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	603b      	str	r3, [r7, #0]
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	e7fd      	b.n	800522e <xTaskIncrementTick+0x46>
 8005232:	4b41      	ldr	r3, [pc, #260]	@ (8005338 <xTaskIncrementTick+0x150>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	4b40      	ldr	r3, [pc, #256]	@ (800533c <xTaskIncrementTick+0x154>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a3e      	ldr	r2, [pc, #248]	@ (8005338 <xTaskIncrementTick+0x150>)
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	4a3e      	ldr	r2, [pc, #248]	@ (800533c <xTaskIncrementTick+0x154>)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b3e      	ldr	r3, [pc, #248]	@ (8005340 <xTaskIncrementTick+0x158>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a3c      	ldr	r2, [pc, #240]	@ (8005340 <xTaskIncrementTick+0x158>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	f000 fab2 	bl	80057b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005254:	4b3b      	ldr	r3, [pc, #236]	@ (8005344 <xTaskIncrementTick+0x15c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	429a      	cmp	r2, r3
 800525c:	d348      	bcc.n	80052f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525e:	4b36      	ldr	r3, [pc, #216]	@ (8005338 <xTaskIncrementTick+0x150>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005268:	4b36      	ldr	r3, [pc, #216]	@ (8005344 <xTaskIncrementTick+0x15c>)
 800526a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800526e:	601a      	str	r2, [r3, #0]
					break;
 8005270:	e03e      	b.n	80052f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005272:	4b31      	ldr	r3, [pc, #196]	@ (8005338 <xTaskIncrementTick+0x150>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d203      	bcs.n	8005292 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800528a:	4a2e      	ldr	r2, [pc, #184]	@ (8005344 <xTaskIncrementTick+0x15c>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005290:	e02e      	b.n	80052f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff f878 	bl	800438c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3318      	adds	r3, #24
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff f86f 	bl	800438c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	2201      	movs	r2, #1
 80052b4:	409a      	lsls	r2, r3
 80052b6:	4b24      	ldr	r3, [pc, #144]	@ (8005348 <xTaskIncrementTick+0x160>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	4a22      	ldr	r2, [pc, #136]	@ (8005348 <xTaskIncrementTick+0x160>)
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a1f      	ldr	r2, [pc, #124]	@ (800534c <xTaskIncrementTick+0x164>)
 80052ce:	441a      	add	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f7fe fffd 	bl	80042d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005350 <xTaskIncrementTick+0x168>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3b9      	bcc.n	800525e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80052ea:	2301      	movs	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ee:	e7b6      	b.n	800525e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052f0:	4b17      	ldr	r3, [pc, #92]	@ (8005350 <xTaskIncrementTick+0x168>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f6:	4915      	ldr	r1, [pc, #84]	@ (800534c <xTaskIncrementTick+0x164>)
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d901      	bls.n	800530c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800530c:	4b11      	ldr	r3, [pc, #68]	@ (8005354 <xTaskIncrementTick+0x16c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e004      	b.n	8005324 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800531a:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <xTaskIncrementTick+0x170>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a0d      	ldr	r2, [pc, #52]	@ (8005358 <xTaskIncrementTick+0x170>)
 8005322:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005324:	697b      	ldr	r3, [r7, #20]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	200005e0 	.word	0x200005e0
 8005334:	200005bc 	.word	0x200005bc
 8005338:	20000570 	.word	0x20000570
 800533c:	20000574 	.word	0x20000574
 8005340:	200005d0 	.word	0x200005d0
 8005344:	200005d8 	.word	0x200005d8
 8005348:	200005c0 	.word	0x200005c0
 800534c:	200004bc 	.word	0x200004bc
 8005350:	200004b8 	.word	0x200004b8
 8005354:	200005cc 	.word	0x200005cc
 8005358:	200005c8 	.word	0x200005c8

0800535c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005362:	4b29      	ldr	r3, [pc, #164]	@ (8005408 <vTaskSwitchContext+0xac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800536a:	4b28      	ldr	r3, [pc, #160]	@ (800540c <vTaskSwitchContext+0xb0>)
 800536c:	2201      	movs	r2, #1
 800536e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005370:	e045      	b.n	80053fe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005372:	4b26      	ldr	r3, [pc, #152]	@ (800540c <vTaskSwitchContext+0xb0>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	4b25      	ldr	r3, [pc, #148]	@ (8005410 <vTaskSwitchContext+0xb4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005386:	7afb      	ldrb	r3, [r7, #11]
 8005388:	f1c3 031f 	rsb	r3, r3, #31
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	4921      	ldr	r1, [pc, #132]	@ (8005414 <vTaskSwitchContext+0xb8>)
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	607b      	str	r3, [r7, #4]
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	e7fd      	b.n	80053b6 <vTaskSwitchContext+0x5a>
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4a13      	ldr	r2, [pc, #76]	@ (8005414 <vTaskSwitchContext+0xb8>)
 80053c6:	4413      	add	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	3308      	adds	r3, #8
 80053dc:	429a      	cmp	r2, r3
 80053de:	d104      	bne.n	80053ea <vTaskSwitchContext+0x8e>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4a09      	ldr	r2, [pc, #36]	@ (8005418 <vTaskSwitchContext+0xbc>)
 80053f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053f4:	4b08      	ldr	r3, [pc, #32]	@ (8005418 <vTaskSwitchContext+0xbc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	334c      	adds	r3, #76	@ 0x4c
 80053fa:	4a08      	ldr	r2, [pc, #32]	@ (800541c <vTaskSwitchContext+0xc0>)
 80053fc:	6013      	str	r3, [r2, #0]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	200005e0 	.word	0x200005e0
 800540c:	200005cc 	.word	0x200005cc
 8005410:	200005c0 	.word	0x200005c0
 8005414:	200004bc 	.word	0x200004bc
 8005418:	200004b8 	.word	0x200004b8
 800541c:	20000018 	.word	0x20000018

08005420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005448:	4b07      	ldr	r3, [pc, #28]	@ (8005468 <vTaskPlaceOnEventList+0x48>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3318      	adds	r3, #24
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fe ff63 	bl	800431c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005456:	2101      	movs	r1, #1
 8005458:	6838      	ldr	r0, [r7, #0]
 800545a:	f000 fb8d 	bl	8005b78 <prvAddCurrentTaskToDelayedList>
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200004b8 	.word	0x200004b8

0800546c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10b      	bne.n	800549a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60fb      	str	r3, [r7, #12]
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	e7fd      	b.n	8005496 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3318      	adds	r3, #24
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe ff74 	bl	800438c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a4:	4b1d      	ldr	r3, [pc, #116]	@ (800551c <xTaskRemoveFromEventList+0xb0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d11c      	bne.n	80054e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe ff6b 	bl	800438c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	2201      	movs	r2, #1
 80054bc:	409a      	lsls	r2, r3
 80054be:	4b18      	ldr	r3, [pc, #96]	@ (8005520 <xTaskRemoveFromEventList+0xb4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	4a16      	ldr	r2, [pc, #88]	@ (8005520 <xTaskRemoveFromEventList+0xb4>)
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4a13      	ldr	r2, [pc, #76]	@ (8005524 <xTaskRemoveFromEventList+0xb8>)
 80054d6:	441a      	add	r2, r3
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f7fe fef9 	bl	80042d6 <vListInsertEnd>
 80054e4:	e005      	b.n	80054f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3318      	adds	r3, #24
 80054ea:	4619      	mov	r1, r3
 80054ec:	480e      	ldr	r0, [pc, #56]	@ (8005528 <xTaskRemoveFromEventList+0xbc>)
 80054ee:	f7fe fef2 	bl	80042d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f6:	4b0d      	ldr	r3, [pc, #52]	@ (800552c <xTaskRemoveFromEventList+0xc0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d905      	bls.n	800550c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005504:	4b0a      	ldr	r3, [pc, #40]	@ (8005530 <xTaskRemoveFromEventList+0xc4>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e001      	b.n	8005510 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005510:	697b      	ldr	r3, [r7, #20]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200005e0 	.word	0x200005e0
 8005520:	200005c0 	.word	0x200005c0
 8005524:	200004bc 	.word	0x200004bc
 8005528:	20000578 	.word	0x20000578
 800552c:	200004b8 	.word	0x200004b8
 8005530:	200005cc 	.word	0x200005cc

08005534 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800553c:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <vTaskInternalSetTimeOutState+0x24>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005544:	4b05      	ldr	r3, [pc, #20]	@ (800555c <vTaskInternalSetTimeOutState+0x28>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	605a      	str	r2, [r3, #4]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	200005d0 	.word	0x200005d0
 800555c:	200005bc 	.word	0x200005bc

08005560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	613b      	str	r3, [r7, #16]
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	60fb      	str	r3, [r7, #12]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80055a6:	f000 fc41 	bl	8005e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005620 <xTaskCheckForTimeOut+0xc0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055c2:	d102      	bne.n	80055ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	e023      	b.n	8005612 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b15      	ldr	r3, [pc, #84]	@ (8005624 <xTaskCheckForTimeOut+0xc4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d007      	beq.n	80055e6 <xTaskCheckForTimeOut+0x86>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d302      	bcc.n	80055e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055e0:	2301      	movs	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e015      	b.n	8005612 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d20b      	bcs.n	8005608 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ff99 	bl	8005534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e004      	b.n	8005612 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800560e:	2301      	movs	r3, #1
 8005610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005612:	f000 fc3b 	bl	8005e8c <vPortExitCritical>

	return xReturn;
 8005616:	69fb      	ldr	r3, [r7, #28]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200005bc 	.word	0x200005bc
 8005624:	200005d0 	.word	0x200005d0

08005628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800562c:	4b03      	ldr	r3, [pc, #12]	@ (800563c <vTaskMissedYield+0x14>)
 800562e:	2201      	movs	r2, #1
 8005630:	601a      	str	r2, [r3, #0]
}
 8005632:	bf00      	nop
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	200005cc 	.word	0x200005cc

08005640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005648:	f000 f852 	bl	80056f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800564c:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <prvIdleTask+0x28>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d9f9      	bls.n	8005648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <prvIdleTask+0x2c>)
 8005656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005664:	e7f0      	b.n	8005648 <prvIdleTask+0x8>
 8005666:	bf00      	nop
 8005668:	200004bc 	.word	0x200004bc
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005676:	2300      	movs	r3, #0
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	e00c      	b.n	8005696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4a12      	ldr	r2, [pc, #72]	@ (80056d0 <prvInitialiseTaskLists+0x60>)
 8005688:	4413      	add	r3, r2
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe fdf8 	bl	8004280 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3301      	adds	r3, #1
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d9ef      	bls.n	800567c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800569c:	480d      	ldr	r0, [pc, #52]	@ (80056d4 <prvInitialiseTaskLists+0x64>)
 800569e:	f7fe fdef 	bl	8004280 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056a2:	480d      	ldr	r0, [pc, #52]	@ (80056d8 <prvInitialiseTaskLists+0x68>)
 80056a4:	f7fe fdec 	bl	8004280 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056a8:	480c      	ldr	r0, [pc, #48]	@ (80056dc <prvInitialiseTaskLists+0x6c>)
 80056aa:	f7fe fde9 	bl	8004280 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056ae:	480c      	ldr	r0, [pc, #48]	@ (80056e0 <prvInitialiseTaskLists+0x70>)
 80056b0:	f7fe fde6 	bl	8004280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056b4:	480b      	ldr	r0, [pc, #44]	@ (80056e4 <prvInitialiseTaskLists+0x74>)
 80056b6:	f7fe fde3 	bl	8004280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056ba:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <prvInitialiseTaskLists+0x78>)
 80056bc:	4a05      	ldr	r2, [pc, #20]	@ (80056d4 <prvInitialiseTaskLists+0x64>)
 80056be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056c0:	4b0a      	ldr	r3, [pc, #40]	@ (80056ec <prvInitialiseTaskLists+0x7c>)
 80056c2:	4a05      	ldr	r2, [pc, #20]	@ (80056d8 <prvInitialiseTaskLists+0x68>)
 80056c4:	601a      	str	r2, [r3, #0]
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200004bc 	.word	0x200004bc
 80056d4:	20000548 	.word	0x20000548
 80056d8:	2000055c 	.word	0x2000055c
 80056dc:	20000578 	.word	0x20000578
 80056e0:	2000058c 	.word	0x2000058c
 80056e4:	200005a4 	.word	0x200005a4
 80056e8:	20000570 	.word	0x20000570
 80056ec:	20000574 	.word	0x20000574

080056f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f6:	e019      	b.n	800572c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056f8:	f000 fb98 	bl	8005e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fc:	4b10      	ldr	r3, [pc, #64]	@ (8005740 <prvCheckTasksWaitingTermination+0x50>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3304      	adds	r3, #4
 8005708:	4618      	mov	r0, r3
 800570a:	f7fe fe3f 	bl	800438c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <prvCheckTasksWaitingTermination+0x54>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3b01      	subs	r3, #1
 8005714:	4a0b      	ldr	r2, [pc, #44]	@ (8005744 <prvCheckTasksWaitingTermination+0x54>)
 8005716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005718:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <prvCheckTasksWaitingTermination+0x58>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3b01      	subs	r3, #1
 800571e:	4a0a      	ldr	r2, [pc, #40]	@ (8005748 <prvCheckTasksWaitingTermination+0x58>)
 8005720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005722:	f000 fbb3 	bl	8005e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f810 	bl	800574c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800572c:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <prvCheckTasksWaitingTermination+0x58>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e1      	bne.n	80056f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000058c 	.word	0x2000058c
 8005744:	200005b8 	.word	0x200005b8
 8005748:	200005a0 	.word	0x200005a0

0800574c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	334c      	adds	r3, #76	@ 0x4c
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fe1d 	bl	8006398 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005764:	2b00      	cmp	r3, #0
 8005766:	d108      	bne.n	800577a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fced 	bl	800614c <vPortFree>
				vPortFree( pxTCB );
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fcea 	bl	800614c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005778:	e019      	b.n	80057ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005780:	2b01      	cmp	r3, #1
 8005782:	d103      	bne.n	800578c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fce1 	bl	800614c <vPortFree>
	}
 800578a:	e010      	b.n	80057ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005792:	2b02      	cmp	r3, #2
 8005794:	d00b      	beq.n	80057ae <prvDeleteTCB+0x62>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60fb      	str	r3, [r7, #12]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <prvDeleteTCB+0x5e>
	}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057be:	4b0c      	ldr	r3, [pc, #48]	@ (80057f0 <prvResetNextTaskUnblockTime+0x38>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d104      	bne.n	80057d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <prvResetNextTaskUnblockTime+0x3c>)
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057d0:	e008      	b.n	80057e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d2:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <prvResetNextTaskUnblockTime+0x38>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4a04      	ldr	r2, [pc, #16]	@ (80057f4 <prvResetNextTaskUnblockTime+0x3c>)
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20000570 	.word	0x20000570
 80057f4:	200005d8 	.word	0x200005d8

080057f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057fe:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <xTaskGetSchedulerState+0x34>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005806:	2301      	movs	r3, #1
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	e008      	b.n	800581e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800580c:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <xTaskGetSchedulerState+0x38>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005814:	2302      	movs	r3, #2
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	e001      	b.n	800581e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800581e:	687b      	ldr	r3, [r7, #4]
	}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	200005c4 	.word	0x200005c4
 8005830:	200005e0 	.word	0x200005e0

08005834 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d05e      	beq.n	8005908 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584e:	4b31      	ldr	r3, [pc, #196]	@ (8005914 <xTaskPriorityInherit+0xe0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	429a      	cmp	r2, r3
 8005856:	d24e      	bcs.n	80058f6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	db06      	blt.n	800586e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005860:	4b2c      	ldr	r3, [pc, #176]	@ (8005914 <xTaskPriorityInherit+0xe0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	f1c3 0207 	rsb	r2, r3, #7
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6959      	ldr	r1, [r3, #20]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a26      	ldr	r2, [pc, #152]	@ (8005918 <xTaskPriorityInherit+0xe4>)
 8005880:	4413      	add	r3, r2
 8005882:	4299      	cmp	r1, r3
 8005884:	d12f      	bne.n	80058e6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	3304      	adds	r3, #4
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fd7e 	bl	800438c <uxListRemove>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	2201      	movs	r2, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	43da      	mvns	r2, r3
 80058a2:	4b1e      	ldr	r3, [pc, #120]	@ (800591c <xTaskPriorityInherit+0xe8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4013      	ands	r3, r2
 80058a8:	4a1c      	ldr	r2, [pc, #112]	@ (800591c <xTaskPriorityInherit+0xe8>)
 80058aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058ac:	4b19      	ldr	r3, [pc, #100]	@ (8005914 <xTaskPriorityInherit+0xe0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	2201      	movs	r2, #1
 80058bc:	409a      	lsls	r2, r3
 80058be:	4b17      	ldr	r3, [pc, #92]	@ (800591c <xTaskPriorityInherit+0xe8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	4a15      	ldr	r2, [pc, #84]	@ (800591c <xTaskPriorityInherit+0xe8>)
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a10      	ldr	r2, [pc, #64]	@ (8005918 <xTaskPriorityInherit+0xe4>)
 80058d6:	441a      	add	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fe fcf9 	bl	80042d6 <vListInsertEnd>
 80058e4:	e004      	b.n	80058f0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <xTaskPriorityInherit+0xe0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80058f0:	2301      	movs	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e008      	b.n	8005908 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fa:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <xTaskPriorityInherit+0xe0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	429a      	cmp	r2, r3
 8005902:	d201      	bcs.n	8005908 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005904:	2301      	movs	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005908:	68fb      	ldr	r3, [r7, #12]
	}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200004b8 	.word	0x200004b8
 8005918:	200004bc 	.word	0x200004bc
 800591c:	200005c0 	.word	0x200005c0

08005920 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d070      	beq.n	8005a18 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005936:	4b3b      	ldr	r3, [pc, #236]	@ (8005a24 <xTaskPriorityDisinherit+0x104>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	429a      	cmp	r2, r3
 800593e:	d00b      	beq.n	8005958 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	60fb      	str	r3, [r7, #12]
}
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10b      	bne.n	8005978 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60bb      	str	r3, [r7, #8]
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	e7fd      	b.n	8005974 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800597c:	1e5a      	subs	r2, r3, #1
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598a:	429a      	cmp	r2, r3
 800598c:	d044      	beq.n	8005a18 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005992:	2b00      	cmp	r3, #0
 8005994:	d140      	bne.n	8005a18 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3304      	adds	r3, #4
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fcf6 	bl	800438c <uxListRemove>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d115      	bne.n	80059d2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059aa:	491f      	ldr	r1, [pc, #124]	@ (8005a28 <xTaskPriorityDisinherit+0x108>)
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xTaskPriorityDisinherit+0xb2>
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	2201      	movs	r2, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43da      	mvns	r2, r3
 80059c8:	4b18      	ldr	r3, [pc, #96]	@ (8005a2c <xTaskPriorityDisinherit+0x10c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4013      	ands	r3, r2
 80059ce:	4a17      	ldr	r2, [pc, #92]	@ (8005a2c <xTaskPriorityDisinherit+0x10c>)
 80059d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	f1c3 0207 	rsb	r2, r3, #7
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ea:	2201      	movs	r2, #1
 80059ec:	409a      	lsls	r2, r3
 80059ee:	4b0f      	ldr	r3, [pc, #60]	@ (8005a2c <xTaskPriorityDisinherit+0x10c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	4a0d      	ldr	r2, [pc, #52]	@ (8005a2c <xTaskPriorityDisinherit+0x10c>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4a08      	ldr	r2, [pc, #32]	@ (8005a28 <xTaskPriorityDisinherit+0x108>)
 8005a06:	441a      	add	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7fe fc61 	bl	80042d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a18:	697b      	ldr	r3, [r7, #20]
	}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	200004b8 	.word	0x200004b8
 8005a28:	200004bc 	.word	0x200004bc
 8005a2c:	200005c0 	.word	0x200005c0

08005a30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d079      	beq.n	8005b3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60fb      	str	r3, [r7, #12]
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d902      	bls.n	8005a78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e002      	b.n	8005a7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d059      	beq.n	8005b3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d154      	bne.n	8005b3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a92:	4b2c      	ldr	r3, [pc, #176]	@ (8005b44 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d10b      	bne.n	8005ab4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	60bb      	str	r3, [r7, #8]
}
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	db04      	blt.n	8005ad2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f1c3 0207 	rsb	r2, r3, #7
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	6959      	ldr	r1, [r3, #20]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4a19      	ldr	r2, [pc, #100]	@ (8005b48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005ae2:	4413      	add	r3, r2
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	d129      	bne.n	8005b3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fc4d 	bl	800438c <uxListRemove>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	2201      	movs	r2, #1
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	43da      	mvns	r2, r3
 8005b04:	4b11      	ldr	r3, [pc, #68]	@ (8005b4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	4a10      	ldr	r2, [pc, #64]	@ (8005b4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b0c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	2201      	movs	r2, #1
 8005b14:	409a      	lsls	r2, r3
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4a06      	ldr	r2, [pc, #24]	@ (8005b48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b2e:	441a      	add	r2, r3
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fe fbcd 	bl	80042d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b3c:	bf00      	nop
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	200004b8 	.word	0x200004b8
 8005b48:	200004bc 	.word	0x200004bc
 8005b4c:	200005c0 	.word	0x200005c0

08005b50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b54:	4b07      	ldr	r3, [pc, #28]	@ (8005b74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b5c:	4b05      	ldr	r3, [pc, #20]	@ (8005b74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b62:	3201      	adds	r2, #1
 8005b64:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005b66:	4b03      	ldr	r3, [pc, #12]	@ (8005b74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b68:	681b      	ldr	r3, [r3, #0]
	}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	200004b8 	.word	0x200004b8

08005b78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b82:	4b29      	ldr	r3, [pc, #164]	@ (8005c28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b88:	4b28      	ldr	r3, [pc, #160]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fbfc 	bl	800438c <uxListRemove>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b9a:	4b24      	ldr	r3, [pc, #144]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	4b21      	ldr	r3, [pc, #132]	@ (8005c30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4013      	ands	r3, r2
 8005bae:	4a20      	ldr	r2, [pc, #128]	@ (8005c30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bb8:	d10a      	bne.n	8005bd0 <prvAddCurrentTaskToDelayedList+0x58>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	481a      	ldr	r0, [pc, #104]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bca:	f7fe fb84 	bl	80042d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bce:	e026      	b.n	8005c1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bd8:	4b14      	ldr	r3, [pc, #80]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d209      	bcs.n	8005bfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005be8:	4b13      	ldr	r3, [pc, #76]	@ (8005c38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	4b0f      	ldr	r3, [pc, #60]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7fe fb91 	bl	800431c <vListInsert>
}
 8005bfa:	e010      	b.n	8005c1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005c3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b0a      	ldr	r3, [pc, #40]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f7fe fb87 	bl	800431c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d202      	bcs.n	8005c1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c18:	4a09      	ldr	r2, [pc, #36]	@ (8005c40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6013      	str	r3, [r2, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	200005bc 	.word	0x200005bc
 8005c2c:	200004b8 	.word	0x200004b8
 8005c30:	200005c0 	.word	0x200005c0
 8005c34:	200005a4 	.word	0x200005a4
 8005c38:	20000574 	.word	0x20000574
 8005c3c:	20000570 	.word	0x20000570
 8005c40:	200005d8 	.word	0x200005d8

08005c44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3b04      	subs	r3, #4
 8005c54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3b04      	subs	r3, #4
 8005c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f023 0201 	bic.w	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b04      	subs	r3, #4
 8005c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c74:	4a08      	ldr	r2, [pc, #32]	@ (8005c98 <pxPortInitialiseStack+0x54>)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3b14      	subs	r3, #20
 8005c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3b20      	subs	r3, #32
 8005c8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	08005c9d 	.word	0x08005c9d

08005c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ca6:	4b12      	ldr	r3, [pc, #72]	@ (8005cf0 <prvTaskExitError+0x54>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cae:	d00b      	beq.n	8005cc8 <prvTaskExitError+0x2c>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <prvTaskExitError+0x28>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60bb      	str	r3, [r7, #8]
}
 8005cda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cdc:	bf00      	nop
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0fc      	beq.n	8005cde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr
 8005cf0:	20000014 	.word	0x20000014
	...

08005d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d00:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <pxCurrentTCBConst2>)
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d0a:	f380 8809 	msr	PSP, r0
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8811 	msr	BASEPRI, r0
 8005d1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005d1e:	4770      	bx	lr

08005d20 <pxCurrentTCBConst2>:
 8005d20:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d28:	4806      	ldr	r0, [pc, #24]	@ (8005d44 <prvPortStartFirstTask+0x1c>)
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f380 8808 	msr	MSP, r0
 8005d32:	b662      	cpsie	i
 8005d34:	b661      	cpsie	f
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	df00      	svc	0
 8005d40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d42:	bf00      	nop
 8005d44:	e000ed08 	.word	0xe000ed08

08005d48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d4e:	4b32      	ldr	r3, [pc, #200]	@ (8005e18 <xPortStartScheduler+0xd0>)
 8005d50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	22ff      	movs	r2, #255	@ 0xff
 8005d5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4b2a      	ldr	r3, [pc, #168]	@ (8005e1c <xPortStartScheduler+0xd4>)
 8005d74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d76:	4b2a      	ldr	r3, [pc, #168]	@ (8005e20 <xPortStartScheduler+0xd8>)
 8005d78:	2207      	movs	r2, #7
 8005d7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d7c:	e009      	b.n	8005d92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d7e:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <xPortStartScheduler+0xd8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	4a26      	ldr	r2, [pc, #152]	@ (8005e20 <xPortStartScheduler+0xd8>)
 8005d86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9a:	2b80      	cmp	r3, #128	@ 0x80
 8005d9c:	d0ef      	beq.n	8005d7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d9e:	4b20      	ldr	r3, [pc, #128]	@ (8005e20 <xPortStartScheduler+0xd8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1c3 0307 	rsb	r3, r3, #7
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d00b      	beq.n	8005dc2 <xPortStartScheduler+0x7a>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	60bb      	str	r3, [r7, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	bf00      	nop
 8005dc0:	e7fd      	b.n	8005dbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dc2:	4b17      	ldr	r3, [pc, #92]	@ (8005e20 <xPortStartScheduler+0xd8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	4a15      	ldr	r2, [pc, #84]	@ (8005e20 <xPortStartScheduler+0xd8>)
 8005dca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dcc:	4b14      	ldr	r3, [pc, #80]	@ (8005e20 <xPortStartScheduler+0xd8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005dd4:	4a12      	ldr	r2, [pc, #72]	@ (8005e20 <xPortStartScheduler+0xd8>)
 8005dd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005de0:	4b10      	ldr	r3, [pc, #64]	@ (8005e24 <xPortStartScheduler+0xdc>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a0f      	ldr	r2, [pc, #60]	@ (8005e24 <xPortStartScheduler+0xdc>)
 8005de6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005dea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dec:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <xPortStartScheduler+0xdc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <xPortStartScheduler+0xdc>)
 8005df2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005df6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005df8:	f000 f8b8 	bl	8005f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <xPortStartScheduler+0xe0>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e02:	f7ff ff91 	bl	8005d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e06:	f7ff faa9 	bl	800535c <vTaskSwitchContext>
	prvTaskExitError();
 8005e0a:	f7ff ff47 	bl	8005c9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	e000e400 	.word	0xe000e400
 8005e1c:	200005e4 	.word	0x200005e4
 8005e20:	200005e8 	.word	0x200005e8
 8005e24:	e000ed20 	.word	0xe000ed20
 8005e28:	20000014 	.word	0x20000014

08005e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	607b      	str	r3, [r7, #4]
}
 8005e44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e46:	4b0f      	ldr	r3, [pc, #60]	@ (8005e84 <vPortEnterCritical+0x58>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005e84 <vPortEnterCritical+0x58>)
 8005e4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e50:	4b0c      	ldr	r3, [pc, #48]	@ (8005e84 <vPortEnterCritical+0x58>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d110      	bne.n	8005e7a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e58:	4b0b      	ldr	r3, [pc, #44]	@ (8005e88 <vPortEnterCritical+0x5c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <vPortEnterCritical+0x4e>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	603b      	str	r3, [r7, #0]
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	e7fd      	b.n	8005e76 <vPortEnterCritical+0x4a>
	}
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	20000014 	.word	0x20000014
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e92:	4b12      	ldr	r3, [pc, #72]	@ (8005edc <vPortExitCritical+0x50>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <vPortExitCritical+0x26>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	607b      	str	r3, [r7, #4]
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <vPortExitCritical+0x50>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	4a08      	ldr	r2, [pc, #32]	@ (8005edc <vPortExitCritical+0x50>)
 8005eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ebc:	4b07      	ldr	r3, [pc, #28]	@ (8005edc <vPortExitCritical+0x50>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d105      	bne.n	8005ed0 <vPortExitCritical+0x44>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	20000014 	.word	0x20000014

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ef0:	6010      	str	r0, [r2, #0]
 8005ef2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ef6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005efa:	f380 8811 	msr	BASEPRI, r0
 8005efe:	f7ff fa2d 	bl	800535c <vTaskSwitchContext>
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	6808      	ldr	r0, [r1, #0]
 8005f12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f16:	f380 8809 	msr	PSP, r0
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	4770      	bx	lr

08005f20 <pxCurrentTCBConst>:
 8005f20:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
}
 8005f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f42:	f7ff f951 	bl	80051e8 <xTaskIncrementTick>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f4c:	4b06      	ldr	r3, [pc, #24]	@ (8005f68 <SysTick_Handler+0x40>)
 8005f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	2300      	movs	r3, #0
 8005f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f383 8811 	msr	BASEPRI, r3
}
 8005f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f70:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <vPortSetupTimerInterrupt+0x30>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f76:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa0 <vPortSetupTimerInterrupt+0x34>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f7c:	4b09      	ldr	r3, [pc, #36]	@ (8005fa4 <vPortSetupTimerInterrupt+0x38>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a09      	ldr	r2, [pc, #36]	@ (8005fa8 <vPortSetupTimerInterrupt+0x3c>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	099b      	lsrs	r3, r3, #6
 8005f88:	4a08      	ldr	r2, [pc, #32]	@ (8005fac <vPortSetupTimerInterrupt+0x40>)
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f8e:	4b03      	ldr	r3, [pc, #12]	@ (8005f9c <vPortSetupTimerInterrupt+0x30>)
 8005f90:	2207      	movs	r2, #7
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	e000e010 	.word	0xe000e010
 8005fa0:	e000e018 	.word	0xe000e018
 8005fa4:	20000008 	.word	0x20000008
 8005fa8:	10624dd3 	.word	0x10624dd3
 8005fac:	e000e014 	.word	0xe000e014

08005fb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	@ 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fbc:	f7ff f868 	bl	8005090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8006134 <pvPortMalloc+0x184>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fc8:	f000 f924 	bl	8006214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8006138 <pvPortMalloc+0x188>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 8095 	bne.w	8006104 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01e      	beq.n	800601e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d015      	beq.n	800601e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f023 0307 	bic.w	r3, r3, #7
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <pvPortMalloc+0x6e>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	617b      	str	r3, [r7, #20]
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d06f      	beq.n	8006104 <pvPortMalloc+0x154>
 8006024:	4b45      	ldr	r3, [pc, #276]	@ (800613c <pvPortMalloc+0x18c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	429a      	cmp	r2, r3
 800602c:	d86a      	bhi.n	8006104 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800602e:	4b44      	ldr	r3, [pc, #272]	@ (8006140 <pvPortMalloc+0x190>)
 8006030:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006032:	4b43      	ldr	r3, [pc, #268]	@ (8006140 <pvPortMalloc+0x190>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006038:	e004      	b.n	8006044 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d903      	bls.n	8006056 <pvPortMalloc+0xa6>
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f1      	bne.n	800603a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006056:	4b37      	ldr	r3, [pc, #220]	@ (8006134 <pvPortMalloc+0x184>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605c:	429a      	cmp	r2, r3
 800605e:	d051      	beq.n	8006104 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2208      	movs	r2, #8
 8006066:	4413      	add	r3, r2
 8006068:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	2308      	movs	r3, #8
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	429a      	cmp	r2, r3
 8006080:	d920      	bls.n	80060c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00b      	beq.n	80060ac <pvPortMalloc+0xfc>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	613b      	str	r3, [r7, #16]
}
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	e7fd      	b.n	80060a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	1ad2      	subs	r2, r2, r3
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060be:	69b8      	ldr	r0, [r7, #24]
 80060c0:	f000 f90a 	bl	80062d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060c4:	4b1d      	ldr	r3, [pc, #116]	@ (800613c <pvPortMalloc+0x18c>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	4a1b      	ldr	r2, [pc, #108]	@ (800613c <pvPortMalloc+0x18c>)
 80060d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060d2:	4b1a      	ldr	r3, [pc, #104]	@ (800613c <pvPortMalloc+0x18c>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006144 <pvPortMalloc+0x194>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d203      	bcs.n	80060e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060de:	4b17      	ldr	r3, [pc, #92]	@ (800613c <pvPortMalloc+0x18c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a18      	ldr	r2, [pc, #96]	@ (8006144 <pvPortMalloc+0x194>)
 80060e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <pvPortMalloc+0x188>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060fa:	4b13      	ldr	r3, [pc, #76]	@ (8006148 <pvPortMalloc+0x198>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	4a11      	ldr	r2, [pc, #68]	@ (8006148 <pvPortMalloc+0x198>)
 8006102:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006104:	f7fe ffd2 	bl	80050ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <pvPortMalloc+0x17a>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	60fb      	str	r3, [r7, #12]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <pvPortMalloc+0x176>
	return pvReturn;
 800612a:	69fb      	ldr	r3, [r7, #28]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3728      	adds	r7, #40	@ 0x28
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	200011f4 	.word	0x200011f4
 8006138:	20001208 	.word	0x20001208
 800613c:	200011f8 	.word	0x200011f8
 8006140:	200011ec 	.word	0x200011ec
 8006144:	200011fc 	.word	0x200011fc
 8006148:	20001200 	.word	0x20001200

0800614c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d04f      	beq.n	80061fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800615e:	2308      	movs	r3, #8
 8006160:	425b      	negs	r3, r3
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4413      	add	r3, r2
 8006166:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	4b25      	ldr	r3, [pc, #148]	@ (8006208 <vPortFree+0xbc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <vPortFree+0x46>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	60fb      	str	r3, [r7, #12]
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00b      	beq.n	80061b2 <vPortFree+0x66>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60bb      	str	r3, [r7, #8]
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b14      	ldr	r3, [pc, #80]	@ (8006208 <vPortFree+0xbc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01e      	beq.n	80061fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11a      	bne.n	80061fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006208 <vPortFree+0xbc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061d8:	f7fe ff5a 	bl	8005090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4b0a      	ldr	r3, [pc, #40]	@ (800620c <vPortFree+0xc0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	4a09      	ldr	r2, [pc, #36]	@ (800620c <vPortFree+0xc0>)
 80061e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ea:	6938      	ldr	r0, [r7, #16]
 80061ec:	f000 f874 	bl	80062d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061f0:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <vPortFree+0xc4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a06      	ldr	r2, [pc, #24]	@ (8006210 <vPortFree+0xc4>)
 80061f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061fa:	f7fe ff57 	bl	80050ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20001208 	.word	0x20001208
 800620c:	200011f8 	.word	0x200011f8
 8006210:	20001204 	.word	0x20001204

08006214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800621a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800621e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006220:	4b27      	ldr	r3, [pc, #156]	@ (80062c0 <prvHeapInit+0xac>)
 8006222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0307 	bic.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	4a1f      	ldr	r2, [pc, #124]	@ (80062c0 <prvHeapInit+0xac>)
 8006244:	4413      	add	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800624c:	4a1d      	ldr	r2, [pc, #116]	@ (80062c4 <prvHeapInit+0xb0>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006252:	4b1c      	ldr	r3, [pc, #112]	@ (80062c4 <prvHeapInit+0xb0>)
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006260:	2208      	movs	r2, #8
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a15      	ldr	r2, [pc, #84]	@ (80062c8 <prvHeapInit+0xb4>)
 8006274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006276:	4b14      	ldr	r3, [pc, #80]	@ (80062c8 <prvHeapInit+0xb4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800627e:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <prvHeapInit+0xb4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006294:	4b0c      	ldr	r3, [pc, #48]	@ (80062c8 <prvHeapInit+0xb4>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	@ (80062cc <prvHeapInit+0xb8>)
 80062a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a09      	ldr	r2, [pc, #36]	@ (80062d0 <prvHeapInit+0xbc>)
 80062aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ac:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <prvHeapInit+0xc0>)
 80062ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	200005ec 	.word	0x200005ec
 80062c4:	200011ec 	.word	0x200011ec
 80062c8:	200011f4 	.word	0x200011f4
 80062cc:	200011fc 	.word	0x200011fc
 80062d0:	200011f8 	.word	0x200011f8
 80062d4:	20001208 	.word	0x20001208

080062d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062e0:	4b27      	ldr	r3, [pc, #156]	@ (8006380 <prvInsertBlockIntoFreeList+0xa8>)
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e002      	b.n	80062ec <prvInsertBlockIntoFreeList+0x14>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d8f7      	bhi.n	80062e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d108      	bne.n	800631a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d118      	bne.n	8006360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b14      	ldr	r3, [pc, #80]	@ (8006384 <prvInsertBlockIntoFreeList+0xac>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d00d      	beq.n	8006356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e008      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006356:	4b0b      	ldr	r3, [pc, #44]	@ (8006384 <prvInsertBlockIntoFreeList+0xac>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e003      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	429a      	cmp	r2, r3
 800636e:	d002      	beq.n	8006376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr
 8006380:	200011ec 	.word	0x200011ec
 8006384:	200011f4 	.word	0x200011f4

08006388 <memset>:
 8006388:	4603      	mov	r3, r0
 800638a:	4402      	add	r2, r0
 800638c:	4293      	cmp	r3, r2
 800638e:	d100      	bne.n	8006392 <memset+0xa>
 8006390:	4770      	bx	lr
 8006392:	f803 1b01 	strb.w	r1, [r3], #1
 8006396:	e7f9      	b.n	800638c <memset+0x4>

08006398 <_reclaim_reent>:
 8006398:	4b2d      	ldr	r3, [pc, #180]	@ (8006450 <_reclaim_reent+0xb8>)
 800639a:	b570      	push	{r4, r5, r6, lr}
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4604      	mov	r4, r0
 80063a0:	4283      	cmp	r3, r0
 80063a2:	d053      	beq.n	800644c <_reclaim_reent+0xb4>
 80063a4:	69c3      	ldr	r3, [r0, #28]
 80063a6:	b31b      	cbz	r3, 80063f0 <_reclaim_reent+0x58>
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	b163      	cbz	r3, 80063c6 <_reclaim_reent+0x2e>
 80063ac:	2500      	movs	r5, #0
 80063ae:	69e3      	ldr	r3, [r4, #28]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	5959      	ldr	r1, [r3, r5]
 80063b4:	b9b1      	cbnz	r1, 80063e4 <_reclaim_reent+0x4c>
 80063b6:	3504      	adds	r5, #4
 80063b8:	2d80      	cmp	r5, #128	@ 0x80
 80063ba:	d1f8      	bne.n	80063ae <_reclaim_reent+0x16>
 80063bc:	69e3      	ldr	r3, [r4, #28]
 80063be:	4620      	mov	r0, r4
 80063c0:	68d9      	ldr	r1, [r3, #12]
 80063c2:	f000 f87b 	bl	80064bc <_free_r>
 80063c6:	69e3      	ldr	r3, [r4, #28]
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	b111      	cbz	r1, 80063d2 <_reclaim_reent+0x3a>
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 f875 	bl	80064bc <_free_r>
 80063d2:	69e3      	ldr	r3, [r4, #28]
 80063d4:	689d      	ldr	r5, [r3, #8]
 80063d6:	b15d      	cbz	r5, 80063f0 <_reclaim_reent+0x58>
 80063d8:	4629      	mov	r1, r5
 80063da:	4620      	mov	r0, r4
 80063dc:	682d      	ldr	r5, [r5, #0]
 80063de:	f000 f86d 	bl	80064bc <_free_r>
 80063e2:	e7f8      	b.n	80063d6 <_reclaim_reent+0x3e>
 80063e4:	680e      	ldr	r6, [r1, #0]
 80063e6:	4620      	mov	r0, r4
 80063e8:	f000 f868 	bl	80064bc <_free_r>
 80063ec:	4631      	mov	r1, r6
 80063ee:	e7e1      	b.n	80063b4 <_reclaim_reent+0x1c>
 80063f0:	6961      	ldr	r1, [r4, #20]
 80063f2:	b111      	cbz	r1, 80063fa <_reclaim_reent+0x62>
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 f861 	bl	80064bc <_free_r>
 80063fa:	69e1      	ldr	r1, [r4, #28]
 80063fc:	b111      	cbz	r1, 8006404 <_reclaim_reent+0x6c>
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 f85c 	bl	80064bc <_free_r>
 8006404:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006406:	b111      	cbz	r1, 800640e <_reclaim_reent+0x76>
 8006408:	4620      	mov	r0, r4
 800640a:	f000 f857 	bl	80064bc <_free_r>
 800640e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006410:	b111      	cbz	r1, 8006418 <_reclaim_reent+0x80>
 8006412:	4620      	mov	r0, r4
 8006414:	f000 f852 	bl	80064bc <_free_r>
 8006418:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800641a:	b111      	cbz	r1, 8006422 <_reclaim_reent+0x8a>
 800641c:	4620      	mov	r0, r4
 800641e:	f000 f84d 	bl	80064bc <_free_r>
 8006422:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006424:	b111      	cbz	r1, 800642c <_reclaim_reent+0x94>
 8006426:	4620      	mov	r0, r4
 8006428:	f000 f848 	bl	80064bc <_free_r>
 800642c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800642e:	b111      	cbz	r1, 8006436 <_reclaim_reent+0x9e>
 8006430:	4620      	mov	r0, r4
 8006432:	f000 f843 	bl	80064bc <_free_r>
 8006436:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006438:	b111      	cbz	r1, 8006440 <_reclaim_reent+0xa8>
 800643a:	4620      	mov	r0, r4
 800643c:	f000 f83e 	bl	80064bc <_free_r>
 8006440:	6a23      	ldr	r3, [r4, #32]
 8006442:	b11b      	cbz	r3, 800644c <_reclaim_reent+0xb4>
 8006444:	4620      	mov	r0, r4
 8006446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800644a:	4718      	bx	r3
 800644c:	bd70      	pop	{r4, r5, r6, pc}
 800644e:	bf00      	nop
 8006450:	20000018 	.word	0x20000018

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	2600      	movs	r6, #0
 8006458:	4d0c      	ldr	r5, [pc, #48]	@ (800648c <__libc_init_array+0x38>)
 800645a:	4c0d      	ldr	r4, [pc, #52]	@ (8006490 <__libc_init_array+0x3c>)
 800645c:	1b64      	subs	r4, r4, r5
 800645e:	10a4      	asrs	r4, r4, #2
 8006460:	42a6      	cmp	r6, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	f000 f87e 	bl	8006564 <_init>
 8006468:	2600      	movs	r6, #0
 800646a:	4d0a      	ldr	r5, [pc, #40]	@ (8006494 <__libc_init_array+0x40>)
 800646c:	4c0a      	ldr	r4, [pc, #40]	@ (8006498 <__libc_init_array+0x44>)
 800646e:	1b64      	subs	r4, r4, r5
 8006470:	10a4      	asrs	r4, r4, #2
 8006472:	42a6      	cmp	r6, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f855 3b04 	ldr.w	r3, [r5], #4
 800647c:	4798      	blx	r3
 800647e:	3601      	adds	r6, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	f855 3b04 	ldr.w	r3, [r5], #4
 8006486:	4798      	blx	r3
 8006488:	3601      	adds	r6, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	080065e4 	.word	0x080065e4
 8006490:	080065e4 	.word	0x080065e4
 8006494:	080065e4 	.word	0x080065e4
 8006498:	080065e8 	.word	0x080065e8

0800649c <__retarget_lock_acquire_recursive>:
 800649c:	4770      	bx	lr

0800649e <__retarget_lock_release_recursive>:
 800649e:	4770      	bx	lr

080064a0 <memcpy>:
 80064a0:	440a      	add	r2, r1
 80064a2:	4291      	cmp	r1, r2
 80064a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80064a8:	d100      	bne.n	80064ac <memcpy+0xc>
 80064aa:	4770      	bx	lr
 80064ac:	b510      	push	{r4, lr}
 80064ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064b2:	4291      	cmp	r1, r2
 80064b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b8:	d1f9      	bne.n	80064ae <memcpy+0xe>
 80064ba:	bd10      	pop	{r4, pc}

080064bc <_free_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4605      	mov	r5, r0
 80064c0:	2900      	cmp	r1, #0
 80064c2:	d040      	beq.n	8006546 <_free_r+0x8a>
 80064c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c8:	1f0c      	subs	r4, r1, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bfb8      	it	lt
 80064ce:	18e4      	addlt	r4, r4, r3
 80064d0:	f000 f83c 	bl	800654c <__malloc_lock>
 80064d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006548 <_free_r+0x8c>)
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	b933      	cbnz	r3, 80064e8 <_free_r+0x2c>
 80064da:	6063      	str	r3, [r4, #4]
 80064dc:	6014      	str	r4, [r2, #0]
 80064de:	4628      	mov	r0, r5
 80064e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e4:	f000 b838 	b.w	8006558 <__malloc_unlock>
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	d908      	bls.n	80064fe <_free_r+0x42>
 80064ec:	6820      	ldr	r0, [r4, #0]
 80064ee:	1821      	adds	r1, r4, r0
 80064f0:	428b      	cmp	r3, r1
 80064f2:	bf01      	itttt	eq
 80064f4:	6819      	ldreq	r1, [r3, #0]
 80064f6:	685b      	ldreq	r3, [r3, #4]
 80064f8:	1809      	addeq	r1, r1, r0
 80064fa:	6021      	streq	r1, [r4, #0]
 80064fc:	e7ed      	b.n	80064da <_free_r+0x1e>
 80064fe:	461a      	mov	r2, r3
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	b10b      	cbz	r3, 8006508 <_free_r+0x4c>
 8006504:	42a3      	cmp	r3, r4
 8006506:	d9fa      	bls.n	80064fe <_free_r+0x42>
 8006508:	6811      	ldr	r1, [r2, #0]
 800650a:	1850      	adds	r0, r2, r1
 800650c:	42a0      	cmp	r0, r4
 800650e:	d10b      	bne.n	8006528 <_free_r+0x6c>
 8006510:	6820      	ldr	r0, [r4, #0]
 8006512:	4401      	add	r1, r0
 8006514:	1850      	adds	r0, r2, r1
 8006516:	4283      	cmp	r3, r0
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	d1e0      	bne.n	80064de <_free_r+0x22>
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	4408      	add	r0, r1
 8006522:	6010      	str	r0, [r2, #0]
 8006524:	6053      	str	r3, [r2, #4]
 8006526:	e7da      	b.n	80064de <_free_r+0x22>
 8006528:	d902      	bls.n	8006530 <_free_r+0x74>
 800652a:	230c      	movs	r3, #12
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	e7d6      	b.n	80064de <_free_r+0x22>
 8006530:	6820      	ldr	r0, [r4, #0]
 8006532:	1821      	adds	r1, r4, r0
 8006534:	428b      	cmp	r3, r1
 8006536:	bf01      	itttt	eq
 8006538:	6819      	ldreq	r1, [r3, #0]
 800653a:	685b      	ldreq	r3, [r3, #4]
 800653c:	1809      	addeq	r1, r1, r0
 800653e:	6021      	streq	r1, [r4, #0]
 8006540:	6063      	str	r3, [r4, #4]
 8006542:	6054      	str	r4, [r2, #4]
 8006544:	e7cb      	b.n	80064de <_free_r+0x22>
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	20001348 	.word	0x20001348

0800654c <__malloc_lock>:
 800654c:	4801      	ldr	r0, [pc, #4]	@ (8006554 <__malloc_lock+0x8>)
 800654e:	f7ff bfa5 	b.w	800649c <__retarget_lock_acquire_recursive>
 8006552:	bf00      	nop
 8006554:	20001344 	.word	0x20001344

08006558 <__malloc_unlock>:
 8006558:	4801      	ldr	r0, [pc, #4]	@ (8006560 <__malloc_unlock+0x8>)
 800655a:	f7ff bfa0 	b.w	800649e <__retarget_lock_release_recursive>
 800655e:	bf00      	nop
 8006560:	20001344 	.word	0x20001344

08006564 <_init>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	bf00      	nop
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr

08006570 <_fini>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr
