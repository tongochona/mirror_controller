
RTOS_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003f00  08003f00  00004f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f60  08003f60  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003f60  08003f60  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003f60  08003f60  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f60  08003f60  00004f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f64  08003f64  00004f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003f68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000068  08003fd0  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001284  08003fd0  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8bd  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e0  00000000  00000000  0001394e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00016230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b44  00000000  00000000  000170e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019786  00000000  00000000  00017c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff87  00000000  00000000  000313aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956c7  00000000  00000000  00041331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d69f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee4  00000000  00000000  000d6a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000da920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ee8 	.word	0x08003ee8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08003ee8 	.word	0x08003ee8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000084 	.word	0x20000084
 800017c:	20000124 	.word	0x20000124

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb4f 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f843 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f911 	bl	80003b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000192:	f000 f89b 	bl	80002cc <MX_ADC1_Init>
  MX_CAN_Init();
 8000196:	f000 f8d7 	bl	8000348 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800019a:	4815      	ldr	r0, [pc, #84]	@ (80001f0 <main+0x70>)
 800019c:	f000 fc4e 	bl	8000a3c <HAL_ADC_Start>
  HAL_CAN_Start(&hcan);
 80001a0:	4814      	ldr	r0, [pc, #80]	@ (80001f4 <main+0x74>)
 80001a2:	f001 f899 	bl	80012d8 <HAL_CAN_Start>
  TxHeader.DLC = 8;  // data length
 80001a6:	4b14      	ldr	r3, [pc, #80]	@ (80001f8 <main+0x78>)
 80001a8:	2208      	movs	r2, #8
 80001aa:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80001ac:	4b12      	ldr	r3, [pc, #72]	@ (80001f8 <main+0x78>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80001b2:	4b11      	ldr	r3, [pc, #68]	@ (80001f8 <main+0x78>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x6A5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 80001b8:	4b0f      	ldr	r3, [pc, #60]	@ (80001f8 <main+0x78>)
 80001ba:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 80001be:	601a      	str	r2, [r3, #0]

  xTaskCreate(Task_SendMessage, "SendMessage", 128, NULL, 3, &SendMessage_Handler);
 80001c0:	4b0e      	ldr	r3, [pc, #56]	@ (80001fc <main+0x7c>)
 80001c2:	9301      	str	r3, [sp, #4]
 80001c4:	2303      	movs	r3, #3
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2300      	movs	r3, #0
 80001ca:	2280      	movs	r2, #128	@ 0x80
 80001cc:	490c      	ldr	r1, [pc, #48]	@ (8000200 <main+0x80>)
 80001ce:	480d      	ldr	r0, [pc, #52]	@ (8000204 <main+0x84>)
 80001d0:	f002 fd11 	bl	8002bf6 <xTaskCreate>
  xTaskCreate(Task_ToggleLED, "ToggleLED", 128, NULL, 1, &ToggleLED_Handler);
 80001d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000208 <main+0x88>)
 80001d6:	9301      	str	r3, [sp, #4]
 80001d8:	2301      	movs	r3, #1
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	2300      	movs	r3, #0
 80001de:	2280      	movs	r2, #128	@ 0x80
 80001e0:	490a      	ldr	r1, [pc, #40]	@ (800020c <main+0x8c>)
 80001e2:	480b      	ldr	r0, [pc, #44]	@ (8000210 <main+0x90>)
 80001e4:	f002 fd07 	bl	8002bf6 <xTaskCreate>

  vTaskStartScheduler();
 80001e8:	f002 fe8a 	bl	8002f00 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	bf00      	nop
 80001ee:	e7fd      	b.n	80001ec <main+0x6c>
 80001f0:	20000324 	.word	0x20000324
 80001f4:	20000354 	.word	0x20000354
 80001f8:	20000380 	.word	0x20000380
 80001fc:	2000039c 	.word	0x2000039c
 8000200:	08003f00 	.word	0x08003f00
 8000204:	08000449 	.word	0x08000449
 8000208:	200003a0 	.word	0x200003a0
 800020c:	08003f0c 	.word	0x08003f0c
 8000210:	080004a5 	.word	0x080004a5

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b094      	sub	sp, #80	@ 0x50
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021e:	2228      	movs	r2, #40	@ 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fd80 	bl	8003d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000244:	2301      	movs	r3, #1
 8000246:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000260:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000264:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fbde 	bl	8001a2c <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000276:	f000 f93b 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fe4a 	bl	8001f30 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a2:	f000 f925 	bl	80004f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002a6:	2302      	movs	r3, #2
 80002a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 ffe6 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002be:	f000 f917 	bl	80004f0 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3750      	adds	r7, #80	@ 0x50
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002dc:	4b18      	ldr	r3, [pc, #96]	@ (8000340 <MX_ADC1_Init+0x74>)
 80002de:	4a19      	ldr	r2, [pc, #100]	@ (8000344 <MX_ADC1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <MX_ADC1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002e8:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <MX_ADC1_Init+0x74>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <MX_ADC1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f4:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <MX_ADC1_Init+0x74>)
 80002f6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fc:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <MX_ADC1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000302:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <MX_ADC1_Init+0x74>)
 8000304:	2201      	movs	r2, #1
 8000306:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000308:	480d      	ldr	r0, [pc, #52]	@ (8000340 <MX_ADC1_Init+0x74>)
 800030a:	f000 fabf 	bl	800088c <HAL_ADC_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000314:	f000 f8ec 	bl	80004f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000318:	2309      	movs	r3, #9
 800031a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800031c:	2301      	movs	r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	@ (8000340 <MX_ADC1_Init+0x74>)
 800032a:	f000 fd47 	bl	8000dbc <HAL_ADC_ConfigChannel>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000334:	f000 f8dc 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	3710      	adds	r7, #16
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000324 	.word	0x20000324
 8000344:	40012400 	.word	0x40012400

08000348 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800034c:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <MX_CAN_Init+0x64>)
 800034e:	4a18      	ldr	r2, [pc, #96]	@ (80003b0 <MX_CAN_Init+0x68>)
 8000350:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 8000352:	4b16      	ldr	r3, [pc, #88]	@ (80003ac <MX_CAN_Init+0x64>)
 8000354:	2248      	movs	r2, #72	@ 0x48
 8000356:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000358:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <MX_CAN_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800035e:	4b13      	ldr	r3, [pc, #76]	@ (80003ac <MX_CAN_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_CAN_Init+0x64>)
 8000366:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800036a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800036c:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <MX_CAN_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_CAN_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_CAN_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_CAN_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_CAN_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800038a:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <MX_CAN_Init+0x64>)
 800038c:	2200      	movs	r2, #0
 800038e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_CAN_Init+0x64>)
 8000392:	2200      	movs	r2, #0
 8000394:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	@ (80003ac <MX_CAN_Init+0x64>)
 8000398:	f000 fea3 	bl	80010e2 <HAL_CAN_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80003a2:	f000 f8a5 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000354 	.word	0x20000354
 80003b0:	40006400 	.word	0x40006400

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000440 <MX_GPIO_Init+0x8c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000440 <MX_GPIO_Init+0x8c>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <MX_GPIO_Init+0x8c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0320 	and.w	r3, r3, #32
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b17      	ldr	r3, [pc, #92]	@ (8000440 <MX_GPIO_Init+0x8c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a16      	ldr	r2, [pc, #88]	@ (8000440 <MX_GPIO_Init+0x8c>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <MX_GPIO_Init+0x8c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <MX_GPIO_Init+0x8c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a10      	ldr	r2, [pc, #64]	@ (8000440 <MX_GPIO_Init+0x8c>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <MX_GPIO_Init+0x8c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2104      	movs	r1, #4
 8000414:	480b      	ldr	r0, [pc, #44]	@ (8000444 <MX_GPIO_Init+0x90>)
 8000416:	f001 fad7 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800041a:	2304      	movs	r3, #4
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2302      	movs	r3, #2
 8000428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	4804      	ldr	r0, [pc, #16]	@ (8000444 <MX_GPIO_Init+0x90>)
 8000432:	f001 f945 	bl	80016c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000436:	bf00      	nop
 8000438:	3720      	adds	r7, #32
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	40010c00 	.word	0x40010c00

08000448 <Task_SendMessage>:

/* USER CODE BEGIN 4 */

void Task_SendMessage(void *argument)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	while(1){
		  HAL_ADC_PollForConversion(&hadc1,1000);
 8000450:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000454:	480d      	ldr	r0, [pc, #52]	@ (800048c <Task_SendMessage+0x44>)
 8000456:	f000 fb9f 	bl	8000b98 <HAL_ADC_PollForConversion>
		  readValue = HAL_ADC_GetValue(&hadc1);
 800045a:	480c      	ldr	r0, [pc, #48]	@ (800048c <Task_SendMessage+0x44>)
 800045c:	f000 fca2 	bl	8000da4 <HAL_ADC_GetValue>
 8000460:	4603      	mov	r3, r0
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <Task_SendMessage+0x48>)
 8000466:	801a      	strh	r2, [r3, #0]
		  // readValue is between 0-4095 but we need to transmit maximum 255 (one byte)
		  // We divide readValue by 16 to get 0-255. Better way to divide is by shifting bits
		  // (readValue >> 4) is same as (readValue / 16)
		  TxData[7] = readValue >> 4;
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <Task_SendMessage+0x48>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	b29b      	uxth	r3, r3
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <Task_SendMessage+0x4c>)
 8000474:	71da      	strb	r2, [r3, #7]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <Task_SendMessage+0x50>)
 8000478:	4a06      	ldr	r2, [pc, #24]	@ (8000494 <Task_SendMessage+0x4c>)
 800047a:	4908      	ldr	r1, [pc, #32]	@ (800049c <Task_SendMessage+0x54>)
 800047c:	4808      	ldr	r0, [pc, #32]	@ (80004a0 <Task_SendMessage+0x58>)
 800047e:	f000 ff6f 	bl	8001360 <HAL_CAN_AddTxMessage>
		  vTaskDelay(200);
 8000482:	20c8      	movs	r0, #200	@ 0xc8
 8000484:	f002 fd06 	bl	8002e94 <vTaskDelay>
		  HAL_ADC_PollForConversion(&hadc1,1000);
 8000488:	bf00      	nop
 800048a:	e7e1      	b.n	8000450 <Task_SendMessage+0x8>
 800048c:	20000324 	.word	0x20000324
 8000490:	2000037c 	.word	0x2000037c
 8000494:	20000000 	.word	0x20000000
 8000498:	20000398 	.word	0x20000398
 800049c:	20000380 	.word	0x20000380
 80004a0:	20000354 	.word	0x20000354

080004a4 <Task_ToggleLED>:
	}
}

void Task_ToggleLED(void *argument){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80004ac:	2104      	movs	r1, #4
 80004ae:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <Task_ToggleLED+0x20>)
 80004b0:	f001 faa2 	bl	80019f8 <HAL_GPIO_TogglePin>
		vTaskDelay(TxData[7]);
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <Task_ToggleLED+0x24>)
 80004b6:	79db      	ldrb	r3, [r3, #7]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f002 fceb 	bl	8002e94 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80004be:	bf00      	nop
 80004c0:	e7f4      	b.n	80004ac <Task_ToggleLED+0x8>
 80004c2:	bf00      	nop
 80004c4:	40010c00 	.word	0x40010c00
 80004c8:	20000000 	.word	0x20000000

080004cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	@ (80004ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d101      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80004de:	f000 f9b9 	bl	8000854 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40012c00 	.word	0x40012c00

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000502:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <HAL_MspInit+0x68>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <HAL_MspInit+0x68>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <HAL_MspInit+0x68>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <HAL_MspInit+0x68>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a11      	ldr	r2, [pc, #68]	@ (8000564 <HAL_MspInit+0x68>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <HAL_MspInit+0x68>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	210f      	movs	r1, #15
 8000536:	f06f 0001 	mvn.w	r0, #1
 800053a:	f001 f896 	bl	800166a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <HAL_MspInit+0x6c>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <HAL_MspInit+0x6c>)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	40010000 	.word	0x40010000

0800056c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <HAL_ADC_MspInit+0x6c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d121      	bne.n	80005d0 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <HAL_ADC_MspInit+0x70>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <HAL_ADC_MspInit+0x70>)
 8000592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <HAL_ADC_MspInit+0x70>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <HAL_ADC_MspInit+0x70>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a0c      	ldr	r2, [pc, #48]	@ (80005dc <HAL_ADC_MspInit+0x70>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <HAL_ADC_MspInit+0x70>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0308 	and.w	r3, r3, #8
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c0:	2303      	movs	r3, #3
 80005c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <HAL_ADC_MspInit+0x74>)
 80005cc:	f001 f878 	bl	80016c0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005d0:	bf00      	nop
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40012400 	.word	0x40012400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010c00 	.word	0x40010c00

080005e4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	@ 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a25      	ldr	r2, [pc, #148]	@ (8000694 <HAL_CAN_MspInit+0xb0>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d143      	bne.n	800068c <HAL_CAN_MspInit+0xa8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000604:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <HAL_CAN_MspInit+0xb4>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4a23      	ldr	r2, [pc, #140]	@ (8000698 <HAL_CAN_MspInit+0xb4>)
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800060e:	61d3      	str	r3, [r2, #28]
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <HAL_CAN_MspInit+0xb4>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <HAL_CAN_MspInit+0xb4>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a1d      	ldr	r2, [pc, #116]	@ (8000698 <HAL_CAN_MspInit+0xb4>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <HAL_CAN_MspInit+0xb4>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4814      	ldr	r0, [pc, #80]	@ (800069c <HAL_CAN_MspInit+0xb8>)
 800064a:	f001 f839 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800064e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000658:	2303      	movs	r3, #3
 800065a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	480e      	ldr	r0, [pc, #56]	@ (800069c <HAL_CAN_MspInit+0xb8>)
 8000664:	f001 f82c 	bl	80016c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <HAL_CAN_MspInit+0xbc>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
 800066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000670:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
 8000676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000678:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
 800067e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
 8000686:	4a06      	ldr	r2, [pc, #24]	@ (80006a0 <HAL_CAN_MspInit+0xbc>)
 8000688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068a:	6053      	str	r3, [r2, #4]

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	@ 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40006400 	.word	0x40006400
 8000698:	40021000 	.word	0x40021000
 800069c:	40010c00 	.word	0x40010c00
 80006a0:	40010000 	.word	0x40010000

080006a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	@ 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <HAL_InitTick+0xd0>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a2d      	ldr	r2, [pc, #180]	@ (8000774 <HAL_InitTick+0xd0>)
 80006c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <HAL_InitTick+0xd0>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006d2:	f107 020c 	add.w	r2, r7, #12
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fd83 	bl	80021e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006e2:	f001 fd6d 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 80006e6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ea:	4a23      	ldr	r2, [pc, #140]	@ (8000778 <HAL_InitTick+0xd4>)
 80006ec:	fba2 2303 	umull	r2, r3, r2, r3
 80006f0:	0c9b      	lsrs	r3, r3, #18
 80006f2:	3b01      	subs	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <HAL_InitTick+0xd8>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	@ (8000780 <HAL_InitTick+0xdc>)
 80006fa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <HAL_InitTick+0xd8>)
 80006fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000702:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000704:	4a1d      	ldr	r2, [pc, #116]	@ (800077c <HAL_InitTick+0xd8>)
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_InitTick+0xd8>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <HAL_InitTick+0xd8>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <HAL_InitTick+0xd8>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800071c:	4817      	ldr	r0, [pc, #92]	@ (800077c <HAL_InitTick+0xd8>)
 800071e:	f001 ff1d 	bl	800255c <HAL_TIM_Base_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800072c:	2b00      	cmp	r3, #0
 800072e:	d11b      	bne.n	8000768 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000730:	4812      	ldr	r0, [pc, #72]	@ (800077c <HAL_InitTick+0xd8>)
 8000732:	f001 ff6b 	bl	800260c <HAL_TIM_Base_Start_IT>
 8000736:	4603      	mov	r3, r0
 8000738:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800073c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000740:	2b00      	cmp	r3, #0
 8000742:	d111      	bne.n	8000768 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000744:	2019      	movs	r0, #25
 8000746:	f000 ffac 	bl	80016a2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d808      	bhi.n	8000762 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	2019      	movs	r0, #25
 8000756:	f000 ff88 	bl	800166a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <HAL_InitTick+0xe0>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	e002      	b.n	8000768 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000768:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800076c:	4618      	mov	r0, r3
 800076e:	3730      	adds	r7, #48	@ 0x30
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	431bde83 	.word	0x431bde83
 800077c:	200003a4 	.word	0x200003a4
 8000780:	40012c00 	.word	0x40012c00
 8000784:	2000000c 	.word	0x2000000c

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <NMI_Handler+0x4>

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <UsageFault_Handler+0x4>

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007c0:	4802      	ldr	r0, [pc, #8]	@ (80007cc <TIM1_UP_IRQHandler+0x10>)
 80007c2:	f001 ff75 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200003a4 	.word	0x200003a4

080007d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007dc:	f7ff fff8 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480b      	ldr	r0, [pc, #44]	@ (8000810 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007e2:	490c      	ldr	r1, [pc, #48]	@ (8000814 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000818 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a09      	ldr	r2, [pc, #36]	@ (800081c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007f8:	4c09      	ldr	r4, [pc, #36]	@ (8000820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000806:	f003 faf5 	bl	8003df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fcb9 	bl	8000180 <main>
  bx lr
 800080e:	4770      	bx	lr
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000818:	08003f68 	.word	0x08003f68
  ldr r2, =_sbss
 800081c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000820:	20001284 	.word	0x20001284

08000824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_2_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <HAL_Init+0x28>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a07      	ldr	r2, [pc, #28]	@ (8000850 <HAL_Init+0x28>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 ff0b 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083e:	200f      	movs	r0, #15
 8000840:	f7ff ff30 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff fe5a 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_IncTick+0x1c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <HAL_IncTick+0x20>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a03      	ldr	r2, [pc, #12]	@ (8000874 <HAL_IncTick+0x20>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000010 	.word	0x20000010
 8000874:	200003ec 	.word	0x200003ec

08000878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b02      	ldr	r3, [pc, #8]	@ (8000888 <HAL_GetTick+0x10>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	200003ec 	.word	0x200003ec

0800088c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e0be      	b.n	8000a2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d109      	bne.n	80008d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fe4e 	bl	800056c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 fbc5 	bl	8001060 <ADC_ConversionStop_Disable>
 80008d6:	4603      	mov	r3, r0
 80008d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8099 	bne.w	8000a1a <HAL_ADC_Init+0x18e>
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f040 8095 	bne.w	8000a1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80008f8:	f023 0302 	bic.w	r3, r3, #2
 80008fc:	f043 0202 	orr.w	r2, r3, #2
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800090c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7b1b      	ldrb	r3, [r3, #12]
 8000912:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000914:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	4313      	orrs	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000924:	d003      	beq.n	800092e <HAL_ADC_Init+0xa2>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d102      	bne.n	8000934 <HAL_ADC_Init+0xa8>
 800092e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000932:	e000      	b.n	8000936 <HAL_ADC_Init+0xaa>
 8000934:	2300      	movs	r3, #0
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7d1b      	ldrb	r3, [r3, #20]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d119      	bne.n	8000978 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7b1b      	ldrb	r3, [r3, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d109      	bne.n	8000960 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	3b01      	subs	r3, #1
 8000952:	035a      	lsls	r2, r3, #13
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	e00b      	b.n	8000978 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	f043 0220 	orr.w	r2, r3, #32
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000970:	f043 0201 	orr.w	r2, r3, #1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	430a      	orrs	r2, r1
 800098a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <HAL_ADC_Init+0x1a8>)
 8000994:	4013      	ands	r3, r2
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	430b      	orrs	r3, r1
 800099e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009a8:	d003      	beq.n	80009b2 <HAL_ADC_Init+0x126>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d104      	bne.n	80009bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	051b      	lsls	r3, r3, #20
 80009ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_ADC_Init+0x1ac>)
 80009d8:	4013      	ands	r3, r2
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d10b      	bne.n	80009f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ea:	f023 0303 	bic.w	r3, r3, #3
 80009ee:	f043 0201 	orr.w	r2, r3, #1
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f6:	e018      	b.n	8000a2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fc:	f023 0312 	bic.w	r3, r3, #18
 8000a00:	f043 0210 	orr.w	r2, r3, #16
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0c:	f043 0201 	orr.w	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a18:	e007      	b.n	8000a2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a1e:	f043 0210 	orr.w	r2, r3, #16
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	ffe1f7fd 	.word	0xffe1f7fd
 8000a38:	ff1f0efe 	.word	0xff1f0efe

08000a3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <HAL_ADC_Start+0x1a>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e098      	b.n	8000b88 <HAL_ADC_Start+0x14c>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 faa4 	bl	8000fac <ADC_Enable>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f040 8087 	bne.w	8000b7e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a41      	ldr	r2, [pc, #260]	@ (8000b90 <HAL_ADC_Start+0x154>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d105      	bne.n	8000a9a <HAL_ADC_Start+0x5e>
 8000a8e:	4b41      	ldr	r3, [pc, #260]	@ (8000b94 <HAL_ADC_Start+0x158>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d115      	bne.n	8000ac6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d026      	beq.n	8000b02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000abc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ac4:	e01d      	b.n	8000b02 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b94 <HAL_ADC_Start+0x158>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d004      	beq.n	8000ae6 <HAL_ADC_Start+0xaa>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b90 <HAL_ADC_Start+0x154>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d10d      	bne.n	8000b02 <HAL_ADC_Start+0xc6>
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <HAL_ADC_Start+0x158>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000afa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b12:	f023 0206 	bic.w	r2, r3, #6
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b1a:	e002      	b.n	8000b22 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f06f 0202 	mvn.w	r2, #2
 8000b32:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b42:	d113      	bne.n	8000b6c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b48:	4a11      	ldr	r2, [pc, #68]	@ (8000b90 <HAL_ADC_Start+0x154>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d105      	bne.n	8000b5a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_ADC_Start+0x158>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d108      	bne.n	8000b6c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	e00c      	b.n	8000b86 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	e003      	b.n	8000b86 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012800 	.word	0x40012800
 8000b94:	40012400 	.word	0x40012400

08000b98 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000bae:	f7ff fe63 	bl	8000878 <HAL_GetTick>
 8000bb2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00b      	beq.n	8000bda <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc6:	f043 0220 	orr.w	r2, r3, #32
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0d3      	b.n	8000d82 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d131      	bne.n	8000c4c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d12a      	bne.n	8000c4c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bf6:	e021      	b.n	8000c3c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bfe:	d01d      	beq.n	8000c3c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <HAL_ADC_PollForConversion+0x7e>
 8000c06:	f7ff fe37 	bl	8000878 <HAL_GetTick>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d212      	bcs.n	8000c3c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10b      	bne.n	8000c3c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c28:	f043 0204 	orr.w	r2, r3, #4
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e0a2      	b.n	8000d82 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0d6      	beq.n	8000bf8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c4a:	e070      	b.n	8000d2e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d8c <HAL_ADC_PollForConversion+0x1f4>)
 8000c4e:	681c      	ldr	r4, [r3, #0]
 8000c50:	2002      	movs	r0, #2
 8000c52:	f001 fbcd 	bl	80023f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c56:	4603      	mov	r3, r0
 8000c58:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6919      	ldr	r1, [r3, #16]
 8000c62:	4b4b      	ldr	r3, [pc, #300]	@ (8000d90 <HAL_ADC_PollForConversion+0x1f8>)
 8000c64:	400b      	ands	r3, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d118      	bne.n	8000c9c <HAL_ADC_PollForConversion+0x104>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68d9      	ldr	r1, [r3, #12]
 8000c70:	4b48      	ldr	r3, [pc, #288]	@ (8000d94 <HAL_ADC_PollForConversion+0x1fc>)
 8000c72:	400b      	ands	r3, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d111      	bne.n	8000c9c <HAL_ADC_PollForConversion+0x104>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6919      	ldr	r1, [r3, #16]
 8000c7e:	4b46      	ldr	r3, [pc, #280]	@ (8000d98 <HAL_ADC_PollForConversion+0x200>)
 8000c80:	400b      	ands	r3, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d108      	bne.n	8000c98 <HAL_ADC_PollForConversion+0x100>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68d9      	ldr	r1, [r3, #12]
 8000c8c:	4b43      	ldr	r3, [pc, #268]	@ (8000d9c <HAL_ADC_PollForConversion+0x204>)
 8000c8e:	400b      	ands	r3, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_ADC_PollForConversion+0x100>
 8000c94:	2314      	movs	r3, #20
 8000c96:	e020      	b.n	8000cda <HAL_ADC_PollForConversion+0x142>
 8000c98:	2329      	movs	r3, #41	@ 0x29
 8000c9a:	e01e      	b.n	8000cda <HAL_ADC_PollForConversion+0x142>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6919      	ldr	r1, [r3, #16]
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8000d98 <HAL_ADC_PollForConversion+0x200>)
 8000ca4:	400b      	ands	r3, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d106      	bne.n	8000cb8 <HAL_ADC_PollForConversion+0x120>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68d9      	ldr	r1, [r3, #12]
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <HAL_ADC_PollForConversion+0x204>)
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00d      	beq.n	8000cd4 <HAL_ADC_PollForConversion+0x13c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6919      	ldr	r1, [r3, #16]
 8000cbe:	4b38      	ldr	r3, [pc, #224]	@ (8000da0 <HAL_ADC_PollForConversion+0x208>)
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d108      	bne.n	8000cd8 <HAL_ADC_PollForConversion+0x140>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68d9      	ldr	r1, [r3, #12]
 8000ccc:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <HAL_ADC_PollForConversion+0x208>)
 8000cce:	400b      	ands	r3, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <HAL_ADC_PollForConversion+0x140>
 8000cd4:	2354      	movs	r3, #84	@ 0x54
 8000cd6:	e000      	b.n	8000cda <HAL_ADC_PollForConversion+0x142>
 8000cd8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ce0:	e021      	b.n	8000d26 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ce8:	d01a      	beq.n	8000d20 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <HAL_ADC_PollForConversion+0x168>
 8000cf0:	f7ff fdc2 	bl	8000878 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d20f      	bcs.n	8000d20 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d90b      	bls.n	8000d20 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0c:	f043 0204 	orr.w	r2, r3, #4
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e030      	b.n	8000d82 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d8d9      	bhi.n	8000ce2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f06f 0212 	mvn.w	r2, #18
 8000d36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d4e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d52:	d115      	bne.n	8000d80 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d78:	f043 0201 	orr.w	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	24924924 	.word	0x24924924
 8000d94:	00924924 	.word	0x00924924
 8000d98:	12492492 	.word	0x12492492
 8000d9c:	00492492 	.word	0x00492492
 8000da0:	00249249 	.word	0x00249249

08000da4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d101      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x20>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e0dc      	b.n	8000f96 <HAL_ADC_ConfigChannel+0x1da>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b06      	cmp	r3, #6
 8000dea:	d81c      	bhi.n	8000e26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b05      	subs	r3, #5
 8000dfe:	221f      	movs	r2, #31
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4019      	ands	r1, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	3b05      	subs	r3, #5
 8000e18:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e24:	e03c      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b0c      	cmp	r3, #12
 8000e2c:	d81c      	bhi.n	8000e68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b23      	subs	r3, #35	@ 0x23
 8000e40:	221f      	movs	r2, #31
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4019      	ands	r1, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	3b23      	subs	r3, #35	@ 0x23
 8000e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e66:	e01b      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	3b41      	subs	r3, #65	@ 0x41
 8000e7a:	221f      	movs	r2, #31
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4019      	ands	r1, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	3b41      	subs	r3, #65	@ 0x41
 8000e94:	fa00 f203 	lsl.w	r2, r0, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	d91c      	bls.n	8000ee2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68d9      	ldr	r1, [r3, #12]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3b1e      	subs	r3, #30
 8000eba:	2207      	movs	r2, #7
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	6898      	ldr	r0, [r3, #8]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3b1e      	subs	r3, #30
 8000ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	e019      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6919      	ldr	r1, [r3, #16]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4019      	ands	r1, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6898      	ldr	r0, [r3, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b10      	cmp	r3, #16
 8000f1c:	d003      	beq.n	8000f26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f22:	2b11      	cmp	r3, #17
 8000f24:	d132      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d125      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d126      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b10      	cmp	r3, #16
 8000f54:	d11a      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0c9a      	lsrs	r2, r3, #18
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f6c:	e002      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <HAL_ADC_ConfigChannel+0x1b2>
 8000f7a:	e007      	b.n	8000f8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	f043 0220 	orr.w	r2, r3, #32
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	40012400 	.word	0x40012400
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	431bde83 	.word	0x431bde83

08000fac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d040      	beq.n	800104c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fda:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <ADC_Enable+0xac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	@ (800105c <ADC_Enable+0xb0>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	0c9b      	lsrs	r3, r3, #18
 8000fe6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe8:	e002      	b.n	8000ff0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f9      	bne.n	8000fea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ff6:	f7ff fc3f 	bl	8000878 <HAL_GetTick>
 8000ffa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ffc:	e01f      	b.n	800103e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ffe:	f7ff fc3b 	bl	8000878 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d918      	bls.n	800103e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d011      	beq.n	800103e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101e:	f043 0210 	orr.w	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e007      	b.n	800104e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d1d8      	bne.n	8000ffe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	431bde83 	.word	0x431bde83

08001060 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b01      	cmp	r3, #1
 8001078:	d12e      	bne.n	80010d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800108a:	f7ff fbf5 	bl	8000878 <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001090:	e01b      	b.n	80010ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001092:	f7ff fbf1 	bl	8000878 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d914      	bls.n	80010ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10d      	bne.n	80010ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b2:	f043 0210 	orr.w	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e007      	b.n	80010da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d0dc      	beq.n	8001092 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0ed      	b.n	80012d0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff fa6f 	bl	80005e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0201 	orr.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001116:	f7ff fbaf 	bl	8000878 <HAL_GetTick>
 800111a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800111c:	e012      	b.n	8001144 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800111e:	f7ff fbab 	bl	8000878 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b0a      	cmp	r3, #10
 800112a:	d90b      	bls.n	8001144 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001130:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2205      	movs	r2, #5
 800113c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0c5      	b.n	80012d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0e5      	beq.n	800111e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0202 	bic.w	r2, r2, #2
 8001160:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001162:	f7ff fb89 	bl	8000878 <HAL_GetTick>
 8001166:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001168:	e012      	b.n	8001190 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800116a:	f7ff fb85 	bl	8000878 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b0a      	cmp	r3, #10
 8001176:	d90b      	bls.n	8001190 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2205      	movs	r2, #5
 8001188:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e09f      	b.n	80012d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1e5      	bne.n	800116a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7e1b      	ldrb	r3, [r3, #24]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7e5b      	ldrb	r3, [r3, #25]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e007      	b.n	80011f2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7e9b      	ldrb	r3, [r3, #26]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d108      	bne.n	800120c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0220 	orr.w	r2, r2, #32
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e007      	b.n	800121c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0220 	bic.w	r2, r2, #32
 800121a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7edb      	ldrb	r3, [r3, #27]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d108      	bne.n	8001236 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0210 	bic.w	r2, r2, #16
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e007      	b.n	8001246 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0210 	orr.w	r2, r2, #16
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7f1b      	ldrb	r3, [r3, #28]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d108      	bne.n	8001260 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 0208 	orr.w	r2, r2, #8
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e007      	b.n	8001270 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0208 	bic.w	r2, r2, #8
 800126e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7f5b      	ldrb	r3, [r3, #29]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d108      	bne.n	800128a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0204 	orr.w	r2, r2, #4
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e007      	b.n	800129a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0204 	bic.w	r2, r2, #4
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	ea42 0103 	orr.w	r1, r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d12e      	bne.n	800134a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2202      	movs	r2, #2
 80012f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001304:	f7ff fab8 	bl	8000878 <HAL_GetTick>
 8001308:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800130a:	e012      	b.n	8001332 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800130c:	f7ff fab4 	bl	8000878 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b0a      	cmp	r3, #10
 8001318:	d90b      	bls.n	8001332 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2205      	movs	r2, #5
 800132a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e012      	b.n	8001358 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e5      	bne.n	800130c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e006      	b.n	8001358 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001374:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d003      	beq.n	800138c <HAL_CAN_AddTxMessage+0x2c>
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	2b02      	cmp	r3, #2
 8001388:	f040 80ad 	bne.w	80014e6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10a      	bne.n	80013ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800139c:	2b00      	cmp	r3, #0
 800139e:	d105      	bne.n	80013ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8095 	beq.w	80014d6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	0e1b      	lsrs	r3, r3, #24
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013b6:	2201      	movs	r2, #1
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10d      	bne.n	80013e4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013d2:	68f9      	ldr	r1, [r7, #12]
 80013d4:	6809      	ldr	r1, [r1, #0]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3318      	adds	r3, #24
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	440b      	add	r3, r1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e00f      	b.n	8001404 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013f4:	68f9      	ldr	r1, [r7, #12]
 80013f6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013f8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3318      	adds	r3, #24
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3318      	adds	r3, #24
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	440b      	add	r3, r1
 8001414:	3304      	adds	r3, #4
 8001416:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	7d1b      	ldrb	r3, [r3, #20]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d111      	bne.n	8001444 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3318      	adds	r3, #24
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	3304      	adds	r3, #4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	6811      	ldr	r1, [r2, #0]
 8001434:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3318      	adds	r3, #24
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	440b      	add	r3, r1
 8001440:	3304      	adds	r3, #4
 8001442:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3307      	adds	r3, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	061a      	lsls	r2, r3, #24
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3306      	adds	r3, #6
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3305      	adds	r3, #5
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	4313      	orrs	r3, r2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	3204      	adds	r2, #4
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	4610      	mov	r0, r2
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	6811      	ldr	r1, [r2, #0]
 800146c:	ea43 0200 	orr.w	r2, r3, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	440b      	add	r3, r1
 8001476:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800147a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3303      	adds	r3, #3
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	061a      	lsls	r2, r3, #24
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3302      	adds	r3, #2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	041b      	lsls	r3, r3, #16
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3301      	adds	r3, #1
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	4313      	orrs	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	4610      	mov	r0, r2
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	6811      	ldr	r1, [r2, #0]
 80014a2:	ea43 0200 	orr.w	r2, r3, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	440b      	add	r3, r1
 80014ac:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80014b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3318      	adds	r3, #24
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	6811      	ldr	r1, [r2, #0]
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3318      	adds	r3, #24
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	440b      	add	r3, r1
 80014d0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e00e      	b.n	80014f4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e006      	b.n	80014f4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
  }
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3724      	adds	r7, #36	@ 0x24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
	...

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4906      	ldr	r1, [pc, #24]	@ (8001598 <__NVIC_EnableIRQ+0x34>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff4f 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff64 	bl	8001548 <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ffb2 	bl	80015f0 <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff81 	bl	800159c <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff57 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	@ 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e169      	b.n	80019a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8158 	bne.w	80019a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001960 <HAL_GPIO_Init+0x2a0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4a98      	ldr	r2, [pc, #608]	@ (8001960 <HAL_GPIO_Init+0x2a0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4a98      	ldr	r2, [pc, #608]	@ (8001964 <HAL_GPIO_Init+0x2a4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a96      	ldr	r2, [pc, #600]	@ (8001964 <HAL_GPIO_Init+0x2a4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a96      	ldr	r2, [pc, #600]	@ (8001968 <HAL_GPIO_Init+0x2a8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a94      	ldr	r2, [pc, #592]	@ (8001968 <HAL_GPIO_Init+0x2a8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a94      	ldr	r2, [pc, #592]	@ (800196c <HAL_GPIO_Init+0x2ac>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a92      	ldr	r2, [pc, #584]	@ (800196c <HAL_GPIO_Init+0x2ac>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a92      	ldr	r2, [pc, #584]	@ (8001970 <HAL_GPIO_Init+0x2b0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a90      	ldr	r2, [pc, #576]	@ (8001970 <HAL_GPIO_Init+0x2b0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a79      	ldr	r2, [pc, #484]	@ (8001974 <HAL_GPIO_Init+0x2b4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	@ 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	@ 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80b1 	beq.w	80019a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b4d      	ldr	r3, [pc, #308]	@ (8001978 <HAL_GPIO_Init+0x2b8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a4c      	ldr	r2, [pc, #304]	@ (8001978 <HAL_GPIO_Init+0x2b8>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b4a      	ldr	r3, [pc, #296]	@ (8001978 <HAL_GPIO_Init+0x2b8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a48      	ldr	r2, [pc, #288]	@ (800197c <HAL_GPIO_Init+0x2bc>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a40      	ldr	r2, [pc, #256]	@ (8001980 <HAL_GPIO_Init+0x2c0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <HAL_GPIO_Init+0x1ec>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3f      	ldr	r2, [pc, #252]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00d      	beq.n	80018a8 <HAL_GPIO_Init+0x1e8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3e      	ldr	r2, [pc, #248]	@ (8001988 <HAL_GPIO_Init+0x2c8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d007      	beq.n	80018a4 <HAL_GPIO_Init+0x1e4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a3d      	ldr	r2, [pc, #244]	@ (800198c <HAL_GPIO_Init+0x2cc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_GPIO_Init+0x1e0>
 800189c:	2303      	movs	r3, #3
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e004      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018ac:	2300      	movs	r3, #0
 80018ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b0:	f002 0203 	and.w	r2, r2, #3
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	4093      	lsls	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018be:	492f      	ldr	r1, [pc, #188]	@ (800197c <HAL_GPIO_Init+0x2bc>)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	492c      	ldr	r1, [pc, #176]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4928      	ldr	r1, [pc, #160]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4922      	ldr	r1, [pc, #136]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	491e      	ldr	r1, [pc, #120]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001918:	4013      	ands	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4918      	ldr	r1, [pc, #96]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4914      	ldr	r1, [pc, #80]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001940:	4013      	ands	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d021      	beq.n	8001994 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	490e      	ldr	r1, [pc, #56]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e021      	b.n	80019a2 <HAL_GPIO_Init+0x2e2>
 800195e:	bf00      	nop
 8001960:	10320000 	.word	0x10320000
 8001964:	10310000 	.word	0x10310000
 8001968:	10220000 	.word	0x10220000
 800196c:	10210000 	.word	0x10210000
 8001970:	10120000 	.word	0x10120000
 8001974:	10110000 	.word	0x10110000
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	40010800 	.word	0x40010800
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40011000 	.word	0x40011000
 800198c:	40011400 	.word	0x40011400
 8001990:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	43db      	mvns	r3, r3
 800199c:	4909      	ldr	r1, [pc, #36]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 800199e:	4013      	ands	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	3301      	adds	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f47f ae8e 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	372c      	adds	r7, #44	@ 0x2c
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43d9      	mvns	r1, r3
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	400b      	ands	r3, r1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	611a      	str	r2, [r3, #16]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e272      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8087 	beq.w	8001b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4c:	4b92      	ldr	r3, [pc, #584]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d00c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a58:	4b8f      	ldr	r3, [pc, #572]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d112      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5e>
 8001a64:	4b8c      	ldr	r3, [pc, #560]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a70:	d10b      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	4b89      	ldr	r3, [pc, #548]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d06c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x12c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d168      	bne.n	8001b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e24c      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x76>
 8001a94:	4b80      	ldr	r3, [pc, #512]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a7f      	ldr	r2, [pc, #508]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e02e      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x98>
 8001aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7a      	ldr	r2, [pc, #488]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b78      	ldr	r3, [pc, #480]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a77      	ldr	r2, [pc, #476]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01d      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xbc>
 8001ace:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a71      	ldr	r2, [pc, #452]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6e      	ldr	r2, [pc, #440]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6a      	ldr	r2, [pc, #424]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b68      	ldr	r3, [pc, #416]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a67      	ldr	r2, [pc, #412]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7fe feb6 	bl	8000878 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7fe feb2 	bl	8000878 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	@ 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e200      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0xe4>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7fe fea2 	bl	8000878 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7fe fe9e 	bl	8000878 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e1ec      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x10c>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d063      	beq.n	8001c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b66:	4b4c      	ldr	r3, [pc, #304]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b72:	4b49      	ldr	r3, [pc, #292]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x18c>
 8001b7e:	4b46      	ldr	r3, [pc, #280]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d116      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	4b43      	ldr	r3, [pc, #268]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x176>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1c0      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4939      	ldr	r1, [pc, #228]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	e03a      	b.n	8001c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc0:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7fe fe57 	bl	8000878 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bce:	f7fe fe53 	bl	8000878 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1a1      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4927      	ldr	r1, [pc, #156]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e015      	b.n	8001c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c02:	4b26      	ldr	r3, [pc, #152]	@ (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe fe36 	bl	8000878 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c10:	f7fe fe32 	bl	8000878 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e180      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d03a      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d019      	beq.n	8001c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c48:	f7fe fe16 	bl	8000878 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7fe fe12 	bl	8000878 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e160      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f000 faea 	bl	8002248 <RCC_Delay>
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7fe fdfc 	bl	8000878 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c82:	e00f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7fe fdf8 	bl	8000878 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d908      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e146      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	42420000 	.word	0x42420000
 8001ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	4b92      	ldr	r3, [pc, #584]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e9      	bne.n	8001c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80a6 	beq.w	8001e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10d      	bne.n	8001cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b88      	ldr	r3, [pc, #544]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a87      	ldr	r2, [pc, #540]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b85      	ldr	r3, [pc, #532]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cea:	4b82      	ldr	r3, [pc, #520]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d118      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d02:	f7fe fdb9 	bl	8000878 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7fe fdb5 	bl	8000878 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	@ 0x64
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e103      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b75      	ldr	r3, [pc, #468]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x312>
 8001d30:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	e02d      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x334>
 8001d46:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a69      	ldr	r2, [pc, #420]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	4b67      	ldr	r3, [pc, #412]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a66      	ldr	r2, [pc, #408]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	e01c      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d10c      	bne.n	8001d82 <HAL_RCC_OscConfig+0x356>
 8001d68:	4b61      	ldr	r3, [pc, #388]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a60      	ldr	r2, [pc, #384]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	e00b      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d82:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a5a      	ldr	r2, [pc, #360]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a57      	ldr	r2, [pc, #348]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d015      	beq.n	8001dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7fe fd69 	bl	8000878 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7fe fd65 	bl	8000878 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0b1      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ee      	beq.n	8001daa <HAL_RCC_OscConfig+0x37e>
 8001dcc:	e014      	b.n	8001df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7fe fd53 	bl	8000878 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7fe fd4f 	bl	8000878 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e09b      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	4b40      	ldr	r3, [pc, #256]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8087 	beq.w	8001f22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e14:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d061      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d146      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	4b33      	ldr	r3, [pc, #204]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7fe fd23 	bl	8000878 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7fe fd1f 	bl	8000878 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e06d      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5c:	d108      	bne.n	8001e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4921      	ldr	r1, [pc, #132]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a19      	ldr	r1, [r3, #32]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	430b      	orrs	r3, r1
 8001e82:	491b      	ldr	r1, [pc, #108]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fcf3 	bl	8000878 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe fcef 	bl	8000878 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e03d      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x46a>
 8001eb4:	e035      	b.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fcdc 	bl	8000878 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe fcd8 	bl	8000878 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e026      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x498>
 8001ee2:	e01e      	b.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e019      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_RCC_OscConfig+0x500>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b6a      	ldr	r3, [pc, #424]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b67      	ldr	r3, [pc, #412]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	4965      	ldr	r1, [pc, #404]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b63      	ldr	r3, [pc, #396]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f8c:	4b59      	ldr	r3, [pc, #356]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a58      	ldr	r2, [pc, #352]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa4:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	494d      	ldr	r1, [pc, #308]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d040      	beq.n	8002050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d115      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	4b41      	ldr	r3, [pc, #260]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e073      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200e:	4b39      	ldr	r3, [pc, #228]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f023 0203 	bic.w	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4936      	ldr	r1, [pc, #216]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002020:	f7fe fc2a 	bl	8000878 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	e00a      	b.n	800203e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7fe fc26 	bl	8000878 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e053      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 020c 	and.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	429a      	cmp	r2, r3
 800204e:	d1eb      	bne.n	8002028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002050:	4b27      	ldr	r3, [pc, #156]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d210      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0207 	bic.w	r2, r3, #7
 8002066:	4922      	ldr	r1, [pc, #136]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e032      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4916      	ldr	r1, [pc, #88]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	490e      	ldr	r1, [pc, #56]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020be:	f000 f821 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	490a      	ldr	r1, [pc, #40]	@ (80020f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	5ccb      	ldrb	r3, [r1, r3]
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <HAL_RCC_ClockConfig+0x1cc>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_RCC_ClockConfig+0x1d0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fae0 	bl	80006a4 <HAL_InitTick>

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08003f20 	.word	0x08003f20
 80020fc:	20000008 	.word	0x20000008
 8002100:	2000000c 	.word	0x2000000c

08002104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x94>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x30>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x36>
 8002132:	e027      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002134:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	e027      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x94>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0c5b      	lsrs	r3, r3, #17
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	4a11      	ldr	r2, [pc, #68]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002166:	fb03 f202 	mul.w	r2, r3, r2
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e004      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a0c      	ldr	r2, [pc, #48]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	613b      	str	r3, [r7, #16]
      break;
 8002182:	e002      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218a:	693b      	ldr	r3, [r7, #16]
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	08003f38 	.word	0x08003f38
 80021a4:	08003f48 	.word	0x08003f48
 80021a8:	003d0900 	.word	0x003d0900

080021ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b02      	ldr	r3, [pc, #8]	@ (80021bc <HAL_RCC_GetHCLKFreq+0x10>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	20000008 	.word	0x20000008

080021c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c4:	f7ff fff2 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0adb      	lsrs	r3, r3, #11
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	@ (80021e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08003f30 	.word	0x08003f30

080021e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	220f      	movs	r2, #15
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_RCC_GetClockConfig+0x58>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_RCC_GetClockConfig+0x58>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002210:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_RCC_GetClockConfig+0x58>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_RCC_GetClockConfig+0x58>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0207 	and.w	r2, r3, #7
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	40022000 	.word	0x40022000

08002248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002250:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <RCC_Delay+0x34>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <RCC_Delay+0x38>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0a5b      	lsrs	r3, r3, #9
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002264:	bf00      	nop
  }
  while (Delay --);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	60fa      	str	r2, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f9      	bne.n	8002264 <RCC_Delay+0x1c>
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000008 	.word	0x20000008
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d07d      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a4:	4b4f      	ldr	r3, [pc, #316]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b4c      	ldr	r3, [pc, #304]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4a4b      	ldr	r2, [pc, #300]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	61d3      	str	r3, [r2, #28]
 80022bc:	4b49      	ldr	r3, [pc, #292]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4b46      	ldr	r3, [pc, #280]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d118      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d8:	4b43      	ldr	r3, [pc, #268]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a42      	ldr	r2, [pc, #264]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e4:	f7fe fac8 	bl	8000878 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	e008      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ec:	f7fe fac4 	bl	8000878 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e06d      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800230a:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002312:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d02e      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d027      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002328:	4b2e      	ldr	r3, [pc, #184]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002332:	4b2e      	ldr	r3, [pc, #184]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002338:	4b2c      	ldr	r3, [pc, #176]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800233e:	4a29      	ldr	r2, [pc, #164]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d014      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fa93 	bl	8000878 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fa8f 	bl	8000878 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e036      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002378:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4917      	ldr	r1, [pc, #92]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	4313      	orrs	r3, r2
 8002388:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a13      	ldr	r2, [pc, #76]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800239a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	490b      	ldr	r1, [pc, #44]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c6:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4904      	ldr	r1, [pc, #16]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	42420440 	.word	0x42420440

080023f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b10      	cmp	r3, #16
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b10      	cmp	r3, #16
 8002416:	f200 808a 	bhi.w	800252e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d045      	beq.n	80024ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d075      	beq.n	8002512 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002426:	e082      	b.n	800252e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002428:	4b46      	ldr	r3, [pc, #280]	@ (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800242e:	4b45      	ldr	r3, [pc, #276]	@ (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d07b      	beq.n	8002532 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4a41      	ldr	r2, [pc, #260]	@ (8002548 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d015      	beq.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002452:	4b3c      	ldr	r3, [pc, #240]	@ (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	0c5b      	lsrs	r3, r3, #17
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	4a3b      	ldr	r2, [pc, #236]	@ (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00d      	beq.n	8002488 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800246c:	4a38      	ldr	r2, [pc, #224]	@ (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	fbb2 f2f3 	udiv	r2, r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	e004      	b.n	8002488 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4a34      	ldr	r2, [pc, #208]	@ (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002488:	4b2e      	ldr	r3, [pc, #184]	@ (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002494:	d102      	bne.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	61bb      	str	r3, [r7, #24]
      break;
 800249a:	e04a      	b.n	8002532 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
      break;
 80024aa:	e042      	b.n	8002532 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024ac:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024bc:	d108      	bne.n	80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80024c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	e01f      	b.n	8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024da:	d109      	bne.n	80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80024e8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	e00f      	b.n	8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024fa:	d11c      	bne.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d016      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002508:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800250c:	61bb      	str	r3, [r7, #24]
      break;
 800250e:	e012      	b.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002510:	e011      	b.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002512:	f7ff fe55 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0b9b      	lsrs	r3, r3, #14
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	61bb      	str	r3, [r7, #24]
      break;
 800252c:	e004      	b.n	8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800252e:	bf00      	nop
 8002530:	e002      	b.n	8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002536:	bf00      	nop
    }
  }
  return (frequency);
 8002538:	69bb      	ldr	r3, [r7, #24]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	08003f4c 	.word	0x08003f4c
 800254c:	08003f5c 	.word	0x08003f5c
 8002550:	007a1200 	.word	0x007a1200
 8002554:	003d0900 	.word	0x003d0900
 8002558:	aaaaaaab 	.word	0xaaaaaaab

0800255c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e041      	b.n	80025f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f839 	bl	80025fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f000 f99c 	bl	80028d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d001      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e03a      	b.n	800269a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <HAL_TIM_Base_Start_IT+0x98>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00e      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x58>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800264e:	d009      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x58>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a14      	ldr	r2, [pc, #80]	@ (80026a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x58>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a13      	ldr	r2, [pc, #76]	@ (80026ac <HAL_TIM_Base_Start_IT+0xa0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d111      	bne.n	8002688 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b06      	cmp	r3, #6
 8002674:	d010      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002686:	e007      	b.n	8002698 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40000800 	.word	0x40000800

080026b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d020      	beq.n	8002714 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0202 	mvn.w	r2, #2
 80026e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8d1 	bl	80028a2 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8c4 	bl	8002890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f8d3 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d020      	beq.n	8002760 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0204 	mvn.w	r2, #4
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8ab 	bl	80028a2 <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f89e 	bl	8002890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f8ad 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d020      	beq.n	80027ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01b      	beq.n	80027ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0208 	mvn.w	r2, #8
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f885 	bl	80028a2 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f878 	bl	8002890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f887 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d020      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0210 	mvn.w	r2, #16
 80027c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2208      	movs	r2, #8
 80027ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f85f 	bl	80028a2 <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f852 	bl	8002890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f861 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0201 	mvn.w	r2, #1
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fd fe58 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8c3 	bl	80029c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f831 	bl	80028c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0220 	mvn.w	r2, #32
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f896 	bl	80029b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a2f      	ldr	r2, [pc, #188]	@ (80029a8 <TIM_Base_SetConfig+0xd0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a2c      	ldr	r2, [pc, #176]	@ (80029ac <TIM_Base_SetConfig+0xd4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a2b      	ldr	r2, [pc, #172]	@ (80029b0 <TIM_Base_SetConfig+0xd8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d108      	bne.n	800291a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <TIM_Base_SetConfig+0xd0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00b      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002928:	d007      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1f      	ldr	r2, [pc, #124]	@ (80029ac <TIM_Base_SetConfig+0xd4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d003      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <TIM_Base_SetConfig+0xd8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d108      	bne.n	800294c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <TIM_Base_SetConfig+0xd0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d103      	bne.n	8002980 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f023 0201 	bic.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	611a      	str	r2, [r3, #16]
  }
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800

080029b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 0208 	add.w	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 0208 	add.w	r2, r3, #8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f103 0208 	add.w	r2, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	601a      	str	r2, [r3, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a8a:	d103      	bne.n	8002a94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e00c      	b.n	8002aae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3308      	adds	r3, #8
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e002      	b.n	8002aa2 <vListInsert+0x2e>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d2f6      	bcs.n	8002a9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	601a      	str	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6892      	ldr	r2, [r2, #8]
 8002afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6852      	ldr	r2, [r2, #4]
 8002b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d103      	bne.n	8002b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b08e      	sub	sp, #56	@ 0x38
 8002b3a:	af04      	add	r7, sp, #16
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10b      	bne.n	8002b62 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	e7fd      	b.n	8002b5e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	61fb      	str	r3, [r7, #28]
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b80:	23a0      	movs	r3, #160	@ 0xa0
 8002b82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b88:	d00b      	beq.n	8002ba2 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	61bb      	str	r3, [r7, #24]
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	e7fd      	b.n	8002b9e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01e      	beq.n	8002be8 <xTaskCreateStatic+0xb2>
 8002baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bb8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9303      	str	r3, [sp, #12]
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f850 	bl	8002c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002be0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002be2:	f000 f8ed 	bl	8002dc0 <prvAddNewTaskToReadyList>
 8002be6:	e001      	b.n	8002bec <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bec:	697b      	ldr	r3, [r7, #20]
	}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3728      	adds	r7, #40	@ 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08c      	sub	sp, #48	@ 0x30
 8002bfa:	af04      	add	r7, sp, #16
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fea0 	bl	8003950 <pvPortMalloc>
 8002c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c18:	20a0      	movs	r0, #160	@ 0xa0
 8002c1a:	f000 fe99 	bl	8003950 <pvPortMalloc>
 8002c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c2c:	e005      	b.n	8002c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f000 ff5c 	bl	8003aec <vPortFree>
 8002c34:	e001      	b.n	8002c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9303      	str	r3, [sp, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f80e 	bl	8002c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c64:	69f8      	ldr	r0, [r7, #28]
 8002c66:	f000 f8ab 	bl	8002dc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e002      	b.n	8002c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c76:	69bb      	ldr	r3, [r7, #24]
	}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f023 0307 	bic.w	r3, r3, #7
 8002ca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	617b      	str	r3, [r7, #20]
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	e7fd      	b.n	8002cc6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01f      	beq.n	8002d10 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	e012      	b.n	8002cfc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	7819      	ldrb	r1, [r3, #0]
 8002cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3334      	adds	r3, #52	@ 0x34
 8002ce6:	460a      	mov	r2, r1
 8002ce8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b0f      	cmp	r3, #15
 8002d00:	d9e9      	bls.n	8002cd6 <prvInitialiseNewTask+0x56>
 8002d02:	e000      	b.n	8002d06 <prvInitialiseNewTask+0x86>
			{
				break;
 8002d04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d0e:	e003      	b.n	8002d18 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d901      	bls.n	8002d22 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d1e:	2306      	movs	r3, #6
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d2c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	2200      	movs	r2, #0
 8002d32:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	3304      	adds	r3, #4
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fe6c 	bl	8002a16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d40:	3318      	adds	r3, #24
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fe67 	bl	8002a16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	f1c3 0207 	rsb	r2, r3, #7
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	334c      	adds	r3, #76	@ 0x4c
 8002d72:	224c      	movs	r2, #76	@ 0x4c
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 ffd6 	bl	8003d28 <memset>
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <prvInitialiseNewTask+0x134>)
 8002d80:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	4a0c      	ldr	r2, [pc, #48]	@ (8002db8 <prvInitialiseNewTask+0x138>)
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dbc <prvInitialiseNewTask+0x13c>)
 8002d8c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	68f9      	ldr	r1, [r7, #12]
 8002d92:	69b8      	ldr	r0, [r7, #24]
 8002d94:	f000 fc28 	bl	80035e8 <pxPortInitialiseStack>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002daa:	bf00      	nop
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20001144 	.word	0x20001144
 8002db8:	200011ac 	.word	0x200011ac
 8002dbc:	20001214 	.word	0x20001214

08002dc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dc8:	f000 fd00 	bl	80037cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e78 <prvAddNewTaskToReadyList+0xb8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4a29      	ldr	r2, [pc, #164]	@ (8002e78 <prvAddNewTaskToReadyList+0xb8>)
 8002dd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dd6:	4b29      	ldr	r3, [pc, #164]	@ (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dde:	4a27      	ldr	r2, [pc, #156]	@ (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002de4:	4b24      	ldr	r3, [pc, #144]	@ (8002e78 <prvAddNewTaskToReadyList+0xb8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d110      	bne.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dec:	f000 fad2 	bl	8003394 <prvInitialiseTaskLists>
 8002df0:	e00d      	b.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002df2:	4b23      	ldr	r3, [pc, #140]	@ (8002e80 <prvAddNewTaskToReadyList+0xc0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dfa:	4b20      	ldr	r3, [pc, #128]	@ (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d802      	bhi.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e08:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <prvAddNewTaskToReadyList+0xc4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a1b      	ldr	r2, [pc, #108]	@ (8002e84 <prvAddNewTaskToReadyList+0xc4>)
 8002e16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <prvAddNewTaskToReadyList+0xc8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <prvAddNewTaskToReadyList+0xc8>)
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4a15      	ldr	r2, [pc, #84]	@ (8002e8c <prvAddNewTaskToReadyList+0xcc>)
 8002e38:	441a      	add	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f7ff fdf4 	bl	8002a2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e46:	f000 fcf1 	bl	800382c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <prvAddNewTaskToReadyList+0xc0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e52:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <prvAddNewTaskToReadyList+0xd0>)
 8002e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200004f0 	.word	0x200004f0
 8002e7c:	200003f0 	.word	0x200003f0
 8002e80:	200004fc 	.word	0x200004fc
 8002e84:	2000050c 	.word	0x2000050c
 8002e88:	200004f8 	.word	0x200004f8
 8002e8c:	200003f4 	.word	0x200003f4
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ea6:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <vTaskDelay+0x64>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <vTaskDelay+0x32>
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	60bb      	str	r3, [r7, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ec6:	f000 f885 	bl	8002fd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eca:	2100      	movs	r1, #0
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fb25 	bl	800351c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ed2:	f000 f88d 	bl	8002ff0 <xTaskResumeAll>
 8002ed6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <vTaskDelay+0x68>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000518 	.word	0x20000518
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f0e:	463a      	mov	r2, r7
 8002f10:	1d39      	adds	r1, r7, #4
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd f91a 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	9202      	str	r2, [sp, #8]
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	2300      	movs	r3, #0
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	460a      	mov	r2, r1
 8002f2e:	4921      	ldr	r1, [pc, #132]	@ (8002fb4 <vTaskStartScheduler+0xb4>)
 8002f30:	4821      	ldr	r0, [pc, #132]	@ (8002fb8 <vTaskStartScheduler+0xb8>)
 8002f32:	f7ff fe00 	bl	8002b36 <xTaskCreateStatic>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4a20      	ldr	r2, [pc, #128]	@ (8002fbc <vTaskStartScheduler+0xbc>)
 8002f3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fbc <vTaskStartScheduler+0xbc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f44:	2301      	movs	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e001      	b.n	8002f4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d11b      	bne.n	8002f8c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	613b      	str	r3, [r7, #16]
}
 8002f66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f68:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <vTaskStartScheduler+0xc0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	334c      	adds	r3, #76	@ 0x4c
 8002f6e:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <vTaskStartScheduler+0xc4>)
 8002f70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <vTaskStartScheduler+0xc8>)
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <vTaskStartScheduler+0xcc>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f80:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <vTaskStartScheduler+0xd0>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f86:	f000 fbaf 	bl	80036e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f8a:	e00f      	b.n	8002fac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f92:	d10b      	bne.n	8002fac <vTaskStartScheduler+0xac>
	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	60fb      	str	r3, [r7, #12]
}
 8002fa6:	bf00      	nop
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <vTaskStartScheduler+0xa8>
}
 8002fac:	bf00      	nop
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	08003f18 	.word	0x08003f18
 8002fb8:	08003365 	.word	0x08003365
 8002fbc:	20000514 	.word	0x20000514
 8002fc0:	200003f0 	.word	0x200003f0
 8002fc4:	20000018 	.word	0x20000018
 8002fc8:	20000510 	.word	0x20000510
 8002fcc:	200004fc 	.word	0x200004fc
 8002fd0:	200004f4 	.word	0x200004f4

08002fd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <vTaskSuspendAll+0x18>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	4a03      	ldr	r2, [pc, #12]	@ (8002fec <vTaskSuspendAll+0x18>)
 8002fe0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000518 	.word	0x20000518

08002ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ffe:	4b42      	ldr	r3, [pc, #264]	@ (8003108 <xTaskResumeAll+0x118>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <xTaskResumeAll+0x2e>
	__asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	603b      	str	r3, [r7, #0]
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	e7fd      	b.n	800301a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800301e:	f000 fbd5 	bl	80037cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003022:	4b39      	ldr	r3, [pc, #228]	@ (8003108 <xTaskResumeAll+0x118>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3b01      	subs	r3, #1
 8003028:	4a37      	ldr	r2, [pc, #220]	@ (8003108 <xTaskResumeAll+0x118>)
 800302a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302c:	4b36      	ldr	r3, [pc, #216]	@ (8003108 <xTaskResumeAll+0x118>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d161      	bne.n	80030f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003034:	4b35      	ldr	r3, [pc, #212]	@ (800310c <xTaskResumeAll+0x11c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d05d      	beq.n	80030f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800303c:	e02e      	b.n	800309c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800303e:	4b34      	ldr	r3, [pc, #208]	@ (8003110 <xTaskResumeAll+0x120>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3318      	adds	r3, #24
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fd4a 	bl	8002ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3304      	adds	r3, #4
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fd45 	bl	8002ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	2201      	movs	r2, #1
 8003060:	409a      	lsls	r2, r3
 8003062:	4b2c      	ldr	r3, [pc, #176]	@ (8003114 <xTaskResumeAll+0x124>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	4a2a      	ldr	r2, [pc, #168]	@ (8003114 <xTaskResumeAll+0x124>)
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4a27      	ldr	r2, [pc, #156]	@ (8003118 <xTaskResumeAll+0x128>)
 800307a:	441a      	add	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3304      	adds	r3, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f7ff fcd3 	bl	8002a2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308c:	4b23      	ldr	r3, [pc, #140]	@ (800311c <xTaskResumeAll+0x12c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003096:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <xTaskResumeAll+0x130>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800309c:	4b1c      	ldr	r3, [pc, #112]	@ (8003110 <xTaskResumeAll+0x120>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1cc      	bne.n	800303e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030aa:	f000 fa17 	bl	80034dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <xTaskResumeAll+0x134>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030ba:	f000 f837 	bl	800312c <xTaskIncrementTick>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80030c4:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <xTaskResumeAll+0x130>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f1      	bne.n	80030ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80030d6:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <xTaskResumeAll+0x134>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030dc:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <xTaskResumeAll+0x130>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003128 <xTaskResumeAll+0x138>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030f8:	f000 fb98 	bl	800382c <vPortExitCritical>

	return xAlreadyYielded;
 80030fc:	68bb      	ldr	r3, [r7, #8]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000518 	.word	0x20000518
 800310c:	200004f0 	.word	0x200004f0
 8003110:	200004b0 	.word	0x200004b0
 8003114:	200004f8 	.word	0x200004f8
 8003118:	200003f4 	.word	0x200003f4
 800311c:	200003f0 	.word	0x200003f0
 8003120:	20000504 	.word	0x20000504
 8003124:	20000500 	.word	0x20000500
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003136:	4b4f      	ldr	r3, [pc, #316]	@ (8003274 <xTaskIncrementTick+0x148>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 808f 	bne.w	800325e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003140:	4b4d      	ldr	r3, [pc, #308]	@ (8003278 <xTaskIncrementTick+0x14c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003148:	4a4b      	ldr	r2, [pc, #300]	@ (8003278 <xTaskIncrementTick+0x14c>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d121      	bne.n	8003198 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003154:	4b49      	ldr	r3, [pc, #292]	@ (800327c <xTaskIncrementTick+0x150>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <xTaskIncrementTick+0x4a>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	603b      	str	r3, [r7, #0]
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	e7fd      	b.n	8003172 <xTaskIncrementTick+0x46>
 8003176:	4b41      	ldr	r3, [pc, #260]	@ (800327c <xTaskIncrementTick+0x150>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	4b40      	ldr	r3, [pc, #256]	@ (8003280 <xTaskIncrementTick+0x154>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3e      	ldr	r2, [pc, #248]	@ (800327c <xTaskIncrementTick+0x150>)
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4a3e      	ldr	r2, [pc, #248]	@ (8003280 <xTaskIncrementTick+0x154>)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b3e      	ldr	r3, [pc, #248]	@ (8003284 <xTaskIncrementTick+0x158>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a3c      	ldr	r2, [pc, #240]	@ (8003284 <xTaskIncrementTick+0x158>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	f000 f9a2 	bl	80034dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003198:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <xTaskIncrementTick+0x15c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d348      	bcc.n	8003234 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a2:	4b36      	ldr	r3, [pc, #216]	@ (800327c <xTaskIncrementTick+0x150>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ac:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <xTaskIncrementTick+0x15c>)
 80031ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b2:	601a      	str	r2, [r3, #0]
					break;
 80031b4:	e03e      	b.n	8003234 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b6:	4b31      	ldr	r3, [pc, #196]	@ (800327c <xTaskIncrementTick+0x150>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d203      	bcs.n	80031d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003288 <xTaskIncrementTick+0x15c>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031d4:	e02e      	b.n	8003234 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3304      	adds	r3, #4
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fc82 	bl	8002ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	3318      	adds	r3, #24
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fc79 	bl	8002ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f6:	2201      	movs	r2, #1
 80031f8:	409a      	lsls	r2, r3
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <xTaskIncrementTick+0x160>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	4a22      	ldr	r2, [pc, #136]	@ (800328c <xTaskIncrementTick+0x160>)
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <xTaskIncrementTick+0x164>)
 8003212:	441a      	add	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f7ff fc07 	bl	8002a2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <xTaskIncrementTick+0x168>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	429a      	cmp	r2, r3
 800322c:	d3b9      	bcc.n	80031a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800322e:	2301      	movs	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003232:	e7b6      	b.n	80031a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003234:	4b17      	ldr	r3, [pc, #92]	@ (8003294 <xTaskIncrementTick+0x168>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323a:	4915      	ldr	r1, [pc, #84]	@ (8003290 <xTaskIncrementTick+0x164>)
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d901      	bls.n	8003250 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003250:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <xTaskIncrementTick+0x16c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003258:	2301      	movs	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e004      	b.n	8003268 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800325e:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <xTaskIncrementTick+0x170>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	4a0d      	ldr	r2, [pc, #52]	@ (800329c <xTaskIncrementTick+0x170>)
 8003266:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003268:	697b      	ldr	r3, [r7, #20]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000518 	.word	0x20000518
 8003278:	200004f4 	.word	0x200004f4
 800327c:	200004a8 	.word	0x200004a8
 8003280:	200004ac 	.word	0x200004ac
 8003284:	20000508 	.word	0x20000508
 8003288:	20000510 	.word	0x20000510
 800328c:	200004f8 	.word	0x200004f8
 8003290:	200003f4 	.word	0x200003f4
 8003294:	200003f0 	.word	0x200003f0
 8003298:	20000504 	.word	0x20000504
 800329c:	20000500 	.word	0x20000500

080032a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032a6:	4b29      	ldr	r3, [pc, #164]	@ (800334c <vTaskSwitchContext+0xac>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032ae:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <vTaskSwitchContext+0xb0>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032b4:	e045      	b.n	8003342 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80032b6:	4b26      	ldr	r3, [pc, #152]	@ (8003350 <vTaskSwitchContext+0xb0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032bc:	4b25      	ldr	r3, [pc, #148]	@ (8003354 <vTaskSwitchContext+0xb4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032ca:	7afb      	ldrb	r3, [r7, #11]
 80032cc:	f1c3 031f 	rsb	r3, r3, #31
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	4921      	ldr	r1, [pc, #132]	@ (8003358 <vTaskSwitchContext+0xb8>)
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10b      	bne.n	80032fe <vTaskSwitchContext+0x5e>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	607b      	str	r3, [r7, #4]
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	e7fd      	b.n	80032fa <vTaskSwitchContext+0x5a>
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4a13      	ldr	r2, [pc, #76]	@ (8003358 <vTaskSwitchContext+0xb8>)
 800330a:	4413      	add	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	3308      	adds	r3, #8
 8003320:	429a      	cmp	r2, r3
 8003322:	d104      	bne.n	800332e <vTaskSwitchContext+0x8e>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a09      	ldr	r2, [pc, #36]	@ (800335c <vTaskSwitchContext+0xbc>)
 8003336:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003338:	4b08      	ldr	r3, [pc, #32]	@ (800335c <vTaskSwitchContext+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	334c      	adds	r3, #76	@ 0x4c
 800333e:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <vTaskSwitchContext+0xc0>)
 8003340:	6013      	str	r3, [r2, #0]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000518 	.word	0x20000518
 8003350:	20000504 	.word	0x20000504
 8003354:	200004f8 	.word	0x200004f8
 8003358:	200003f4 	.word	0x200003f4
 800335c:	200003f0 	.word	0x200003f0
 8003360:	20000018 	.word	0x20000018

08003364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800336c:	f000 f852 	bl	8003414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003370:	4b06      	ldr	r3, [pc, #24]	@ (800338c <prvIdleTask+0x28>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d9f9      	bls.n	800336c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <prvIdleTask+0x2c>)
 800337a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003388:	e7f0      	b.n	800336c <prvIdleTask+0x8>
 800338a:	bf00      	nop
 800338c:	200003f4 	.word	0x200003f4
 8003390:	e000ed04 	.word	0xe000ed04

08003394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	e00c      	b.n	80033ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <prvInitialiseTaskLists+0x60>)
 80033ac:	4413      	add	r3, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fb12 	bl	80029d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3301      	adds	r3, #1
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d9ef      	bls.n	80033a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033c0:	480d      	ldr	r0, [pc, #52]	@ (80033f8 <prvInitialiseTaskLists+0x64>)
 80033c2:	f7ff fb09 	bl	80029d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033c6:	480d      	ldr	r0, [pc, #52]	@ (80033fc <prvInitialiseTaskLists+0x68>)
 80033c8:	f7ff fb06 	bl	80029d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80033cc:	480c      	ldr	r0, [pc, #48]	@ (8003400 <prvInitialiseTaskLists+0x6c>)
 80033ce:	f7ff fb03 	bl	80029d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80033d2:	480c      	ldr	r0, [pc, #48]	@ (8003404 <prvInitialiseTaskLists+0x70>)
 80033d4:	f7ff fb00 	bl	80029d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033d8:	480b      	ldr	r0, [pc, #44]	@ (8003408 <prvInitialiseTaskLists+0x74>)
 80033da:	f7ff fafd 	bl	80029d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033de:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <prvInitialiseTaskLists+0x78>)
 80033e0:	4a05      	ldr	r2, [pc, #20]	@ (80033f8 <prvInitialiseTaskLists+0x64>)
 80033e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <prvInitialiseTaskLists+0x7c>)
 80033e6:	4a05      	ldr	r2, [pc, #20]	@ (80033fc <prvInitialiseTaskLists+0x68>)
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200003f4 	.word	0x200003f4
 80033f8:	20000480 	.word	0x20000480
 80033fc:	20000494 	.word	0x20000494
 8003400:	200004b0 	.word	0x200004b0
 8003404:	200004c4 	.word	0x200004c4
 8003408:	200004dc 	.word	0x200004dc
 800340c:	200004a8 	.word	0x200004a8
 8003410:	200004ac 	.word	0x200004ac

08003414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800341a:	e019      	b.n	8003450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800341c:	f000 f9d6 	bl	80037cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003420:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <prvCheckTasksWaitingTermination+0x50>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fb59 	bl	8002ae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003432:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <prvCheckTasksWaitingTermination+0x54>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3b01      	subs	r3, #1
 8003438:	4a0b      	ldr	r2, [pc, #44]	@ (8003468 <prvCheckTasksWaitingTermination+0x54>)
 800343a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <prvCheckTasksWaitingTermination+0x58>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3b01      	subs	r3, #1
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <prvCheckTasksWaitingTermination+0x58>)
 8003444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003446:	f000 f9f1 	bl	800382c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f810 	bl	8003470 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <prvCheckTasksWaitingTermination+0x58>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e1      	bne.n	800341c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200004c4 	.word	0x200004c4
 8003468:	200004f0 	.word	0x200004f0
 800346c:	200004d8 	.word	0x200004d8

08003470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	334c      	adds	r3, #76	@ 0x4c
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fc5b 	bl	8003d38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003488:	2b00      	cmp	r3, #0
 800348a:	d108      	bne.n	800349e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fb2b 	bl	8003aec <vPortFree>
				vPortFree( pxTCB );
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fb28 	bl	8003aec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800349c:	e019      	b.n	80034d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d103      	bne.n	80034b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fb1f 	bl	8003aec <vPortFree>
	}
 80034ae:	e010      	b.n	80034d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d00b      	beq.n	80034d2 <prvDeleteTCB+0x62>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	60fb      	str	r3, [r7, #12]
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <prvDeleteTCB+0x5e>
	}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <prvResetNextTaskUnblockTime+0x38>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <prvResetNextTaskUnblockTime+0x3c>)
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034f4:	e008      	b.n	8003508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f6:	4b07      	ldr	r3, [pc, #28]	@ (8003514 <prvResetNextTaskUnblockTime+0x38>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <prvResetNextTaskUnblockTime+0x3c>)
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	200004a8 	.word	0x200004a8
 8003518:	20000510 	.word	0x20000510

0800351c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003526:	4b29      	ldr	r3, [pc, #164]	@ (80035cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800352c:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3304      	adds	r3, #4
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fad6 	bl	8002ae4 <uxListRemove>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800353e:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	2201      	movs	r2, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	4b21      	ldr	r3, [pc, #132]	@ (80035d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4013      	ands	r3, r2
 8003552:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003554:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800355c:	d10a      	bne.n	8003574 <prvAddCurrentTaskToDelayedList+0x58>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003564:	4b1a      	ldr	r3, [pc, #104]	@ (80035d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3304      	adds	r3, #4
 800356a:	4619      	mov	r1, r3
 800356c:	481a      	ldr	r0, [pc, #104]	@ (80035d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800356e:	f7ff fa5e 	bl	8002a2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003572:	e026      	b.n	80035c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800357c:	4b14      	ldr	r3, [pc, #80]	@ (80035d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	429a      	cmp	r2, r3
 800358a:	d209      	bcs.n	80035a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800358c:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3304      	adds	r3, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f7ff fa6b 	bl	8002a74 <vListInsert>
}
 800359e:	e010      	b.n	80035c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a0:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7ff fa61 	bl	8002a74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035b2:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d202      	bcs.n	80035c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035bc:	4a09      	ldr	r2, [pc, #36]	@ (80035e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	6013      	str	r3, [r2, #0]
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	200004f4 	.word	0x200004f4
 80035d0:	200003f0 	.word	0x200003f0
 80035d4:	200004f8 	.word	0x200004f8
 80035d8:	200004dc 	.word	0x200004dc
 80035dc:	200004ac 	.word	0x200004ac
 80035e0:	200004a8 	.word	0x200004a8
 80035e4:	20000510 	.word	0x20000510

080035e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3b04      	subs	r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b04      	subs	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3b04      	subs	r3, #4
 8003616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003618:	4a08      	ldr	r2, [pc, #32]	@ (800363c <pxPortInitialiseStack+0x54>)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3b14      	subs	r3, #20
 8003622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3b20      	subs	r3, #32
 800362e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003630:	68fb      	ldr	r3, [r7, #12]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	08003641 	.word	0x08003641

08003640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800364a:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <prvTaskExitError+0x54>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003652:	d00b      	beq.n	800366c <prvTaskExitError+0x2c>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60fb      	str	r3, [r7, #12]
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <prvTaskExitError+0x28>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	60bb      	str	r3, [r7, #8]
}
 800367e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003680:	bf00      	nop
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0fc      	beq.n	8003682 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000014 	.word	0x20000014
	...

080036a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036a0:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <pxCurrentTCBConst2>)
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	6808      	ldr	r0, [r1, #0]
 80036a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036aa:	f380 8809 	msr	PSP, r0
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f04f 0000 	mov.w	r0, #0
 80036b6:	f380 8811 	msr	BASEPRI, r0
 80036ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80036be:	4770      	bx	lr

080036c0 <pxCurrentTCBConst2>:
 80036c0:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop

080036c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80036c8:	4806      	ldr	r0, [pc, #24]	@ (80036e4 <prvPortStartFirstTask+0x1c>)
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	6800      	ldr	r0, [r0, #0]
 80036ce:	f380 8808 	msr	MSP, r0
 80036d2:	b662      	cpsie	i
 80036d4:	b661      	cpsie	f
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	df00      	svc	0
 80036e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80036e2:	bf00      	nop
 80036e4:	e000ed08 	.word	0xe000ed08

080036e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036ee:	4b32      	ldr	r3, [pc, #200]	@ (80037b8 <xPortStartScheduler+0xd0>)
 80036f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	22ff      	movs	r2, #255	@ 0xff
 80036fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4b2a      	ldr	r3, [pc, #168]	@ (80037bc <xPortStartScheduler+0xd4>)
 8003714:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003716:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <xPortStartScheduler+0xd8>)
 8003718:	2207      	movs	r2, #7
 800371a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800371c:	e009      	b.n	8003732 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800371e:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <xPortStartScheduler+0xd8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a26      	ldr	r2, [pc, #152]	@ (80037c0 <xPortStartScheduler+0xd8>)
 8003726:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373a:	2b80      	cmp	r3, #128	@ 0x80
 800373c:	d0ef      	beq.n	800371e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800373e:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <xPortStartScheduler+0xd8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00b      	beq.n	8003762 <xPortStartScheduler+0x7a>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	60bb      	str	r3, [r7, #8]
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	e7fd      	b.n	800375e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003762:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <xPortStartScheduler+0xd8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	4a15      	ldr	r2, [pc, #84]	@ (80037c0 <xPortStartScheduler+0xd8>)
 800376a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <xPortStartScheduler+0xd8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003774:	4a12      	ldr	r2, [pc, #72]	@ (80037c0 <xPortStartScheduler+0xd8>)
 8003776:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003780:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <xPortStartScheduler+0xdc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0f      	ldr	r2, [pc, #60]	@ (80037c4 <xPortStartScheduler+0xdc>)
 8003786:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800378a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800378c:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <xPortStartScheduler+0xdc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0c      	ldr	r2, [pc, #48]	@ (80037c4 <xPortStartScheduler+0xdc>)
 8003792:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003796:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003798:	f000 f8b8 	bl	800390c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <xPortStartScheduler+0xe0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037a2:	f7ff ff91 	bl	80036c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037a6:	f7ff fd7b 	bl	80032a0 <vTaskSwitchContext>
	prvTaskExitError();
 80037aa:	f7ff ff49 	bl	8003640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	e000e400 	.word	0xe000e400
 80037bc:	2000051c 	.word	0x2000051c
 80037c0:	20000520 	.word	0x20000520
 80037c4:	e000ed20 	.word	0xe000ed20
 80037c8:	20000014 	.word	0x20000014

080037cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	607b      	str	r3, [r7, #4]
}
 80037e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <vPortEnterCritical+0x58>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003824 <vPortEnterCritical+0x58>)
 80037ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <vPortEnterCritical+0x58>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d110      	bne.n	800381a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003828 <vPortEnterCritical+0x5c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <vPortEnterCritical+0x4e>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	603b      	str	r3, [r7, #0]
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <vPortEnterCritical+0x4a>
	}
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	20000014 	.word	0x20000014
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003832:	4b12      	ldr	r3, [pc, #72]	@ (800387c <vPortExitCritical+0x50>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <vPortExitCritical+0x26>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	607b      	str	r3, [r7, #4]
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <vPortExitCritical+0x50>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3b01      	subs	r3, #1
 8003858:	4a08      	ldr	r2, [pc, #32]	@ (800387c <vPortExitCritical+0x50>)
 800385a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800385c:	4b07      	ldr	r3, [pc, #28]	@ (800387c <vPortExitCritical+0x50>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <vPortExitCritical+0x44>
 8003864:	2300      	movs	r3, #0
 8003866:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800386e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000014 	.word	0x20000014

08003880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003880:	f3ef 8009 	mrs	r0, PSP
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	4b0d      	ldr	r3, [pc, #52]	@ (80038c0 <pxCurrentTCBConst>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003890:	6010      	str	r0, [r2, #0]
 8003892:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003896:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800389a:	f380 8811 	msr	BASEPRI, r0
 800389e:	f7ff fcff 	bl	80032a0 <vTaskSwitchContext>
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f380 8811 	msr	BASEPRI, r0
 80038aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038b6:	f380 8809 	msr	PSP, r0
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	4770      	bx	lr

080038c0 <pxCurrentTCBConst>:
 80038c0:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop

080038c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	607b      	str	r3, [r7, #4]
}
 80038e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038e2:	f7ff fc23 	bl	800312c <xTaskIncrementTick>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <SysTick_Handler+0x40>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	2300      	movs	r3, #0
 80038f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f383 8811 	msr	BASEPRI, r3
}
 80038fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <vPortSetupTimerInterrupt+0x30>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <vPortSetupTimerInterrupt+0x34>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800391c:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <vPortSetupTimerInterrupt+0x38>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a09      	ldr	r2, [pc, #36]	@ (8003948 <vPortSetupTimerInterrupt+0x3c>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	4a08      	ldr	r2, [pc, #32]	@ (800394c <vPortSetupTimerInterrupt+0x40>)
 800392a:	3b01      	subs	r3, #1
 800392c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800392e:	4b03      	ldr	r3, [pc, #12]	@ (800393c <vPortSetupTimerInterrupt+0x30>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	e000e010 	.word	0xe000e010
 8003940:	e000e018 	.word	0xe000e018
 8003944:	20000008 	.word	0x20000008
 8003948:	10624dd3 	.word	0x10624dd3
 800394c:	e000e014 	.word	0xe000e014

08003950 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800395c:	f7ff fb3a 	bl	8002fd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003960:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad4 <pvPortMalloc+0x184>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003968:	f000 f924 	bl	8003bb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800396c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad8 <pvPortMalloc+0x188>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 8095 	bne.w	8003aa4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01e      	beq.n	80039be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003980:	2208      	movs	r2, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	2b00      	cmp	r3, #0
 8003990:	d015      	beq.n	80039be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f023 0307 	bic.w	r3, r3, #7
 8003998:	3308      	adds	r3, #8
 800399a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <pvPortMalloc+0x6e>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	617b      	str	r3, [r7, #20]
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	e7fd      	b.n	80039ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d06f      	beq.n	8003aa4 <pvPortMalloc+0x154>
 80039c4:	4b45      	ldr	r3, [pc, #276]	@ (8003adc <pvPortMalloc+0x18c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d86a      	bhi.n	8003aa4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039ce:	4b44      	ldr	r3, [pc, #272]	@ (8003ae0 <pvPortMalloc+0x190>)
 80039d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039d2:	4b43      	ldr	r3, [pc, #268]	@ (8003ae0 <pvPortMalloc+0x190>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039d8:	e004      	b.n	80039e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d903      	bls.n	80039f6 <pvPortMalloc+0xa6>
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f1      	bne.n	80039da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039f6:	4b37      	ldr	r3, [pc, #220]	@ (8003ad4 <pvPortMalloc+0x184>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d051      	beq.n	8003aa4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	4413      	add	r3, r2
 8003a08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	1ad2      	subs	r2, r2, r3
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d920      	bls.n	8003a64 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <pvPortMalloc+0xfc>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	613b      	str	r3, [r7, #16]
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	1ad2      	subs	r2, r2, r3
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a5e:	69b8      	ldr	r0, [r7, #24]
 8003a60:	f000 f90a 	bl	8003c78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	@ (8003adc <pvPortMalloc+0x18c>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003adc <pvPortMalloc+0x18c>)
 8003a70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a72:	4b1a      	ldr	r3, [pc, #104]	@ (8003adc <pvPortMalloc+0x18c>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae4 <pvPortMalloc+0x194>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d203      	bcs.n	8003a86 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a7e:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <pvPortMalloc+0x18c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a18      	ldr	r2, [pc, #96]	@ (8003ae4 <pvPortMalloc+0x194>)
 8003a84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ad8 <pvPortMalloc+0x188>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <pvPortMalloc+0x198>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	4a11      	ldr	r2, [pc, #68]	@ (8003ae8 <pvPortMalloc+0x198>)
 8003aa2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003aa4:	f7ff faa4 	bl	8002ff0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <pvPortMalloc+0x17a>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	60fb      	str	r3, [r7, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	e7fd      	b.n	8003ac6 <pvPortMalloc+0x176>
	return pvReturn;
 8003aca:	69fb      	ldr	r3, [r7, #28]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3728      	adds	r7, #40	@ 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	2000112c 	.word	0x2000112c
 8003ad8:	20001140 	.word	0x20001140
 8003adc:	20001130 	.word	0x20001130
 8003ae0:	20001124 	.word	0x20001124
 8003ae4:	20001134 	.word	0x20001134
 8003ae8:	20001138 	.word	0x20001138

08003aec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d04f      	beq.n	8003b9e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003afe:	2308      	movs	r3, #8
 8003b00:	425b      	negs	r3, r3
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4413      	add	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	4b25      	ldr	r3, [pc, #148]	@ (8003ba8 <vPortFree+0xbc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10b      	bne.n	8003b32 <vPortFree+0x46>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	60fb      	str	r3, [r7, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	e7fd      	b.n	8003b2e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <vPortFree+0x66>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	60bb      	str	r3, [r7, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	e7fd      	b.n	8003b4e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	4b14      	ldr	r3, [pc, #80]	@ (8003ba8 <vPortFree+0xbc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01e      	beq.n	8003b9e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d11a      	bne.n	8003b9e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <vPortFree+0xbc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	401a      	ands	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b78:	f7ff fa2c 	bl	8002fd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <vPortFree+0xc0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4413      	add	r3, r2
 8003b86:	4a09      	ldr	r2, [pc, #36]	@ (8003bac <vPortFree+0xc0>)
 8003b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b8a:	6938      	ldr	r0, [r7, #16]
 8003b8c:	f000 f874 	bl	8003c78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b90:	4b07      	ldr	r3, [pc, #28]	@ (8003bb0 <vPortFree+0xc4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	4a06      	ldr	r2, [pc, #24]	@ (8003bb0 <vPortFree+0xc4>)
 8003b98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b9a:	f7ff fa29 	bl	8002ff0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20001140 	.word	0x20001140
 8003bac:	20001130 	.word	0x20001130
 8003bb0:	2000113c 	.word	0x2000113c

08003bb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003bbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003bc0:	4b27      	ldr	r3, [pc, #156]	@ (8003c60 <prvHeapInit+0xac>)
 8003bc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00c      	beq.n	8003be8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3307      	adds	r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c60 <prvHeapInit+0xac>)
 8003be4:	4413      	add	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bec:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <prvHeapInit+0xb0>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c64 <prvHeapInit+0xb0>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c00:	2208      	movs	r2, #8
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0307 	bic.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <prvHeapInit+0xb4>)
 8003c14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c16:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <prvHeapInit+0xb4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <prvHeapInit+0xb4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	1ad2      	subs	r2, r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c34:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <prvHeapInit+0xb4>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	@ (8003c6c <prvHeapInit+0xb8>)
 8003c42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <prvHeapInit+0xbc>)
 8003c4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <prvHeapInit+0xc0>)
 8003c4e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000524 	.word	0x20000524
 8003c64:	20001124 	.word	0x20001124
 8003c68:	2000112c 	.word	0x2000112c
 8003c6c:	20001134 	.word	0x20001134
 8003c70:	20001130 	.word	0x20001130
 8003c74:	20001140 	.word	0x20001140

08003c78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c80:	4b27      	ldr	r3, [pc, #156]	@ (8003d20 <prvInsertBlockIntoFreeList+0xa8>)
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e002      	b.n	8003c8c <prvInsertBlockIntoFreeList+0x14>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d8f7      	bhi.n	8003c86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d108      	bne.n	8003cba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	441a      	add	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	441a      	add	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d118      	bne.n	8003d00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <prvInsertBlockIntoFreeList+0xac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d00d      	beq.n	8003cf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	441a      	add	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e008      	b.n	8003d08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <prvInsertBlockIntoFreeList+0xac>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e003      	b.n	8003d08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d002      	beq.n	8003d16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	20001124 	.word	0x20001124
 8003d24:	2000112c 	.word	0x2000112c

08003d28 <memset>:
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4402      	add	r2, r0
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d100      	bne.n	8003d32 <memset+0xa>
 8003d30:	4770      	bx	lr
 8003d32:	f803 1b01 	strb.w	r1, [r3], #1
 8003d36:	e7f9      	b.n	8003d2c <memset+0x4>

08003d38 <_reclaim_reent>:
 8003d38:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <_reclaim_reent+0xb8>)
 8003d3a:	b570      	push	{r4, r5, r6, lr}
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4283      	cmp	r3, r0
 8003d42:	d053      	beq.n	8003dec <_reclaim_reent+0xb4>
 8003d44:	69c3      	ldr	r3, [r0, #28]
 8003d46:	b31b      	cbz	r3, 8003d90 <_reclaim_reent+0x58>
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	b163      	cbz	r3, 8003d66 <_reclaim_reent+0x2e>
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	69e3      	ldr	r3, [r4, #28]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	5959      	ldr	r1, [r3, r5]
 8003d54:	b9b1      	cbnz	r1, 8003d84 <_reclaim_reent+0x4c>
 8003d56:	3504      	adds	r5, #4
 8003d58:	2d80      	cmp	r5, #128	@ 0x80
 8003d5a:	d1f8      	bne.n	8003d4e <_reclaim_reent+0x16>
 8003d5c:	69e3      	ldr	r3, [r4, #28]
 8003d5e:	4620      	mov	r0, r4
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	f000 f86d 	bl	8003e40 <_free_r>
 8003d66:	69e3      	ldr	r3, [r4, #28]
 8003d68:	6819      	ldr	r1, [r3, #0]
 8003d6a:	b111      	cbz	r1, 8003d72 <_reclaim_reent+0x3a>
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f000 f867 	bl	8003e40 <_free_r>
 8003d72:	69e3      	ldr	r3, [r4, #28]
 8003d74:	689d      	ldr	r5, [r3, #8]
 8003d76:	b15d      	cbz	r5, 8003d90 <_reclaim_reent+0x58>
 8003d78:	4629      	mov	r1, r5
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	682d      	ldr	r5, [r5, #0]
 8003d7e:	f000 f85f 	bl	8003e40 <_free_r>
 8003d82:	e7f8      	b.n	8003d76 <_reclaim_reent+0x3e>
 8003d84:	680e      	ldr	r6, [r1, #0]
 8003d86:	4620      	mov	r0, r4
 8003d88:	f000 f85a 	bl	8003e40 <_free_r>
 8003d8c:	4631      	mov	r1, r6
 8003d8e:	e7e1      	b.n	8003d54 <_reclaim_reent+0x1c>
 8003d90:	6961      	ldr	r1, [r4, #20]
 8003d92:	b111      	cbz	r1, 8003d9a <_reclaim_reent+0x62>
 8003d94:	4620      	mov	r0, r4
 8003d96:	f000 f853 	bl	8003e40 <_free_r>
 8003d9a:	69e1      	ldr	r1, [r4, #28]
 8003d9c:	b111      	cbz	r1, 8003da4 <_reclaim_reent+0x6c>
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f000 f84e 	bl	8003e40 <_free_r>
 8003da4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003da6:	b111      	cbz	r1, 8003dae <_reclaim_reent+0x76>
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 f849 	bl	8003e40 <_free_r>
 8003dae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003db0:	b111      	cbz	r1, 8003db8 <_reclaim_reent+0x80>
 8003db2:	4620      	mov	r0, r4
 8003db4:	f000 f844 	bl	8003e40 <_free_r>
 8003db8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003dba:	b111      	cbz	r1, 8003dc2 <_reclaim_reent+0x8a>
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f000 f83f 	bl	8003e40 <_free_r>
 8003dc2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003dc4:	b111      	cbz	r1, 8003dcc <_reclaim_reent+0x94>
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f000 f83a 	bl	8003e40 <_free_r>
 8003dcc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003dce:	b111      	cbz	r1, 8003dd6 <_reclaim_reent+0x9e>
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f000 f835 	bl	8003e40 <_free_r>
 8003dd6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003dd8:	b111      	cbz	r1, 8003de0 <_reclaim_reent+0xa8>
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f000 f830 	bl	8003e40 <_free_r>
 8003de0:	6a23      	ldr	r3, [r4, #32]
 8003de2:	b11b      	cbz	r3, 8003dec <_reclaim_reent+0xb4>
 8003de4:	4620      	mov	r0, r4
 8003de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003dea:	4718      	bx	r3
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	bf00      	nop
 8003df0:	20000018 	.word	0x20000018

08003df4 <__libc_init_array>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	2600      	movs	r6, #0
 8003df8:	4d0c      	ldr	r5, [pc, #48]	@ (8003e2c <__libc_init_array+0x38>)
 8003dfa:	4c0d      	ldr	r4, [pc, #52]	@ (8003e30 <__libc_init_array+0x3c>)
 8003dfc:	1b64      	subs	r4, r4, r5
 8003dfe:	10a4      	asrs	r4, r4, #2
 8003e00:	42a6      	cmp	r6, r4
 8003e02:	d109      	bne.n	8003e18 <__libc_init_array+0x24>
 8003e04:	f000 f870 	bl	8003ee8 <_init>
 8003e08:	2600      	movs	r6, #0
 8003e0a:	4d0a      	ldr	r5, [pc, #40]	@ (8003e34 <__libc_init_array+0x40>)
 8003e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e38 <__libc_init_array+0x44>)
 8003e0e:	1b64      	subs	r4, r4, r5
 8003e10:	10a4      	asrs	r4, r4, #2
 8003e12:	42a6      	cmp	r6, r4
 8003e14:	d105      	bne.n	8003e22 <__libc_init_array+0x2e>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1c:	4798      	blx	r3
 8003e1e:	3601      	adds	r6, #1
 8003e20:	e7ee      	b.n	8003e00 <__libc_init_array+0xc>
 8003e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e26:	4798      	blx	r3
 8003e28:	3601      	adds	r6, #1
 8003e2a:	e7f2      	b.n	8003e12 <__libc_init_array+0x1e>
 8003e2c:	08003f60 	.word	0x08003f60
 8003e30:	08003f60 	.word	0x08003f60
 8003e34:	08003f60 	.word	0x08003f60
 8003e38:	08003f64 	.word	0x08003f64

08003e3c <__retarget_lock_acquire_recursive>:
 8003e3c:	4770      	bx	lr

08003e3e <__retarget_lock_release_recursive>:
 8003e3e:	4770      	bx	lr

08003e40 <_free_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4605      	mov	r5, r0
 8003e44:	2900      	cmp	r1, #0
 8003e46:	d040      	beq.n	8003eca <_free_r+0x8a>
 8003e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e4c:	1f0c      	subs	r4, r1, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bfb8      	it	lt
 8003e52:	18e4      	addlt	r4, r4, r3
 8003e54:	f000 f83c 	bl	8003ed0 <__malloc_lock>
 8003e58:	4a1c      	ldr	r2, [pc, #112]	@ (8003ecc <_free_r+0x8c>)
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	b933      	cbnz	r3, 8003e6c <_free_r+0x2c>
 8003e5e:	6063      	str	r3, [r4, #4]
 8003e60:	6014      	str	r4, [r2, #0]
 8003e62:	4628      	mov	r0, r5
 8003e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e68:	f000 b838 	b.w	8003edc <__malloc_unlock>
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	d908      	bls.n	8003e82 <_free_r+0x42>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	1821      	adds	r1, r4, r0
 8003e74:	428b      	cmp	r3, r1
 8003e76:	bf01      	itttt	eq
 8003e78:	6819      	ldreq	r1, [r3, #0]
 8003e7a:	685b      	ldreq	r3, [r3, #4]
 8003e7c:	1809      	addeq	r1, r1, r0
 8003e7e:	6021      	streq	r1, [r4, #0]
 8003e80:	e7ed      	b.n	8003e5e <_free_r+0x1e>
 8003e82:	461a      	mov	r2, r3
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b10b      	cbz	r3, 8003e8c <_free_r+0x4c>
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d9fa      	bls.n	8003e82 <_free_r+0x42>
 8003e8c:	6811      	ldr	r1, [r2, #0]
 8003e8e:	1850      	adds	r0, r2, r1
 8003e90:	42a0      	cmp	r0, r4
 8003e92:	d10b      	bne.n	8003eac <_free_r+0x6c>
 8003e94:	6820      	ldr	r0, [r4, #0]
 8003e96:	4401      	add	r1, r0
 8003e98:	1850      	adds	r0, r2, r1
 8003e9a:	4283      	cmp	r3, r0
 8003e9c:	6011      	str	r1, [r2, #0]
 8003e9e:	d1e0      	bne.n	8003e62 <_free_r+0x22>
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4408      	add	r0, r1
 8003ea6:	6010      	str	r0, [r2, #0]
 8003ea8:	6053      	str	r3, [r2, #4]
 8003eaa:	e7da      	b.n	8003e62 <_free_r+0x22>
 8003eac:	d902      	bls.n	8003eb4 <_free_r+0x74>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	e7d6      	b.n	8003e62 <_free_r+0x22>
 8003eb4:	6820      	ldr	r0, [r4, #0]
 8003eb6:	1821      	adds	r1, r4, r0
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	bf01      	itttt	eq
 8003ebc:	6819      	ldreq	r1, [r3, #0]
 8003ebe:	685b      	ldreq	r3, [r3, #4]
 8003ec0:	1809      	addeq	r1, r1, r0
 8003ec2:	6021      	streq	r1, [r4, #0]
 8003ec4:	6063      	str	r3, [r4, #4]
 8003ec6:	6054      	str	r4, [r2, #4]
 8003ec8:	e7cb      	b.n	8003e62 <_free_r+0x22>
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20001280 	.word	0x20001280

08003ed0 <__malloc_lock>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	@ (8003ed8 <__malloc_lock+0x8>)
 8003ed2:	f7ff bfb3 	b.w	8003e3c <__retarget_lock_acquire_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	2000127c 	.word	0x2000127c

08003edc <__malloc_unlock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	@ (8003ee4 <__malloc_unlock+0x8>)
 8003ede:	f7ff bfae 	b.w	8003e3e <__retarget_lock_release_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	2000127c 	.word	0x2000127c

08003ee8 <_init>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr

08003ef4 <_fini>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr
