
RTOS_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000712c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  0800723c  0800723c  0000823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008068  08008068  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008068  08008068  0000a070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008068  08008068  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800806c  0800806c  0000906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008070  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016e0  20000070  080080e0  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  080080e0  0000a750  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014873  00000000  00000000  0000a099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ff  00000000  00000000  0001e90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00021e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f66  00000000  00000000  000231e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac27  00000000  00000000  0002414e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e26  00000000  00000000  0003ed75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a626  00000000  00000000  00055b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f01c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057dc  00000000  00000000  000f0204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f59e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08007224 	.word	0x08007224

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08007224 	.word	0x08007224

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000008c 	.word	0x2000008c
 800017c:	2000012c 	.word	0x2000012c

08000180 <HAL_CAN_RxFifo1MsgPendingCallback>:
void Task_Display (void *argument);
void Task_ReadPotentiometer (void *argument);

int lastDataRx;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000188:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 800018a:	4a07      	ldr	r2, [pc, #28]	@ (80001a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 800018c:	2101      	movs	r1, #1
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f001 ff06 	bl	8001fa0 <HAL_CAN_GetRxMessage>
//	if(lastDataRx != RxData[7]){
//		lastDataRx = RxData[7];
//		xQueueSendFromISR(ControlSignalQueue, &lastDataRx, pdFALSE);
//	}
	signal_feedback = RxData[7];
 8000194:	4b03      	ldr	r3, [pc, #12]	@ (80001a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000196:	79da      	ldrb	r2, [r3, #7]
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 800019a:	701a      	strb	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000420 	.word	0x20000420
 80001a8:	20000404 	.word	0x20000404
 80001ac:	200003da 	.word	0x200003da

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f000 ffbf 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f8b7 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 f9b3 	bl	8000528 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001c2:	f000 f90f 	bl	80003e4 <MX_ADC1_Init>
  MX_CAN_Init();
 80001c6:	f000 f94b 	bl	8000460 <MX_CAN_Init>
  MX_I2C1_Init();
 80001ca:	f000 f97f 	bl	80004cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80001ce:	4842      	ldr	r0, [pc, #264]	@ (80002d8 <main+0x128>)
 80001d0:	f001 f8bc 	bl	800134c <HAL_ADC_Start>
  HAL_CAN_Start(&hcan);
 80001d4:	4841      	ldr	r0, [pc, #260]	@ (80002dc <main+0x12c>)
 80001d6:	f001 fdd0 	bl	8001d7a <HAL_CAN_Start>
  TxHeader.DLC = 8;  // data length
 80001da:	4b41      	ldr	r3, [pc, #260]	@ (80002e0 <main+0x130>)
 80001dc:	2208      	movs	r2, #8
 80001de:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80001e0:	4b3f      	ldr	r3, [pc, #252]	@ (80002e0 <main+0x130>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80001e6:	4b3e      	ldr	r3, [pc, #248]	@ (80002e0 <main+0x130>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x6A5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 80001ec:	4b3c      	ldr	r3, [pc, #240]	@ (80002e0 <main+0x130>)
 80001ee:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 80001f2:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80001f4:	4b3b      	ldr	r3, [pc, #236]	@ (80002e4 <main+0x134>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80001fa:	4b3a      	ldr	r3, [pc, #232]	@ (80002e4 <main+0x134>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000200:	4b38      	ldr	r3, [pc, #224]	@ (80002e4 <main+0x134>)
 8000202:	2200      	movs	r2, #0
 8000204:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6F5<<5;
 8000206:	4b37      	ldr	r3, [pc, #220]	@ (80002e4 <main+0x134>)
 8000208:	f64d 62a0 	movw	r2, #56992	@ 0xdea0
 800020c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800020e:	4b35      	ldr	r3, [pc, #212]	@ (80002e4 <main+0x134>)
 8000210:	2200      	movs	r2, #0
 8000212:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000214:	4b33      	ldr	r3, [pc, #204]	@ (80002e4 <main+0x134>)
 8000216:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800021a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800021c:	4b31      	ldr	r3, [pc, #196]	@ (80002e4 <main+0x134>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000222:	4b30      	ldr	r3, [pc, #192]	@ (80002e4 <main+0x134>)
 8000224:	2201      	movs	r2, #1
 8000226:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000228:	492e      	ldr	r1, [pc, #184]	@ (80002e4 <main+0x134>)
 800022a:	482c      	ldr	r0, [pc, #176]	@ (80002dc <main+0x12c>)
 800022c:	f001 fcdc 	bl	8001be8 <HAL_CAN_ConfigFilter>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000230:	2110      	movs	r1, #16
 8000232:	482a      	ldr	r0, [pc, #168]	@ (80002dc <main+0x12c>)
 8000234:	f001 ffd5 	bl	80021e2 <HAL_CAN_ActivateNotification>

  // Init Oled
  SSD1306_Init();
 8000238:	f000 faa8 	bl	800078c <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fc0c 	bl	8000a5c <SSD1306_GotoXY>
  SSD1306_Puts ("Current:", &Font_11x18, 1);
 8000244:	2201      	movs	r2, #1
 8000246:	4928      	ldr	r1, [pc, #160]	@ (80002e8 <main+0x138>)
 8000248:	4828      	ldr	r0, [pc, #160]	@ (80002ec <main+0x13c>)
 800024a:	f000 fc9b 	bl	8000b84 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 800024e:	211e      	movs	r1, #30
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fc03 	bl	8000a5c <SSD1306_GotoXY>
  SSD1306_Puts ("Desired:", &Font_11x18, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	4923      	ldr	r1, [pc, #140]	@ (80002e8 <main+0x138>)
 800025a:	4825      	ldr	r0, [pc, #148]	@ (80002f0 <main+0x140>)
 800025c:	f000 fc92 	bl	8000b84 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000260:	f000 fb58 	bl	8000914 <SSD1306_UpdateScreen>

  ADCMutex = xSemaphoreCreateMutex();
 8000264:	2001      	movs	r0, #1
 8000266:	f004 fbdd 	bl	8004a24 <xQueueCreateMutex>
 800026a:	4603      	mov	r3, r0
 800026c:	4a21      	ldr	r2, [pc, #132]	@ (80002f4 <main+0x144>)
 800026e:	6013      	str	r3, [r2, #0]
  ControlSignalQueue = xQueueCreate(5, sizeof (int));
 8000270:	2200      	movs	r2, #0
 8000272:	2104      	movs	r1, #4
 8000274:	2005      	movs	r0, #5
 8000276:	f004 fb61 	bl	800493c <xQueueGenericCreate>
 800027a:	4603      	mov	r3, r0
 800027c:	4a1e      	ldr	r2, [pc, #120]	@ (80002f8 <main+0x148>)
 800027e:	6013      	str	r3, [r2, #0]

  xTaskCreate(Task_SendMessage, "SendMessage", 128, NULL, 3, &SendMessage_Handler);
 8000280:	4b1e      	ldr	r3, [pc, #120]	@ (80002fc <main+0x14c>)
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2303      	movs	r3, #3
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2300      	movs	r3, #0
 800028a:	2280      	movs	r2, #128	@ 0x80
 800028c:	491c      	ldr	r1, [pc, #112]	@ (8000300 <main+0x150>)
 800028e:	481d      	ldr	r0, [pc, #116]	@ (8000304 <main+0x154>)
 8000290:	f004 ff53 	bl	800513a <xTaskCreate>
//  xTaskCreate(Task_ReceiveMessage, "ReceiveMessage", 128, NULL, 1, &ReceiveMessage_Handler);
  xTaskCreate(Task_ToggleLED, "ToggleLED", 128, NULL, 1, &ToggleLED_Handler);
 8000294:	4b1c      	ldr	r3, [pc, #112]	@ (8000308 <main+0x158>)
 8000296:	9301      	str	r3, [sp, #4]
 8000298:	2301      	movs	r3, #1
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2300      	movs	r3, #0
 800029e:	2280      	movs	r2, #128	@ 0x80
 80002a0:	491a      	ldr	r1, [pc, #104]	@ (800030c <main+0x15c>)
 80002a2:	481b      	ldr	r0, [pc, #108]	@ (8000310 <main+0x160>)
 80002a4:	f004 ff49 	bl	800513a <xTaskCreate>
  xTaskCreate(Task_Display, "Display", 128, NULL, 2, &Display_Handler);
 80002a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000314 <main+0x164>)
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	2302      	movs	r3, #2
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2300      	movs	r3, #0
 80002b2:	2280      	movs	r2, #128	@ 0x80
 80002b4:	4918      	ldr	r1, [pc, #96]	@ (8000318 <main+0x168>)
 80002b6:	4819      	ldr	r0, [pc, #100]	@ (800031c <main+0x16c>)
 80002b8:	f004 ff3f 	bl	800513a <xTaskCreate>
  xTaskCreate(Task_ReadPotentiometer, "ReadPotentiometer", 128, NULL, 3, &ReadPotentiometer_Handler);
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <main+0x170>)
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	2303      	movs	r3, #3
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	2300      	movs	r3, #0
 80002c6:	2280      	movs	r2, #128	@ 0x80
 80002c8:	4916      	ldr	r1, [pc, #88]	@ (8000324 <main+0x174>)
 80002ca:	4817      	ldr	r0, [pc, #92]	@ (8000328 <main+0x178>)
 80002cc:	f004 ff35 	bl	800513a <xTaskCreate>

  vTaskStartScheduler();
 80002d0:	f005 f8b8 	bl	8005444 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <main+0x124>
 80002d8:	2000032c 	.word	0x2000032c
 80002dc:	2000035c 	.word	0x2000035c
 80002e0:	20000428 	.word	0x20000428
 80002e4:	200003dc 	.word	0x200003dc
 80002e8:	20000000 	.word	0x20000000
 80002ec:	0800723c 	.word	0x0800723c
 80002f0:	08007248 	.word	0x08007248
 80002f4:	20000444 	.word	0x20000444
 80002f8:	20000448 	.word	0x20000448
 80002fc:	2000044c 	.word	0x2000044c
 8000300:	08007254 	.word	0x08007254
 8000304:	08000611 	.word	0x08000611
 8000308:	20000450 	.word	0x20000450
 800030c:	08007260 	.word	0x08007260
 8000310:	08000671 	.word	0x08000671
 8000314:	20000454 	.word	0x20000454
 8000318:	0800726c 	.word	0x0800726c
 800031c:	08000691 	.word	0x08000691
 8000320:	20000458 	.word	0x20000458
 8000324:	08007274 	.word	0x08007274
 8000328:	080005bd 	.word	0x080005bd

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b094      	sub	sp, #80	@ 0x50
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000336:	2228      	movs	r2, #40	@ 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f006 fa86 	bl	800684c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035c:	2301      	movs	r3, #1
 800035e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036e:	2302      	movs	r3, #2
 8000370:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000376:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000378:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800037c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000382:	4618      	mov	r0, r3
 8000384:	f003 f9d6 	bl	8003734 <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800038e:	f000 f9f7 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000396:	2302      	movs	r3, #2
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	2102      	movs	r1, #2
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fc42 	bl	8003c38 <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ba:	f000 f9e1 	bl	8000780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003be:	2302      	movs	r3, #2
 80003c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4618      	mov	r0, r3
 80003cc:	f003 fdf2 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003d6:	f000 f9d3 	bl	8000780 <Error_Handler>
  }
}
 80003da:	bf00      	nop
 80003dc:	3750      	adds	r7, #80	@ 0x50
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003f4:	4b18      	ldr	r3, [pc, #96]	@ (8000458 <MX_ADC1_Init+0x74>)
 80003f6:	4a19      	ldr	r2, [pc, #100]	@ (800045c <MX_ADC1_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003fa:	4b17      	ldr	r3, [pc, #92]	@ (8000458 <MX_ADC1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000400:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <MX_ADC1_Init+0x74>)
 8000402:	2201      	movs	r2, #1
 8000404:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000406:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <MX_ADC1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800040c:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <MX_ADC1_Init+0x74>)
 800040e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000412:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <MX_ADC1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800041a:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <MX_ADC1_Init+0x74>)
 800041c:	2201      	movs	r2, #1
 800041e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000420:	480d      	ldr	r0, [pc, #52]	@ (8000458 <MX_ADC1_Init+0x74>)
 8000422:	f000 febb 	bl	800119c <HAL_ADC_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800042c:	f000 f9a8 	bl	8000780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000430:	2309      	movs	r3, #9
 8000432:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000434:	2301      	movs	r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_ADC1_Init+0x74>)
 8000442:	f001 f943 	bl	80016cc <HAL_ADC_ConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800044c:	f000 f998 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000032c 	.word	0x2000032c
 800045c:	40012400 	.word	0x40012400

08000460 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000464:	4b17      	ldr	r3, [pc, #92]	@ (80004c4 <MX_CAN_Init+0x64>)
 8000466:	4a18      	ldr	r2, [pc, #96]	@ (80004c8 <MX_CAN_Init+0x68>)
 8000468:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 800046a:	4b16      	ldr	r3, [pc, #88]	@ (80004c4 <MX_CAN_Init+0x64>)
 800046c:	2248      	movs	r2, #72	@ 0x48
 800046e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000470:	4b14      	ldr	r3, [pc, #80]	@ (80004c4 <MX_CAN_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <MX_CAN_Init+0x64>)
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800047c:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <MX_CAN_Init+0x64>)
 800047e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000482:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <MX_CAN_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <MX_CAN_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000490:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <MX_CAN_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <MX_CAN_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800049c:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <MX_CAN_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <MX_CAN_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <MX_CAN_Init+0x64>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <MX_CAN_Init+0x64>)
 80004b0:	f001 fa9f 	bl	80019f2 <HAL_CAN_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80004ba:	f000 f961 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000035c 	.word	0x2000035c
 80004c8:	40006400 	.word	0x40006400

080004cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004d0:	4b12      	ldr	r3, [pc, #72]	@ (800051c <MX_I2C1_Init+0x50>)
 80004d2:	4a13      	ldr	r2, [pc, #76]	@ (8000520 <MX_I2C1_Init+0x54>)
 80004d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <MX_I2C1_Init+0x50>)
 80004d8:	4a12      	ldr	r2, [pc, #72]	@ (8000524 <MX_I2C1_Init+0x58>)
 80004da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <MX_I2C1_Init+0x50>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <MX_I2C1_Init+0x50>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <MX_I2C1_Init+0x50>)
 80004ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <MX_I2C1_Init+0x50>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <MX_I2C1_Init+0x50>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004fc:	4b07      	ldr	r3, [pc, #28]	@ (800051c <MX_I2C1_Init+0x50>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <MX_I2C1_Init+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000508:	4804      	ldr	r0, [pc, #16]	@ (800051c <MX_I2C1_Init+0x50>)
 800050a:	f002 fb49 	bl	8002ba0 <HAL_I2C_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000514:	f000 f934 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000384 	.word	0x20000384
 8000520:	40005400 	.word	0x40005400
 8000524:	00061a80 	.word	0x00061a80

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	4b1d      	ldr	r3, [pc, #116]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a1c      	ldr	r2, [pc, #112]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b17      	ldr	r3, [pc, #92]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a16      	ldr	r2, [pc, #88]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a10      	ldr	r2, [pc, #64]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <MX_GPIO_Init+0x8c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	480b      	ldr	r0, [pc, #44]	@ (80005b8 <MX_GPIO_Init+0x90>)
 800058a:	f002 fad7 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800058e:	2304      	movs	r3, #4
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2302      	movs	r3, #2
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <MX_GPIO_Init+0x90>)
 80005a6:	f002 f945 	bl	8002834 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005aa:	bf00      	nop
 80005ac:	3720      	adds	r7, #32
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010c00 	.word	0x40010c00

080005bc <Task_ReadPotentiometer>:

/* USER CODE BEGIN 4 */

void Task_ReadPotentiometer(void *argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <Task_ReadPotentiometer+0x48>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 fb43 	bl	8004c58 <xQueueSemaphoreTake>
		HAL_ADC_PollForConversion(&hadc1,1000);
 80005d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005d6:	480c      	ldr	r0, [pc, #48]	@ (8000608 <Task_ReadPotentiometer+0x4c>)
 80005d8:	f000 ff66 	bl	80014a8 <HAL_ADC_PollForConversion>
		readValue = HAL_ADC_GetValue(&hadc1);
 80005dc:	480a      	ldr	r0, [pc, #40]	@ (8000608 <Task_ReadPotentiometer+0x4c>)
 80005de:	f001 f869 	bl	80016b4 <HAL_ADC_GetValue>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <Task_ReadPotentiometer+0x50>)
 80005e8:	801a      	strh	r2, [r3, #0]
		xSemaphoreGive(ADCMutex);
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <Task_ReadPotentiometer+0x48>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	f004 fa2e 	bl	8004a54 <xQueueGenericSend>
		vTaskDelay(200);
 80005f8:	20c8      	movs	r0, #200	@ 0xc8
 80005fa:	f004 feed 	bl	80053d8 <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 80005fe:	bf00      	nop
 8000600:	e7e0      	b.n	80005c4 <Task_ReadPotentiometer+0x8>
 8000602:	bf00      	nop
 8000604:	20000444 	.word	0x20000444
 8000608:	2000032c 	.word	0x2000032c
 800060c:	200003d8 	.word	0x200003d8

08000610 <Task_SendMessage>:
	}
}

void Task_SendMessage(void *argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while(1){
		  // readValue is between 0-4095 but we need to transmit maximum 255 (one byte)
		  // We divide readValue by 16 to get 0-255. Better way to divide is by shifting bits
		  // (readValue >> 4) is same as (readValue / 16)
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000618:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <Task_SendMessage+0x48>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fb19 	bl	8004c58 <xQueueSemaphoreTake>
		TxData[7] = readValue >> 4;
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <Task_SendMessage+0x4c>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	b29b      	uxth	r3, r3
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <Task_SendMessage+0x50>)
 8000632:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000634:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <Task_SendMessage+0x54>)
 8000636:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <Task_SendMessage+0x50>)
 8000638:	490b      	ldr	r1, [pc, #44]	@ (8000668 <Task_SendMessage+0x58>)
 800063a:	480c      	ldr	r0, [pc, #48]	@ (800066c <Task_SendMessage+0x5c>)
 800063c:	f001 fbe1 	bl	8001e02 <HAL_CAN_AddTxMessage>
		xSemaphoreGive(ADCMutex);
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <Task_SendMessage+0x48>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	f004 fa03 	bl	8004a54 <xQueueGenericSend>
		vTaskDelay(200);
 800064e:	20c8      	movs	r0, #200	@ 0xc8
 8000650:	f004 fec2 	bl	80053d8 <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000654:	bf00      	nop
 8000656:	e7df      	b.n	8000618 <Task_SendMessage+0x8>
 8000658:	20000444 	.word	0x20000444
 800065c:	200003d8 	.word	0x200003d8
 8000660:	20000008 	.word	0x20000008
 8000664:	20000440 	.word	0x20000440
 8000668:	20000428 	.word	0x20000428
 800066c:	2000035c 	.word	0x2000035c

08000670 <Task_ToggleLED>:
	}
}

void Task_ToggleLED(void *argument){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000678:	2104      	movs	r1, #4
 800067a:	4804      	ldr	r0, [pc, #16]	@ (800068c <Task_ToggleLED+0x1c>)
 800067c:	f002 fa76 	bl	8002b6c <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000684:	f004 fea8 	bl	80053d8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000688:	bf00      	nop
 800068a:	e7f5      	b.n	8000678 <Task_ToggleLED+0x8>
 800068c:	40010c00 	.word	0x40010c00

08000690 <Task_Display>:
	}
}

void Task_Display(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	char snum[5];
	char snum2[5];
	int current_angle;
	int desire_angle;
	while(1){
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000698:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <Task_Display+0xb4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 fad9 	bl	8004c58 <xQueueSemaphoreTake>
		desire_angle = (readValue*90)/4096;
 80006a6:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <Task_Display+0xb8>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	235a      	movs	r3, #90	@ 0x5a
 80006ae:	fb02 f303 	mul.w	r3, r2, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	da01      	bge.n	80006ba <Task_Display+0x2a>
 80006b6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80006ba:	131b      	asrs	r3, r3, #12
 80006bc:	61fb      	str	r3, [r7, #28]
		current_angle = (signal_feedback * 360) / 47;
 80006be:	4b23      	ldr	r3, [pc, #140]	@ (800074c <Task_Display+0xbc>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	4a20      	ldr	r2, [pc, #128]	@ (8000750 <Task_Display+0xc0>)
 80006d0:	fb82 1203 	smull	r1, r2, r2, r3
 80006d4:	441a      	add	r2, r3
 80006d6:	1152      	asrs	r2, r2, #5
 80006d8:	17db      	asrs	r3, r3, #31
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	61bb      	str	r3, [r7, #24]
		sprintf(snum, "%03d", current_angle);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	69ba      	ldr	r2, [r7, #24]
 80006e4:	491b      	ldr	r1, [pc, #108]	@ (8000754 <Task_Display+0xc4>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 f88e 	bl	8006808 <siprintf>
		sprintf(snum2, "%03d", desire_angle);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	69fa      	ldr	r2, [r7, #28]
 80006f2:	4918      	ldr	r1, [pc, #96]	@ (8000754 <Task_Display+0xc4>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f006 f887 	bl	8006808 <siprintf>
		SSD1306_GotoXY (90,0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	205a      	movs	r0, #90	@ 0x5a
 80006fe:	f000 f9ad 	bl	8000a5c <SSD1306_GotoXY>
		SSD1306_Puts (snum, &Font_11x18, 1);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	2201      	movs	r2, #1
 8000708:	4913      	ldr	r1, [pc, #76]	@ (8000758 <Task_Display+0xc8>)
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fa3a 	bl	8000b84 <SSD1306_Puts>
		SSD1306_GotoXY (90, 30);
 8000710:	211e      	movs	r1, #30
 8000712:	205a      	movs	r0, #90	@ 0x5a
 8000714:	f000 f9a2 	bl	8000a5c <SSD1306_GotoXY>
		SSD1306_Puts (snum2, &Font_11x18, 1);
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2201      	movs	r2, #1
 800071e:	490e      	ldr	r1, [pc, #56]	@ (8000758 <Task_Display+0xc8>)
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fa2f 	bl	8000b84 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000726:	f000 f8f5 	bl	8000914 <SSD1306_UpdateScreen>
		xSemaphoreGive(ADCMutex);
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <Task_Display+0xb4>)
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	2300      	movs	r3, #0
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	f004 f98e 	bl	8004a54 <xQueueGenericSend>
		vTaskDelay(500);
 8000738:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800073c:	f004 fe4c 	bl	80053d8 <vTaskDelay>
		xSemaphoreTake(ADCMutex, portMAX_DELAY);
 8000740:	bf00      	nop
 8000742:	e7a9      	b.n	8000698 <Task_Display+0x8>
 8000744:	20000444 	.word	0x20000444
 8000748:	200003d8 	.word	0x200003d8
 800074c:	200003da 	.word	0x200003da
 8000750:	ae4c415d 	.word	0xae4c415d
 8000754:	08007288 	.word	0x08007288
 8000758:	20000000 	.word	0x20000000

0800075c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800076e:	f000 fcf9 	bl	8001164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40012c00 	.word	0x40012c00

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000792:	f000 fa1d 	bl	8000bd0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000796:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800079a:	2201      	movs	r2, #1
 800079c:	2178      	movs	r1, #120	@ 0x78
 800079e:	485b      	ldr	r0, [pc, #364]	@ (800090c <SSD1306_Init+0x180>)
 80007a0:	f002 fc40 	bl	8003024 <HAL_I2C_IsDeviceReady>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e0a9      	b.n	8000902 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80007ae:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80007b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007b4:	e002      	b.n	80007bc <SSD1306_Init+0x30>
		p--;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f9      	bne.n	80007b6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80007c2:	22ae      	movs	r2, #174	@ 0xae
 80007c4:	2100      	movs	r1, #0
 80007c6:	2078      	movs	r0, #120	@ 0x78
 80007c8:	f000 fa7c 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80007cc:	2220      	movs	r2, #32
 80007ce:	2100      	movs	r1, #0
 80007d0:	2078      	movs	r0, #120	@ 0x78
 80007d2:	f000 fa77 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80007d6:	2210      	movs	r2, #16
 80007d8:	2100      	movs	r1, #0
 80007da:	2078      	movs	r0, #120	@ 0x78
 80007dc:	f000 fa72 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007e0:	22b0      	movs	r2, #176	@ 0xb0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2078      	movs	r0, #120	@ 0x78
 80007e6:	f000 fa6d 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80007ea:	22c8      	movs	r2, #200	@ 0xc8
 80007ec:	2100      	movs	r1, #0
 80007ee:	2078      	movs	r0, #120	@ 0x78
 80007f0:	f000 fa68 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2078      	movs	r0, #120	@ 0x78
 80007fa:	f000 fa63 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80007fe:	2210      	movs	r2, #16
 8000800:	2100      	movs	r1, #0
 8000802:	2078      	movs	r0, #120	@ 0x78
 8000804:	f000 fa5e 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000808:	2240      	movs	r2, #64	@ 0x40
 800080a:	2100      	movs	r1, #0
 800080c:	2078      	movs	r0, #120	@ 0x78
 800080e:	f000 fa59 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000812:	2281      	movs	r2, #129	@ 0x81
 8000814:	2100      	movs	r1, #0
 8000816:	2078      	movs	r0, #120	@ 0x78
 8000818:	f000 fa54 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800081c:	22ff      	movs	r2, #255	@ 0xff
 800081e:	2100      	movs	r1, #0
 8000820:	2078      	movs	r0, #120	@ 0x78
 8000822:	f000 fa4f 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000826:	22a1      	movs	r2, #161	@ 0xa1
 8000828:	2100      	movs	r1, #0
 800082a:	2078      	movs	r0, #120	@ 0x78
 800082c:	f000 fa4a 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000830:	22a6      	movs	r2, #166	@ 0xa6
 8000832:	2100      	movs	r1, #0
 8000834:	2078      	movs	r0, #120	@ 0x78
 8000836:	f000 fa45 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800083a:	22a8      	movs	r2, #168	@ 0xa8
 800083c:	2100      	movs	r1, #0
 800083e:	2078      	movs	r0, #120	@ 0x78
 8000840:	f000 fa40 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000844:	223f      	movs	r2, #63	@ 0x3f
 8000846:	2100      	movs	r1, #0
 8000848:	2078      	movs	r0, #120	@ 0x78
 800084a:	f000 fa3b 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800084e:	22a4      	movs	r2, #164	@ 0xa4
 8000850:	2100      	movs	r1, #0
 8000852:	2078      	movs	r0, #120	@ 0x78
 8000854:	f000 fa36 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000858:	22d3      	movs	r2, #211	@ 0xd3
 800085a:	2100      	movs	r1, #0
 800085c:	2078      	movs	r0, #120	@ 0x78
 800085e:	f000 fa31 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2078      	movs	r0, #120	@ 0x78
 8000868:	f000 fa2c 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800086c:	22d5      	movs	r2, #213	@ 0xd5
 800086e:	2100      	movs	r1, #0
 8000870:	2078      	movs	r0, #120	@ 0x78
 8000872:	f000 fa27 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000876:	22f0      	movs	r2, #240	@ 0xf0
 8000878:	2100      	movs	r1, #0
 800087a:	2078      	movs	r0, #120	@ 0x78
 800087c:	f000 fa22 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000880:	22d9      	movs	r2, #217	@ 0xd9
 8000882:	2100      	movs	r1, #0
 8000884:	2078      	movs	r0, #120	@ 0x78
 8000886:	f000 fa1d 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800088a:	2222      	movs	r2, #34	@ 0x22
 800088c:	2100      	movs	r1, #0
 800088e:	2078      	movs	r0, #120	@ 0x78
 8000890:	f000 fa18 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000894:	22da      	movs	r2, #218	@ 0xda
 8000896:	2100      	movs	r1, #0
 8000898:	2078      	movs	r0, #120	@ 0x78
 800089a:	f000 fa13 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800089e:	2212      	movs	r2, #18
 80008a0:	2100      	movs	r1, #0
 80008a2:	2078      	movs	r0, #120	@ 0x78
 80008a4:	f000 fa0e 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80008a8:	22db      	movs	r2, #219	@ 0xdb
 80008aa:	2100      	movs	r1, #0
 80008ac:	2078      	movs	r0, #120	@ 0x78
 80008ae:	f000 fa09 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80008b2:	2220      	movs	r2, #32
 80008b4:	2100      	movs	r1, #0
 80008b6:	2078      	movs	r0, #120	@ 0x78
 80008b8:	f000 fa04 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80008bc:	228d      	movs	r2, #141	@ 0x8d
 80008be:	2100      	movs	r1, #0
 80008c0:	2078      	movs	r0, #120	@ 0x78
 80008c2:	f000 f9ff 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80008c6:	2214      	movs	r2, #20
 80008c8:	2100      	movs	r1, #0
 80008ca:	2078      	movs	r0, #120	@ 0x78
 80008cc:	f000 f9fa 	bl	8000cc4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80008d0:	22af      	movs	r2, #175	@ 0xaf
 80008d2:	2100      	movs	r1, #0
 80008d4:	2078      	movs	r0, #120	@ 0x78
 80008d6:	f000 f9f5 	bl	8000cc4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80008da:	222e      	movs	r2, #46	@ 0x2e
 80008dc:	2100      	movs	r1, #0
 80008de:	2078      	movs	r0, #120	@ 0x78
 80008e0:	f000 f9f0 	bl	8000cc4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f000 f843 	bl	8000970 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80008ea:	f000 f813 	bl	8000914 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <SSD1306_Init+0x184>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SSD1306_Init+0x184>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <SSD1306_Init+0x184>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000900:	2301      	movs	r3, #1
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000384 	.word	0x20000384
 8000910:	2000085c 	.word	0x2000085c

08000914 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800091a:	2300      	movs	r3, #0
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	e01d      	b.n	800095c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	3b50      	subs	r3, #80	@ 0x50
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	2078      	movs	r0, #120	@ 0x78
 800092c:	f000 f9ca 	bl	8000cc4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2078      	movs	r0, #120	@ 0x78
 8000936:	f000 f9c5 	bl	8000cc4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800093a:	2210      	movs	r2, #16
 800093c:	2100      	movs	r1, #0
 800093e:	2078      	movs	r0, #120	@ 0x78
 8000940:	f000 f9c0 	bl	8000cc4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	01db      	lsls	r3, r3, #7
 8000948:	4a08      	ldr	r2, [pc, #32]	@ (800096c <SSD1306_UpdateScreen+0x58>)
 800094a:	441a      	add	r2, r3
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	2140      	movs	r1, #64	@ 0x40
 8000950:	2078      	movs	r0, #120	@ 0x78
 8000952:	f000 f951 	bl	8000bf8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3301      	adds	r3, #1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b07      	cmp	r3, #7
 8000960:	d9de      	bls.n	8000920 <SSD1306_UpdateScreen+0xc>
	}
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000045c 	.word	0x2000045c

08000970 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <SSD1306_Fill+0x14>
 8000980:	2300      	movs	r3, #0
 8000982:	e000      	b.n	8000986 <SSD1306_Fill+0x16>
 8000984:	23ff      	movs	r3, #255	@ 0xff
 8000986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800098a:	4619      	mov	r1, r3
 800098c:	4803      	ldr	r0, [pc, #12]	@ (800099c <SSD1306_Fill+0x2c>)
 800098e:	f005 ff5d 	bl	800684c <memset>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000045c 	.word	0x2000045c

080009a0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
 80009aa:	460b      	mov	r3, r1
 80009ac:	80bb      	strh	r3, [r7, #4]
 80009ae:	4613      	mov	r3, r2
 80009b0:	70fb      	strb	r3, [r7, #3]
	if (
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80009b6:	d848      	bhi.n	8000a4a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80009b8:	88bb      	ldrh	r3, [r7, #4]
 80009ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80009bc:	d845      	bhi.n	8000a4a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80009be:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <SSD1306_DrawPixel+0xb4>)
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf0c      	ite	eq
 80009cc:	2301      	moveq	r3, #1
 80009ce:	2300      	movne	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d11a      	bne.n	8000a10 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009da:	88fa      	ldrh	r2, [r7, #6]
 80009dc:	88bb      	ldrh	r3, [r7, #4]
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	b298      	uxth	r0, r3
 80009e2:	4603      	mov	r3, r0
 80009e4:	01db      	lsls	r3, r3, #7
 80009e6:	4413      	add	r3, r2
 80009e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <SSD1306_DrawPixel+0xb8>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	2101      	movs	r1, #1
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	b259      	sxtb	r1, r3
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	4603      	mov	r3, r0
 8000a04:	01db      	lsls	r3, r3, #7
 8000a06:	4413      	add	r3, r2
 8000a08:	b2c9      	uxtb	r1, r1
 8000a0a:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <SSD1306_DrawPixel+0xb8>)
 8000a0c:	54d1      	strb	r1, [r2, r3]
 8000a0e:	e01d      	b.n	8000a4c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	b298      	uxth	r0, r3
 8000a18:	4603      	mov	r3, r0
 8000a1a:	01db      	lsls	r3, r3, #7
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a58 <SSD1306_DrawPixel+0xb8>)
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	b25a      	sxtb	r2, r3
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	4013      	ands	r3, r2
 8000a38:	b259      	sxtb	r1, r3
 8000a3a:	88fa      	ldrh	r2, [r7, #6]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	01db      	lsls	r3, r3, #7
 8000a40:	4413      	add	r3, r2
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <SSD1306_DrawPixel+0xb8>)
 8000a46:	54d1      	strb	r1, [r2, r3]
 8000a48:	e000      	b.n	8000a4c <SSD1306_DrawPixel+0xac>
		return;
 8000a4a:	bf00      	nop
	}
}
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	2000085c 	.word	0x2000085c
 8000a58:	2000045c 	.word	0x2000045c

08000a5c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	80fb      	strh	r3, [r7, #6]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000a6c:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <SSD1306_GotoXY+0x28>)
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000a72:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <SSD1306_GotoXY+0x28>)
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	8053      	strh	r3, [r2, #2]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2000085c 	.word	0x2000085c

08000a88 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a98:	4b39      	ldr	r3, [pc, #228]	@ (8000b80 <SSD1306_Putc+0xf8>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
	if (
 8000aa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aa6:	dc07      	bgt.n	8000ab8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000aa8:	4b35      	ldr	r3, [pc, #212]	@ (8000b80 <SSD1306_Putc+0xf8>)
 8000aaa:	885b      	ldrh	r3, [r3, #2]
 8000aac:	461a      	mov	r2, r3
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ab4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ab6:	dd01      	ble.n	8000abc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e05d      	b.n	8000b78 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e04b      	b.n	8000b5a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	3b20      	subs	r3, #32
 8000aca:	6839      	ldr	r1, [r7, #0]
 8000acc:	7849      	ldrb	r1, [r1, #1]
 8000ace:	fb01 f303 	mul.w	r3, r1, r3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	440b      	add	r3, r1
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	e030      	b.n	8000b48 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d010      	beq.n	8000b18 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000af6:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <SSD1306_Putc+0xf8>)
 8000af8:	881a      	ldrh	r2, [r3, #0]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	b298      	uxth	r0, r3
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <SSD1306_Putc+0xf8>)
 8000b04:	885a      	ldrh	r2, [r3, #2]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff ff45 	bl	80009a0 <SSD1306_DrawPixel>
 8000b16:	e014      	b.n	8000b42 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <SSD1306_Putc+0xf8>)
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b298      	uxth	r0, r3
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <SSD1306_Putc+0xf8>)
 8000b26:	885a      	ldrh	r2, [r3, #2]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b299      	uxth	r1, r3
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf0c      	ite	eq
 8000b36:	2301      	moveq	r3, #1
 8000b38:	2300      	movne	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f7ff ff2f 	bl	80009a0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	3301      	adds	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d3c8      	bcc.n	8000ae6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3301      	adds	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	785b      	ldrb	r3, [r3, #1]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d3ad      	bcc.n	8000ac2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <SSD1306_Putc+0xf8>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <SSD1306_Putc+0xf8>)
 8000b74:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000b76:	79fb      	ldrb	r3, [r7, #7]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000085c 	.word	0x2000085c

08000b84 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000b92:	e012      	b.n	8000bba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	68b9      	ldr	r1, [r7, #8]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff73 	bl	8000a88 <SSD1306_Putc>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d002      	beq.n	8000bb4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	e008      	b.n	8000bc6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <ssd1306_I2C_Init+0x24>)
 8000bd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bda:	e002      	b.n	8000be2 <ssd1306_I2C_Init+0x12>
		p--;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f9      	bne.n	8000bdc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	0003d090 	.word	0x0003d090

08000bf8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b0c7      	sub	sp, #284	@ 0x11c
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000c06:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000c0a:	600a      	str	r2, [r1, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c12:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c16:	4622      	mov	r2, r4
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c1e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000c22:	4602      	mov	r2, r0
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c2e:	460a      	mov	r2, r1
 8000c30:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c3e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c4c:	e015      	b.n	8000c7a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000c4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c52:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c56:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	441a      	add	r2, r3
 8000c5e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c62:	3301      	adds	r3, #1
 8000c64:	7811      	ldrb	r1, [r2, #0]
 8000c66:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c6a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c6e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000c70:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c74:	3301      	adds	r3, #1
 8000c76:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c7a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c84:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c88:	8812      	ldrh	r2, [r2, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d8df      	bhi.n	8000c4e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000c8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c92:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f107 020c 	add.w	r2, r7, #12
 8000cac:	200a      	movs	r0, #10
 8000cae:	9000      	str	r0, [sp, #0]
 8000cb0:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000cb2:	f002 f8b9 	bl	8002e28 <HAL_I2C_Master_Transmit>
}
 8000cb6:	bf00      	nop
 8000cb8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	20000384 	.word	0x20000384

08000cc4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	71bb      	strb	r3, [r7, #6]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000cda:	797b      	ldrb	r3, [r7, #5]
 8000cdc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	b299      	uxth	r1, r3
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2302      	movs	r3, #2
 8000cec:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <ssd1306_I2C_Write+0x38>)
 8000cee:	f002 f89b 	bl	8002e28 <HAL_I2C_Master_Transmit>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000384 	.word	0x20000384

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <HAL_MspInit+0x68>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <HAL_MspInit+0x68>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <HAL_MspInit+0x68>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_MspInit+0x68>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a11      	ldr	r2, [pc, #68]	@ (8000d68 <HAL_MspInit+0x68>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <HAL_MspInit+0x68>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	210f      	movs	r1, #15
 8000d3a:	f06f 0001 	mvn.w	r0, #1
 8000d3e:	f001 fd4e 	bl	80027de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_MspInit+0x6c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_MspInit+0x6c>)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010000 	.word	0x40010000

08000d70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <HAL_ADC_MspInit+0x6c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d121      	bne.n	8000dd4 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <HAL_ADC_MspInit+0x70>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <HAL_ADC_MspInit+0x70>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <HAL_ADC_MspInit+0x70>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <HAL_ADC_MspInit+0x70>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a0c      	ldr	r2, [pc, #48]	@ (8000de0 <HAL_ADC_MspInit+0x70>)
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_ADC_MspInit+0x70>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <HAL_ADC_MspInit+0x74>)
 8000dd0:	f001 fd30 	bl	8002834 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40012400 	.word	0x40012400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a29      	ldr	r2, [pc, #164]	@ (8000ea8 <HAL_CAN_MspInit+0xc0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d14b      	bne.n	8000ea0 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e08:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	4a27      	ldr	r2, [pc, #156]	@ (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e12:	61d3      	str	r3, [r2, #28]
 8000e14:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <HAL_CAN_MspInit+0xc4>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <HAL_CAN_MspInit+0xc8>)
 8000e4e:	f001 fcf1 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <HAL_CAN_MspInit+0xc8>)
 8000e68:	f001 fce4 	bl	8002834 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_CAN_MspInit+0xcc>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e74:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_CAN_MspInit+0xcc>)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2105      	movs	r1, #5
 8000e94:	2015      	movs	r0, #21
 8000e96:	f001 fca2 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e9a:	2015      	movs	r0, #21
 8000e9c:	f001 fcbb 	bl	8002816 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	@ 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40006400 	.word	0x40006400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	40010000 	.word	0x40010000

08000eb8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <HAL_I2C_MspInit+0x70>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d123      	bne.n	8000f20 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_I2C_MspInit+0x74>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <HAL_I2C_MspInit+0x74>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <HAL_I2C_MspInit+0x74>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef0:	23c0      	movs	r3, #192	@ 0xc0
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <HAL_I2C_MspInit+0x78>)
 8000f04:	f001 fc96 	bl	8002834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <HAL_I2C_MspInit+0x74>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	@ (8000f2c <HAL_I2C_MspInit+0x74>)
 8000f0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f12:	61d3      	str	r3, [r2, #28]
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <HAL_I2C_MspInit+0x74>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <HAL_InitTick+0xd0>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <HAL_InitTick+0xd0>)
 8000f50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <HAL_InitTick+0xd0>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 ffd3 	bl	8003f18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f72:	f002 ffbd 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 8000f76:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f7a:	4a23      	ldr	r2, [pc, #140]	@ (8001008 <HAL_InitTick+0xd4>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	0c9b      	lsrs	r3, r3, #18
 8000f82:	3b01      	subs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <HAL_InitTick+0xd8>)
 8000f88:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <HAL_InitTick+0xdc>)
 8000f8a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HAL_InitTick+0xd8>)
 8000f8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f92:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f94:	4a1d      	ldr	r2, [pc, #116]	@ (800100c <HAL_InitTick+0xd8>)
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <HAL_InitTick+0xd8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <HAL_InitTick+0xd8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_InitTick+0xd8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fac:	4817      	ldr	r0, [pc, #92]	@ (800100c <HAL_InitTick+0xd8>)
 8000fae:	f003 f96d 	bl	800428c <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11b      	bne.n	8000ff8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fc0:	4812      	ldr	r0, [pc, #72]	@ (800100c <HAL_InitTick+0xd8>)
 8000fc2:	f003 f9bb 	bl	800433c <HAL_TIM_Base_Start_IT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d111      	bne.n	8000ff8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fd4:	2019      	movs	r0, #25
 8000fd6:	f001 fc1e 	bl	8002816 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d808      	bhi.n	8000ff2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	2019      	movs	r0, #25
 8000fe6:	f001 fbfa 	bl	80027de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_InitTick+0xe0>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e002      	b.n	8000ff8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3730      	adds	r7, #48	@ 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000
 8001008:	431bde83 	.word	0x431bde83
 800100c:	20000864 	.word	0x20000864
 8001010:	40012c00 	.word	0x40012c00
 8001014:	20000014 	.word	0x20000014

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <CAN1_RX1_IRQHandler+0x10>)
 8001052:	f001 f8eb 	bl	800222c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000035c 	.word	0x2000035c

08001060 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <TIM1_UP_IRQHandler+0x10>)
 8001066:	f003 f9bb 	bl	80043e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000864 	.word	0x20000864

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f005 fc38 	bl	8006918 <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20005000 	.word	0x20005000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	200008ac 	.word	0x200008ac
 80010dc:	20001750 	.word	0x20001750

080010e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ec:	f7ff fff8 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010f2:	490c      	ldr	r1, [pc, #48]	@ (8001124 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001128 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a09      	ldr	r2, [pc, #36]	@ (800112c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001108:	4c09      	ldr	r4, [pc, #36]	@ (8001130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001116:	f005 fc05 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111a:	f7ff f849 	bl	80001b0 <main>
  bx lr
 800111e:	4770      	bx	lr
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001128:	08008070 	.word	0x08008070
  ldr r2, =_sbss
 800112c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001130:	20001750 	.word	0x20001750

08001134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_2_IRQHandler>
	...

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <HAL_Init+0x28>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	@ (8001160 <HAL_Init+0x28>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f001 fb3d 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	200f      	movs	r0, #15
 8001150:	f7ff fef0 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fdd4 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <HAL_IncTick+0x20>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000018 	.word	0x20000018
 8001184:	200008b0 	.word	0x200008b0

08001188 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	200008b0 	.word	0x200008b0

0800119c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e0be      	b.n	800133c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fdc8 	bl	8000d70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 fbc5 	bl	8001970 <ADC_ConversionStop_Disable>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 8099 	bne.w	800132a <HAL_ADC_Init+0x18e>
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 8095 	bne.w	800132a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001204:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001208:	f023 0302 	bic.w	r3, r3, #2
 800120c:	f043 0202 	orr.w	r2, r3, #2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800121c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7b1b      	ldrb	r3, [r3, #12]
 8001222:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001224:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	4313      	orrs	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001234:	d003      	beq.n	800123e <HAL_ADC_Init+0xa2>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d102      	bne.n	8001244 <HAL_ADC_Init+0xa8>
 800123e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001242:	e000      	b.n	8001246 <HAL_ADC_Init+0xaa>
 8001244:	2300      	movs	r3, #0
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7d1b      	ldrb	r3, [r3, #20]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d119      	bne.n	8001288 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7b1b      	ldrb	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	3b01      	subs	r3, #1
 8001262:	035a      	lsls	r2, r3, #13
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	e00b      	b.n	8001288 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001274:	f043 0220 	orr.w	r2, r3, #32
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	f043 0201 	orr.w	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	430a      	orrs	r2, r1
 800129a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_ADC_Init+0x1a8>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012b8:	d003      	beq.n	80012c2 <HAL_ADC_Init+0x126>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d104      	bne.n	80012cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	051b      	lsls	r3, r3, #20
 80012ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	430a      	orrs	r2, r1
 80012de:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <HAL_ADC_Init+0x1ac>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d10b      	bne.n	8001308 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fa:	f023 0303 	bic.w	r3, r3, #3
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001306:	e018      	b.n	800133a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	f023 0312 	bic.w	r3, r3, #18
 8001310:	f043 0210 	orr.w	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001328:	e007      	b.n	800133a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800133a:	7dfb      	ldrb	r3, [r7, #23]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	ffe1f7fd 	.word	0xffe1f7fd
 8001348:	ff1f0efe 	.word	0xff1f0efe

0800134c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Start+0x1a>
 8001362:	2302      	movs	r3, #2
 8001364:	e098      	b.n	8001498 <HAL_ADC_Start+0x14c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 faa4 	bl	80018bc <ADC_Enable>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 8087 	bne.w	800148e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a41      	ldr	r2, [pc, #260]	@ (80014a0 <HAL_ADC_Start+0x154>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d105      	bne.n	80013aa <HAL_ADC_Start+0x5e>
 800139e:	4b41      	ldr	r3, [pc, #260]	@ (80014a4 <HAL_ADC_Start+0x158>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d115      	bne.n	80013d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d026      	beq.n	8001412 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013d4:	e01d      	b.n	8001412 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2f      	ldr	r2, [pc, #188]	@ (80014a4 <HAL_ADC_Start+0x158>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d004      	beq.n	80013f6 <HAL_ADC_Start+0xaa>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2b      	ldr	r2, [pc, #172]	@ (80014a0 <HAL_ADC_Start+0x154>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10d      	bne.n	8001412 <HAL_ADC_Start+0xc6>
 80013f6:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <HAL_ADC_Start+0x158>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800140a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001422:	f023 0206 	bic.w	r2, r3, #6
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
 800142a:	e002      	b.n	8001432 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f06f 0202 	mvn.w	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800144e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001452:	d113      	bne.n	800147c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001458:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <HAL_ADC_Start+0x154>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d105      	bne.n	800146a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_ADC_Start+0x158>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001466:	2b00      	cmp	r3, #0
 8001468:	d108      	bne.n	800147c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	e00c      	b.n	8001496 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e003      	b.n	8001496 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40012800 	.word	0x40012800
 80014a4:	40012400 	.word	0x40012400

080014a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014be:	f7ff fe63 	bl	8001188 <HAL_GetTick>
 80014c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	f043 0220 	orr.w	r2, r3, #32
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0d3      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d131      	bne.n	800155c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d12a      	bne.n	800155c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001506:	e021      	b.n	800154c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800150e:	d01d      	beq.n	800154c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <HAL_ADC_PollForConversion+0x7e>
 8001516:	f7ff fe37 	bl	8001188 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d212      	bcs.n	800154c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10b      	bne.n	800154c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0a2      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0d6      	beq.n	8001508 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800155a:	e070      	b.n	800163e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800155c:	4b4f      	ldr	r3, [pc, #316]	@ (800169c <HAL_ADC_PollForConversion+0x1f4>)
 800155e:	681c      	ldr	r4, [r3, #0]
 8001560:	2002      	movs	r0, #2
 8001562:	f002 fddd 	bl	8004120 <HAL_RCCEx_GetPeriphCLKFreq>
 8001566:	4603      	mov	r3, r0
 8001568:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6919      	ldr	r1, [r3, #16]
 8001572:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <HAL_ADC_PollForConversion+0x1f8>)
 8001574:	400b      	ands	r3, r1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <HAL_ADC_PollForConversion+0x104>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68d9      	ldr	r1, [r3, #12]
 8001580:	4b48      	ldr	r3, [pc, #288]	@ (80016a4 <HAL_ADC_PollForConversion+0x1fc>)
 8001582:	400b      	ands	r3, r1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d111      	bne.n	80015ac <HAL_ADC_PollForConversion+0x104>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6919      	ldr	r1, [r3, #16]
 800158e:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <HAL_ADC_PollForConversion+0x200>)
 8001590:	400b      	ands	r3, r1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d108      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x100>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68d9      	ldr	r1, [r3, #12]
 800159c:	4b43      	ldr	r3, [pc, #268]	@ (80016ac <HAL_ADC_PollForConversion+0x204>)
 800159e:	400b      	ands	r3, r1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x100>
 80015a4:	2314      	movs	r3, #20
 80015a6:	e020      	b.n	80015ea <HAL_ADC_PollForConversion+0x142>
 80015a8:	2329      	movs	r3, #41	@ 0x29
 80015aa:	e01e      	b.n	80015ea <HAL_ADC_PollForConversion+0x142>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6919      	ldr	r1, [r3, #16]
 80015b2:	4b3d      	ldr	r3, [pc, #244]	@ (80016a8 <HAL_ADC_PollForConversion+0x200>)
 80015b4:	400b      	ands	r3, r1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_ADC_PollForConversion+0x120>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68d9      	ldr	r1, [r3, #12]
 80015c0:	4b3a      	ldr	r3, [pc, #232]	@ (80016ac <HAL_ADC_PollForConversion+0x204>)
 80015c2:	400b      	ands	r3, r1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00d      	beq.n	80015e4 <HAL_ADC_PollForConversion+0x13c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6919      	ldr	r1, [r3, #16]
 80015ce:	4b38      	ldr	r3, [pc, #224]	@ (80016b0 <HAL_ADC_PollForConversion+0x208>)
 80015d0:	400b      	ands	r3, r1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d108      	bne.n	80015e8 <HAL_ADC_PollForConversion+0x140>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68d9      	ldr	r1, [r3, #12]
 80015dc:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <HAL_ADC_PollForConversion+0x208>)
 80015de:	400b      	ands	r3, r1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_PollForConversion+0x140>
 80015e4:	2354      	movs	r3, #84	@ 0x54
 80015e6:	e000      	b.n	80015ea <HAL_ADC_PollForConversion+0x142>
 80015e8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015f0:	e021      	b.n	8001636 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015f8:	d01a      	beq.n	8001630 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_ADC_PollForConversion+0x168>
 8001600:	f7ff fdc2 	bl	8001188 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d20f      	bcs.n	8001630 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d90b      	bls.n	8001630 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	f043 0204 	orr.w	r2, r3, #4
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e030      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	429a      	cmp	r2, r3
 800163c:	d8d9      	bhi.n	80015f2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f06f 0212 	mvn.w	r2, #18
 8001646:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800165e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001662:	d115      	bne.n	8001690 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001668:	2b00      	cmp	r3, #0
 800166a:	d111      	bne.n	8001690 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	20000010 	.word	0x20000010
 80016a0:	24924924 	.word	0x24924924
 80016a4:	00924924 	.word	0x00924924
 80016a8:	12492492 	.word	0x12492492
 80016ac:	00492492 	.word	0x00492492
 80016b0:	00249249 	.word	0x00249249

080016b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x20>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0dc      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x1da>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d81c      	bhi.n	8001736 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3b05      	subs	r3, #5
 800170e:	221f      	movs	r2, #31
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	4019      	ands	r1, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b05      	subs	r3, #5
 8001728:	fa00 f203 	lsl.w	r2, r0, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
 8001734:	e03c      	b.n	80017b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d81c      	bhi.n	8001778 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b23      	subs	r3, #35	@ 0x23
 8001750:	221f      	movs	r2, #31
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	4019      	ands	r1, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b23      	subs	r3, #35	@ 0x23
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	631a      	str	r2, [r3, #48]	@ 0x30
 8001776:	e01b      	b.n	80017b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b41      	subs	r3, #65	@ 0x41
 800178a:	221f      	movs	r2, #31
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4019      	ands	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b41      	subs	r3, #65	@ 0x41
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	d91c      	bls.n	80017f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	3b1e      	subs	r3, #30
 80017ca:	2207      	movs	r2, #7
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4019      	ands	r1, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	6898      	ldr	r0, [r3, #8]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	3b1e      	subs	r3, #30
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	e019      	b.n	8001826 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6919      	ldr	r1, [r3, #16]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	2207      	movs	r2, #7
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	4019      	ands	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6898      	ldr	r0, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b10      	cmp	r3, #16
 800182c:	d003      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001832:	2b11      	cmp	r3, #17
 8001834:	d132      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1d      	ldr	r2, [pc, #116]	@ (80018b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d125      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d126      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800185c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d11a      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001866:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a13      	ldr	r2, [pc, #76]	@ (80018b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	0c9a      	lsrs	r2, r3, #18
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800187c:	e002      	b.n	8001884 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3b01      	subs	r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <HAL_ADC_ConfigChannel+0x1b2>
 800188a:	e007      	b.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	f043 0220 	orr.w	r2, r3, #32
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40012400 	.word	0x40012400
 80018b4:	20000010 	.word	0x20000010
 80018b8:	431bde83 	.word	0x431bde83

080018bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d040      	beq.n	800195c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <ADC_Enable+0xac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1f      	ldr	r2, [pc, #124]	@ (800196c <ADC_Enable+0xb0>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018f8:	e002      	b.n	8001900 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f9      	bne.n	80018fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001906:	f7ff fc3f 	bl	8001188 <HAL_GetTick>
 800190a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800190c:	e01f      	b.n	800194e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800190e:	f7ff fc3b 	bl	8001188 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d918      	bls.n	800194e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b01      	cmp	r3, #1
 8001928:	d011      	beq.n	800194e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192e:	f043 0210 	orr.w	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e007      	b.n	800195e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d1d8      	bne.n	800190e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000010 	.word	0x20000010
 800196c:	431bde83 	.word	0x431bde83

08001970 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d12e      	bne.n	80019e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800199a:	f7ff fbf5 	bl	8001188 <HAL_GetTick>
 800199e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019a0:	e01b      	b.n	80019da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019a2:	f7ff fbf1 	bl	8001188 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d914      	bls.n	80019da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10d      	bne.n	80019da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	f043 0210 	orr.w	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e007      	b.n	80019ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d0dc      	beq.n	80019a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0ed      	b.n	8001be0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff f9e9 	bl	8000de8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a26:	f7ff fbaf 	bl	8001188 <HAL_GetTick>
 8001a2a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2c:	e012      	b.n	8001a54 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a2e:	f7ff fbab 	bl	8001188 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b0a      	cmp	r3, #10
 8001a3a:	d90b      	bls.n	8001a54 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0c5      	b.n	8001be0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0e5      	beq.n	8001a2e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0202 	bic.w	r2, r2, #2
 8001a70:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a72:	f7ff fb89 	bl	8001188 <HAL_GetTick>
 8001a76:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a78:	e012      	b.n	8001aa0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a7a:	f7ff fb85 	bl	8001188 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b0a      	cmp	r3, #10
 8001a86:	d90b      	bls.n	8001aa0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2205      	movs	r2, #5
 8001a98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e09f      	b.n	8001be0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1e5      	bne.n	8001a7a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7e1b      	ldrb	r3, [r3, #24]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e5b      	ldrb	r3, [r3, #25]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7e9b      	ldrb	r3, [r3, #26]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0220 	orr.w	r2, r2, #32
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0220 	bic.w	r2, r2, #32
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7edb      	ldrb	r3, [r3, #27]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0210 	bic.w	r2, r2, #16
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0210 	orr.w	r2, r2, #16
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7f1b      	ldrb	r3, [r3, #28]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0208 	orr.w	r2, r2, #8
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0208 	bic.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7f5b      	ldrb	r3, [r3, #29]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0204 	orr.w	r2, r2, #4
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e007      	b.n	8001baa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0204 	bic.w	r2, r2, #4
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	ea42 0103 	orr.w	r1, r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	1e5a      	subs	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c00:	7cfb      	ldrb	r3, [r7, #19]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d003      	beq.n	8001c0e <HAL_CAN_ConfigFilter+0x26>
 8001c06:	7cfb      	ldrb	r3, [r7, #19]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	f040 80aa 	bne.w	8001d62 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2201      	movs	r2, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	401a      	ands	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d123      	bne.n	8001c90 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3248      	adds	r2, #72	@ 0x48
 8001c70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	3348      	adds	r3, #72	@ 0x48
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d122      	bne.n	8001cde <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3248      	adds	r2, #72	@ 0x48
 8001cbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd4:	6979      	ldr	r1, [r7, #20]
 8001cd6:	3348      	adds	r3, #72	@ 0x48
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001cf8:	e007      	b.n	8001d0a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d24:	e007      	b.n	8001d36 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d54:	f023 0201 	bic.w	r2, r3, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e006      	b.n	8001d70 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
  }
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d12e      	bne.n	8001dec <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001da6:	f7ff f9ef 	bl	8001188 <HAL_GetTick>
 8001daa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dac:	e012      	b.n	8001dd4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dae:	f7ff f9eb 	bl	8001188 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b0a      	cmp	r3, #10
 8001dba:	d90b      	bls.n	8001dd4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2205      	movs	r2, #5
 8001dcc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e012      	b.n	8001dfa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e5      	bne.n	8001dae <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e006      	b.n	8001dfa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
  }
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b089      	sub	sp, #36	@ 0x24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e16:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d003      	beq.n	8001e2e <HAL_CAN_AddTxMessage+0x2c>
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	f040 80ad 	bne.w	8001f88 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10a      	bne.n	8001e4e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8095 	beq.w	8001f78 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	0e1b      	lsrs	r3, r3, #24
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e74:	68f9      	ldr	r1, [r7, #12]
 8001e76:	6809      	ldr	r1, [r1, #0]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	440b      	add	r3, r1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e00f      	b.n	8001ea6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e90:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e9a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	440b      	add	r3, r1
 8001ea4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3318      	adds	r3, #24
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	7d1b      	ldrb	r3, [r3, #20]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d111      	bne.n	8001ee6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3318      	adds	r3, #24
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	3304      	adds	r3, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	6811      	ldr	r1, [r2, #0]
 8001ed6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3318      	adds	r3, #24
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3307      	adds	r3, #7
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	061a      	lsls	r2, r3, #24
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3306      	adds	r3, #6
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3305      	adds	r3, #5
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4313      	orrs	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	3204      	adds	r2, #4
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	4610      	mov	r0, r2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	6811      	ldr	r1, [r2, #0]
 8001f0e:	ea43 0200 	orr.w	r2, r3, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	440b      	add	r3, r1
 8001f18:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3303      	adds	r3, #3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	061a      	lsls	r2, r3, #24
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3301      	adds	r3, #1
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	4610      	mov	r0, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	6811      	ldr	r1, [r2, #0]
 8001f44:	ea43 0200 	orr.w	r2, r3, r0
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001f52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3318      	adds	r3, #24
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	6811      	ldr	r1, [r2, #0]
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3318      	adds	r3, #24
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	440b      	add	r3, r1
 8001f72:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e00e      	b.n	8001f96 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e006      	b.n	8001f96 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	@ 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d003      	beq.n	8001fc4 <HAL_CAN_GetRxMessage+0x24>
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	f040 8103 	bne.w	80021ca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d116      	bne.n	8002006 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f7      	b.n	80021d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0e8      	b.n	80021d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	331b      	adds	r3, #27
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0204 	and.w	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10c      	bne.n	800203e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	331b      	adds	r3, #27
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0d5b      	lsrs	r3, r3, #21
 8002034:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e00b      	b.n	8002056 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	331b      	adds	r3, #27
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4413      	add	r3, r2
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	08db      	lsrs	r3, r3, #3
 800204e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	331b      	adds	r3, #27
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4413      	add	r3, r2
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0202 	and.w	r2, r3, #2
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	331b      	adds	r3, #27
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4413      	add	r3, r2
 8002078:	3304      	adds	r3, #4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2208      	movs	r2, #8
 8002088:	611a      	str	r2, [r3, #16]
 800208a:	e00b      	b.n	80020a4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	331b      	adds	r3, #27
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	331b      	adds	r3, #27
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	3304      	adds	r3, #4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	331b      	adds	r3, #27
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0a1a      	lsrs	r2, r3, #8
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4413      	add	r3, r2
 800210e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0c1a      	lsrs	r2, r3, #16
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3302      	adds	r3, #2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	0e1a      	lsrs	r2, r3, #24
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	3303      	adds	r3, #3
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4413      	add	r3, r2
 8002142:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	3304      	adds	r3, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0a1a      	lsrs	r2, r3, #8
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	3305      	adds	r3, #5
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4413      	add	r3, r2
 8002174:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0c1a      	lsrs	r2, r3, #16
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3306      	adds	r3, #6
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4413      	add	r3, r2
 800218e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	0e1a      	lsrs	r2, r3, #24
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	3307      	adds	r3, #7
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d108      	bne.n	80021b6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0220 	orr.w	r2, r2, #32
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	e007      	b.n	80021c6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0220 	orr.w	r2, r2, #32
 80021c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e006      	b.n	80021d8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
  }
}
 80021d8:	4618      	mov	r0, r3
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d002      	beq.n	8002200 <HAL_CAN_ActivateNotification+0x1e>
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d109      	bne.n	8002214 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6959      	ldr	r1, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e006      	b.n	8002222 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	@ 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d07c      	beq.n	800236c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d023      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f983 	bl	800259a <HAL_CAN_TxMailbox0CompleteCallback>
 8002294:	e016      	b.n	80022c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a8:	e00c      	b.n	80022c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80022bc:	e002      	b.n	80022c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f986 	bl	80025d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f962 	bl	80025ac <HAL_CAN_TxMailbox1CompleteCallback>
 80022e8:	e016      	b.n	8002318 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80022fc:	e00c      	b.n	8002318 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002310:	e002      	b.n	8002318 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f965 	bl	80025e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d024      	beq.n	800236c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800232a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f941 	bl	80025be <HAL_CAN_TxMailbox2CompleteCallback>
 800233c:	e016      	b.n	800236c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002350:	e00c      	b.n	800236c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
 8002364:	e002      	b.n	800236c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f944 	bl	80025f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00c      	beq.n	8002390 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2210      	movs	r2, #16
 800238e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2208      	movs	r2, #8
 80023aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f933 	bl	8002618 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f91b 	bl	8002606 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2208      	movs	r2, #8
 800240e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f90a 	bl	800262a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d009      	beq.n	8002434 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fd fea6 	bl	8000180 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2210      	movs	r2, #16
 800244e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8f3 	bl	800263c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2208      	movs	r2, #8
 8002470:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8eb 	bl	800264e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d07b      	beq.n	800257a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d072      	beq.n	8002572 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d043      	beq.n	8002572 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03e      	beq.n	8002572 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024fa:	2b60      	cmp	r3, #96	@ 0x60
 80024fc:	d02b      	beq.n	8002556 <HAL_CAN_IRQHandler+0x32a>
 80024fe:	2b60      	cmp	r3, #96	@ 0x60
 8002500:	d82e      	bhi.n	8002560 <HAL_CAN_IRQHandler+0x334>
 8002502:	2b50      	cmp	r3, #80	@ 0x50
 8002504:	d022      	beq.n	800254c <HAL_CAN_IRQHandler+0x320>
 8002506:	2b50      	cmp	r3, #80	@ 0x50
 8002508:	d82a      	bhi.n	8002560 <HAL_CAN_IRQHandler+0x334>
 800250a:	2b40      	cmp	r3, #64	@ 0x40
 800250c:	d019      	beq.n	8002542 <HAL_CAN_IRQHandler+0x316>
 800250e:	2b40      	cmp	r3, #64	@ 0x40
 8002510:	d826      	bhi.n	8002560 <HAL_CAN_IRQHandler+0x334>
 8002512:	2b30      	cmp	r3, #48	@ 0x30
 8002514:	d010      	beq.n	8002538 <HAL_CAN_IRQHandler+0x30c>
 8002516:	2b30      	cmp	r3, #48	@ 0x30
 8002518:	d822      	bhi.n	8002560 <HAL_CAN_IRQHandler+0x334>
 800251a:	2b10      	cmp	r3, #16
 800251c:	d002      	beq.n	8002524 <HAL_CAN_IRQHandler+0x2f8>
 800251e:	2b20      	cmp	r3, #32
 8002520:	d005      	beq.n	800252e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002522:	e01d      	b.n	8002560 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	f043 0308 	orr.w	r3, r3, #8
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800252c:	e019      	b.n	8002562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	f043 0310 	orr.w	r3, r3, #16
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002536:	e014      	b.n	8002562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	f043 0320 	orr.w	r3, r3, #32
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002540:	e00f      	b.n	8002562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800254a:	e00a      	b.n	8002562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002554:	e005      	b.n	8002562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800255e:	e000      	b.n	8002562 <HAL_CAN_IRQHandler+0x336>
            break;
 8002560:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002570:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2204      	movs	r2, #4
 8002578:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f867 	bl	8002660 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	@ 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
	...

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4906      	ldr	r1, [pc, #24]	@ (800270c <__NVIC_EnableIRQ+0x34>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	e000e100 	.word	0xe000e100

08002710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db0a      	blt.n	800273a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	490c      	ldr	r1, [pc, #48]	@ (800275c <__NVIC_SetPriority+0x4c>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002738:	e00a      	b.n	8002750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4908      	ldr	r1, [pc, #32]	@ (8002760 <__NVIC_SetPriority+0x50>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	440b      	add	r3, r1
 800274e:	761a      	strb	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	@ 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f1c3 0307 	rsb	r3, r3, #7
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf28      	it	cs
 8002782:	2304      	movcs	r3, #4
 8002784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3304      	adds	r3, #4
 800278a:	2b06      	cmp	r3, #6
 800278c:	d902      	bls.n	8002794 <NVIC_EncodePriority+0x30>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3b03      	subs	r3, #3
 8002792:	e000      	b.n	8002796 <NVIC_EncodePriority+0x32>
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	401a      	ands	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43d9      	mvns	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	4313      	orrs	r3, r2
         );
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	@ 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff4f 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f0:	f7ff ff64 	bl	80026bc <__NVIC_GetPriorityGrouping>
 80027f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	6978      	ldr	r0, [r7, #20]
 80027fc:	f7ff ffb2 	bl	8002764 <NVIC_EncodePriority>
 8002800:	4602      	mov	r2, r0
 8002802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff81 	bl	8002710 <__NVIC_SetPriority>
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff57 	bl	80026d8 <__NVIC_EnableIRQ>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b08b      	sub	sp, #44	@ 0x2c
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002846:	e169      	b.n	8002b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002848:	2201      	movs	r2, #1
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8158 	bne.w	8002b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a9a      	ldr	r2, [pc, #616]	@ (8002ad4 <HAL_GPIO_Init+0x2a0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05e      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002870:	4a98      	ldr	r2, [pc, #608]	@ (8002ad4 <HAL_GPIO_Init+0x2a0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d875      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 8002876:	4a98      	ldr	r2, [pc, #608]	@ (8002ad8 <HAL_GPIO_Init+0x2a4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d058      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 800287c:	4a96      	ldr	r2, [pc, #600]	@ (8002ad8 <HAL_GPIO_Init+0x2a4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d86f      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 8002882:	4a96      	ldr	r2, [pc, #600]	@ (8002adc <HAL_GPIO_Init+0x2a8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d052      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002888:	4a94      	ldr	r2, [pc, #592]	@ (8002adc <HAL_GPIO_Init+0x2a8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d869      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 800288e:	4a94      	ldr	r2, [pc, #592]	@ (8002ae0 <HAL_GPIO_Init+0x2ac>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d04c      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002894:	4a92      	ldr	r2, [pc, #584]	@ (8002ae0 <HAL_GPIO_Init+0x2ac>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d863      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 800289a:	4a92      	ldr	r2, [pc, #584]	@ (8002ae4 <HAL_GPIO_Init+0x2b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d046      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 80028a0:	4a90      	ldr	r2, [pc, #576]	@ (8002ae4 <HAL_GPIO_Init+0x2b0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d85d      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 80028a6:	2b12      	cmp	r3, #18
 80028a8:	d82a      	bhi.n	8002900 <HAL_GPIO_Init+0xcc>
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d859      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 80028ae:	a201      	add	r2, pc, #4	@ (adr r2, 80028b4 <HAL_GPIO_Init+0x80>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	0800292f 	.word	0x0800292f
 80028b8:	08002909 	.word	0x08002909
 80028bc:	0800291b 	.word	0x0800291b
 80028c0:	0800295d 	.word	0x0800295d
 80028c4:	08002963 	.word	0x08002963
 80028c8:	08002963 	.word	0x08002963
 80028cc:	08002963 	.word	0x08002963
 80028d0:	08002963 	.word	0x08002963
 80028d4:	08002963 	.word	0x08002963
 80028d8:	08002963 	.word	0x08002963
 80028dc:	08002963 	.word	0x08002963
 80028e0:	08002963 	.word	0x08002963
 80028e4:	08002963 	.word	0x08002963
 80028e8:	08002963 	.word	0x08002963
 80028ec:	08002963 	.word	0x08002963
 80028f0:	08002963 	.word	0x08002963
 80028f4:	08002963 	.word	0x08002963
 80028f8:	08002911 	.word	0x08002911
 80028fc:	08002925 	.word	0x08002925
 8002900:	4a79      	ldr	r2, [pc, #484]	@ (8002ae8 <HAL_GPIO_Init+0x2b4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002906:	e02c      	b.n	8002962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e029      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	3304      	adds	r3, #4
 8002916:	623b      	str	r3, [r7, #32]
          break;
 8002918:	e024      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	3308      	adds	r3, #8
 8002920:	623b      	str	r3, [r7, #32]
          break;
 8002922:	e01f      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	330c      	adds	r3, #12
 800292a:	623b      	str	r3, [r7, #32]
          break;
 800292c:	e01a      	b.n	8002964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002936:	2304      	movs	r3, #4
 8002938:	623b      	str	r3, [r7, #32]
          break;
 800293a:	e013      	b.n	8002964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002944:	2308      	movs	r3, #8
 8002946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	611a      	str	r2, [r3, #16]
          break;
 800294e:	e009      	b.n	8002964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002950:	2308      	movs	r3, #8
 8002952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	615a      	str	r2, [r3, #20]
          break;
 800295a:	e003      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x130>
          break;
 8002962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2bff      	cmp	r3, #255	@ 0xff
 8002968:	d801      	bhi.n	800296e <HAL_GPIO_Init+0x13a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	e001      	b.n	8002972 <HAL_GPIO_Init+0x13e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2bff      	cmp	r3, #255	@ 0xff
 8002978:	d802      	bhi.n	8002980 <HAL_GPIO_Init+0x14c>
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	e002      	b.n	8002986 <HAL_GPIO_Init+0x152>
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	3b08      	subs	r3, #8
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	210f      	movs	r1, #15
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80b1 	beq.w	8002b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029b4:	4b4d      	ldr	r3, [pc, #308]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a4c      	ldr	r2, [pc, #304]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6193      	str	r3, [r2, #24]
 80029c0:	4b4a      	ldr	r3, [pc, #296]	@ (8002aec <HAL_GPIO_Init+0x2b8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029cc:	4a48      	ldr	r2, [pc, #288]	@ (8002af0 <HAL_GPIO_Init+0x2bc>)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	220f      	movs	r2, #15
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a40      	ldr	r2, [pc, #256]	@ (8002af4 <HAL_GPIO_Init+0x2c0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_GPIO_Init+0x1ec>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3f      	ldr	r2, [pc, #252]	@ (8002af8 <HAL_GPIO_Init+0x2c4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00d      	beq.n	8002a1c <HAL_GPIO_Init+0x1e8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3e      	ldr	r2, [pc, #248]	@ (8002afc <HAL_GPIO_Init+0x2c8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <HAL_GPIO_Init+0x1e4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b00 <HAL_GPIO_Init+0x2cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_GPIO_Init+0x1e0>
 8002a10:	2303      	movs	r3, #3
 8002a12:	e006      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e004      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e002      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a20:	2300      	movs	r3, #0
 8002a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a24:	f002 0203 	and.w	r2, r2, #3
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a32:	492f      	ldr	r1, [pc, #188]	@ (8002af0 <HAL_GPIO_Init+0x2bc>)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	492c      	ldr	r1, [pc, #176]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	4928      	ldr	r1, [pc, #160]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a74:	4b23      	ldr	r3, [pc, #140]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	4922      	ldr	r1, [pc, #136]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60cb      	str	r3, [r1, #12]
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	491e      	ldr	r1, [pc, #120]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4918      	ldr	r1, [pc, #96]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aaa:	4b16      	ldr	r3, [pc, #88]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4914      	ldr	r1, [pc, #80]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d021      	beq.n	8002b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	490e      	ldr	r1, [pc, #56]	@ (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
 8002ad0:	e021      	b.n	8002b16 <HAL_GPIO_Init+0x2e2>
 8002ad2:	bf00      	nop
 8002ad4:	10320000 	.word	0x10320000
 8002ad8:	10310000 	.word	0x10310000
 8002adc:	10220000 	.word	0x10220000
 8002ae0:	10210000 	.word	0x10210000
 8002ae4:	10120000 	.word	0x10120000
 8002ae8:	10110000 	.word	0x10110000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40010800 	.word	0x40010800
 8002af8:	40010c00 	.word	0x40010c00
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40011400 	.word	0x40011400
 8002b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	4909      	ldr	r1, [pc, #36]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	3301      	adds	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f47f ae8e 	bne.w	8002848 <HAL_GPIO_Init+0x14>
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	372c      	adds	r7, #44	@ 0x2c
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43d9      	mvns	r1, r3
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	611a      	str	r2, [r3, #16]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e12b      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe f976 	bl	8000eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	@ 0x24
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c04:	f001 f960 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a81      	ldr	r2, [pc, #516]	@ (8002e14 <HAL_I2C_Init+0x274>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d807      	bhi.n	8002c24 <HAL_I2C_Init+0x84>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a80      	ldr	r2, [pc, #512]	@ (8002e18 <HAL_I2C_Init+0x278>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	bf94      	ite	ls
 8002c1c:	2301      	movls	r3, #1
 8002c1e:	2300      	movhi	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e006      	b.n	8002c32 <HAL_I2C_Init+0x92>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a7d      	ldr	r2, [pc, #500]	@ (8002e1c <HAL_I2C_Init+0x27c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0e7      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a78      	ldr	r2, [pc, #480]	@ (8002e20 <HAL_I2C_Init+0x280>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	@ (8002e14 <HAL_I2C_Init+0x274>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d802      	bhi.n	8002c74 <HAL_I2C_Init+0xd4>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e009      	b.n	8002c88 <HAL_I2C_Init+0xe8>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	4a69      	ldr	r2, [pc, #420]	@ (8002e24 <HAL_I2C_Init+0x284>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	3301      	adds	r3, #1
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	495c      	ldr	r1, [pc, #368]	@ (8002e14 <HAL_I2C_Init+0x274>)
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	d819      	bhi.n	8002cdc <HAL_I2C_Init+0x13c>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e59      	subs	r1, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_I2C_Init+0x138>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e59      	subs	r1, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	e051      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e04f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <HAL_I2C_Init+0x168>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e012      	b.n	8002d2e <HAL_I2C_Init+0x18e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	0099      	lsls	r1, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Init+0x196>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e022      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10e      	bne.n	8002d5c <HAL_I2C_Init+0x1bc>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e58      	subs	r0, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	440b      	add	r3, r1
 8002d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d5a:	e00f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	6809      	ldr	r1, [r1, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002daa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6911      	ldr	r1, [r2, #16]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	000186a0 	.word	0x000186a0
 8002e18:	001e847f 	.word	0x001e847f
 8002e1c:	003d08ff 	.word	0x003d08ff
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	461a      	mov	r2, r3
 8002e34:	460b      	mov	r3, r1
 8002e36:	817b      	strh	r3, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7fe f9a4 	bl	8001188 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	f040 80e0 	bne.w	8003010 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2319      	movs	r3, #25
 8002e56:	2201      	movs	r2, #1
 8002e58:	4970      	ldr	r1, [pc, #448]	@ (800301c <HAL_I2C_Master_Transmit+0x1f4>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fa92 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0d3      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_I2C_Master_Transmit+0x50>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e0cc      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d007      	beq.n	8002e9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2221      	movs	r2, #33	@ 0x21
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2210      	movs	r2, #16
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	893a      	ldrh	r2, [r7, #8]
 8002ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a50      	ldr	r2, [pc, #320]	@ (8003020 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ede:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ee0:	8979      	ldrh	r1, [r7, #10]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f9ca 	bl	8003280 <I2C_MasterRequestWrite>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e08d      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f0c:	e066      	b.n	8002fdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	6a39      	ldr	r1, [r7, #32]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fb50 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d107      	bne.n	8002f36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06b      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d11b      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x188>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d017      	beq.n	8002fb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	6a39      	ldr	r1, [r7, #32]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fb47 	bl	8003648 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e01a      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d194      	bne.n	8002f0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	00100002 	.word	0x00100002
 8003020:	ffff0000 	.word	0xffff0000

08003024 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7fe f8a8 	bl	8001188 <HAL_GetTick>
 8003038:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b20      	cmp	r3, #32
 8003048:	f040 8111 	bne.w	800326e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2319      	movs	r3, #25
 8003052:	2201      	movs	r2, #1
 8003054:	4988      	ldr	r1, [pc, #544]	@ (8003278 <HAL_I2C_IsDeviceReady+0x254>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f994 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	e104      	b.n	8003270 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2C_IsDeviceReady+0x50>
 8003070:	2302      	movs	r3, #2
 8003072:	e0fd      	b.n	8003270 <HAL_I2C_IsDeviceReady+0x24c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d007      	beq.n	800309a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2224      	movs	r2, #36	@ 0x24
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a70      	ldr	r2, [pc, #448]	@ (800327c <HAL_I2C_IsDeviceReady+0x258>)
 80030bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f952 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f4:	d103      	bne.n	80030fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0b6      	b.n	8003270 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003102:	897b      	ldrh	r3, [r7, #10]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003110:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003112:	f7fe f839 	bl	8001188 <HAL_GetTick>
 8003116:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003146:	e025      	b.n	8003194 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003148:	f7fe f81e 	bl	8001188 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d302      	bcc.n	800315e <HAL_I2C_IsDeviceReady+0x13a>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	22a0      	movs	r2, #160	@ 0xa0
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2ba0      	cmp	r3, #160	@ 0xa0
 800319e:	d005      	beq.n	80031ac <HAL_I2C_IsDeviceReady+0x188>
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_I2C_IsDeviceReady+0x188>
 80031a6:	7dbb      	ldrb	r3, [r7, #22]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0cd      	beq.n	8003148 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d129      	bne.n	8003216 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2319      	movs	r3, #25
 80031ee:	2201      	movs	r2, #1
 80031f0:	4921      	ldr	r1, [pc, #132]	@ (8003278 <HAL_I2C_IsDeviceReady+0x254>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f8c6 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e036      	b.n	8003270 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e02c      	b.n	8003270 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003224:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800322e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2319      	movs	r3, #25
 8003236:	2201      	movs	r2, #1
 8003238:	490f      	ldr	r1, [pc, #60]	@ (8003278 <HAL_I2C_IsDeviceReady+0x254>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f8a2 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e012      	b.n	8003270 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	3301      	adds	r3, #1
 800324e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	f4ff af32 	bcc.w	80030be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	00100002 	.word	0x00100002
 800327c:	ffff0000 	.word	0xffff0000

08003280 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d006      	beq.n	80032aa <I2C_MasterRequestWrite+0x2a>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d003      	beq.n	80032aa <I2C_MasterRequestWrite+0x2a>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032a8:	d108      	bne.n	80032bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e00b      	b.n	80032d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	2b12      	cmp	r3, #18
 80032c2:	d107      	bne.n	80032d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f84f 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fa:	d103      	bne.n	8003304 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e035      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003310:	d108      	bne.n	8003324 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003320:	611a      	str	r2, [r3, #16]
 8003322:	e01b      	b.n	800335c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003324:	897b      	ldrh	r3, [r7, #10]
 8003326:	11db      	asrs	r3, r3, #7
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0306 	and.w	r3, r3, #6
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f063 030f 	orn	r3, r3, #15
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	490e      	ldr	r1, [pc, #56]	@ (800337c <I2C_MasterRequestWrite+0xfc>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f898 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e010      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4907      	ldr	r1, [pc, #28]	@ (8003380 <I2C_MasterRequestWrite+0x100>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f888 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00010008 	.word	0x00010008
 8003380:	00010002 	.word	0x00010002

08003384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003394:	e048      	b.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800339c:	d044      	beq.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fd fef3 	bl	8001188 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d139      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10d      	bne.n	80033da <I2C_WaitOnFlagUntilTimeout+0x56>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	e00c      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d116      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e023      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10d      	bne.n	800344e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	e00c      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d093      	beq.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003486:	e071      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d123      	bne.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e067      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034e6:	d041      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7fd fe4e 	bl	8001188 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d136      	bne.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e021      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10c      	bne.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e00b      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af6d 	bne.w	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c4:	e034      	b.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f886 	bl	80036d8 <I2C_IsAcknowledgeFailed>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e034      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035dc:	d028      	beq.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7fd fdd3 	bl	8001188 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11d      	bne.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b80      	cmp	r3, #128	@ 0x80
 8003600:	d016      	beq.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b80      	cmp	r3, #128	@ 0x80
 800363c:	d1c3      	bne.n	80035c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003654:	e034      	b.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f83e 	bl	80036d8 <I2C_IsAcknowledgeFailed>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e034      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800366c:	d028      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fd fd8b 	bl	8001188 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11d      	bne.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d016      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e007      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d1c3      	bne.n	8003656 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ee:	d11b      	bne.n	8003728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e272      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8087 	beq.w	8003862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003754:	4b92      	ldr	r3, [pc, #584]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b04      	cmp	r3, #4
 800375e:	d00c      	beq.n	800377a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003760:	4b8f      	ldr	r3, [pc, #572]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d112      	bne.n	8003792 <HAL_RCC_OscConfig+0x5e>
 800376c:	4b8c      	ldr	r3, [pc, #560]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003778:	d10b      	bne.n	8003792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377a:	4b89      	ldr	r3, [pc, #548]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06c      	beq.n	8003860 <HAL_RCC_OscConfig+0x12c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d168      	bne.n	8003860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e24c      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x76>
 800379c:	4b80      	ldr	r3, [pc, #512]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a7f      	ldr	r2, [pc, #508]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e02e      	b.n	8003808 <HAL_RCC_OscConfig+0xd4>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x98>
 80037b2:	4b7b      	ldr	r3, [pc, #492]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7a      	ldr	r2, [pc, #488]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b78      	ldr	r3, [pc, #480]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a77      	ldr	r2, [pc, #476]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e01d      	b.n	8003808 <HAL_RCC_OscConfig+0xd4>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0xbc>
 80037d6:	4b72      	ldr	r3, [pc, #456]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a71      	ldr	r2, [pc, #452]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b6f      	ldr	r3, [pc, #444]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6e      	ldr	r2, [pc, #440]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0xd4>
 80037f0:	4b6b      	ldr	r3, [pc, #428]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6a      	ldr	r2, [pc, #424]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b68      	ldr	r3, [pc, #416]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a67      	ldr	r2, [pc, #412]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fd fcba 	bl	8001188 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fd fcb6 	bl	8001188 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	@ 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e200      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b5d      	ldr	r3, [pc, #372]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0xe4>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fd fca6 	bl	8001188 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fd fca2 	bl	8001188 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e1ec      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	4b53      	ldr	r3, [pc, #332]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x10c>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d063      	beq.n	8003936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800386e:	4b4c      	ldr	r3, [pc, #304]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800387a:	4b49      	ldr	r3, [pc, #292]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b08      	cmp	r3, #8
 8003884:	d11c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x18c>
 8003886:	4b46      	ldr	r3, [pc, #280]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d116      	bne.n	80038c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	4b43      	ldr	r3, [pc, #268]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_RCC_OscConfig+0x176>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e1c0      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	4b3d      	ldr	r3, [pc, #244]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4939      	ldr	r1, [pc, #228]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038be:	e03a      	b.n	8003936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c8:	4b36      	ldr	r3, [pc, #216]	@ (80039a4 <HAL_RCC_OscConfig+0x270>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fd fc5b 	bl	8001188 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fd fc57 	bl	8001188 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e1a1      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	4b2d      	ldr	r3, [pc, #180]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4b2a      	ldr	r3, [pc, #168]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4927      	ldr	r1, [pc, #156]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390a:	4b26      	ldr	r3, [pc, #152]	@ (80039a4 <HAL_RCC_OscConfig+0x270>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fd fc3a 	bl	8001188 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fd fc36 	bl	8001188 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e180      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d03a      	beq.n	80039b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d019      	beq.n	800397e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394a:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <HAL_RCC_OscConfig+0x274>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fd fc1a 	bl	8001188 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003958:	f7fd fc16 	bl	8001188 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e160      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <HAL_RCC_OscConfig+0x26c>)
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003976:	2001      	movs	r0, #1
 8003978:	f000 fafe 	bl	8003f78 <RCC_Delay>
 800397c:	e01c      	b.n	80039b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_RCC_OscConfig+0x274>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003984:	f7fd fc00 	bl	8001188 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398a:	e00f      	b.n	80039ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fd fbfc 	bl	8001188 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d908      	bls.n	80039ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e146      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000
 80039a4:	42420000 	.word	0x42420000
 80039a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b92      	ldr	r3, [pc, #584]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e9      	bne.n	800398c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a6 	beq.w	8003b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b8b      	ldr	r3, [pc, #556]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10d      	bne.n	80039f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	4b88      	ldr	r3, [pc, #544]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4a87      	ldr	r2, [pc, #540]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	61d3      	str	r3, [r2, #28]
 80039e2:	4b85      	ldr	r3, [pc, #532]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ee:	2301      	movs	r3, #1
 80039f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	4b82      	ldr	r3, [pc, #520]	@ (8003bfc <HAL_RCC_OscConfig+0x4c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d118      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039fe:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <HAL_RCC_OscConfig+0x4c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7e      	ldr	r2, [pc, #504]	@ (8003bfc <HAL_RCC_OscConfig+0x4c8>)
 8003a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0a:	f7fd fbbd 	bl	8001188 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a12:	f7fd fbb9 	bl	8001188 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b64      	cmp	r3, #100	@ 0x64
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e103      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	4b75      	ldr	r3, [pc, #468]	@ (8003bfc <HAL_RCC_OscConfig+0x4c8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d106      	bne.n	8003a46 <HAL_RCC_OscConfig+0x312>
 8003a38:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6213      	str	r3, [r2, #32]
 8003a44:	e02d      	b.n	8003aa2 <HAL_RCC_OscConfig+0x36e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x334>
 8003a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a69      	ldr	r2, [pc, #420]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6213      	str	r3, [r2, #32]
 8003a5a:	4b67      	ldr	r3, [pc, #412]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a66      	ldr	r2, [pc, #408]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	6213      	str	r3, [r2, #32]
 8003a66:	e01c      	b.n	8003aa2 <HAL_RCC_OscConfig+0x36e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	d10c      	bne.n	8003a8a <HAL_RCC_OscConfig+0x356>
 8003a70:	4b61      	ldr	r3, [pc, #388]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	4a60      	ldr	r2, [pc, #384]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	6213      	str	r3, [r2, #32]
 8003a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4a5d      	ldr	r2, [pc, #372]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6213      	str	r3, [r2, #32]
 8003a88:	e00b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x36e>
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4a5a      	ldr	r2, [pc, #360]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6213      	str	r3, [r2, #32]
 8003a96:	4b58      	ldr	r3, [pc, #352]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a57      	ldr	r2, [pc, #348]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 0304 	bic.w	r3, r3, #4
 8003aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d015      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd fb6d 	bl	8001188 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fd fb69 	bl	8001188 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0b1      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x37e>
 8003ad4:	e014      	b.n	8003b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fd fb57 	bl	8001188 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fd fb53 	bl	8001188 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e09b      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af4:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ee      	bne.n	8003ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b06:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8087 	beq.w	8003c2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b1c:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d061      	beq.n	8003bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d146      	bne.n	8003bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b33      	ldr	r3, [pc, #204]	@ (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fd fb27 	bl	8001188 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fd fb23 	bl	8001188 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e06d      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b50:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b64:	d108      	bne.n	8003b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b66:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4921      	ldr	r1, [pc, #132]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b78:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a19      	ldr	r1, [r3, #32]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	491b      	ldr	r1, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fd faf7 	bl	8001188 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fd faf3 	bl	8001188 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e03d      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x46a>
 8003bbc:	e035      	b.n	8003c2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fae0 	bl	8001188 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fd fadc 	bl	8001188 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e026      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x498>
 8003bea:	e01e      	b.n	8003c2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e019      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <HAL_RCC_OscConfig+0x500>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0d0      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d910      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b67      	ldr	r3, [pc, #412]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 0207 	bic.w	r2, r3, #7
 8003c62:	4965      	ldr	r1, [pc, #404]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b63      	ldr	r3, [pc, #396]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0b8      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c94:	4b59      	ldr	r3, [pc, #356]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a58      	ldr	r2, [pc, #352]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cac:	4b53      	ldr	r3, [pc, #332]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a52      	ldr	r2, [pc, #328]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb8:	4b50      	ldr	r3, [pc, #320]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	494d      	ldr	r1, [pc, #308]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d040      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cde:	4b47      	ldr	r3, [pc, #284]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d115      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e07f      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf6:	4b41      	ldr	r3, [pc, #260]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e073      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	4b3d      	ldr	r3, [pc, #244]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06b      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d16:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f023 0203 	bic.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4936      	ldr	r1, [pc, #216]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d28:	f7fd fa2e 	bl	8001188 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fd fa2a 	bl	8001188 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e053      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	4b2d      	ldr	r3, [pc, #180]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 020c 	and.w	r2, r3, #12
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1eb      	bne.n	8003d30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d58:	4b27      	ldr	r3, [pc, #156]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d210      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b24      	ldr	r3, [pc, #144]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	4922      	ldr	r1, [pc, #136]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b20      	ldr	r3, [pc, #128]	@ (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e032      	b.n	8003dee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d94:	4b19      	ldr	r3, [pc, #100]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4916      	ldr	r1, [pc, #88]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003db2:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	490e      	ldr	r1, [pc, #56]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dc6:	f000 f821 	bl	8003e0c <HAL_RCC_GetSysClockFreq>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	490a      	ldr	r1, [pc, #40]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	5ccb      	ldrb	r3, [r1, r3]
 8003dda:	fa22 f303 	lsr.w	r3, r2, r3
 8003dde:	4a09      	ldr	r2, [pc, #36]	@ (8003e04 <HAL_RCC_ClockConfig+0x1cc>)
 8003de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003de2:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <HAL_RCC_ClockConfig+0x1d0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd f8a4 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40022000 	.word	0x40022000
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08007ff4 	.word	0x08007ff4
 8003e04:	20000010 	.word	0x20000010
 8003e08:	20000014 	.word	0x20000014

08003e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d002      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x30>
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x36>
 8003e3a:	e027      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e3e:	613b      	str	r3, [r7, #16]
      break;
 8003e40:	e027      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0c9b      	lsrs	r3, r3, #18
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e4c:	5cd3      	ldrb	r3, [r2, r3]
 8003e4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	0c5b      	lsrs	r3, r3, #17
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	4a11      	ldr	r2, [pc, #68]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e6e:	fb03 f202 	mul.w	r2, r3, r2
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e004      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	613b      	str	r3, [r7, #16]
      break;
 8003e8a:	e002      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e8e:	613b      	str	r3, [r7, #16]
      break;
 8003e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e92:	693b      	ldr	r3, [r7, #16]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	007a1200 	.word	0x007a1200
 8003ea8:	0800800c 	.word	0x0800800c
 8003eac:	0800801c 	.word	0x0800801c
 8003eb0:	003d0900 	.word	0x003d0900

08003eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb8:	4b02      	ldr	r3, [pc, #8]	@ (8003ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	20000010 	.word	0x20000010

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ecc:	f7ff fff2 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4903      	ldr	r1, [pc, #12]	@ (8003eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	08008004 	.word	0x08008004

08003ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ef4:	f7ff ffde 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	0adb      	lsrs	r3, r3, #11
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4903      	ldr	r1, [pc, #12]	@ (8003f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08008004 	.word	0x08008004

08003f18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	220f      	movs	r2, #15
 8003f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f28:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <HAL_RCC_GetClockConfig+0x58>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0203 	and.w	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f34:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <HAL_RCC_GetClockConfig+0x58>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCC_GetClockConfig+0x58>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f4c:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <HAL_RCC_GetClockConfig+0x58>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	08db      	lsrs	r3, r3, #3
 8003f52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f5a:	4b06      	ldr	r3, [pc, #24]	@ (8003f74 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0207 	and.w	r2, r3, #7
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40022000 	.word	0x40022000

08003f78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f80:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <RCC_Delay+0x34>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb0 <RCC_Delay+0x38>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	0a5b      	lsrs	r3, r3, #9
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f94:	bf00      	nop
  }
  while (Delay --);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1e5a      	subs	r2, r3, #1
 8003f9a:	60fa      	str	r2, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f9      	bne.n	8003f94 <RCC_Delay+0x1c>
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	20000010 	.word	0x20000010
 8003fb0:	10624dd3 	.word	0x10624dd3

08003fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d07d      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10d      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe0:	4b4c      	ldr	r3, [pc, #304]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4a4b      	ldr	r2, [pc, #300]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	61d3      	str	r3, [r2, #28]
 8003fec:	4b49      	ldr	r3, [pc, #292]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	4b46      	ldr	r3, [pc, #280]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d118      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004008:	4b43      	ldr	r3, [pc, #268]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a42      	ldr	r2, [pc, #264]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800400e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004014:	f7fd f8b8 	bl	8001188 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401a:	e008      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401c:	f7fd f8b4 	bl	8001188 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	@ 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e06d      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800403a:	4b36      	ldr	r3, [pc, #216]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004042:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d02e      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	429a      	cmp	r2, r3
 8004056:	d027      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004058:	4b2e      	ldr	r3, [pc, #184]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004060:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004062:	4b2e      	ldr	r3, [pc, #184]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004068:	4b2c      	ldr	r3, [pc, #176]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800406e:	4a29      	ldr	r2, [pc, #164]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d014      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fd f883 	bl	8001188 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004084:	e00a      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004086:	f7fd f87f 	bl	8001188 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004094:	4293      	cmp	r3, r2
 8004096:	d901      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e036      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409c:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0ee      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4917      	ldr	r1, [pc, #92]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c0:	4b14      	ldr	r3, [pc, #80]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	4a13      	ldr	r2, [pc, #76]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	490b      	ldr	r1, [pc, #44]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f6:	4b07      	ldr	r3, [pc, #28]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4904      	ldr	r1, [pc, #16]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	40007000 	.word	0x40007000
 800411c:	42420440 	.word	0x42420440

08004120 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b10      	cmp	r3, #16
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b10      	cmp	r3, #16
 8004146:	f200 808a 	bhi.w	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d045      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d075      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004156:	e082      	b.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004158:	4b46      	ldr	r3, [pc, #280]	@ (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800415e:	4b45      	ldr	r3, [pc, #276]	@ (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d07b      	beq.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	0c9b      	lsrs	r3, r3, #18
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	4a41      	ldr	r2, [pc, #260]	@ (8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004174:	5cd3      	ldrb	r3, [r2, r3]
 8004176:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d015      	beq.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004182:	4b3c      	ldr	r3, [pc, #240]	@ (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	0c5b      	lsrs	r3, r3, #17
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	4a3b      	ldr	r2, [pc, #236]	@ (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800418e:	5cd3      	ldrb	r3, [r2, r3]
 8004190:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800419c:	4a38      	ldr	r2, [pc, #224]	@ (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4a34      	ldr	r2, [pc, #208]	@ (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80041b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041c4:	d102      	bne.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	61bb      	str	r3, [r7, #24]
      break;
 80041ca:	e04a      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	61bb      	str	r3, [r7, #24]
      break;
 80041da:	e042      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80041dc:	4b25      	ldr	r3, [pc, #148]	@ (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ec:	d108      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80041f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	e01f      	b.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420a:	d109      	bne.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800420c:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004218:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	e00f      	b.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800422a:	d11c      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800422c:	4b11      	ldr	r3, [pc, #68]	@ (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d016      	beq.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004238:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800423c:	61bb      	str	r3, [r7, #24]
      break;
 800423e:	e012      	b.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004240:	e011      	b.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004242:	f7ff fe55 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 8004246:	4602      	mov	r2, r0
 8004248:	4b0a      	ldr	r3, [pc, #40]	@ (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	0b9b      	lsrs	r3, r3, #14
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	61bb      	str	r3, [r7, #24]
      break;
 800425c:	e004      	b.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800425e:	bf00      	nop
 8004260:	e002      	b.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004262:	bf00      	nop
 8004264:	e000      	b.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004266:	bf00      	nop
    }
  }
  return (frequency);
 8004268:	69bb      	ldr	r3, [r7, #24]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000
 8004278:	08008020 	.word	0x08008020
 800427c:	08008030 	.word	0x08008030
 8004280:	007a1200 	.word	0x007a1200
 8004284:	003d0900 	.word	0x003d0900
 8004288:	aaaaaaab 	.word	0xaaaaaaab

0800428c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e041      	b.n	8004322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f839 	bl	800432a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f000 f99c 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d001      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e03a      	b.n	80043ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a18      	ldr	r2, [pc, #96]	@ (80043d4 <HAL_TIM_Base_Start_IT+0x98>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x58>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437e:	d009      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x58>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a14      	ldr	r2, [pc, #80]	@ (80043d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x58>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a13      	ldr	r2, [pc, #76]	@ (80043dc <HAL_TIM_Base_Start_IT+0xa0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d111      	bne.n	80043b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d010      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b6:	e007      	b.n	80043c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800

080043e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d020      	beq.n	8004444 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01b      	beq.n	8004444 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0202 	mvn.w	r2, #2
 8004414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8d1 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8c4 	bl	80045c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8d3 	bl	80045e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d020      	beq.n	8004490 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01b      	beq.n	8004490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0204 	mvn.w	r2, #4
 8004460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8ab 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f89e 	bl	80045c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f8ad 	bl	80045e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d020      	beq.n	80044dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01b      	beq.n	80044dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0208 	mvn.w	r2, #8
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2204      	movs	r2, #4
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f885 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f878 	bl	80045c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f887 	bl	80045e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0210 	mvn.w	r2, #16
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2208      	movs	r2, #8
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f85f 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f852 	bl	80045c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f861 	bl	80045e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00c      	beq.n	800454c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0201 	mvn.w	r2, #1
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc f908 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8c3 	bl	80046f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800458c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f831 	bl	80045f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0220 	mvn.w	r2, #32
 80045b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f896 	bl	80046e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a2f      	ldr	r2, [pc, #188]	@ (80046d8 <TIM_Base_SetConfig+0xd0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0x30>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0x30>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a2c      	ldr	r2, [pc, #176]	@ (80046dc <TIM_Base_SetConfig+0xd4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x30>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2b      	ldr	r2, [pc, #172]	@ (80046e0 <TIM_Base_SetConfig+0xd8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d108      	bne.n	800464a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a22      	ldr	r2, [pc, #136]	@ (80046d8 <TIM_Base_SetConfig+0xd0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_Base_SetConfig+0x62>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0x62>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <TIM_Base_SetConfig+0xd4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0x62>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <TIM_Base_SetConfig+0xd8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0d      	ldr	r2, [pc, #52]	@ (80046d8 <TIM_Base_SetConfig+0xd0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f023 0201 	bic.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	611a      	str	r2, [r3, #16]
  }
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800

080046e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f103 0208 	add.w	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f103 0208 	add.w	r2, r3, #8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f103 0208 	add.w	r2, r3, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047ba:	d103      	bne.n	80047c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	e00c      	b.n	80047de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3308      	adds	r3, #8
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e002      	b.n	80047d2 <vListInsert+0x2e>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d2f6      	bcs.n	80047cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6892      	ldr	r2, [r2, #8]
 800482a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6852      	ldr	r2, [r2, #4]
 8004834:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d103      	bne.n	8004848 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	1e5a      	subs	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
	...

08004868 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004894:	f001 fd0a 	bl	80062ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a0:	68f9      	ldr	r1, [r7, #12]
 80048a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	441a      	add	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c4:	3b01      	subs	r3, #1
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	441a      	add	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	22ff      	movs	r2, #255	@ 0xff
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	22ff      	movs	r2, #255	@ 0xff
 80048e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d114      	bne.n	8004914 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01a      	beq.n	8004928 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3310      	adds	r3, #16
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fffc 	bl	80058f4 <xTaskRemoveFromEventList>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d012      	beq.n	8004928 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004902:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <xQueueGenericReset+0xd0>)
 8004904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	e009      	b.n	8004928 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3310      	adds	r3, #16
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fef5 	bl	8004708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3324      	adds	r3, #36	@ 0x24
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fef0 	bl	8004708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004928:	f001 fcf0 	bl	800630c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800492c:	2301      	movs	r3, #1
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	613b      	str	r3, [r7, #16]
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3348      	adds	r3, #72	@ 0x48
 8004976:	4618      	mov	r0, r3
 8004978:	f001 fd5a 	bl	8006430 <pvPortMalloc>
 800497c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d011      	beq.n	80049a8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	3348      	adds	r3, #72	@ 0x48
 800498c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004996:	79fa      	ldrb	r2, [r7, #7]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f805 	bl	80049b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049a8:	69bb      	ldr	r3, [r7, #24]
	}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e002      	b.n	80049d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049e0:	2101      	movs	r1, #1
 80049e2:	69b8      	ldr	r0, [r7, #24]
 80049e4:	f7ff ff40 	bl	8004868 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a10:	2300      	movs	r3, #0
 8004a12:	2200      	movs	r2, #0
 8004a14:	2100      	movs	r1, #0
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f81c 	bl	8004a54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6939      	ldr	r1, [r7, #16]
 8004a3c:	6978      	ldr	r0, [r7, #20]
 8004a3e:	f7ff ff7d 	bl	800493c <xQueueGenericCreate>
 8004a42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff ffd3 	bl	80049f0 <prvInitialiseMutex>

		return xNewQueue;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
	}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08e      	sub	sp, #56	@ 0x38
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xQueueGenericSend+0x34>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <xQueueGenericSend+0x42>
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueGenericSend+0x46>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueGenericSend+0x48>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <xQueueGenericSend+0x64>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d103      	bne.n	8004ac6 <xQueueGenericSend+0x72>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <xQueueGenericSend+0x76>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <xQueueGenericSend+0x78>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <xQueueGenericSend+0x94>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	623b      	str	r3, [r7, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ae8:	f001 f8ca 	bl	8005c80 <xTaskGetSchedulerState>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <xQueueGenericSend+0xa4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <xQueueGenericSend+0xa8>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <xQueueGenericSend+0xaa>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <xQueueGenericSend+0xc6>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	61fb      	str	r3, [r7, #28]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b1a:	f001 fbc7 	bl	80062ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <xQueueGenericSend+0xdc>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d129      	bne.n	8004b84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b36:	f000 f9b6 	bl	8004ea6 <prvCopyDataToQueue>
 8004b3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	3324      	adds	r3, #36	@ 0x24
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fed3 	bl	80058f4 <xTaskRemoveFromEventList>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b54:	4b3f      	ldr	r3, [pc, #252]	@ (8004c54 <xQueueGenericSend+0x200>)
 8004b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	e00a      	b.n	8004b7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d007      	beq.n	8004b7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b6c:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <xQueueGenericSend+0x200>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b7c:	f001 fbc6 	bl	800630c <vPortExitCritical>
				return pdPASS;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e063      	b.n	8004c4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d103      	bne.n	8004b92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b8a:	f001 fbbf 	bl	800630c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e05c      	b.n	8004c4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 ff0d 	bl	80059bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ba6:	f001 fbb1 	bl	800630c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004baa:	f000 fcb5 	bl	8005518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bae:	f001 fb7d 	bl	80062ac <vPortEnterCritical>
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bbe:	d103      	bne.n	8004bc8 <xQueueGenericSend+0x174>
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bce:	b25b      	sxtb	r3, r3
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bd4:	d103      	bne.n	8004bde <xQueueGenericSend+0x18a>
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bde:	f001 fb95 	bl	800630c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004be2:	1d3a      	adds	r2, r7, #4
 8004be4:	f107 0314 	add.w	r3, r7, #20
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fefc 	bl	80059e8 <xTaskCheckForTimeOut>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d124      	bne.n	8004c40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bf8:	f000 fa27 	bl	800504a <prvIsQueueFull>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d018      	beq.n	8004c34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	3310      	adds	r3, #16
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fe4c 	bl	80058a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c12:	f000 f9b2 	bl	8004f7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c16:	f000 fc8d 	bl	8005534 <xTaskResumeAll>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f af7c 	bne.w	8004b1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <xQueueGenericSend+0x200>)
 8004c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	e772      	b.n	8004b1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c36:	f000 f9a0 	bl	8004f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c3a:	f000 fc7b 	bl	8005534 <xTaskResumeAll>
 8004c3e:	e76c      	b.n	8004b1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c42:	f000 f99a 	bl	8004f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c46:	f000 fc75 	bl	8005534 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3738      	adds	r7, #56	@ 0x38
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08e      	sub	sp, #56	@ 0x38
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	623b      	str	r3, [r7, #32]
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	e7fd      	b.n	8004c88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00b      	beq.n	8004cac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	61fb      	str	r3, [r7, #28]
}
 8004ca6:	bf00      	nop
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cac:	f000 ffe8 	bl	8005c80 <xTaskGetSchedulerState>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <xQueueSemaphoreTake+0x64>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <xQueueSemaphoreTake+0x68>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <xQueueSemaphoreTake+0x6a>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	61bb      	str	r3, [r7, #24]
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cde:	f001 fae5 	bl	80062ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d024      	beq.n	8004d38 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	1e5a      	subs	r2, r3, #1
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cfe:	f001 f96b 	bl	8005fd8 <pvTaskIncrementMutexHeldCount>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00f      	beq.n	8004d30 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d12:	3310      	adds	r3, #16
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fded 	bl	80058f4 <xTaskRemoveFromEventList>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d20:	4b54      	ldr	r3, [pc, #336]	@ (8004e74 <xQueueSemaphoreTake+0x21c>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d30:	f001 faec 	bl	800630c <vPortExitCritical>
				return pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e098      	b.n	8004e6a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d112      	bne.n	8004d64 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	617b      	str	r3, [r7, #20]
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	e7fd      	b.n	8004d58 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d5c:	f001 fad6 	bl	800630c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e082      	b.n	8004e6a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d6a:	f107 030c 	add.w	r3, r7, #12
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fe24 	bl	80059bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d78:	f001 fac8 	bl	800630c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d7c:	f000 fbcc 	bl	8005518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d80:	f001 fa94 	bl	80062ac <vPortEnterCritical>
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d90:	d103      	bne.n	8004d9a <xQueueSemaphoreTake+0x142>
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004da0:	b25b      	sxtb	r3, r3
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da6:	d103      	bne.n	8004db0 <xQueueSemaphoreTake+0x158>
 8004da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004db0:	f001 faac 	bl	800630c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db4:	463a      	mov	r2, r7
 8004db6:	f107 030c 	add.w	r3, r7, #12
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fe13 	bl	80059e8 <xTaskCheckForTimeOut>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d132      	bne.n	8004e2e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dca:	f000 f928 	bl	800501e <prvIsQueueEmpty>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d026      	beq.n	8004e22 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004ddc:	f001 fa66 	bl	80062ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 ff69 	bl	8005cbc <xTaskPriorityInherit>
 8004dea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004dec:	f001 fa8e 	bl	800630c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df2:	3324      	adds	r3, #36	@ 0x24
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fd55 	bl	80058a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e00:	f000 f8bb 	bl	8004f7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e04:	f000 fb96 	bl	8005534 <xTaskResumeAll>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f47f af67 	bne.w	8004cde <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004e10:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <xQueueSemaphoreTake+0x21c>)
 8004e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	e75d      	b.n	8004cde <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004e22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e24:	f000 f8a9 	bl	8004f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e28:	f000 fb84 	bl	8005534 <xTaskResumeAll>
 8004e2c:	e757      	b.n	8004cde <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e30:	f000 f8a3 	bl	8004f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e34:	f000 fb7e 	bl	8005534 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e3a:	f000 f8f0 	bl	800501e <prvIsQueueEmpty>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f43f af4c 	beq.w	8004cde <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00d      	beq.n	8004e68 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004e4c:	f001 fa2e 	bl	80062ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e52:	f000 f811 	bl	8004e78 <prvGetDisinheritPriorityAfterTimeout>
 8004e56:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 f82a 	bl	8005eb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e64:	f001 fa52 	bl	800630c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3738      	adds	r7, #56	@ 0x38
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d006      	beq.n	8004e96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1c3 0307 	rsb	r3, r3, #7
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e001      	b.n	8004e9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
	}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b086      	sub	sp, #24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10d      	bne.n	8004ee0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d14d      	bne.n	8004f68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 ff69 	bl	8005da8 <xTaskPriorityDisinherit>
 8004ed6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]
 8004ede:	e043      	b.n	8004f68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d119      	bne.n	8004f1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6858      	ldr	r0, [r3, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	f001 fd3d 	bl	8006970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	441a      	add	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d32b      	bcc.n	8004f68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	605a      	str	r2, [r3, #4]
 8004f18:	e026      	b.n	8004f68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68d8      	ldr	r0, [r3, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	461a      	mov	r2, r3
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	f001 fd23 	bl	8006970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	425b      	negs	r3, r3
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d207      	bcs.n	8004f56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	425b      	negs	r3, r3
 8004f50:	441a      	add	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d105      	bne.n	8004f68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f70:	697b      	ldr	r3, [r7, #20]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f82:	f001 f993 	bl	80062ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f8c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f8e:	e011      	b.n	8004fb4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d012      	beq.n	8004fbe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3324      	adds	r3, #36	@ 0x24
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fca9 	bl	80058f4 <xTaskRemoveFromEventList>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fa8:	f000 fd82 	bl	8005ab0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dce9      	bgt.n	8004f90 <prvUnlockQueue+0x16>
 8004fbc:	e000      	b.n	8004fc0 <prvUnlockQueue+0x46>
					break;
 8004fbe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	22ff      	movs	r2, #255	@ 0xff
 8004fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fc8:	f001 f9a0 	bl	800630c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fcc:	f001 f96e 	bl	80062ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fd6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fd8:	e011      	b.n	8004ffe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d012      	beq.n	8005008 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3310      	adds	r3, #16
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fc84 	bl	80058f4 <xTaskRemoveFromEventList>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ff2:	f000 fd5d 	bl	8005ab0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ff6:	7bbb      	ldrb	r3, [r7, #14]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005002:	2b00      	cmp	r3, #0
 8005004:	dce9      	bgt.n	8004fda <prvUnlockQueue+0x60>
 8005006:	e000      	b.n	800500a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005008:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	22ff      	movs	r2, #255	@ 0xff
 800500e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005012:	f001 f97b 	bl	800630c <vPortExitCritical>
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005026:	f001 f941 	bl	80062ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005032:	2301      	movs	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e001      	b.n	800503c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800503c:	f001 f966 	bl	800630c <vPortExitCritical>

	return xReturn;
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005052:	f001 f92b 	bl	80062ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505e:	429a      	cmp	r2, r3
 8005060:	d102      	bne.n	8005068 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005062:	2301      	movs	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e001      	b.n	800506c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800506c:	f001 f94e 	bl	800630c <vPortExitCritical>

	return xReturn;
 8005070:	68fb      	ldr	r3, [r7, #12]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800507a:	b580      	push	{r7, lr}
 800507c:	b08e      	sub	sp, #56	@ 0x38
 800507e:	af04      	add	r7, sp, #16
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	623b      	str	r3, [r7, #32]
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	e7fd      	b.n	80050a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	61fb      	str	r3, [r7, #28]
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050c4:	23a0      	movs	r3, #160	@ 0xa0
 80050c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80050cc:	d00b      	beq.n	80050e6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	61bb      	str	r3, [r7, #24]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01e      	beq.n	800512c <xTaskCreateStatic+0xb2>
 80050ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	2202      	movs	r2, #2
 8005102:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005106:	2300      	movs	r3, #0
 8005108:	9303      	str	r3, [sp, #12]
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	9302      	str	r3, [sp, #8]
 800510e:	f107 0314 	add.w	r3, r7, #20
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f850 	bl	80051c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005126:	f000 f8ed 	bl	8005304 <prvAddNewTaskToReadyList>
 800512a:	e001      	b.n	8005130 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005130:	697b      	ldr	r3, [r7, #20]
	}
 8005132:	4618      	mov	r0, r3
 8005134:	3728      	adds	r7, #40	@ 0x28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800513a:	b580      	push	{r7, lr}
 800513c:	b08c      	sub	sp, #48	@ 0x30
 800513e:	af04      	add	r7, sp, #16
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4618      	mov	r0, r3
 8005150:	f001 f96e 	bl	8006430 <pvPortMalloc>
 8005154:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00e      	beq.n	800517a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800515c:	20a0      	movs	r0, #160	@ 0xa0
 800515e:	f001 f967 	bl	8006430 <pvPortMalloc>
 8005162:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005170:	e005      	b.n	800517e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005172:	6978      	ldr	r0, [r7, #20]
 8005174:	f001 fa2a 	bl	80065cc <vPortFree>
 8005178:	e001      	b.n	800517e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d017      	beq.n	80051b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800518c:	88fa      	ldrh	r2, [r7, #6]
 800518e:	2300      	movs	r3, #0
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	9302      	str	r3, [sp, #8]
 8005196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f80e 	bl	80051c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051a8:	69f8      	ldr	r0, [r7, #28]
 80051aa:	f000 f8ab 	bl	8005304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e002      	b.n	80051ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ba:	69bb      	ldr	r3, [r7, #24]
	}
 80051bc:	4618      	mov	r0, r3
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051dc:	3b01      	subs	r3, #1
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f023 0307 	bic.w	r3, r3, #7
 80051ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	617b      	str	r3, [r7, #20]
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	e7fd      	b.n	800520a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01f      	beq.n	8005254 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	e012      	b.n	8005240 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	4413      	add	r3, r2
 8005220:	7819      	ldrb	r1, [r3, #0]
 8005222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	3334      	adds	r3, #52	@ 0x34
 800522a:	460a      	mov	r2, r1
 800522c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d006      	beq.n	8005248 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	d9e9      	bls.n	800521a <prvInitialiseNewTask+0x56>
 8005246:	e000      	b.n	800524a <prvInitialiseNewTask+0x86>
			{
				break;
 8005248:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005252:	e003      	b.n	800525c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	2b06      	cmp	r3, #6
 8005260:	d901      	bls.n	8005266 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005262:	2306      	movs	r3, #6
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	2200      	movs	r2, #0
 8005276:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fa62 	bl	8004746 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	3318      	adds	r3, #24
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fa5d 	bl	8004746 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005294:	f1c3 0207 	rsb	r2, r3, #7
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	334c      	adds	r3, #76	@ 0x4c
 80052b6:	224c      	movs	r2, #76	@ 0x4c
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fac6 	bl	800684c <memset>
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	4a0d      	ldr	r2, [pc, #52]	@ (80052f8 <prvInitialiseNewTask+0x134>)
 80052c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	4a0c      	ldr	r2, [pc, #48]	@ (80052fc <prvInitialiseNewTask+0x138>)
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005300 <prvInitialiseNewTask+0x13c>)
 80052d0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	69b8      	ldr	r0, [r7, #24]
 80052d8:	f000 fef8 	bl	80060cc <pxPortInitialiseStack>
 80052dc:	4602      	mov	r2, r0
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ee:	bf00      	nop
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20001608 	.word	0x20001608
 80052fc:	20001670 	.word	0x20001670
 8005300:	200016d8 	.word	0x200016d8

08005304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800530c:	f000 ffce 	bl	80062ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005310:	4b2a      	ldr	r3, [pc, #168]	@ (80053bc <prvAddNewTaskToReadyList+0xb8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a29      	ldr	r2, [pc, #164]	@ (80053bc <prvAddNewTaskToReadyList+0xb8>)
 8005318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800531a:	4b29      	ldr	r3, [pc, #164]	@ (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005322:	4a27      	ldr	r2, [pc, #156]	@ (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005328:	4b24      	ldr	r3, [pc, #144]	@ (80053bc <prvAddNewTaskToReadyList+0xb8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d110      	bne.n	8005352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005330:	f000 fbe2 	bl	8005af8 <prvInitialiseTaskLists>
 8005334:	e00d      	b.n	8005352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005336:	4b23      	ldr	r3, [pc, #140]	@ (80053c4 <prvAddNewTaskToReadyList+0xc0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800533e:	4b20      	ldr	r3, [pc, #128]	@ (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	429a      	cmp	r2, r3
 800534a:	d802      	bhi.n	8005352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800534c:	4a1c      	ldr	r2, [pc, #112]	@ (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005352:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 800535a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	2201      	movs	r2, #1
 8005362:	409a      	lsls	r2, r3
 8005364:	4b19      	ldr	r3, [pc, #100]	@ (80053cc <prvAddNewTaskToReadyList+0xc8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4313      	orrs	r3, r2
 800536a:	4a18      	ldr	r2, [pc, #96]	@ (80053cc <prvAddNewTaskToReadyList+0xc8>)
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4a15      	ldr	r2, [pc, #84]	@ (80053d0 <prvAddNewTaskToReadyList+0xcc>)
 800537c:	441a      	add	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f7ff f9ea 	bl	800475e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800538a:	f000 ffbf 	bl	800630c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800538e:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <prvAddNewTaskToReadyList+0xc0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00e      	beq.n	80053b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005396:	4b0a      	ldr	r3, [pc, #40]	@ (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d207      	bcs.n	80053b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	200009b4 	.word	0x200009b4
 80053c0:	200008b4 	.word	0x200008b4
 80053c4:	200009c0 	.word	0x200009c0
 80053c8:	200009d0 	.word	0x200009d0
 80053cc:	200009bc 	.word	0x200009bc
 80053d0:	200008b8 	.word	0x200008b8
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d018      	beq.n	800541c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053ea:	4b14      	ldr	r3, [pc, #80]	@ (800543c <vTaskDelay+0x64>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <vTaskDelay+0x32>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60bb      	str	r3, [r7, #8]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800540a:	f000 f885 	bl	8005518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800540e:	2100      	movs	r1, #0
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fdf5 	bl	8006000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005416:	f000 f88d 	bl	8005534 <xTaskResumeAll>
 800541a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005422:	4b07      	ldr	r3, [pc, #28]	@ (8005440 <vTaskDelay+0x68>)
 8005424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	200009dc 	.word	0x200009dc
 8005440:	e000ed04 	.word	0xe000ed04

08005444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	@ 0x28
 8005448:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800544e:	2300      	movs	r3, #0
 8005450:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005452:	463a      	mov	r2, r7
 8005454:	1d39      	adds	r1, r7, #4
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	4618      	mov	r0, r3
 800545c:	f7fa fe78 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	9202      	str	r2, [sp, #8]
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	2300      	movs	r3, #0
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2300      	movs	r3, #0
 8005470:	460a      	mov	r2, r1
 8005472:	4921      	ldr	r1, [pc, #132]	@ (80054f8 <vTaskStartScheduler+0xb4>)
 8005474:	4821      	ldr	r0, [pc, #132]	@ (80054fc <vTaskStartScheduler+0xb8>)
 8005476:	f7ff fe00 	bl	800507a <xTaskCreateStatic>
 800547a:	4603      	mov	r3, r0
 800547c:	4a20      	ldr	r2, [pc, #128]	@ (8005500 <vTaskStartScheduler+0xbc>)
 800547e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005480:	4b1f      	ldr	r3, [pc, #124]	@ (8005500 <vTaskStartScheduler+0xbc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005488:	2301      	movs	r3, #1
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e001      	b.n	8005492 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d11b      	bne.n	80054d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	613b      	str	r3, [r7, #16]
}
 80054aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054ac:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <vTaskStartScheduler+0xc0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	334c      	adds	r3, #76	@ 0x4c
 80054b2:	4a15      	ldr	r2, [pc, #84]	@ (8005508 <vTaskStartScheduler+0xc4>)
 80054b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054b6:	4b15      	ldr	r3, [pc, #84]	@ (800550c <vTaskStartScheduler+0xc8>)
 80054b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054be:	4b14      	ldr	r3, [pc, #80]	@ (8005510 <vTaskStartScheduler+0xcc>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054c4:	4b13      	ldr	r3, [pc, #76]	@ (8005514 <vTaskStartScheduler+0xd0>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054ca:	f000 fe7d 	bl	80061c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054ce:	e00f      	b.n	80054f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054d6:	d10b      	bne.n	80054f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	60fb      	str	r3, [r7, #12]
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <vTaskStartScheduler+0xa8>
}
 80054f0:	bf00      	nop
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	08007290 	.word	0x08007290
 80054fc:	08005ac9 	.word	0x08005ac9
 8005500:	200009d8 	.word	0x200009d8
 8005504:	200008b4 	.word	0x200008b4
 8005508:	20000020 	.word	0x20000020
 800550c:	200009d4 	.word	0x200009d4
 8005510:	200009c0 	.word	0x200009c0
 8005514:	200009b8 	.word	0x200009b8

08005518 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800551c:	4b04      	ldr	r3, [pc, #16]	@ (8005530 <vTaskSuspendAll+0x18>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	4a03      	ldr	r2, [pc, #12]	@ (8005530 <vTaskSuspendAll+0x18>)
 8005524:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005526:	bf00      	nop
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	200009dc 	.word	0x200009dc

08005534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005542:	4b42      	ldr	r3, [pc, #264]	@ (800564c <xTaskResumeAll+0x118>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <xTaskResumeAll+0x2e>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	603b      	str	r3, [r7, #0]
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	e7fd      	b.n	800555e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005562:	f000 fea3 	bl	80062ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005566:	4b39      	ldr	r3, [pc, #228]	@ (800564c <xTaskResumeAll+0x118>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3b01      	subs	r3, #1
 800556c:	4a37      	ldr	r2, [pc, #220]	@ (800564c <xTaskResumeAll+0x118>)
 800556e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005570:	4b36      	ldr	r3, [pc, #216]	@ (800564c <xTaskResumeAll+0x118>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d161      	bne.n	800563c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005578:	4b35      	ldr	r3, [pc, #212]	@ (8005650 <xTaskResumeAll+0x11c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05d      	beq.n	800563c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005580:	e02e      	b.n	80055e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005582:	4b34      	ldr	r3, [pc, #208]	@ (8005654 <xTaskResumeAll+0x120>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3318      	adds	r3, #24
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff f940 	bl	8004814 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3304      	adds	r3, #4
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff f93b 	bl	8004814 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	2201      	movs	r2, #1
 80055a4:	409a      	lsls	r2, r3
 80055a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005658 <xTaskResumeAll+0x124>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005658 <xTaskResumeAll+0x124>)
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4a27      	ldr	r2, [pc, #156]	@ (800565c <xTaskResumeAll+0x128>)
 80055be:	441a      	add	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f7ff f8c9 	bl	800475e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d0:	4b23      	ldr	r3, [pc, #140]	@ (8005660 <xTaskResumeAll+0x12c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055da:	4b22      	ldr	r3, [pc, #136]	@ (8005664 <xTaskResumeAll+0x130>)
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005654 <xTaskResumeAll+0x120>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1cc      	bne.n	8005582 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055ee:	f000 fb27 	bl	8005c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <xTaskResumeAll+0x134>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d010      	beq.n	8005620 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055fe:	f000 f837 	bl	8005670 <xTaskIncrementTick>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005608:	4b16      	ldr	r3, [pc, #88]	@ (8005664 <xTaskResumeAll+0x130>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3b01      	subs	r3, #1
 8005612:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f1      	bne.n	80055fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800561a:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <xTaskResumeAll+0x134>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005620:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <xTaskResumeAll+0x130>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d009      	beq.n	800563c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800562c:	4b0f      	ldr	r3, [pc, #60]	@ (800566c <xTaskResumeAll+0x138>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800563c:	f000 fe66 	bl	800630c <vPortExitCritical>

	return xAlreadyYielded;
 8005640:	68bb      	ldr	r3, [r7, #8]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200009dc 	.word	0x200009dc
 8005650:	200009b4 	.word	0x200009b4
 8005654:	20000974 	.word	0x20000974
 8005658:	200009bc 	.word	0x200009bc
 800565c:	200008b8 	.word	0x200008b8
 8005660:	200008b4 	.word	0x200008b4
 8005664:	200009c8 	.word	0x200009c8
 8005668:	200009c4 	.word	0x200009c4
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800567a:	4b4f      	ldr	r3, [pc, #316]	@ (80057b8 <xTaskIncrementTick+0x148>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f040 808f 	bne.w	80057a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005684:	4b4d      	ldr	r3, [pc, #308]	@ (80057bc <xTaskIncrementTick+0x14c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800568c:	4a4b      	ldr	r2, [pc, #300]	@ (80057bc <xTaskIncrementTick+0x14c>)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d121      	bne.n	80056dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005698:	4b49      	ldr	r3, [pc, #292]	@ (80057c0 <xTaskIncrementTick+0x150>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	603b      	str	r3, [r7, #0]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <xTaskIncrementTick+0x46>
 80056ba:	4b41      	ldr	r3, [pc, #260]	@ (80057c0 <xTaskIncrementTick+0x150>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	4b40      	ldr	r3, [pc, #256]	@ (80057c4 <xTaskIncrementTick+0x154>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a3e      	ldr	r2, [pc, #248]	@ (80057c0 <xTaskIncrementTick+0x150>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4a3e      	ldr	r2, [pc, #248]	@ (80057c4 <xTaskIncrementTick+0x154>)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	4b3e      	ldr	r3, [pc, #248]	@ (80057c8 <xTaskIncrementTick+0x158>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3301      	adds	r3, #1
 80056d4:	4a3c      	ldr	r2, [pc, #240]	@ (80057c8 <xTaskIncrementTick+0x158>)
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	f000 fab2 	bl	8005c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056dc:	4b3b      	ldr	r3, [pc, #236]	@ (80057cc <xTaskIncrementTick+0x15c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d348      	bcc.n	8005778 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056e6:	4b36      	ldr	r3, [pc, #216]	@ (80057c0 <xTaskIncrementTick+0x150>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f0:	4b36      	ldr	r3, [pc, #216]	@ (80057cc <xTaskIncrementTick+0x15c>)
 80056f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056f6:	601a      	str	r2, [r3, #0]
					break;
 80056f8:	e03e      	b.n	8005778 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fa:	4b31      	ldr	r3, [pc, #196]	@ (80057c0 <xTaskIncrementTick+0x150>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	429a      	cmp	r2, r3
 8005710:	d203      	bcs.n	800571a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005712:	4a2e      	ldr	r2, [pc, #184]	@ (80057cc <xTaskIncrementTick+0x15c>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005718:	e02e      	b.n	8005778 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff f878 	bl	8004814 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	3318      	adds	r3, #24
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff f86f 	bl	8004814 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	2201      	movs	r2, #1
 800573c:	409a      	lsls	r2, r3
 800573e:	4b24      	ldr	r3, [pc, #144]	@ (80057d0 <xTaskIncrementTick+0x160>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4313      	orrs	r3, r2
 8005744:	4a22      	ldr	r2, [pc, #136]	@ (80057d0 <xTaskIncrementTick+0x160>)
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <xTaskIncrementTick+0x164>)
 8005756:	441a      	add	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f7fe fffd 	bl	800475e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005768:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <xTaskIncrementTick+0x168>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	429a      	cmp	r2, r3
 8005770:	d3b9      	bcc.n	80056e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005772:	2301      	movs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005776:	e7b6      	b.n	80056e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005778:	4b17      	ldr	r3, [pc, #92]	@ (80057d8 <xTaskIncrementTick+0x168>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577e:	4915      	ldr	r1, [pc, #84]	@ (80057d4 <xTaskIncrementTick+0x164>)
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d901      	bls.n	8005794 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005794:	4b11      	ldr	r3, [pc, #68]	@ (80057dc <xTaskIncrementTick+0x16c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e004      	b.n	80057ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057a2:	4b0f      	ldr	r3, [pc, #60]	@ (80057e0 <xTaskIncrementTick+0x170>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3301      	adds	r3, #1
 80057a8:	4a0d      	ldr	r2, [pc, #52]	@ (80057e0 <xTaskIncrementTick+0x170>)
 80057aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057ac:	697b      	ldr	r3, [r7, #20]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	200009dc 	.word	0x200009dc
 80057bc:	200009b8 	.word	0x200009b8
 80057c0:	2000096c 	.word	0x2000096c
 80057c4:	20000970 	.word	0x20000970
 80057c8:	200009cc 	.word	0x200009cc
 80057cc:	200009d4 	.word	0x200009d4
 80057d0:	200009bc 	.word	0x200009bc
 80057d4:	200008b8 	.word	0x200008b8
 80057d8:	200008b4 	.word	0x200008b4
 80057dc:	200009c8 	.word	0x200009c8
 80057e0:	200009c4 	.word	0x200009c4

080057e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ea:	4b29      	ldr	r3, [pc, #164]	@ (8005890 <vTaskSwitchContext+0xac>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057f2:	4b28      	ldr	r3, [pc, #160]	@ (8005894 <vTaskSwitchContext+0xb0>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f8:	e045      	b.n	8005886 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80057fa:	4b26      	ldr	r3, [pc, #152]	@ (8005894 <vTaskSwitchContext+0xb0>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005800:	4b25      	ldr	r3, [pc, #148]	@ (8005898 <vTaskSwitchContext+0xb4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	fab3 f383 	clz	r3, r3
 800580c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	f1c3 031f 	rsb	r3, r3, #31
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	4921      	ldr	r1, [pc, #132]	@ (800589c <vTaskSwitchContext+0xb8>)
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <vTaskSwitchContext+0x5e>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	607b      	str	r3, [r7, #4]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <vTaskSwitchContext+0x5a>
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4a13      	ldr	r2, [pc, #76]	@ (800589c <vTaskSwitchContext+0xb8>)
 800584e:	4413      	add	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3308      	adds	r3, #8
 8005864:	429a      	cmp	r2, r3
 8005866:	d104      	bne.n	8005872 <vTaskSwitchContext+0x8e>
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a09      	ldr	r2, [pc, #36]	@ (80058a0 <vTaskSwitchContext+0xbc>)
 800587a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800587c:	4b08      	ldr	r3, [pc, #32]	@ (80058a0 <vTaskSwitchContext+0xbc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	334c      	adds	r3, #76	@ 0x4c
 8005882:	4a08      	ldr	r2, [pc, #32]	@ (80058a4 <vTaskSwitchContext+0xc0>)
 8005884:	6013      	str	r3, [r2, #0]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	200009dc 	.word	0x200009dc
 8005894:	200009c8 	.word	0x200009c8
 8005898:	200009bc 	.word	0x200009bc
 800589c:	200008b8 	.word	0x200008b8
 80058a0:	200008b4 	.word	0x200008b4
 80058a4:	20000020 	.word	0x20000020

080058a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058d0:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <vTaskPlaceOnEventList+0x48>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3318      	adds	r3, #24
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fe ff63 	bl	80047a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058de:	2101      	movs	r1, #1
 80058e0:	6838      	ldr	r0, [r7, #0]
 80058e2:	f000 fb8d 	bl	8006000 <prvAddCurrentTaskToDelayedList>
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	200008b4 	.word	0x200008b4

080058f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	60fb      	str	r3, [r7, #12]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	3318      	adds	r3, #24
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe ff74 	bl	8004814 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800592c:	4b1d      	ldr	r3, [pc, #116]	@ (80059a4 <xTaskRemoveFromEventList+0xb0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d11c      	bne.n	800596e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	3304      	adds	r3, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe ff6b 	bl	8004814 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	2201      	movs	r2, #1
 8005944:	409a      	lsls	r2, r3
 8005946:	4b18      	ldr	r3, [pc, #96]	@ (80059a8 <xTaskRemoveFromEventList+0xb4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	4a16      	ldr	r2, [pc, #88]	@ (80059a8 <xTaskRemoveFromEventList+0xb4>)
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4a13      	ldr	r2, [pc, #76]	@ (80059ac <xTaskRemoveFromEventList+0xb8>)
 800595e:	441a      	add	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fe fef9 	bl	800475e <vListInsertEnd>
 800596c:	e005      	b.n	800597a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3318      	adds	r3, #24
 8005972:	4619      	mov	r1, r3
 8005974:	480e      	ldr	r0, [pc, #56]	@ (80059b0 <xTaskRemoveFromEventList+0xbc>)
 8005976:	f7fe fef2 	bl	800475e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <xTaskRemoveFromEventList+0xc0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	429a      	cmp	r2, r3
 8005986:	d905      	bls.n	8005994 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800598c:	4b0a      	ldr	r3, [pc, #40]	@ (80059b8 <xTaskRemoveFromEventList+0xc4>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e001      	b.n	8005998 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005998:	697b      	ldr	r3, [r7, #20]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200009dc 	.word	0x200009dc
 80059a8:	200009bc 	.word	0x200009bc
 80059ac:	200008b8 	.word	0x200008b8
 80059b0:	20000974 	.word	0x20000974
 80059b4:	200008b4 	.word	0x200008b4
 80059b8:	200009c8 	.word	0x200009c8

080059bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059c4:	4b06      	ldr	r3, [pc, #24]	@ (80059e0 <vTaskInternalSetTimeOutState+0x24>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059cc:	4b05      	ldr	r3, [pc, #20]	@ (80059e4 <vTaskInternalSetTimeOutState+0x28>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	605a      	str	r2, [r3, #4]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	200009cc 	.word	0x200009cc
 80059e4:	200009b8 	.word	0x200009b8

080059e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10b      	bne.n	8005a10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	613b      	str	r3, [r7, #16]
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	e7fd      	b.n	8005a0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60fb      	str	r3, [r7, #12]
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a2e:	f000 fc3d 	bl	80062ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a32:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa8 <xTaskCheckForTimeOut+0xc0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a4a:	d102      	bne.n	8005a52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	e023      	b.n	8005a9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4b15      	ldr	r3, [pc, #84]	@ (8005aac <xTaskCheckForTimeOut+0xc4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d007      	beq.n	8005a6e <xTaskCheckForTimeOut+0x86>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d302      	bcc.n	8005a6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e015      	b.n	8005a9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d20b      	bcs.n	8005a90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff ff99 	bl	80059bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	e004      	b.n	8005a9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a9a:	f000 fc37 	bl	800630c <vPortExitCritical>

	return xReturn;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	200009b8 	.word	0x200009b8
 8005aac:	200009cc 	.word	0x200009cc

08005ab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ab4:	4b03      	ldr	r3, [pc, #12]	@ (8005ac4 <vTaskMissedYield+0x14>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	200009c8 	.word	0x200009c8

08005ac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ad0:	f000 f852 	bl	8005b78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <prvIdleTask+0x28>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d9f9      	bls.n	8005ad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005adc:	4b05      	ldr	r3, [pc, #20]	@ (8005af4 <prvIdleTask+0x2c>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005aec:	e7f0      	b.n	8005ad0 <prvIdleTask+0x8>
 8005aee:	bf00      	nop
 8005af0:	200008b8 	.word	0x200008b8
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005afe:	2300      	movs	r3, #0
 8005b00:	607b      	str	r3, [r7, #4]
 8005b02:	e00c      	b.n	8005b1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4a12      	ldr	r2, [pc, #72]	@ (8005b58 <prvInitialiseTaskLists+0x60>)
 8005b10:	4413      	add	r3, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fdf8 	bl	8004708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b06      	cmp	r3, #6
 8005b22:	d9ef      	bls.n	8005b04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b24:	480d      	ldr	r0, [pc, #52]	@ (8005b5c <prvInitialiseTaskLists+0x64>)
 8005b26:	f7fe fdef 	bl	8004708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b2a:	480d      	ldr	r0, [pc, #52]	@ (8005b60 <prvInitialiseTaskLists+0x68>)
 8005b2c:	f7fe fdec 	bl	8004708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b30:	480c      	ldr	r0, [pc, #48]	@ (8005b64 <prvInitialiseTaskLists+0x6c>)
 8005b32:	f7fe fde9 	bl	8004708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b36:	480c      	ldr	r0, [pc, #48]	@ (8005b68 <prvInitialiseTaskLists+0x70>)
 8005b38:	f7fe fde6 	bl	8004708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b3c:	480b      	ldr	r0, [pc, #44]	@ (8005b6c <prvInitialiseTaskLists+0x74>)
 8005b3e:	f7fe fde3 	bl	8004708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b42:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <prvInitialiseTaskLists+0x78>)
 8005b44:	4a05      	ldr	r2, [pc, #20]	@ (8005b5c <prvInitialiseTaskLists+0x64>)
 8005b46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b48:	4b0a      	ldr	r3, [pc, #40]	@ (8005b74 <prvInitialiseTaskLists+0x7c>)
 8005b4a:	4a05      	ldr	r2, [pc, #20]	@ (8005b60 <prvInitialiseTaskLists+0x68>)
 8005b4c:	601a      	str	r2, [r3, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	200008b8 	.word	0x200008b8
 8005b5c:	20000944 	.word	0x20000944
 8005b60:	20000958 	.word	0x20000958
 8005b64:	20000974 	.word	0x20000974
 8005b68:	20000988 	.word	0x20000988
 8005b6c:	200009a0 	.word	0x200009a0
 8005b70:	2000096c 	.word	0x2000096c
 8005b74:	20000970 	.word	0x20000970

08005b78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b7e:	e019      	b.n	8005bb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b80:	f000 fb94 	bl	80062ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b84:	4b10      	ldr	r3, [pc, #64]	@ (8005bc8 <prvCheckTasksWaitingTermination+0x50>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fe3f 	bl	8004814 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b96:	4b0d      	ldr	r3, [pc, #52]	@ (8005bcc <prvCheckTasksWaitingTermination+0x54>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8005bcc <prvCheckTasksWaitingTermination+0x54>)
 8005b9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <prvCheckTasksWaitingTermination+0x58>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd0 <prvCheckTasksWaitingTermination+0x58>)
 8005ba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005baa:	f000 fbaf 	bl	800630c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f810 	bl	8005bd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb4:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <prvCheckTasksWaitingTermination+0x58>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e1      	bne.n	8005b80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000988 	.word	0x20000988
 8005bcc:	200009b4 	.word	0x200009b4
 8005bd0:	2000099c 	.word	0x2000099c

08005bd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	334c      	adds	r3, #76	@ 0x4c
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fe3b 	bl	800685c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fce9 	bl	80065cc <vPortFree>
				vPortFree( pxTCB );
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fce6 	bl	80065cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c00:	e019      	b.n	8005c36 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d103      	bne.n	8005c14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fcdd 	bl	80065cc <vPortFree>
	}
 8005c12:	e010      	b.n	8005c36 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d00b      	beq.n	8005c36 <prvDeleteTCB+0x62>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	60fb      	str	r3, [r7, #12]
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <prvDeleteTCB+0x5e>
	}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c46:	4b0c      	ldr	r3, [pc, #48]	@ (8005c78 <prvResetNextTaskUnblockTime+0x38>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c50:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <prvResetNextTaskUnblockTime+0x3c>)
 8005c52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c58:	e008      	b.n	8005c6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c5a:	4b07      	ldr	r3, [pc, #28]	@ (8005c78 <prvResetNextTaskUnblockTime+0x38>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a04      	ldr	r2, [pc, #16]	@ (8005c7c <prvResetNextTaskUnblockTime+0x3c>)
 8005c6a:	6013      	str	r3, [r2, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	2000096c 	.word	0x2000096c
 8005c7c:	200009d4 	.word	0x200009d4

08005c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c86:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <xTaskGetSchedulerState+0x34>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	e008      	b.n	8005ca6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c94:	4b08      	ldr	r3, [pc, #32]	@ (8005cb8 <xTaskGetSchedulerState+0x38>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	e001      	b.n	8005ca6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ca6:	687b      	ldr	r3, [r7, #4]
	}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	200009c0 	.word	0x200009c0
 8005cb8:	200009dc 	.word	0x200009dc

08005cbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d05e      	beq.n	8005d90 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd6:	4b31      	ldr	r3, [pc, #196]	@ (8005d9c <xTaskPriorityInherit+0xe0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d24e      	bcs.n	8005d7e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	db06      	blt.n	8005cf6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8005d9c <xTaskPriorityInherit+0xe0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cee:	f1c3 0207 	rsb	r2, r3, #7
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6959      	ldr	r1, [r3, #20]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a26      	ldr	r2, [pc, #152]	@ (8005da0 <xTaskPriorityInherit+0xe4>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	4299      	cmp	r1, r3
 8005d0c:	d12f      	bne.n	8005d6e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe fd7e 	bl	8004814 <uxListRemove>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	2201      	movs	r2, #1
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43da      	mvns	r2, r3
 8005d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005da4 <xTaskPriorityInherit+0xe8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	4a1c      	ldr	r2, [pc, #112]	@ (8005da4 <xTaskPriorityInherit+0xe8>)
 8005d32:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d34:	4b19      	ldr	r3, [pc, #100]	@ (8005d9c <xTaskPriorityInherit+0xe0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	2201      	movs	r2, #1
 8005d44:	409a      	lsls	r2, r3
 8005d46:	4b17      	ldr	r3, [pc, #92]	@ (8005da4 <xTaskPriorityInherit+0xe8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <xTaskPriorityInherit+0xe8>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4a10      	ldr	r2, [pc, #64]	@ (8005da0 <xTaskPriorityInherit+0xe4>)
 8005d5e:	441a      	add	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f7fe fcf9 	bl	800475e <vListInsertEnd>
 8005d6c:	e004      	b.n	8005d78 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d9c <xTaskPriorityInherit+0xe0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e008      	b.n	8005d90 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <xTaskPriorityInherit+0xe0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d201      	bcs.n	8005d90 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d90:	68fb      	ldr	r3, [r7, #12]
	}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200008b4 	.word	0x200008b4
 8005da0:	200008b8 	.word	0x200008b8
 8005da4:	200009bc 	.word	0x200009bc

08005da8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d070      	beq.n	8005ea0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8005eac <xTaskPriorityDisinherit+0x104>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d00b      	beq.n	8005de0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	60fb      	str	r3, [r7, #12]
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	e7fd      	b.n	8005ddc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60bb      	str	r3, [r7, #8]
}
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e04:	1e5a      	subs	r2, r3, #1
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d044      	beq.n	8005ea0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d140      	bne.n	8005ea0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe fcf6 	bl	8004814 <uxListRemove>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d115      	bne.n	8005e5a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e32:	491f      	ldr	r1, [pc, #124]	@ (8005eb0 <xTaskPriorityDisinherit+0x108>)
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xTaskPriorityDisinherit+0xb2>
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	2201      	movs	r2, #1
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43da      	mvns	r2, r3
 8005e50:	4b18      	ldr	r3, [pc, #96]	@ (8005eb4 <xTaskPriorityDisinherit+0x10c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4013      	ands	r3, r2
 8005e56:	4a17      	ldr	r2, [pc, #92]	@ (8005eb4 <xTaskPriorityDisinherit+0x10c>)
 8005e58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	f1c3 0207 	rsb	r2, r3, #7
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	2201      	movs	r2, #1
 8005e74:	409a      	lsls	r2, r3
 8005e76:	4b0f      	ldr	r3, [pc, #60]	@ (8005eb4 <xTaskPriorityDisinherit+0x10c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb4 <xTaskPriorityDisinherit+0x10c>)
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4a08      	ldr	r2, [pc, #32]	@ (8005eb0 <xTaskPriorityDisinherit+0x108>)
 8005e8e:	441a      	add	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f7fe fc61 	bl	800475e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ea0:	697b      	ldr	r3, [r7, #20]
	}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200008b4 	.word	0x200008b4
 8005eb0:	200008b8 	.word	0x200008b8
 8005eb4:	200009bc 	.word	0x200009bc

08005eb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d079      	beq.n	8005fc4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10b      	bne.n	8005ef0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	60fb      	str	r3, [r7, #12]
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d902      	bls.n	8005f00 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	e002      	b.n	8005f06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d059      	beq.n	8005fc4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d154      	bne.n	8005fc4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d10b      	bne.n	8005f3c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	60bb      	str	r3, [r7, #8]
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	db04      	blt.n	8005f5a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f1c3 0207 	rsb	r2, r3, #7
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	6959      	ldr	r1, [r3, #20]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4a19      	ldr	r2, [pc, #100]	@ (8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f6a:	4413      	add	r3, r2
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	d129      	bne.n	8005fc4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe fc4d 	bl	8004814 <uxListRemove>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	2201      	movs	r2, #1
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	4b11      	ldr	r3, [pc, #68]	@ (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4013      	ands	r3, r2
 8005f92:	4a10      	ldr	r2, [pc, #64]	@ (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f94:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	409a      	lsls	r2, r3
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4a06      	ldr	r2, [pc, #24]	@ (8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005fb6:	441a      	add	r2, r3
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f7fe fbcd 	bl	800475e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fc4:	bf00      	nop
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	200008b4 	.word	0x200008b4
 8005fd0:	200008b8 	.word	0x200008b8
 8005fd4:	200009bc 	.word	0x200009bc

08005fd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fdc:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	@ (8005ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fea:	3201      	adds	r2, #1
 8005fec:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005fee:	4b03      	ldr	r3, [pc, #12]	@ (8005ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
	}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	200008b4 	.word	0x200008b4

08006000 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800600a:	4b29      	ldr	r3, [pc, #164]	@ (80060b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006010:	4b28      	ldr	r3, [pc, #160]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3304      	adds	r3, #4
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fbfc 	bl	8004814 <uxListRemove>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006022:	4b24      	ldr	r3, [pc, #144]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	2201      	movs	r2, #1
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	43da      	mvns	r2, r3
 8006030:	4b21      	ldr	r3, [pc, #132]	@ (80060b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4013      	ands	r3, r2
 8006036:	4a20      	ldr	r2, [pc, #128]	@ (80060b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006038:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006040:	d10a      	bne.n	8006058 <prvAddCurrentTaskToDelayedList+0x58>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006048:	4b1a      	ldr	r3, [pc, #104]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3304      	adds	r3, #4
 800604e:	4619      	mov	r1, r3
 8006050:	481a      	ldr	r0, [pc, #104]	@ (80060bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006052:	f7fe fb84 	bl	800475e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006056:	e026      	b.n	80060a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006060:	4b14      	ldr	r3, [pc, #80]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	429a      	cmp	r2, r3
 800606e:	d209      	bcs.n	8006084 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006070:	4b13      	ldr	r3, [pc, #76]	@ (80060c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b0f      	ldr	r3, [pc, #60]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3304      	adds	r3, #4
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f7fe fb91 	bl	80047a4 <vListInsert>
}
 8006082:	e010      	b.n	80060a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006084:	4b0f      	ldr	r3, [pc, #60]	@ (80060c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3304      	adds	r3, #4
 800608e:	4619      	mov	r1, r3
 8006090:	4610      	mov	r0, r2
 8006092:	f7fe fb87 	bl	80047a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006096:	4b0c      	ldr	r3, [pc, #48]	@ (80060c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	d202      	bcs.n	80060a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060a0:	4a09      	ldr	r2, [pc, #36]	@ (80060c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6013      	str	r3, [r2, #0]
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200009b8 	.word	0x200009b8
 80060b4:	200008b4 	.word	0x200008b4
 80060b8:	200009bc 	.word	0x200009bc
 80060bc:	200009a0 	.word	0x200009a0
 80060c0:	20000970 	.word	0x20000970
 80060c4:	2000096c 	.word	0x2000096c
 80060c8:	200009d4 	.word	0x200009d4

080060cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3b04      	subs	r3, #4
 80060dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3b04      	subs	r3, #4
 80060fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060fc:	4a08      	ldr	r2, [pc, #32]	@ (8006120 <pxPortInitialiseStack+0x54>)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3b14      	subs	r3, #20
 8006106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3b20      	subs	r3, #32
 8006112:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006114:	68fb      	ldr	r3, [r7, #12]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr
 8006120:	08006125 	.word	0x08006125

08006124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800612e:	4b12      	ldr	r3, [pc, #72]	@ (8006178 <prvTaskExitError+0x54>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006136:	d00b      	beq.n	8006150 <prvTaskExitError+0x2c>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	60fb      	str	r3, [r7, #12]
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <prvTaskExitError+0x28>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60bb      	str	r3, [r7, #8]
}
 8006162:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006164:	bf00      	nop
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0fc      	beq.n	8006166 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr
 8006178:	2000001c 	.word	0x2000001c
 800617c:	00000000 	.word	0x00000000

08006180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <pxCurrentTCBConst2>)
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	6808      	ldr	r0, [r1, #0]
 8006186:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800618a:	f380 8809 	msr	PSP, r0
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f04f 0000 	mov.w	r0, #0
 8006196:	f380 8811 	msr	BASEPRI, r0
 800619a:	f04e 0e0d 	orr.w	lr, lr, #13
 800619e:	4770      	bx	lr

080061a0 <pxCurrentTCBConst2>:
 80061a0:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061a8:	4806      	ldr	r0, [pc, #24]	@ (80061c4 <prvPortStartFirstTask+0x1c>)
 80061aa:	6800      	ldr	r0, [r0, #0]
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	f380 8808 	msr	MSP, r0
 80061b2:	b662      	cpsie	i
 80061b4:	b661      	cpsie	f
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	df00      	svc	0
 80061c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061c2:	bf00      	nop
 80061c4:	e000ed08 	.word	0xe000ed08

080061c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061ce:	4b32      	ldr	r3, [pc, #200]	@ (8006298 <xPortStartScheduler+0xd0>)
 80061d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	@ 0xff
 80061de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	4b2a      	ldr	r3, [pc, #168]	@ (800629c <xPortStartScheduler+0xd4>)
 80061f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061f6:	4b2a      	ldr	r3, [pc, #168]	@ (80062a0 <xPortStartScheduler+0xd8>)
 80061f8:	2207      	movs	r2, #7
 80061fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061fc:	e009      	b.n	8006212 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80061fe:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <xPortStartScheduler+0xd8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3b01      	subs	r3, #1
 8006204:	4a26      	ldr	r2, [pc, #152]	@ (80062a0 <xPortStartScheduler+0xd8>)
 8006206:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	b2db      	uxtb	r3, r3
 8006210:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621a:	2b80      	cmp	r3, #128	@ 0x80
 800621c:	d0ef      	beq.n	80061fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800621e:	4b20      	ldr	r3, [pc, #128]	@ (80062a0 <xPortStartScheduler+0xd8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1c3 0307 	rsb	r3, r3, #7
 8006226:	2b04      	cmp	r3, #4
 8006228:	d00b      	beq.n	8006242 <xPortStartScheduler+0x7a>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60bb      	str	r3, [r7, #8]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006242:	4b17      	ldr	r3, [pc, #92]	@ (80062a0 <xPortStartScheduler+0xd8>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	4a15      	ldr	r2, [pc, #84]	@ (80062a0 <xPortStartScheduler+0xd8>)
 800624a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800624c:	4b14      	ldr	r3, [pc, #80]	@ (80062a0 <xPortStartScheduler+0xd8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006254:	4a12      	ldr	r2, [pc, #72]	@ (80062a0 <xPortStartScheduler+0xd8>)
 8006256:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006260:	4b10      	ldr	r3, [pc, #64]	@ (80062a4 <xPortStartScheduler+0xdc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0f      	ldr	r2, [pc, #60]	@ (80062a4 <xPortStartScheduler+0xdc>)
 8006266:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800626a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800626c:	4b0d      	ldr	r3, [pc, #52]	@ (80062a4 <xPortStartScheduler+0xdc>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0c      	ldr	r2, [pc, #48]	@ (80062a4 <xPortStartScheduler+0xdc>)
 8006272:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006276:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006278:	f000 f8b8 	bl	80063ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800627c:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <xPortStartScheduler+0xe0>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006282:	f7ff ff91 	bl	80061a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006286:	f7ff faad 	bl	80057e4 <vTaskSwitchContext>
	prvTaskExitError();
 800628a:	f7ff ff4b 	bl	8006124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	e000e400 	.word	0xe000e400
 800629c:	200009e0 	.word	0x200009e0
 80062a0:	200009e4 	.word	0x200009e4
 80062a4:	e000ed20 	.word	0xe000ed20
 80062a8:	2000001c 	.word	0x2000001c

080062ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	607b      	str	r3, [r7, #4]
}
 80062c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006304 <vPortEnterCritical+0x58>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3301      	adds	r3, #1
 80062cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006304 <vPortEnterCritical+0x58>)
 80062ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <vPortEnterCritical+0x58>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d110      	bne.n	80062fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006308 <vPortEnterCritical+0x5c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <vPortEnterCritical+0x4e>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	603b      	str	r3, [r7, #0]
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	e7fd      	b.n	80062f6 <vPortEnterCritical+0x4a>
	}
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr
 8006304:	2000001c 	.word	0x2000001c
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006312:	4b12      	ldr	r3, [pc, #72]	@ (800635c <vPortExitCritical+0x50>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10b      	bne.n	8006332 <vPortExitCritical+0x26>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	607b      	str	r3, [r7, #4]
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	e7fd      	b.n	800632e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <vPortExitCritical+0x50>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3b01      	subs	r3, #1
 8006338:	4a08      	ldr	r2, [pc, #32]	@ (800635c <vPortExitCritical+0x50>)
 800633a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800633c:	4b07      	ldr	r3, [pc, #28]	@ (800635c <vPortExitCritical+0x50>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <vPortExitCritical+0x44>
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800634e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	2000001c 	.word	0x2000001c

08006360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006360:	f3ef 8009 	mrs	r0, PSP
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <pxCurrentTCBConst>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006370:	6010      	str	r0, [r2, #0]
 8006372:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006376:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800637a:	f380 8811 	msr	BASEPRI, r0
 800637e:	f7ff fa31 	bl	80057e4 <vTaskSwitchContext>
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8811 	msr	BASEPRI, r0
 800638a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800638e:	6819      	ldr	r1, [r3, #0]
 8006390:	6808      	ldr	r0, [r1, #0]
 8006392:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006396:	f380 8809 	msr	PSP, r0
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	4770      	bx	lr

080063a0 <pxCurrentTCBConst>:
 80063a0:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop

080063a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063c2:	f7ff f955 	bl	8005670 <xTaskIncrementTick>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063cc:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <SysTick_Handler+0x40>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f383 8811 	msr	BASEPRI, r3
}
 80063de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	e000ed04 	.word	0xe000ed04

080063ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063f0:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <vPortSetupTimerInterrupt+0x30>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006420 <vPortSetupTimerInterrupt+0x34>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063fc:	4b09      	ldr	r3, [pc, #36]	@ (8006424 <vPortSetupTimerInterrupt+0x38>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a09      	ldr	r2, [pc, #36]	@ (8006428 <vPortSetupTimerInterrupt+0x3c>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	4a08      	ldr	r2, [pc, #32]	@ (800642c <vPortSetupTimerInterrupt+0x40>)
 800640a:	3b01      	subs	r3, #1
 800640c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800640e:	4b03      	ldr	r3, [pc, #12]	@ (800641c <vPortSetupTimerInterrupt+0x30>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	e000e010 	.word	0xe000e010
 8006420:	e000e018 	.word	0xe000e018
 8006424:	20000010 	.word	0x20000010
 8006428:	10624dd3 	.word	0x10624dd3
 800642c:	e000e014 	.word	0xe000e014

08006430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800643c:	f7ff f86c 	bl	8005518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006440:	4b5c      	ldr	r3, [pc, #368]	@ (80065b4 <pvPortMalloc+0x184>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006448:	f000 f924 	bl	8006694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800644c:	4b5a      	ldr	r3, [pc, #360]	@ (80065b8 <pvPortMalloc+0x188>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 8095 	bne.w	8006584 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01e      	beq.n	800649e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006460:	2208      	movs	r2, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b00      	cmp	r3, #0
 8006470:	d015      	beq.n	800649e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f023 0307 	bic.w	r3, r3, #7
 8006478:	3308      	adds	r3, #8
 800647a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00b      	beq.n	800649e <pvPortMalloc+0x6e>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	617b      	str	r3, [r7, #20]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d06f      	beq.n	8006584 <pvPortMalloc+0x154>
 80064a4:	4b45      	ldr	r3, [pc, #276]	@ (80065bc <pvPortMalloc+0x18c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d86a      	bhi.n	8006584 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ae:	4b44      	ldr	r3, [pc, #272]	@ (80065c0 <pvPortMalloc+0x190>)
 80064b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064b2:	4b43      	ldr	r3, [pc, #268]	@ (80065c0 <pvPortMalloc+0x190>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064b8:	e004      	b.n	80064c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d903      	bls.n	80064d6 <pvPortMalloc+0xa6>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f1      	bne.n	80064ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064d6:	4b37      	ldr	r3, [pc, #220]	@ (80065b4 <pvPortMalloc+0x184>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064dc:	429a      	cmp	r2, r3
 80064de:	d051      	beq.n	8006584 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2208      	movs	r2, #8
 80064e6:	4413      	add	r3, r2
 80064e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	1ad2      	subs	r2, r2, r3
 80064fa:	2308      	movs	r3, #8
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	429a      	cmp	r2, r3
 8006500:	d920      	bls.n	8006544 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <pvPortMalloc+0xfc>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	613b      	str	r3, [r7, #16]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800653e:	69b8      	ldr	r0, [r7, #24]
 8006540:	f000 f90a 	bl	8006758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006544:	4b1d      	ldr	r3, [pc, #116]	@ (80065bc <pvPortMalloc+0x18c>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	4a1b      	ldr	r2, [pc, #108]	@ (80065bc <pvPortMalloc+0x18c>)
 8006550:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006552:	4b1a      	ldr	r3, [pc, #104]	@ (80065bc <pvPortMalloc+0x18c>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b1b      	ldr	r3, [pc, #108]	@ (80065c4 <pvPortMalloc+0x194>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d203      	bcs.n	8006566 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800655e:	4b17      	ldr	r3, [pc, #92]	@ (80065bc <pvPortMalloc+0x18c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a18      	ldr	r2, [pc, #96]	@ (80065c4 <pvPortMalloc+0x194>)
 8006564:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	4b13      	ldr	r3, [pc, #76]	@ (80065b8 <pvPortMalloc+0x188>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	431a      	orrs	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800657a:	4b13      	ldr	r3, [pc, #76]	@ (80065c8 <pvPortMalloc+0x198>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	4a11      	ldr	r2, [pc, #68]	@ (80065c8 <pvPortMalloc+0x198>)
 8006582:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006584:	f7fe ffd6 	bl	8005534 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <pvPortMalloc+0x17a>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	60fb      	str	r3, [r7, #12]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <pvPortMalloc+0x176>
	return pvReturn;
 80065aa:	69fb      	ldr	r3, [r7, #28]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3728      	adds	r7, #40	@ 0x28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	200015f0 	.word	0x200015f0
 80065b8:	20001604 	.word	0x20001604
 80065bc:	200015f4 	.word	0x200015f4
 80065c0:	200015e8 	.word	0x200015e8
 80065c4:	200015f8 	.word	0x200015f8
 80065c8:	200015fc 	.word	0x200015fc

080065cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d04f      	beq.n	800667e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065de:	2308      	movs	r3, #8
 80065e0:	425b      	negs	r3, r3
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	4b25      	ldr	r3, [pc, #148]	@ (8006688 <vPortFree+0xbc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <vPortFree+0x46>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	60fb      	str	r3, [r7, #12]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <vPortFree+0x66>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60bb      	str	r3, [r7, #8]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b14      	ldr	r3, [pc, #80]	@ (8006688 <vPortFree+0xbc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11a      	bne.n	800667e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <vPortFree+0xbc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006658:	f7fe ff5e 	bl	8005518 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4b0a      	ldr	r3, [pc, #40]	@ (800668c <vPortFree+0xc0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4413      	add	r3, r2
 8006666:	4a09      	ldr	r2, [pc, #36]	@ (800668c <vPortFree+0xc0>)
 8006668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f000 f874 	bl	8006758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <vPortFree+0xc4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a06      	ldr	r2, [pc, #24]	@ (8006690 <vPortFree+0xc4>)
 8006678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800667a:	f7fe ff5b 	bl	8005534 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20001604 	.word	0x20001604
 800668c:	200015f4 	.word	0x200015f4
 8006690:	20001600 	.word	0x20001600

08006694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800669a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800669e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066a0:	4b27      	ldr	r3, [pc, #156]	@ (8006740 <prvHeapInit+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006740 <prvHeapInit+0xac>)
 80066c4:	4413      	add	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006744 <prvHeapInit+0xb0>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <prvHeapInit+0xb0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066e0:	2208      	movs	r2, #8
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a15      	ldr	r2, [pc, #84]	@ (8006748 <prvHeapInit+0xb4>)
 80066f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066f6:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <prvHeapInit+0xb4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066fe:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <prvHeapInit+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006714:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <prvHeapInit+0xb4>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a0a      	ldr	r2, [pc, #40]	@ (800674c <prvHeapInit+0xb8>)
 8006722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a09      	ldr	r2, [pc, #36]	@ (8006750 <prvHeapInit+0xbc>)
 800672a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800672c:	4b09      	ldr	r3, [pc, #36]	@ (8006754 <prvHeapInit+0xc0>)
 800672e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006732:	601a      	str	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	200009e8 	.word	0x200009e8
 8006744:	200015e8 	.word	0x200015e8
 8006748:	200015f0 	.word	0x200015f0
 800674c:	200015f8 	.word	0x200015f8
 8006750:	200015f4 	.word	0x200015f4
 8006754:	20001604 	.word	0x20001604

08006758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006760:	4b27      	ldr	r3, [pc, #156]	@ (8006800 <prvInsertBlockIntoFreeList+0xa8>)
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e002      	b.n	800676c <prvInsertBlockIntoFreeList+0x14>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	429a      	cmp	r2, r3
 8006774:	d8f7      	bhi.n	8006766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d108      	bne.n	800679a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d118      	bne.n	80067e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b14      	ldr	r3, [pc, #80]	@ (8006804 <prvInsertBlockIntoFreeList+0xac>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d00d      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	441a      	add	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e008      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <prvInsertBlockIntoFreeList+0xac>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e003      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d002      	beq.n	80067f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	200015e8 	.word	0x200015e8
 8006804:	200015f0 	.word	0x200015f0

08006808 <siprintf>:
 8006808:	b40e      	push	{r1, r2, r3}
 800680a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800680e:	b510      	push	{r4, lr}
 8006810:	2400      	movs	r4, #0
 8006812:	b09d      	sub	sp, #116	@ 0x74
 8006814:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006816:	9002      	str	r0, [sp, #8]
 8006818:	9006      	str	r0, [sp, #24]
 800681a:	9107      	str	r1, [sp, #28]
 800681c:	9104      	str	r1, [sp, #16]
 800681e:	4809      	ldr	r0, [pc, #36]	@ (8006844 <siprintf+0x3c>)
 8006820:	4909      	ldr	r1, [pc, #36]	@ (8006848 <siprintf+0x40>)
 8006822:	f853 2b04 	ldr.w	r2, [r3], #4
 8006826:	9105      	str	r1, [sp, #20]
 8006828:	6800      	ldr	r0, [r0, #0]
 800682a:	a902      	add	r1, sp, #8
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006830:	f000 f9fe 	bl	8006c30 <_svfiprintf_r>
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	701c      	strb	r4, [r3, #0]
 8006838:	b01d      	add	sp, #116	@ 0x74
 800683a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683e:	b003      	add	sp, #12
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000020 	.word	0x20000020
 8006848:	ffff0208 	.word	0xffff0208

0800684c <memset>:
 800684c:	4603      	mov	r3, r0
 800684e:	4402      	add	r2, r0
 8006850:	4293      	cmp	r3, r2
 8006852:	d100      	bne.n	8006856 <memset+0xa>
 8006854:	4770      	bx	lr
 8006856:	f803 1b01 	strb.w	r1, [r3], #1
 800685a:	e7f9      	b.n	8006850 <memset+0x4>

0800685c <_reclaim_reent>:
 800685c:	4b2d      	ldr	r3, [pc, #180]	@ (8006914 <_reclaim_reent+0xb8>)
 800685e:	b570      	push	{r4, r5, r6, lr}
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4604      	mov	r4, r0
 8006864:	4283      	cmp	r3, r0
 8006866:	d053      	beq.n	8006910 <_reclaim_reent+0xb4>
 8006868:	69c3      	ldr	r3, [r0, #28]
 800686a:	b31b      	cbz	r3, 80068b4 <_reclaim_reent+0x58>
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	b163      	cbz	r3, 800688a <_reclaim_reent+0x2e>
 8006870:	2500      	movs	r5, #0
 8006872:	69e3      	ldr	r3, [r4, #28]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	5959      	ldr	r1, [r3, r5]
 8006878:	b9b1      	cbnz	r1, 80068a8 <_reclaim_reent+0x4c>
 800687a:	3504      	adds	r5, #4
 800687c:	2d80      	cmp	r5, #128	@ 0x80
 800687e:	d1f8      	bne.n	8006872 <_reclaim_reent+0x16>
 8006880:	69e3      	ldr	r3, [r4, #28]
 8006882:	4620      	mov	r0, r4
 8006884:	68d9      	ldr	r1, [r3, #12]
 8006886:	f000 f881 	bl	800698c <_free_r>
 800688a:	69e3      	ldr	r3, [r4, #28]
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	b111      	cbz	r1, 8006896 <_reclaim_reent+0x3a>
 8006890:	4620      	mov	r0, r4
 8006892:	f000 f87b 	bl	800698c <_free_r>
 8006896:	69e3      	ldr	r3, [r4, #28]
 8006898:	689d      	ldr	r5, [r3, #8]
 800689a:	b15d      	cbz	r5, 80068b4 <_reclaim_reent+0x58>
 800689c:	4629      	mov	r1, r5
 800689e:	4620      	mov	r0, r4
 80068a0:	682d      	ldr	r5, [r5, #0]
 80068a2:	f000 f873 	bl	800698c <_free_r>
 80068a6:	e7f8      	b.n	800689a <_reclaim_reent+0x3e>
 80068a8:	680e      	ldr	r6, [r1, #0]
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f86e 	bl	800698c <_free_r>
 80068b0:	4631      	mov	r1, r6
 80068b2:	e7e1      	b.n	8006878 <_reclaim_reent+0x1c>
 80068b4:	6961      	ldr	r1, [r4, #20]
 80068b6:	b111      	cbz	r1, 80068be <_reclaim_reent+0x62>
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 f867 	bl	800698c <_free_r>
 80068be:	69e1      	ldr	r1, [r4, #28]
 80068c0:	b111      	cbz	r1, 80068c8 <_reclaim_reent+0x6c>
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 f862 	bl	800698c <_free_r>
 80068c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80068ca:	b111      	cbz	r1, 80068d2 <_reclaim_reent+0x76>
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 f85d 	bl	800698c <_free_r>
 80068d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068d4:	b111      	cbz	r1, 80068dc <_reclaim_reent+0x80>
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 f858 	bl	800698c <_free_r>
 80068dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80068de:	b111      	cbz	r1, 80068e6 <_reclaim_reent+0x8a>
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 f853 	bl	800698c <_free_r>
 80068e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80068e8:	b111      	cbz	r1, 80068f0 <_reclaim_reent+0x94>
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 f84e 	bl	800698c <_free_r>
 80068f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80068f2:	b111      	cbz	r1, 80068fa <_reclaim_reent+0x9e>
 80068f4:	4620      	mov	r0, r4
 80068f6:	f000 f849 	bl	800698c <_free_r>
 80068fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80068fc:	b111      	cbz	r1, 8006904 <_reclaim_reent+0xa8>
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f844 	bl	800698c <_free_r>
 8006904:	6a23      	ldr	r3, [r4, #32]
 8006906:	b11b      	cbz	r3, 8006910 <_reclaim_reent+0xb4>
 8006908:	4620      	mov	r0, r4
 800690a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800690e:	4718      	bx	r3
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	bf00      	nop
 8006914:	20000020 	.word	0x20000020

08006918 <__errno>:
 8006918:	4b01      	ldr	r3, [pc, #4]	@ (8006920 <__errno+0x8>)
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000020 	.word	0x20000020

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	2600      	movs	r6, #0
 8006928:	4d0c      	ldr	r5, [pc, #48]	@ (800695c <__libc_init_array+0x38>)
 800692a:	4c0d      	ldr	r4, [pc, #52]	@ (8006960 <__libc_init_array+0x3c>)
 800692c:	1b64      	subs	r4, r4, r5
 800692e:	10a4      	asrs	r4, r4, #2
 8006930:	42a6      	cmp	r6, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	f000 fc76 	bl	8007224 <_init>
 8006938:	2600      	movs	r6, #0
 800693a:	4d0a      	ldr	r5, [pc, #40]	@ (8006964 <__libc_init_array+0x40>)
 800693c:	4c0a      	ldr	r4, [pc, #40]	@ (8006968 <__libc_init_array+0x44>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	42a6      	cmp	r6, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f855 3b04 	ldr.w	r3, [r5], #4
 800694c:	4798      	blx	r3
 800694e:	3601      	adds	r6, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f855 3b04 	ldr.w	r3, [r5], #4
 8006956:	4798      	blx	r3
 8006958:	3601      	adds	r6, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	08008068 	.word	0x08008068
 8006960:	08008068 	.word	0x08008068
 8006964:	08008068 	.word	0x08008068
 8006968:	0800806c 	.word	0x0800806c

0800696c <__retarget_lock_acquire_recursive>:
 800696c:	4770      	bx	lr

0800696e <__retarget_lock_release_recursive>:
 800696e:	4770      	bx	lr

08006970 <memcpy>:
 8006970:	440a      	add	r2, r1
 8006972:	4291      	cmp	r1, r2
 8006974:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006978:	d100      	bne.n	800697c <memcpy+0xc>
 800697a:	4770      	bx	lr
 800697c:	b510      	push	{r4, lr}
 800697e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006982:	4291      	cmp	r1, r2
 8006984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006988:	d1f9      	bne.n	800697e <memcpy+0xe>
 800698a:	bd10      	pop	{r4, pc}

0800698c <_free_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4605      	mov	r5, r0
 8006990:	2900      	cmp	r1, #0
 8006992:	d040      	beq.n	8006a16 <_free_r+0x8a>
 8006994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006998:	1f0c      	subs	r4, r1, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfb8      	it	lt
 800699e:	18e4      	addlt	r4, r4, r3
 80069a0:	f000 f8de 	bl	8006b60 <__malloc_lock>
 80069a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a18 <_free_r+0x8c>)
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	b933      	cbnz	r3, 80069b8 <_free_r+0x2c>
 80069aa:	6063      	str	r3, [r4, #4]
 80069ac:	6014      	str	r4, [r2, #0]
 80069ae:	4628      	mov	r0, r5
 80069b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b4:	f000 b8da 	b.w	8006b6c <__malloc_unlock>
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	d908      	bls.n	80069ce <_free_r+0x42>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	1821      	adds	r1, r4, r0
 80069c0:	428b      	cmp	r3, r1
 80069c2:	bf01      	itttt	eq
 80069c4:	6819      	ldreq	r1, [r3, #0]
 80069c6:	685b      	ldreq	r3, [r3, #4]
 80069c8:	1809      	addeq	r1, r1, r0
 80069ca:	6021      	streq	r1, [r4, #0]
 80069cc:	e7ed      	b.n	80069aa <_free_r+0x1e>
 80069ce:	461a      	mov	r2, r3
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	b10b      	cbz	r3, 80069d8 <_free_r+0x4c>
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	d9fa      	bls.n	80069ce <_free_r+0x42>
 80069d8:	6811      	ldr	r1, [r2, #0]
 80069da:	1850      	adds	r0, r2, r1
 80069dc:	42a0      	cmp	r0, r4
 80069de:	d10b      	bne.n	80069f8 <_free_r+0x6c>
 80069e0:	6820      	ldr	r0, [r4, #0]
 80069e2:	4401      	add	r1, r0
 80069e4:	1850      	adds	r0, r2, r1
 80069e6:	4283      	cmp	r3, r0
 80069e8:	6011      	str	r1, [r2, #0]
 80069ea:	d1e0      	bne.n	80069ae <_free_r+0x22>
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4408      	add	r0, r1
 80069f2:	6010      	str	r0, [r2, #0]
 80069f4:	6053      	str	r3, [r2, #4]
 80069f6:	e7da      	b.n	80069ae <_free_r+0x22>
 80069f8:	d902      	bls.n	8006a00 <_free_r+0x74>
 80069fa:	230c      	movs	r3, #12
 80069fc:	602b      	str	r3, [r5, #0]
 80069fe:	e7d6      	b.n	80069ae <_free_r+0x22>
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	1821      	adds	r1, r4, r0
 8006a04:	428b      	cmp	r3, r1
 8006a06:	bf01      	itttt	eq
 8006a08:	6819      	ldreq	r1, [r3, #0]
 8006a0a:	685b      	ldreq	r3, [r3, #4]
 8006a0c:	1809      	addeq	r1, r1, r0
 8006a0e:	6021      	streq	r1, [r4, #0]
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	6054      	str	r4, [r2, #4]
 8006a14:	e7cb      	b.n	80069ae <_free_r+0x22>
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	2000174c 	.word	0x2000174c

08006a1c <sbrk_aligned>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a5c <sbrk_aligned+0x40>)
 8006a20:	460c      	mov	r4, r1
 8006a22:	6831      	ldr	r1, [r6, #0]
 8006a24:	4605      	mov	r5, r0
 8006a26:	b911      	cbnz	r1, 8006a2e <sbrk_aligned+0x12>
 8006a28:	f000 fba8 	bl	800717c <_sbrk_r>
 8006a2c:	6030      	str	r0, [r6, #0]
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4628      	mov	r0, r5
 8006a32:	f000 fba3 	bl	800717c <_sbrk_r>
 8006a36:	1c43      	adds	r3, r0, #1
 8006a38:	d103      	bne.n	8006a42 <sbrk_aligned+0x26>
 8006a3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a3e:	4620      	mov	r0, r4
 8006a40:	bd70      	pop	{r4, r5, r6, pc}
 8006a42:	1cc4      	adds	r4, r0, #3
 8006a44:	f024 0403 	bic.w	r4, r4, #3
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d0f8      	beq.n	8006a3e <sbrk_aligned+0x22>
 8006a4c:	1a21      	subs	r1, r4, r0
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 fb94 	bl	800717c <_sbrk_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d1f2      	bne.n	8006a3e <sbrk_aligned+0x22>
 8006a58:	e7ef      	b.n	8006a3a <sbrk_aligned+0x1e>
 8006a5a:	bf00      	nop
 8006a5c:	20001748 	.word	0x20001748

08006a60 <_malloc_r>:
 8006a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a64:	1ccd      	adds	r5, r1, #3
 8006a66:	f025 0503 	bic.w	r5, r5, #3
 8006a6a:	3508      	adds	r5, #8
 8006a6c:	2d0c      	cmp	r5, #12
 8006a6e:	bf38      	it	cc
 8006a70:	250c      	movcc	r5, #12
 8006a72:	2d00      	cmp	r5, #0
 8006a74:	4606      	mov	r6, r0
 8006a76:	db01      	blt.n	8006a7c <_malloc_r+0x1c>
 8006a78:	42a9      	cmp	r1, r5
 8006a7a:	d904      	bls.n	8006a86 <_malloc_r+0x26>
 8006a7c:	230c      	movs	r3, #12
 8006a7e:	6033      	str	r3, [r6, #0]
 8006a80:	2000      	movs	r0, #0
 8006a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b5c <_malloc_r+0xfc>
 8006a8a:	f000 f869 	bl	8006b60 <__malloc_lock>
 8006a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a92:	461c      	mov	r4, r3
 8006a94:	bb44      	cbnz	r4, 8006ae8 <_malloc_r+0x88>
 8006a96:	4629      	mov	r1, r5
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7ff ffbf 	bl	8006a1c <sbrk_aligned>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	d158      	bne.n	8006b56 <_malloc_r+0xf6>
 8006aa4:	f8d8 4000 	ldr.w	r4, [r8]
 8006aa8:	4627      	mov	r7, r4
 8006aaa:	2f00      	cmp	r7, #0
 8006aac:	d143      	bne.n	8006b36 <_malloc_r+0xd6>
 8006aae:	2c00      	cmp	r4, #0
 8006ab0:	d04b      	beq.n	8006b4a <_malloc_r+0xea>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	eb04 0903 	add.w	r9, r4, r3
 8006abc:	f000 fb5e 	bl	800717c <_sbrk_r>
 8006ac0:	4581      	cmp	r9, r0
 8006ac2:	d142      	bne.n	8006b4a <_malloc_r+0xea>
 8006ac4:	6821      	ldr	r1, [r4, #0]
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	1a6d      	subs	r5, r5, r1
 8006aca:	4629      	mov	r1, r5
 8006acc:	f7ff ffa6 	bl	8006a1c <sbrk_aligned>
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d03a      	beq.n	8006b4a <_malloc_r+0xea>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	442b      	add	r3, r5
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	f8d8 3000 	ldr.w	r3, [r8]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	bb62      	cbnz	r2, 8006b3c <_malloc_r+0xdc>
 8006ae2:	f8c8 7000 	str.w	r7, [r8]
 8006ae6:	e00f      	b.n	8006b08 <_malloc_r+0xa8>
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	1b52      	subs	r2, r2, r5
 8006aec:	d420      	bmi.n	8006b30 <_malloc_r+0xd0>
 8006aee:	2a0b      	cmp	r2, #11
 8006af0:	d917      	bls.n	8006b22 <_malloc_r+0xc2>
 8006af2:	1961      	adds	r1, r4, r5
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	6025      	str	r5, [r4, #0]
 8006af8:	bf18      	it	ne
 8006afa:	6059      	strne	r1, [r3, #4]
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	bf08      	it	eq
 8006b00:	f8c8 1000 	streq.w	r1, [r8]
 8006b04:	5162      	str	r2, [r4, r5]
 8006b06:	604b      	str	r3, [r1, #4]
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 f82f 	bl	8006b6c <__malloc_unlock>
 8006b0e:	f104 000b 	add.w	r0, r4, #11
 8006b12:	1d23      	adds	r3, r4, #4
 8006b14:	f020 0007 	bic.w	r0, r0, #7
 8006b18:	1ac2      	subs	r2, r0, r3
 8006b1a:	bf1c      	itt	ne
 8006b1c:	1a1b      	subne	r3, r3, r0
 8006b1e:	50a3      	strne	r3, [r4, r2]
 8006b20:	e7af      	b.n	8006a82 <_malloc_r+0x22>
 8006b22:	6862      	ldr	r2, [r4, #4]
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	bf0c      	ite	eq
 8006b28:	f8c8 2000 	streq.w	r2, [r8]
 8006b2c:	605a      	strne	r2, [r3, #4]
 8006b2e:	e7eb      	b.n	8006b08 <_malloc_r+0xa8>
 8006b30:	4623      	mov	r3, r4
 8006b32:	6864      	ldr	r4, [r4, #4]
 8006b34:	e7ae      	b.n	8006a94 <_malloc_r+0x34>
 8006b36:	463c      	mov	r4, r7
 8006b38:	687f      	ldr	r7, [r7, #4]
 8006b3a:	e7b6      	b.n	8006aaa <_malloc_r+0x4a>
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	d1fb      	bne.n	8006b3c <_malloc_r+0xdc>
 8006b44:	2300      	movs	r3, #0
 8006b46:	6053      	str	r3, [r2, #4]
 8006b48:	e7de      	b.n	8006b08 <_malloc_r+0xa8>
 8006b4a:	230c      	movs	r3, #12
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	6033      	str	r3, [r6, #0]
 8006b50:	f000 f80c 	bl	8006b6c <__malloc_unlock>
 8006b54:	e794      	b.n	8006a80 <_malloc_r+0x20>
 8006b56:	6005      	str	r5, [r0, #0]
 8006b58:	e7d6      	b.n	8006b08 <_malloc_r+0xa8>
 8006b5a:	bf00      	nop
 8006b5c:	2000174c 	.word	0x2000174c

08006b60 <__malloc_lock>:
 8006b60:	4801      	ldr	r0, [pc, #4]	@ (8006b68 <__malloc_lock+0x8>)
 8006b62:	f7ff bf03 	b.w	800696c <__retarget_lock_acquire_recursive>
 8006b66:	bf00      	nop
 8006b68:	20001744 	.word	0x20001744

08006b6c <__malloc_unlock>:
 8006b6c:	4801      	ldr	r0, [pc, #4]	@ (8006b74 <__malloc_unlock+0x8>)
 8006b6e:	f7ff befe 	b.w	800696e <__retarget_lock_release_recursive>
 8006b72:	bf00      	nop
 8006b74:	20001744 	.word	0x20001744

08006b78 <__ssputs_r>:
 8006b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b7c:	461f      	mov	r7, r3
 8006b7e:	688e      	ldr	r6, [r1, #8]
 8006b80:	4682      	mov	sl, r0
 8006b82:	42be      	cmp	r6, r7
 8006b84:	460c      	mov	r4, r1
 8006b86:	4690      	mov	r8, r2
 8006b88:	680b      	ldr	r3, [r1, #0]
 8006b8a:	d82d      	bhi.n	8006be8 <__ssputs_r+0x70>
 8006b8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b94:	d026      	beq.n	8006be4 <__ssputs_r+0x6c>
 8006b96:	6965      	ldr	r5, [r4, #20]
 8006b98:	6909      	ldr	r1, [r1, #16]
 8006b9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b9e:	eba3 0901 	sub.w	r9, r3, r1
 8006ba2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ba6:	1c7b      	adds	r3, r7, #1
 8006ba8:	444b      	add	r3, r9
 8006baa:	106d      	asrs	r5, r5, #1
 8006bac:	429d      	cmp	r5, r3
 8006bae:	bf38      	it	cc
 8006bb0:	461d      	movcc	r5, r3
 8006bb2:	0553      	lsls	r3, r2, #21
 8006bb4:	d527      	bpl.n	8006c06 <__ssputs_r+0x8e>
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	f7ff ff52 	bl	8006a60 <_malloc_r>
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	b360      	cbz	r0, 8006c1a <__ssputs_r+0xa2>
 8006bc0:	464a      	mov	r2, r9
 8006bc2:	6921      	ldr	r1, [r4, #16]
 8006bc4:	f7ff fed4 	bl	8006970 <memcpy>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	6126      	str	r6, [r4, #16]
 8006bd6:	444e      	add	r6, r9
 8006bd8:	6026      	str	r6, [r4, #0]
 8006bda:	463e      	mov	r6, r7
 8006bdc:	6165      	str	r5, [r4, #20]
 8006bde:	eba5 0509 	sub.w	r5, r5, r9
 8006be2:	60a5      	str	r5, [r4, #8]
 8006be4:	42be      	cmp	r6, r7
 8006be6:	d900      	bls.n	8006bea <__ssputs_r+0x72>
 8006be8:	463e      	mov	r6, r7
 8006bea:	4632      	mov	r2, r6
 8006bec:	4641      	mov	r1, r8
 8006bee:	6820      	ldr	r0, [r4, #0]
 8006bf0:	f000 faaa 	bl	8007148 <memmove>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	68a3      	ldr	r3, [r4, #8]
 8006bf8:	1b9b      	subs	r3, r3, r6
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	4433      	add	r3, r6
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c06:	462a      	mov	r2, r5
 8006c08:	f000 fad6 	bl	80071b8 <_realloc_r>
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d1e0      	bne.n	8006bd4 <__ssputs_r+0x5c>
 8006c12:	4650      	mov	r0, sl
 8006c14:	6921      	ldr	r1, [r4, #16]
 8006c16:	f7ff feb9 	bl	800698c <_free_r>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	f8ca 3000 	str.w	r3, [sl]
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	e7e9      	b.n	8006c02 <__ssputs_r+0x8a>
	...

08006c30 <_svfiprintf_r>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	4698      	mov	r8, r3
 8006c36:	898b      	ldrh	r3, [r1, #12]
 8006c38:	4607      	mov	r7, r0
 8006c3a:	061b      	lsls	r3, r3, #24
 8006c3c:	460d      	mov	r5, r1
 8006c3e:	4614      	mov	r4, r2
 8006c40:	b09d      	sub	sp, #116	@ 0x74
 8006c42:	d510      	bpl.n	8006c66 <_svfiprintf_r+0x36>
 8006c44:	690b      	ldr	r3, [r1, #16]
 8006c46:	b973      	cbnz	r3, 8006c66 <_svfiprintf_r+0x36>
 8006c48:	2140      	movs	r1, #64	@ 0x40
 8006c4a:	f7ff ff09 	bl	8006a60 <_malloc_r>
 8006c4e:	6028      	str	r0, [r5, #0]
 8006c50:	6128      	str	r0, [r5, #16]
 8006c52:	b930      	cbnz	r0, 8006c62 <_svfiprintf_r+0x32>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c5c:	b01d      	add	sp, #116	@ 0x74
 8006c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c62:	2340      	movs	r3, #64	@ 0x40
 8006c64:	616b      	str	r3, [r5, #20]
 8006c66:	2300      	movs	r3, #0
 8006c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c6a:	2320      	movs	r3, #32
 8006c6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c70:	2330      	movs	r3, #48	@ 0x30
 8006c72:	f04f 0901 	mov.w	r9, #1
 8006c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e14 <_svfiprintf_r+0x1e4>
 8006c7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c82:	4623      	mov	r3, r4
 8006c84:	469a      	mov	sl, r3
 8006c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c8a:	b10a      	cbz	r2, 8006c90 <_svfiprintf_r+0x60>
 8006c8c:	2a25      	cmp	r2, #37	@ 0x25
 8006c8e:	d1f9      	bne.n	8006c84 <_svfiprintf_r+0x54>
 8006c90:	ebba 0b04 	subs.w	fp, sl, r4
 8006c94:	d00b      	beq.n	8006cae <_svfiprintf_r+0x7e>
 8006c96:	465b      	mov	r3, fp
 8006c98:	4622      	mov	r2, r4
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f7ff ff6b 	bl	8006b78 <__ssputs_r>
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f000 80a7 	beq.w	8006df6 <_svfiprintf_r+0x1c6>
 8006ca8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006caa:	445a      	add	r2, fp
 8006cac:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cae:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 809f 	beq.w	8006df6 <_svfiprintf_r+0x1c6>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc2:	f10a 0a01 	add.w	sl, sl, #1
 8006cc6:	9304      	str	r3, [sp, #16]
 8006cc8:	9307      	str	r3, [sp, #28]
 8006cca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cce:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cd0:	4654      	mov	r4, sl
 8006cd2:	2205      	movs	r2, #5
 8006cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd8:	484e      	ldr	r0, [pc, #312]	@ (8006e14 <_svfiprintf_r+0x1e4>)
 8006cda:	f000 fa5f 	bl	800719c <memchr>
 8006cde:	9a04      	ldr	r2, [sp, #16]
 8006ce0:	b9d8      	cbnz	r0, 8006d1a <_svfiprintf_r+0xea>
 8006ce2:	06d0      	lsls	r0, r2, #27
 8006ce4:	bf44      	itt	mi
 8006ce6:	2320      	movmi	r3, #32
 8006ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cec:	0711      	lsls	r1, r2, #28
 8006cee:	bf44      	itt	mi
 8006cf0:	232b      	movmi	r3, #43	@ 0x2b
 8006cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cfc:	d015      	beq.n	8006d2a <_svfiprintf_r+0xfa>
 8006cfe:	4654      	mov	r4, sl
 8006d00:	2000      	movs	r0, #0
 8006d02:	f04f 0c0a 	mov.w	ip, #10
 8006d06:	9a07      	ldr	r2, [sp, #28]
 8006d08:	4621      	mov	r1, r4
 8006d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d0e:	3b30      	subs	r3, #48	@ 0x30
 8006d10:	2b09      	cmp	r3, #9
 8006d12:	d94b      	bls.n	8006dac <_svfiprintf_r+0x17c>
 8006d14:	b1b0      	cbz	r0, 8006d44 <_svfiprintf_r+0x114>
 8006d16:	9207      	str	r2, [sp, #28]
 8006d18:	e014      	b.n	8006d44 <_svfiprintf_r+0x114>
 8006d1a:	eba0 0308 	sub.w	r3, r0, r8
 8006d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d22:	4313      	orrs	r3, r2
 8006d24:	46a2      	mov	sl, r4
 8006d26:	9304      	str	r3, [sp, #16]
 8006d28:	e7d2      	b.n	8006cd0 <_svfiprintf_r+0xa0>
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	1d19      	adds	r1, r3, #4
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	9103      	str	r1, [sp, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bfbb      	ittet	lt
 8006d36:	425b      	neglt	r3, r3
 8006d38:	f042 0202 	orrlt.w	r2, r2, #2
 8006d3c:	9307      	strge	r3, [sp, #28]
 8006d3e:	9307      	strlt	r3, [sp, #28]
 8006d40:	bfb8      	it	lt
 8006d42:	9204      	strlt	r2, [sp, #16]
 8006d44:	7823      	ldrb	r3, [r4, #0]
 8006d46:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d48:	d10a      	bne.n	8006d60 <_svfiprintf_r+0x130>
 8006d4a:	7863      	ldrb	r3, [r4, #1]
 8006d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d4e:	d132      	bne.n	8006db6 <_svfiprintf_r+0x186>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	3402      	adds	r4, #2
 8006d54:	1d1a      	adds	r2, r3, #4
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	9203      	str	r2, [sp, #12]
 8006d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e18 <_svfiprintf_r+0x1e8>
 8006d64:	2203      	movs	r2, #3
 8006d66:	4650      	mov	r0, sl
 8006d68:	7821      	ldrb	r1, [r4, #0]
 8006d6a:	f000 fa17 	bl	800719c <memchr>
 8006d6e:	b138      	cbz	r0, 8006d80 <_svfiprintf_r+0x150>
 8006d70:	2240      	movs	r2, #64	@ 0x40
 8006d72:	9b04      	ldr	r3, [sp, #16]
 8006d74:	eba0 000a 	sub.w	r0, r0, sl
 8006d78:	4082      	lsls	r2, r0
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	3401      	adds	r4, #1
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d84:	2206      	movs	r2, #6
 8006d86:	4825      	ldr	r0, [pc, #148]	@ (8006e1c <_svfiprintf_r+0x1ec>)
 8006d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d8c:	f000 fa06 	bl	800719c <memchr>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d036      	beq.n	8006e02 <_svfiprintf_r+0x1d2>
 8006d94:	4b22      	ldr	r3, [pc, #136]	@ (8006e20 <_svfiprintf_r+0x1f0>)
 8006d96:	bb1b      	cbnz	r3, 8006de0 <_svfiprintf_r+0x1b0>
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	3307      	adds	r3, #7
 8006d9c:	f023 0307 	bic.w	r3, r3, #7
 8006da0:	3308      	adds	r3, #8
 8006da2:	9303      	str	r3, [sp, #12]
 8006da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da6:	4433      	add	r3, r6
 8006da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006daa:	e76a      	b.n	8006c82 <_svfiprintf_r+0x52>
 8006dac:	460c      	mov	r4, r1
 8006dae:	2001      	movs	r0, #1
 8006db0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006db4:	e7a8      	b.n	8006d08 <_svfiprintf_r+0xd8>
 8006db6:	2300      	movs	r3, #0
 8006db8:	f04f 0c0a 	mov.w	ip, #10
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	3401      	adds	r4, #1
 8006dc0:	9305      	str	r3, [sp, #20]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc8:	3a30      	subs	r2, #48	@ 0x30
 8006dca:	2a09      	cmp	r2, #9
 8006dcc:	d903      	bls.n	8006dd6 <_svfiprintf_r+0x1a6>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0c6      	beq.n	8006d60 <_svfiprintf_r+0x130>
 8006dd2:	9105      	str	r1, [sp, #20]
 8006dd4:	e7c4      	b.n	8006d60 <_svfiprintf_r+0x130>
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	2301      	movs	r3, #1
 8006dda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dde:	e7f0      	b.n	8006dc2 <_svfiprintf_r+0x192>
 8006de0:	ab03      	add	r3, sp, #12
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	462a      	mov	r2, r5
 8006de6:	4638      	mov	r0, r7
 8006de8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e24 <_svfiprintf_r+0x1f4>)
 8006dea:	a904      	add	r1, sp, #16
 8006dec:	f3af 8000 	nop.w
 8006df0:	1c42      	adds	r2, r0, #1
 8006df2:	4606      	mov	r6, r0
 8006df4:	d1d6      	bne.n	8006da4 <_svfiprintf_r+0x174>
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	065b      	lsls	r3, r3, #25
 8006dfa:	f53f af2d 	bmi.w	8006c58 <_svfiprintf_r+0x28>
 8006dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e00:	e72c      	b.n	8006c5c <_svfiprintf_r+0x2c>
 8006e02:	ab03      	add	r3, sp, #12
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	462a      	mov	r2, r5
 8006e08:	4638      	mov	r0, r7
 8006e0a:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <_svfiprintf_r+0x1f4>)
 8006e0c:	a904      	add	r1, sp, #16
 8006e0e:	f000 f87d 	bl	8006f0c <_printf_i>
 8006e12:	e7ed      	b.n	8006df0 <_svfiprintf_r+0x1c0>
 8006e14:	08008032 	.word	0x08008032
 8006e18:	08008038 	.word	0x08008038
 8006e1c:	0800803c 	.word	0x0800803c
 8006e20:	00000000 	.word	0x00000000
 8006e24:	08006b79 	.word	0x08006b79

08006e28 <_printf_common>:
 8006e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e2c:	4616      	mov	r6, r2
 8006e2e:	4698      	mov	r8, r3
 8006e30:	688a      	ldr	r2, [r1, #8]
 8006e32:	690b      	ldr	r3, [r1, #16]
 8006e34:	4607      	mov	r7, r0
 8006e36:	4293      	cmp	r3, r2
 8006e38:	bfb8      	it	lt
 8006e3a:	4613      	movlt	r3, r2
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e42:	460c      	mov	r4, r1
 8006e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e48:	b10a      	cbz	r2, 8006e4e <_printf_common+0x26>
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	6033      	str	r3, [r6, #0]
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	0699      	lsls	r1, r3, #26
 8006e52:	bf42      	ittt	mi
 8006e54:	6833      	ldrmi	r3, [r6, #0]
 8006e56:	3302      	addmi	r3, #2
 8006e58:	6033      	strmi	r3, [r6, #0]
 8006e5a:	6825      	ldr	r5, [r4, #0]
 8006e5c:	f015 0506 	ands.w	r5, r5, #6
 8006e60:	d106      	bne.n	8006e70 <_printf_common+0x48>
 8006e62:	f104 0a19 	add.w	sl, r4, #25
 8006e66:	68e3      	ldr	r3, [r4, #12]
 8006e68:	6832      	ldr	r2, [r6, #0]
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	42ab      	cmp	r3, r5
 8006e6e:	dc2b      	bgt.n	8006ec8 <_printf_common+0xa0>
 8006e70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	3b00      	subs	r3, #0
 8006e78:	bf18      	it	ne
 8006e7a:	2301      	movne	r3, #1
 8006e7c:	0692      	lsls	r2, r2, #26
 8006e7e:	d430      	bmi.n	8006ee2 <_printf_common+0xba>
 8006e80:	4641      	mov	r1, r8
 8006e82:	4638      	mov	r0, r7
 8006e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e88:	47c8      	blx	r9
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d023      	beq.n	8006ed6 <_printf_common+0xae>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	6922      	ldr	r2, [r4, #16]
 8006e92:	f003 0306 	and.w	r3, r3, #6
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	bf14      	ite	ne
 8006e9a:	2500      	movne	r5, #0
 8006e9c:	6833      	ldreq	r3, [r6, #0]
 8006e9e:	f04f 0600 	mov.w	r6, #0
 8006ea2:	bf08      	it	eq
 8006ea4:	68e5      	ldreq	r5, [r4, #12]
 8006ea6:	f104 041a 	add.w	r4, r4, #26
 8006eaa:	bf08      	it	eq
 8006eac:	1aed      	subeq	r5, r5, r3
 8006eae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006eb2:	bf08      	it	eq
 8006eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	bfc4      	itt	gt
 8006ebc:	1a9b      	subgt	r3, r3, r2
 8006ebe:	18ed      	addgt	r5, r5, r3
 8006ec0:	42b5      	cmp	r5, r6
 8006ec2:	d11a      	bne.n	8006efa <_printf_common+0xd2>
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e008      	b.n	8006eda <_printf_common+0xb2>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	4652      	mov	r2, sl
 8006ecc:	4641      	mov	r1, r8
 8006ece:	4638      	mov	r0, r7
 8006ed0:	47c8      	blx	r9
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d103      	bne.n	8006ede <_printf_common+0xb6>
 8006ed6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	3501      	adds	r5, #1
 8006ee0:	e7c1      	b.n	8006e66 <_printf_common+0x3e>
 8006ee2:	2030      	movs	r0, #48	@ 0x30
 8006ee4:	18e1      	adds	r1, r4, r3
 8006ee6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ef0:	4422      	add	r2, r4
 8006ef2:	3302      	adds	r3, #2
 8006ef4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ef8:	e7c2      	b.n	8006e80 <_printf_common+0x58>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4622      	mov	r2, r4
 8006efe:	4641      	mov	r1, r8
 8006f00:	4638      	mov	r0, r7
 8006f02:	47c8      	blx	r9
 8006f04:	3001      	adds	r0, #1
 8006f06:	d0e6      	beq.n	8006ed6 <_printf_common+0xae>
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7d9      	b.n	8006ec0 <_printf_common+0x98>

08006f0c <_printf_i>:
 8006f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f10:	7e0f      	ldrb	r7, [r1, #24]
 8006f12:	4691      	mov	r9, r2
 8006f14:	2f78      	cmp	r7, #120	@ 0x78
 8006f16:	4680      	mov	r8, r0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	469a      	mov	sl, r3
 8006f1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f22:	d807      	bhi.n	8006f34 <_printf_i+0x28>
 8006f24:	2f62      	cmp	r7, #98	@ 0x62
 8006f26:	d80a      	bhi.n	8006f3e <_printf_i+0x32>
 8006f28:	2f00      	cmp	r7, #0
 8006f2a:	f000 80d1 	beq.w	80070d0 <_printf_i+0x1c4>
 8006f2e:	2f58      	cmp	r7, #88	@ 0x58
 8006f30:	f000 80b8 	beq.w	80070a4 <_printf_i+0x198>
 8006f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f3c:	e03a      	b.n	8006fb4 <_printf_i+0xa8>
 8006f3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f42:	2b15      	cmp	r3, #21
 8006f44:	d8f6      	bhi.n	8006f34 <_printf_i+0x28>
 8006f46:	a101      	add	r1, pc, #4	@ (adr r1, 8006f4c <_printf_i+0x40>)
 8006f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f4c:	08006fa5 	.word	0x08006fa5
 8006f50:	08006fb9 	.word	0x08006fb9
 8006f54:	08006f35 	.word	0x08006f35
 8006f58:	08006f35 	.word	0x08006f35
 8006f5c:	08006f35 	.word	0x08006f35
 8006f60:	08006f35 	.word	0x08006f35
 8006f64:	08006fb9 	.word	0x08006fb9
 8006f68:	08006f35 	.word	0x08006f35
 8006f6c:	08006f35 	.word	0x08006f35
 8006f70:	08006f35 	.word	0x08006f35
 8006f74:	08006f35 	.word	0x08006f35
 8006f78:	080070b7 	.word	0x080070b7
 8006f7c:	08006fe3 	.word	0x08006fe3
 8006f80:	08007071 	.word	0x08007071
 8006f84:	08006f35 	.word	0x08006f35
 8006f88:	08006f35 	.word	0x08006f35
 8006f8c:	080070d9 	.word	0x080070d9
 8006f90:	08006f35 	.word	0x08006f35
 8006f94:	08006fe3 	.word	0x08006fe3
 8006f98:	08006f35 	.word	0x08006f35
 8006f9c:	08006f35 	.word	0x08006f35
 8006fa0:	08007079 	.word	0x08007079
 8006fa4:	6833      	ldr	r3, [r6, #0]
 8006fa6:	1d1a      	adds	r2, r3, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6032      	str	r2, [r6, #0]
 8006fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e09c      	b.n	80070f2 <_printf_i+0x1e6>
 8006fb8:	6833      	ldr	r3, [r6, #0]
 8006fba:	6820      	ldr	r0, [r4, #0]
 8006fbc:	1d19      	adds	r1, r3, #4
 8006fbe:	6031      	str	r1, [r6, #0]
 8006fc0:	0606      	lsls	r6, r0, #24
 8006fc2:	d501      	bpl.n	8006fc8 <_printf_i+0xbc>
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	e003      	b.n	8006fd0 <_printf_i+0xc4>
 8006fc8:	0645      	lsls	r5, r0, #25
 8006fca:	d5fb      	bpl.n	8006fc4 <_printf_i+0xb8>
 8006fcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	da03      	bge.n	8006fdc <_printf_i+0xd0>
 8006fd4:	232d      	movs	r3, #45	@ 0x2d
 8006fd6:	426d      	negs	r5, r5
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fdc:	230a      	movs	r3, #10
 8006fde:	4858      	ldr	r0, [pc, #352]	@ (8007140 <_printf_i+0x234>)
 8006fe0:	e011      	b.n	8007006 <_printf_i+0xfa>
 8006fe2:	6821      	ldr	r1, [r4, #0]
 8006fe4:	6833      	ldr	r3, [r6, #0]
 8006fe6:	0608      	lsls	r0, r1, #24
 8006fe8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fec:	d402      	bmi.n	8006ff4 <_printf_i+0xe8>
 8006fee:	0649      	lsls	r1, r1, #25
 8006ff0:	bf48      	it	mi
 8006ff2:	b2ad      	uxthmi	r5, r5
 8006ff4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	bf14      	ite	ne
 8006ffa:	230a      	movne	r3, #10
 8006ffc:	2308      	moveq	r3, #8
 8006ffe:	4850      	ldr	r0, [pc, #320]	@ (8007140 <_printf_i+0x234>)
 8007000:	2100      	movs	r1, #0
 8007002:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007006:	6866      	ldr	r6, [r4, #4]
 8007008:	2e00      	cmp	r6, #0
 800700a:	60a6      	str	r6, [r4, #8]
 800700c:	db05      	blt.n	800701a <_printf_i+0x10e>
 800700e:	6821      	ldr	r1, [r4, #0]
 8007010:	432e      	orrs	r6, r5
 8007012:	f021 0104 	bic.w	r1, r1, #4
 8007016:	6021      	str	r1, [r4, #0]
 8007018:	d04b      	beq.n	80070b2 <_printf_i+0x1a6>
 800701a:	4616      	mov	r6, r2
 800701c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007020:	fb03 5711 	mls	r7, r3, r1, r5
 8007024:	5dc7      	ldrb	r7, [r0, r7]
 8007026:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800702a:	462f      	mov	r7, r5
 800702c:	42bb      	cmp	r3, r7
 800702e:	460d      	mov	r5, r1
 8007030:	d9f4      	bls.n	800701c <_printf_i+0x110>
 8007032:	2b08      	cmp	r3, #8
 8007034:	d10b      	bne.n	800704e <_printf_i+0x142>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	07df      	lsls	r7, r3, #31
 800703a:	d508      	bpl.n	800704e <_printf_i+0x142>
 800703c:	6923      	ldr	r3, [r4, #16]
 800703e:	6861      	ldr	r1, [r4, #4]
 8007040:	4299      	cmp	r1, r3
 8007042:	bfde      	ittt	le
 8007044:	2330      	movle	r3, #48	@ 0x30
 8007046:	f806 3c01 	strble.w	r3, [r6, #-1]
 800704a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800704e:	1b92      	subs	r2, r2, r6
 8007050:	6122      	str	r2, [r4, #16]
 8007052:	464b      	mov	r3, r9
 8007054:	4621      	mov	r1, r4
 8007056:	4640      	mov	r0, r8
 8007058:	f8cd a000 	str.w	sl, [sp]
 800705c:	aa03      	add	r2, sp, #12
 800705e:	f7ff fee3 	bl	8006e28 <_printf_common>
 8007062:	3001      	adds	r0, #1
 8007064:	d14a      	bne.n	80070fc <_printf_i+0x1f0>
 8007066:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800706a:	b004      	add	sp, #16
 800706c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	f043 0320 	orr.w	r3, r3, #32
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	2778      	movs	r7, #120	@ 0x78
 800707a:	4832      	ldr	r0, [pc, #200]	@ (8007144 <_printf_i+0x238>)
 800707c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	061f      	lsls	r7, r3, #24
 8007086:	f851 5b04 	ldr.w	r5, [r1], #4
 800708a:	d402      	bmi.n	8007092 <_printf_i+0x186>
 800708c:	065f      	lsls	r7, r3, #25
 800708e:	bf48      	it	mi
 8007090:	b2ad      	uxthmi	r5, r5
 8007092:	6031      	str	r1, [r6, #0]
 8007094:	07d9      	lsls	r1, r3, #31
 8007096:	bf44      	itt	mi
 8007098:	f043 0320 	orrmi.w	r3, r3, #32
 800709c:	6023      	strmi	r3, [r4, #0]
 800709e:	b11d      	cbz	r5, 80070a8 <_printf_i+0x19c>
 80070a0:	2310      	movs	r3, #16
 80070a2:	e7ad      	b.n	8007000 <_printf_i+0xf4>
 80070a4:	4826      	ldr	r0, [pc, #152]	@ (8007140 <_printf_i+0x234>)
 80070a6:	e7e9      	b.n	800707c <_printf_i+0x170>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	f023 0320 	bic.w	r3, r3, #32
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	e7f6      	b.n	80070a0 <_printf_i+0x194>
 80070b2:	4616      	mov	r6, r2
 80070b4:	e7bd      	b.n	8007032 <_printf_i+0x126>
 80070b6:	6833      	ldr	r3, [r6, #0]
 80070b8:	6825      	ldr	r5, [r4, #0]
 80070ba:	1d18      	adds	r0, r3, #4
 80070bc:	6961      	ldr	r1, [r4, #20]
 80070be:	6030      	str	r0, [r6, #0]
 80070c0:	062e      	lsls	r6, r5, #24
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	d501      	bpl.n	80070ca <_printf_i+0x1be>
 80070c6:	6019      	str	r1, [r3, #0]
 80070c8:	e002      	b.n	80070d0 <_printf_i+0x1c4>
 80070ca:	0668      	lsls	r0, r5, #25
 80070cc:	d5fb      	bpl.n	80070c6 <_printf_i+0x1ba>
 80070ce:	8019      	strh	r1, [r3, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	4616      	mov	r6, r2
 80070d4:	6123      	str	r3, [r4, #16]
 80070d6:	e7bc      	b.n	8007052 <_printf_i+0x146>
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	2100      	movs	r1, #0
 80070dc:	1d1a      	adds	r2, r3, #4
 80070de:	6032      	str	r2, [r6, #0]
 80070e0:	681e      	ldr	r6, [r3, #0]
 80070e2:	6862      	ldr	r2, [r4, #4]
 80070e4:	4630      	mov	r0, r6
 80070e6:	f000 f859 	bl	800719c <memchr>
 80070ea:	b108      	cbz	r0, 80070f0 <_printf_i+0x1e4>
 80070ec:	1b80      	subs	r0, r0, r6
 80070ee:	6060      	str	r0, [r4, #4]
 80070f0:	6863      	ldr	r3, [r4, #4]
 80070f2:	6123      	str	r3, [r4, #16]
 80070f4:	2300      	movs	r3, #0
 80070f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070fa:	e7aa      	b.n	8007052 <_printf_i+0x146>
 80070fc:	4632      	mov	r2, r6
 80070fe:	4649      	mov	r1, r9
 8007100:	4640      	mov	r0, r8
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	47d0      	blx	sl
 8007106:	3001      	adds	r0, #1
 8007108:	d0ad      	beq.n	8007066 <_printf_i+0x15a>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	079b      	lsls	r3, r3, #30
 800710e:	d413      	bmi.n	8007138 <_printf_i+0x22c>
 8007110:	68e0      	ldr	r0, [r4, #12]
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	4298      	cmp	r0, r3
 8007116:	bfb8      	it	lt
 8007118:	4618      	movlt	r0, r3
 800711a:	e7a6      	b.n	800706a <_printf_i+0x15e>
 800711c:	2301      	movs	r3, #1
 800711e:	4632      	mov	r2, r6
 8007120:	4649      	mov	r1, r9
 8007122:	4640      	mov	r0, r8
 8007124:	47d0      	blx	sl
 8007126:	3001      	adds	r0, #1
 8007128:	d09d      	beq.n	8007066 <_printf_i+0x15a>
 800712a:	3501      	adds	r5, #1
 800712c:	68e3      	ldr	r3, [r4, #12]
 800712e:	9903      	ldr	r1, [sp, #12]
 8007130:	1a5b      	subs	r3, r3, r1
 8007132:	42ab      	cmp	r3, r5
 8007134:	dcf2      	bgt.n	800711c <_printf_i+0x210>
 8007136:	e7eb      	b.n	8007110 <_printf_i+0x204>
 8007138:	2500      	movs	r5, #0
 800713a:	f104 0619 	add.w	r6, r4, #25
 800713e:	e7f5      	b.n	800712c <_printf_i+0x220>
 8007140:	08008043 	.word	0x08008043
 8007144:	08008054 	.word	0x08008054

08007148 <memmove>:
 8007148:	4288      	cmp	r0, r1
 800714a:	b510      	push	{r4, lr}
 800714c:	eb01 0402 	add.w	r4, r1, r2
 8007150:	d902      	bls.n	8007158 <memmove+0x10>
 8007152:	4284      	cmp	r4, r0
 8007154:	4623      	mov	r3, r4
 8007156:	d807      	bhi.n	8007168 <memmove+0x20>
 8007158:	1e43      	subs	r3, r0, #1
 800715a:	42a1      	cmp	r1, r4
 800715c:	d008      	beq.n	8007170 <memmove+0x28>
 800715e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007166:	e7f8      	b.n	800715a <memmove+0x12>
 8007168:	4601      	mov	r1, r0
 800716a:	4402      	add	r2, r0
 800716c:	428a      	cmp	r2, r1
 800716e:	d100      	bne.n	8007172 <memmove+0x2a>
 8007170:	bd10      	pop	{r4, pc}
 8007172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800717a:	e7f7      	b.n	800716c <memmove+0x24>

0800717c <_sbrk_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	2300      	movs	r3, #0
 8007180:	4d05      	ldr	r5, [pc, #20]	@ (8007198 <_sbrk_r+0x1c>)
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	602b      	str	r3, [r5, #0]
 8007188:	f7f9 ff74 	bl	8001074 <_sbrk>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_sbrk_r+0x1a>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_sbrk_r+0x1a>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	20001740 	.word	0x20001740

0800719c <memchr>:
 800719c:	4603      	mov	r3, r0
 800719e:	b510      	push	{r4, lr}
 80071a0:	b2c9      	uxtb	r1, r1
 80071a2:	4402      	add	r2, r0
 80071a4:	4293      	cmp	r3, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	d101      	bne.n	80071ae <memchr+0x12>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e003      	b.n	80071b6 <memchr+0x1a>
 80071ae:	7804      	ldrb	r4, [r0, #0]
 80071b0:	3301      	adds	r3, #1
 80071b2:	428c      	cmp	r4, r1
 80071b4:	d1f6      	bne.n	80071a4 <memchr+0x8>
 80071b6:	bd10      	pop	{r4, pc}

080071b8 <_realloc_r>:
 80071b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	4607      	mov	r7, r0
 80071be:	4614      	mov	r4, r2
 80071c0:	460d      	mov	r5, r1
 80071c2:	b921      	cbnz	r1, 80071ce <_realloc_r+0x16>
 80071c4:	4611      	mov	r1, r2
 80071c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ca:	f7ff bc49 	b.w	8006a60 <_malloc_r>
 80071ce:	b92a      	cbnz	r2, 80071dc <_realloc_r+0x24>
 80071d0:	f7ff fbdc 	bl	800698c <_free_r>
 80071d4:	4625      	mov	r5, r4
 80071d6:	4628      	mov	r0, r5
 80071d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071dc:	f000 f81a 	bl	8007214 <_malloc_usable_size_r>
 80071e0:	4284      	cmp	r4, r0
 80071e2:	4606      	mov	r6, r0
 80071e4:	d802      	bhi.n	80071ec <_realloc_r+0x34>
 80071e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071ea:	d8f4      	bhi.n	80071d6 <_realloc_r+0x1e>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff fc36 	bl	8006a60 <_malloc_r>
 80071f4:	4680      	mov	r8, r0
 80071f6:	b908      	cbnz	r0, 80071fc <_realloc_r+0x44>
 80071f8:	4645      	mov	r5, r8
 80071fa:	e7ec      	b.n	80071d6 <_realloc_r+0x1e>
 80071fc:	42b4      	cmp	r4, r6
 80071fe:	4622      	mov	r2, r4
 8007200:	4629      	mov	r1, r5
 8007202:	bf28      	it	cs
 8007204:	4632      	movcs	r2, r6
 8007206:	f7ff fbb3 	bl	8006970 <memcpy>
 800720a:	4629      	mov	r1, r5
 800720c:	4638      	mov	r0, r7
 800720e:	f7ff fbbd 	bl	800698c <_free_r>
 8007212:	e7f1      	b.n	80071f8 <_realloc_r+0x40>

08007214 <_malloc_usable_size_r>:
 8007214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007218:	1f18      	subs	r0, r3, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	bfbc      	itt	lt
 800721e:	580b      	ldrlt	r3, [r1, r0]
 8007220:	18c0      	addlt	r0, r0, r3
 8007222:	4770      	bx	lr

08007224 <_init>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	bf00      	nop
 8007228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722a:	bc08      	pop	{r3}
 800722c:	469e      	mov	lr, r3
 800722e:	4770      	bx	lr

08007230 <_fini>:
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007232:	bf00      	nop
 8007234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007236:	bc08      	pop	{r3}
 8007238:	469e      	mov	lr, r3
 800723a:	4770      	bx	lr
